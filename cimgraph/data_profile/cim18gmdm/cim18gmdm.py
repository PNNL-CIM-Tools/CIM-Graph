from __future__ import annotations
import logging
from dataclasses import dataclass, field
from typing import Optional
from enum import Enum
from cimgraph.data_profile.identity import Identity, stereotype
from cimgraph.data_profile.units import CIMUnit, UnitSymbol, UnitMultiplier
_log = logging.getLogger(__name__)
'''
Annotated CIMantic Graphs data profile for GMDM
Generated by CIMTool http://cimtool.org
'''

class CIMStereotype(Enum):
    AggregateOf = "AggregateOf"
    Attribute = "Attribute"
    CIMDatatype = "CIMDatatype"
    Compound = "Compound"
    European = "European"
    Extension = "Extension"
    GB = "GB"
    NC = "NC"
    NeedsWork = "NeedsWork"
    OfAggregate = "OfAggregate"
    Part3Ext = "Part3Ext"
    Primitive = "Primitive"
    ShadowExtension = "ShadowExtension"
    add = "add"
    archive = "archive"
    deprecated = "deprecated"
    enumeration = "enumeration"
    gmdm = "gmdm"
    harmonization = "harmonization"
    informative = "informative"
    modify = "modify"
    move = "move"
    moved = "moved"
    profcim = "profcim"
    prov = "prov"
    remove = "remove"

BASE_URI = 'http://gridappsd.org/gmdm#'
ONTOLOGY_URI = 'http://iec.ch/TC57/CIM101#'

@dataclass(repr=False)
class AccountNotification(Identity):
    '''
    Notifications for move-in, move-out, delinquencies, etc.
    '''

    customerNotificationType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    methodType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    note: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    time: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CustomerAccount: Optional[CustomerAccount] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CustomerAccount.AccountNotification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AceTariffType(Identity):
    '''
    The Area Control Error tariff type that is applied or used.
    '''

    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The coded type of an ACE tariff.
    '''
    
@dataclass(repr=False)
class AdditionalAddressInformation(Identity):
    '''
    Address information which cannot be specified through the other attributes.
    '''

    addressInformationText: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Text for the additional address information.
    '''
    
    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    For an address having multiple instances of additional address information,
    this specifies the sequence in which the instances should be ordered.
    '''
    
    Address: Optional[Address] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Address.AdditionalAddressInformation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The address for which there is additional infomation.
    '''
    
@dataclass(repr=False)
class AgentCapability(Identity):
    '''
    Capabilities that are held by a person, organisation or automated agent.
    This can be individual sills, traits and qualities that give indication
    on the agent ability to perform various tasks to archive relevant goals.
    However, this is primarily refer to license and certification held by the
    agent.
    '''

    CertificationOrganisation: Optional[Organisation] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Organisation.AgentCapability',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    otherCapabilityKind: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This attribute should be used to specify the Agent's capability requirement
    when the value for the attribute AgentCapability.kind is "other."
    '''
    
    otherSkillLevel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This attribute should be used to specify the kind of agent capability
    skill level when the value for the attribute AgentCapability.skillLevel
    is "other."
    '''
    
    reference: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reference to the concrete capability, e.g. license number, certificate
    or training reference.
    '''
    
    kind: Optional[ CapabilityRequirementKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of capability reference.
    '''
    
    skillLevel: Optional[ SkillLevelKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration deprecated Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Proficiency level of an Agent to operate or maintain a particular type
    of asset and/or perform certain types of work.
    '''
    
    Agent: Optional[Agent] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Agent.AgentCapability',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CertificationOrganisation: Optional[Organisation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Organisation.AgentCapability',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AgentRoleQualification(Identity):
    '''
    A qualification required for an agent to play an agent role. For example,
    certain skills are required and must be certified in order for a person
    (typically a member of a crew) to be qualified to perform a task.
    '''

    otherQualificationKind: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This attribute should be used to specify the kind of qualification
    when the value for the attribute AgentRoleQualification.qualificationKind
    is "other."
    '''
    
    otherSkillLevelKind: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This attribute should be used to specify the qualifying skill level
    when the value for the attribute AgentRoleQualification.skillLevel
    is "other."
    '''
    
    qualificationReference: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reference to the description of the qualification.
    '''
    
    status: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The status of a qualification (the status of a license, for example).
    '''
    
    qualificationKind: Optional[ CapabilityRequirementKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of qualification required to play an agent role.
    '''
    
    skillLevel: Optional[ SkillLevelKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration deprecated Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A defined level of skill required to qualify for an agent role.
    '''
    
    AgentRole: Optional[AgentRole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AgentRole.AgentRoleQualification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class AreaReserveSpec(Identity):
    '''
    The control area's reserve specification.
    '''

    SubControlArea: list[SubControlArea] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SubControlArea.AreaReserveSpecification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AttributeInstanceComponent(Identity):
    '''
    A class used to provide information about an attribute.
    '''

    attribute: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The identification of the formal name of an attribute.
    '''
    
    attributeValue: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The instance value of the attribute.
    '''
    
    position: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A sequential value representing a relative sequence number.
    '''
    
@dataclass(repr=False)
class AutomationBlockGroup(Identity):
    '''
    Grouping of function block that are operated with the same priority as
    settings.
    '''

    FunctionBlock: list[FunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionBlock.AutomationBlockGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function block which belongs to an automation block group.
    '''
    
    priority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value 0 means ignore priority. 1 means the highest priority, 2 is the
    second highest priority.
    '''
    
    AutomationFunction: Optional[AutomationFunction] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AutomationFunction.AutomationBlockGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Automation function which has automation block group.
    '''
    
@dataclass(repr=False)
class BidDistributionFactor(Identity):
    '''
    This class allows SC to input different time intervals for distribution
    factors.
    '''

    PnodeDistributionFactor: list[PnodeDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PnodeDistributionFactor.BidDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class BidPriceCap(Identity):
    '''
    This class represent the bid price cap.
    '''

    bidCeiling: Optional[ float | CostPerEnergyUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bid Ceiling ($/MWH)
    '''
    
    bidCeilingAS: Optional[ float | CostPerEnergyUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bid Ceiling ($/MWH) for generic AS versus a specific market product
    '''
    
    bidFloor: Optional[ float | CostPerEnergyUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bid Floor, ($/MWH)
    '''
    
    bidFloorAS: Optional[ float | CostPerEnergyUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bid Floor ($/MWH) for generic AS versus a specific market product
    '''
    
    defaultPrice: Optional[ float | CostPerEnergyUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bid Default Price($/MWH)
    '''
    
    marketType: Optional[ MarketType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Market Type of the cap (DAM or RTM)
    '''
    
    MarketProduct: Optional[MarketProduct] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MarketProduct.BidPriceCap',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class BranchGroupTerminal(Identity):
    '''
    A specific directed terminal flow for a branch group.
    '''

    positiveFlowIn: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The flow into the terminal is summed if set true. The flow out of the
    terminal is summed if set false.
    '''
    
    BranchGroup: Optional[BranchGroup] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BranchGroup.BranchGroupTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The branch group to which the directed branch group terminals belong.
    '''
    
    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.BranchGroupTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal to be summed.
    '''
    
@dataclass(repr=False)
class BusinessHours(Identity):
    '''
    The designated days and times during which a business or organisation is
    officially open and available to conduct its operations, provide services,
    or interact with customers and clients.
    The business is open if the opens attribute is specified, and closed otherwise.
    If the value for the closes attribute is less than the value for the opens
    attribute then the hour range is assumed to span over the next day.
    '''

    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in IETF RFC 4122, for the mRID. The use
    of UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    closes: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Closing hour of the place or service on the given day(s) of the week.
    '''
    
    opens: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Opening hour of the place or service on the given day(s) of the week.
    '''
    
    validFrom: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The date when the item becomes valid.
    '''
    
    validThrough: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date after when the item is not valid. For example the end of an offer,
    salary period, or a period of opening hours.
    '''
    
    dayOfWeek: Optional[ DayOfWeek ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The day of the week for which these opening hours are valid.
    '''
    
    ContactPoint: Optional[ContactPoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ContactPoint.BusinessHours',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CalculationMethodOrder(Identity):
    '''
    The order of this calculation method in a hierarchy of calculation methods.
    '''

    order: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Order of the statistical calculation method within the calculation
    method hierarchy.
    '''
    
    CalculationMethodHierarchy: Optional[CalculationMethodHierarchy] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CalculationMethodHierarchy.CalculationMethodOrder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The calculation method hierarchy of which this order of statistical
    calculation is a member.
    '''
    
    StatisicalCalculation: Optional[StatisticalCalculation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StatisticalCalculation.CalculationMethodOrder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The statistical calculation done at this order.
    '''
    
@dataclass(repr=False)
class ChangeSetMember(Identity):
    '''
    A CRUD-style data object.
    '''

    PropertiesObject: Optional[IdentifiedObject] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IdentifiedObject.PropertiesCIMDataObject',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The CIM object holding the properties of this dataset context. Sometimes
    properties are not required and only the reference to the registered
    object is required.
    '''
    
@dataclass(repr=False)
class ComModuleInfo(Identity):
    '''
    Communication module asset informtion
    '''

    direction: Optional[ ComDirectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Communication direction.
    '''
    
    technology: Optional[ ComTechnologyKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Communication technology.
    '''
    
@dataclass(repr=False)
class CombinedCycleTransitionState(Identity):
    '''
    Defines the available from and to Transition States for the Combine Cycle
    Configurations.
    '''

    upTransition: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag indicating whether this is an UP transition.
    If not, it is a DOWN transition.
    '''
    
    FromConfiguration: Optional[CombinedCycleConfiguration] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CombinedCycleConfiguration.FromTransitionState',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ToConfiguration: Optional[CombinedCycleConfiguration] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CombinedCycleConfiguration.ToTransitionState',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ConstraintDuration(Identity):
    '''
    Duration constraint to activate, to put in operation, to deactivate, ...
    a given event.
    '''

    duration: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The duration of the constraint.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of the constraint.
    '''
    
@dataclass(repr=False)
class ContactPoint(Identity):
    '''
    Contact Point represents a snapshot of summary contact information about
    an Agent in relation to a particular Agent Role being played.
    '''

    BusinessHours: list[BusinessHours] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'BusinessHours.ContactPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    agentIdentifier: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A unique identifier for the Agent
    '''
    
    availableLanguage: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Language someone may use with or at the item, service or place. Please
    use one of the language codes from the IETF BCP 47 standard.
    IETF language tags combine subtags from other standards such as ISO
    639, ISO 15924, ISO 3166-1, and UN M.49. The tag structure has been
    standardized by the IETF in Best Current Practice (BCP) 47; the subtags
    are maintained by the IANA Language Subtag Registry.
    '''
    
    chatAddress: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Address to a chat service. Example Skype, WhatsApp etc
    '''
    
    emailAddress: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The email address to be used to contact the Agent in the context of
    the Agent Role being played.
    '''
    
    name: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The name to be used for the Agent in the context of the Agent Role
    being played.
    '''
    
    roleIdentifier: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A unique identifier for the Agent Role.
    '''
    
    webAddress: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Address to a web service.
    '''
    
    preferredMethodOfContact: Optional[ ContactMethodKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The communication method by which the Agent prefers to be contacted.
    '''
    
    Agent: Optional[Agent] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Agent.ContactPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ContractDistributionFactor(Identity):
    '''
    Distribution among resources at the sink point or source point.
    '''

    factor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    MW value that this resource provides to the overall contract.
    '''
    
    sinkFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This value will be set to YES if the referenced Cnode is defined as
    the sink point in the contract.
    '''
    
    sourceFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This value will be set to YES if the referenced Cnode is defined as
    the source point in the contract.
    '''
    
    Flowgate: Optional[Flowgate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Flowgate.ContractDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredResource: Optional[RegisteredResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredResource.ContractDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TransmissionContractRight: Optional[ContractRight] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ContractRight.ContractDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ControlAreaDesignation(Identity):
    '''
    Indicates Control Area associated with self-schedule.
    '''

    attained: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Attained.
    '''
    
    native: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Native.
    '''
    
@dataclass(repr=False)
class CrewMembership(Identity):
    '''
    Identifies the time period for which an individual crew member was assigned
    to a specific crew.
    '''

@dataclass(repr=False)
class CurrentDroopOverride(Identity):
    '''
    Current droop override uses the following logic:
    - When the current exceeds a threshold the device executes the following
    transitions: 1) When injecting an inductive voltage or in monitoring mode
    the device tends to inject a voltage proportional to the difference between
    the line current and the aforementioned threshold. 2) When injecting a
    capacitive voltage the device transitions to monitoring mode.
    - If the aforementioned proportional voltage is lower than the initial
    one, the voltage injection remains unchanged.
    Current droop override is not applied when the device operates in currentDroop
    mode.
    '''

    SSSCController: Optional[SSSCController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SSSCController.CurrentDroopOverride',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The SSSC controller to which this CurrentDroopOverride applies to.
    '''
    
    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in RFC 4122, for the mRID. The use of
    UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    droopCapacitive: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Droop in capacitive region. The unit is V/A.
    '''
    
    droopInductive: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Droop in inductive region. The unit is V/A.
    '''
    
    enabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True, if the current droop override is enabled (active). Otherwise
    false.
    '''
    
    offsetCapacitiveI: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Offset in capacitive region.
    '''
    
    offsetInductiveI: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Offset in capacitive region.
    '''
    
    targetValueCapacitiveI: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Setpoint when control is active in capacitive region.
    '''
    
    targetValueInductiveI: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Setpoint when control is active in inductive region.
    '''
    
    SSSCController: Optional[SSSCController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SSSCController.CurrentDroopOverride',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The SSSC controller to which this CurrentDroopOverride applies to.
    '''
    
@dataclass(repr=False)
class CurveData(Identity):
    '''
    Multi-purpose data points for defining a curve. The use of this generic
    class is discouraged if a more specific class can be used to specify the
    X and Y axis values along with their specific data types.
    '''

    xvalue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The data value of the X-axis variable, depending on the X-axis units.
    '''
    
    y1value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The data value of the first Y-axis variable, depending on the Y-axis
    units.
    '''
    
    y2value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The data value of the second Y-axis variable (if present), depending
    on the Y-axis units.
    '''
    
    y3value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The data value of the third Y-axis variable (if present), depending
    on the Y-axis units.
    '''
    
    Curve: Optional[Curve] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Curve.CurveDatas',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The curve of this curve data point.
    '''
    
@dataclass(repr=False)
class CustomerNotification(Identity):
    '''
    Conditions for notifying the customer about the changes in the status of
    their service (e.g., outage restore, estimated restoration time, tariff
    or service level change, etc.)
    '''

    contactType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of contact (e.g., phone, email, etc.).
    '''
    
    contactValue: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of contact type (e.g., phone number, email address, etc.).
    '''
    
    earliestDateTimeToCall: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Earliest date time to call the customer.
    '''
    
    latestDateTimeToCall: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Latest date time to call the customer.
    '''
    
    trigger: Optional[ NotificationTriggerKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Trigger for this notification.
    '''
    
    Customer: Optional[Customer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Customer.CustomerNotifications',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Customer requiring this notification.
    '''
    
    Incident: Optional[Incident] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Incident.CustomerNotifications',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Incident as a subject of this customer notification.
    '''
    
@dataclass(repr=False)
class DERCurveData(Identity):
    '''
    '''

    DERMonitorableParameter: Optional[DERMonitorableParameter] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DERMonitorableParameter.DERCurveData',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    intervalNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    maxYValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    minYValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    nominalYValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    timeStamp: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    DERMonitorableParameter: Optional[DERMonitorableParameter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DERMonitorableParameter.DERCurveData',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    DispatchSchedule: Optional[DispatchSchedule] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DispatchSchedule.DERCurveData',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class DERFunction(Identity):
    '''
    '''

    EndDeviceGroup: list[EndDeviceGroup] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDeviceGroup.DERFunction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    connectDisconnect: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    frequencyWattCurveFunction: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    maxRealPowerLimiting: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    rampRateControl: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    reactivePowerDispatch: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    realPowerDispatch: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    voltageRegulation: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    voltVarCurveFunction: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    voltWattCurveFunction: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class DERMonitorableParameter(Identity):
    '''
    '''

    DERCurveData: Optional[DERCurveData] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DERCurveData.DERMonitorableParameter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    DispatchSchedule: list[DispatchSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DispatchSchedule.DERMonitorableParameter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    yUnitInstalledMax: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    yUnitInstalledMin: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    DERParameter: Optional[ DERParameterKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    flowDirection: Optional[ FlowDirectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    yMultiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    yUnit: Optional[ DERUnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    DERCurveData: Optional[DERCurveData] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DERCurveData.DERMonitorableParameter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class DateAndOrTime(Identity):
    '''
    The date and/or the time.
    '''

    date: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date as "yyyy-mm-dd", which conforms with ISO 8601
    '''
    
    dateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time as per ISO 8601 YYYY-MM-DDThh:mm:ss.sssZ.
    '''
    
    time: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time as "hh:mm:ss.sssZ", which conforms with ISO 8601.
    '''
    
@dataclass(repr=False)
class DiagramObjectGluePoint(Identity):
    '''
    This is used for grouping diagram object points from different diagram
    objects that are considered to be glued together in a diagram even if they
    are not at the exact same coordinates.
    '''

    DiagramObjectPoints: list[DiagramObjectPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DiagramObjectPoint.DiagramObjectGluePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A diagram object glue point is associated with 2 or more object points
    that are considered to be 'glued' together.
    '''
    
@dataclass(repr=False)
class DiagramObjectPoint(Identity):
    '''
    A point in a given space defined by 3 coordinates and associated to a diagram
    object. The coordinates may be positive or negative as the origin does
    not have to be in the corner of a diagram.
    '''

    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The sequence position of the point, used for defining the order of
    points for diagram objects acting as a polyline or polygon with more
    than one point. The attribute shall be a positive value.
    '''
    
    xPosition: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The X coordinate of this point.
    '''
    
    yPosition: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Y coordinate of this point.
    '''
    
    zPosition: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Z coordinate of this point.
    '''
    
    DiagramObject: Optional[DiagramObject] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DiagramObject.DiagramObjectPoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The diagram object with which the points are associated.
    '''
    
    DiagramObjectGluePoint: Optional[DiagramObjectGluePoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DiagramObjectGluePoint.DiagramObjectPoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The 'glue' point to which this point is associated.
    '''
    
@dataclass(repr=False)
class DispatchSchedule(Identity):
    '''
    '''

    DERCurveData: list[DERCurveData] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DERCurveData.DispatchSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    numberOfIntervals: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used to specify the number of intervals when requesting a forecast
    or a dispatch.
    '''
    
    startTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The start time of the first interval in the dispatch schedule
    '''
    
    timeIntervalDuration: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The length of time for each interval in the dispatch schedule.
    '''
    
    confidence: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The confidence in the schedule shown as a percentage.
    '''
    
    curveStyleKind: Optional[ CurveStyle ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used to specify whether the values over an interval are constant (constantYValue)
    or linearly interpolated (straightLineYValues)
    '''
    
    timeIntervalUnit: Optional[ TimeIntervalKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit of measure for the time axis of the dispatch schedule.
    '''
    
    DERMonitorableParameter: Optional[DERMonitorableParameter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DERMonitorableParameter.DispatchSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class DispatchablePowerCapability(Identity):
    '''
    '''

    EndDeviceGroup: Optional[EndDeviceGroup] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceGroup.DispatchablePowerCapability',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    EndDeviceGroup is used in metering to group end devices, this same
    class is used to group DER
    '''
    
    currentActivePower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The current level of active power for a DER group
    '''
    
    currentApparentPower: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The current level of apparent power for a DER group
    '''
    
    currentReactivePower: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The current level of reactive power for a DER group
    '''
    
    maxActivePower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum level of active power to which a DER group can be set
    '''
    
    maxApparentPower: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum level of apparent power to which a DER group can be set
    '''
    
    maxReactivePower: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum level of reactive power to which a DER group can be set
    '''
    
    minActivePower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum level of active power to which a DER group can be set
    '''
    
    minApparentPower: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum level of apparent power to which a DER group can be set
    '''
    
    minReactivePower: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum level of reactive power to which a DER group can be set
    '''
    
    EndDevice: Optional[EndDevice] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDevice.DispatchablePowerCapability',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The generic class to support all field end devices such as meters or
    smart inverters
    '''
    
    EndDeviceGroup: Optional[EndDeviceGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceGroup.DispatchablePowerCapability',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    EndDeviceGroup is used in metering to group end devices, this same
    class is used to group DER
    '''
    
@dataclass(repr=False)
class DocumentRole(Identity):
    '''
    An Organisation or Person role with respect to documents.
    '''

@stereotype(CIMStereotype.deprecated)
@dataclass(repr=False)
class Approver(DocumentRole):
    '''
    Person who accepted/signed or rejected the document.
    '''

    Documents: list[Document] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Document.Approver',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All documents for this approver.
    '''
    
@stereotype(CIMStereotype.deprecated)
@dataclass(repr=False)
class Author(DocumentRole):
    '''
    Person who created document or activity record.
    '''

    ActivityRecords: list[ActivityRecord] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ActivityRecord.Author',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All activity records with this author.
    '''
    
    Documents: list[Document] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Document.Author',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All documents of this this author.
    '''
    
@stereotype(CIMStereotype.deprecated)
@dataclass(repr=False)
class Editor(DocumentRole):
    '''
    Person who modified the document.
    '''

    Documents: list[Document] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Document.Editor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All documents for this editor.
    '''
    
@stereotype(CIMStereotype.deprecated)
@dataclass(repr=False)
class Issuer(DocumentRole):
    '''
    Person who issued the document and is responsible for its content.
    '''

    Documents: list[Document] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Document.Issuer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All documents for this issuer.
    '''
    
@dataclass(repr=False)
class EndDeviceAction(Identity):
    '''
    Action/command performed by an end device on a device other than the end
    device.
    '''

    EndDeviceControl: Optional[EndDeviceControl] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceControl.EndDeviceAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End device control issuing this end device action.
    '''
    
    command: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Command text.
    '''
    
    durationIndefinite: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the action of this control is indefinite.
    '''
    
    startDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Start date and time for action of this control.
    '''
    
    duration: Optional[ float | Minutes ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Amount of time the action of this control is to remain active.
    '''
    
    EndDeviceControl: Optional[EndDeviceControl] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceControl.EndDeviceAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End device control issuing this end device action.
    '''
    
@dataclass(repr=False)
class PanDemandResponse(EndDeviceAction):
    '''
    PAN control used to issue action/command to PAN devices during a demand
    response/load control event.
    '''

    cancelControlMode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Encoding of cancel control.
    '''
    
    cancelDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Timestamp when a canceling of the event is scheduled to start.
    '''
    
    cancelNow: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, a canceling of the event should start immediately.
    '''
    
    criticalityLevel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Level of criticality for the action of this control. The action taken
    by load control devices for an event can be solely based on this value,
    or in combination with other load control event fields supported by
    the device.
    '''
    
    enrollmentGroup: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Provides a mechanism to direct load control actions to groups of PAN
    devices. It can be used in conjunction with the PAN device types.
    '''
    
    avgLoadAdjustment: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used to define a maximum energy usage limit as a percentage of the
    client implementations specific average energy usage. The load adjustment
    percentage is added to 100% creating a percentage limit applied to
    the client implementations specific average energy usage. A -10% load
    adjustment percentage will establish an energy usage limit equal to
    90% of the client implementations specific average energy usage. Each
    load adjustment percentage is referenced to the client implementations
    specific average energy usage. There are no cumulative effects.
    The range of this field is -100% to +100% with a resolution of 1. A
    -100% value equals a total load shed. A +100% value will limit the
    energy usage to the client implementations specific average energy
    usage.
    '''
    
    coolingOffset: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Requested offset to apply to the normal cooling setpoint at the time
    of the start of the event. It represents a temperature change that
    will be applied to the associated cooling set point. The temperature
    offsets will be calculated per the local temperature in the thermostat.
    The calculated temperature will be interpreted as the number of degrees
    to be added to the cooling set point. Sequential demand response events
    are not cumulative. The offset shall be applied to the normal setpoint.
    '''
    
    coolingSetpoint: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Requested cooling set point. Temperature set point is typically defined
    and calculated based on local temperature.
    '''
    
    dutyCycle: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum "on" state duty cycle as a percentage of time. For example,
    if the value is 80, the device would be in an "on" state for 80% of
    the time for the duration of the action.
    '''
    
    heatingOffset: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Requested offset to apply to the normal heating setpoint at the time
    of the start of the event. It represents a temperature change that
    will be applied to the associated heating set point. The temperature
    offsets will be calculated per the local temperature in the thermostat.
    The calculated temperature will be interpreted as the number of degrees
    to be subtracted from the heating set point. Sequential demand response
    events are not cumulative. The offset shall be applied to the normal
    setpoint.
    '''
    
    heatingSetpoint: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Requested heating set point. Temperature set point is typically defined
    and calculated based on local temperature.
    '''
    
@dataclass(repr=False)
class PanDisplay(EndDeviceAction):
    '''
    PAN action/command used to issue the displaying of text messages on PAN
    devices.
    '''

    confirmationRequired: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, the requesting entity (e.g. retail electric provider) requires
    confirmation of the successful display of the text message.
    '''
    
    priority: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority associated with the text message to be displayed.
    '''
    
    textMessage: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Text to be displayed by a PAN device.
    '''
    
    transmissionMode: Optional[ TransmissionModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transmission mode to be used for this PAN display control.
    '''
    
@dataclass(repr=False)
class PanPricing(EndDeviceAction):
    '''
    PAN action/command used to issue pricing information to a PAN device.
    '''

    PanPricingDetails: list[PanPricingDetail] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PanPricingDetail.PanPricing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All pricing details issued by this PAN pricing command/action.
    '''
    
    providerID: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unique identifier for the commodity provider.
    '''
    
@dataclass(repr=False)
class EndDeviceEventDetail(Identity):
    '''
    Name-value pair, specific to end device events.
    '''

    name: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name.
    '''
    
    EndDeviceEvent: Optional[EndDeviceEvent] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceEvent.EndDeviceEventDetails',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End device owning this detail.
    '''
    
@dataclass(repr=False)
class FieldDispatchStep(Identity):
    '''
    Details of the step in the field dispatch history.
    '''

    occurredDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The date and time at which the dispatch status occurred.
    '''
    
    remarks: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    freeform comments related to the dispatch to perform field work.
    '''
    
    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The sequence number of the field dispatch step within the field dispatch
    history. Begins with 1 and increments up.
    '''
    
    dispatchStatus: Optional[ CrewStatusKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The status of one or more crews dispatched to perform field work at
    one or more work sites
    '''
    
    FieldDispatchHistory: Optional[FieldDispatchHistory] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FieldDispatchHistory.FieldDispatchStep',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class FlowDirection(Identity):
    '''
    The coded identification of the direction of energy flow.
    '''

    direction: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The coded identification of the direction of energy flow.
    '''
    
@dataclass(repr=False)
class FlowgateRelief(Identity):
    '''
    IDC (Interchange Distribution Calulator) sends data for a TLR (Transmission
    Loading Relief).
    '''

    effectiveDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date/Time when record becomes effective
    Used to determine when a record becomes effective.
    '''
    
    idcTargetMktFlow: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Energy Flow level that should be maintained according to the TLR rules
    as specified by the IDC.
    For Realtime Markets use in dispatch to control constraints under TLR
    and calculate unconstrained market flows
    '''
    
    terminateDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date/Time when record is no longer effective
    Used to determine when a record is no longer effective
    '''
    
    Flowgate: Optional[Flowgate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Flowgate.FlowgateRelief',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class FlowgateValue(Identity):
    '''
    Day Ahead, Network Native Load, Economic Dispatch, values used for calculation
    of Network Native Load (NNL) Determinator process.
    '''

    FlowgatePartner: Optional[FlowgatePartner] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FlowgatePartner.FlowgateValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    economicDispatchLimit: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Limit for Economic Dispatch priority 6 energy flow on the specified
    flowgate for the specified time period.
    '''
    
    effectiveDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date/Time when record becomes effective
    Used to determine when a record becomes effective
    '''
    
    firmNetworkLimit: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Limit for firm flow on the specified flowgate for the specified time
    period. The amount of energy flow over a specifed flowgate due to generation
    in the market which can be classified as Firm Network priority.
    '''
    
    mktFlow: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The amount of energy flow over a specifed flowgate due to generation
    in the market.
    '''
    
    netFirmNetworkLimit: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Net Energy flow in flowgate for the associated FlowgatePartner
    '''
    
    flowDirectionFlag: Optional[ FlowDirectionType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the direction of energy flow in the flowgate
    '''
    
    Flowgate: Optional[Flowgate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Flowgate.FlowgateValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FlowgatePartner: Optional[FlowgatePartner] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FlowgatePartner.FlowgateValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class FrequencyMonitoringTerminal(Identity):
    '''
    Frequency monitoring terminal provides location in the model where the
    frequency is monitored for the purpose of power frequency control.
    '''

    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in RFC 4122, for the mRID. The use of
    UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    priority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value 0 means ignore priority. 1 means the highest priority, 2 is the
    second highest priority.
    '''
    
    PowerFrequencyController: Optional[PowerFrequencyController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerFrequencyController.FrequencyMonitoringTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power frequency controller that has this frequency monitoring terminal.
    '''
    
    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.FrequencyMonitoringTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal for this frequency monitoring terminal.
    '''
    
@dataclass(repr=False)
class Fuel(Identity):
    '''
    A class indicating the origin of the fuel used at the related object.
    '''

    fuel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An indication of the fuel used for the energy production, or part of
    the energy production, that is potentially fed into the grid at the
    related object.
    '''
    
    fuelSource: Optional[ FuelSource ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An indication of the fuel used for the energy production, or part of
    the energy production, that is potentially fed into the grid at the
    related object.
    '''
    
@dataclass(repr=False)
class FunctionFunctionLink(Identity):
    '''
    Class to represent links between the inputs and outputs of generic FunctionBlock
    instances as defined in their associated FunctionBlockType instances. The
    destinationParameterName and sourceParameterName attributes must be dfined
    in the instances of the FunctionTypeInput and FunctionTypesOutput classes
    that are associated to the FunctionBlockType.
    '''

    DestinationFunctionBlock: Optional[FunctionBlock] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FunctionBlock.DestinationSideLink',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function block receiving an input from a FunctionFunctionLink instance
    associated to another function block.
    '''
    
    SourceFunctionBlock: Optional[FunctionBlock] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FunctionBlock.SourceSideLink',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function block providing an output to a FunctionFunctionLink instance
    associated to another function block.
    '''
    
@dataclass(repr=False)
class FunctionLogicDescription(Identity):
    '''
    Class providing a logic description for a FunctionBlockType instance.
    '''

    FunctionBlockType: Optional[FunctionBlockType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FunctionBlockType.FunctionLogicDescriptions',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function block type whose logic is described by a FunctionLogicDescription
    instance.
    '''
    
@dataclass(repr=False)
class FunctionTypeInput(Identity):
    '''
    Class to define the inputs to a FunctionBlockType instance. Its parameterType
    and initialValue attributes are defined as strings but must be consistent
    with the programLanguage attribute of the FunctionLogicDescription class
    instance associated to the FunctionBlockType.
    '''

    FunctionBlockType: Optional[FunctionBlockType] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FunctionBlockType.FunctionTypeInputs',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function block type receiving this input
    '''
    
@dataclass(repr=False)
class FunctionTypeOutput(Identity):
    '''
    Class to define the outputs from a FunctionBlockType instance. Its parameterType
    attribute is defined as a string but must be consistent with the programLanguage
    attribute of the FunctionLogicDescription class instance associated to
    the FunctionBlockType.
    '''

    FunctionBlockType: Optional[FunctionBlockType] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FunctionBlockType.FunctionTypeOutputs',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function block type providing this output
    '''
    
@dataclass(repr=False)
class FuseInfo(Identity):
    '''
    Fuse datasheet information.
    '''

    MinimumMeltCurve: Optional[FuseCharacteristicCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseCharacteristicCurve.FuseInfoMinimumMelt',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Curves that define the time-current operation of this fuse (Minimum
    Melt)
    '''
    
    TotalClearingTimeCurve: Optional[FuseCharacteristicCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseCharacteristicCurve.FusInfoTotalClearing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Curves that define the time-current operation of this fuse (Total Clearing
    Time Curves)
    '''
    
    MinimumMeltCurve: Optional[FuseCharacteristicCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseCharacteristicCurve.FuseInfoMinimumMelt',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Curves that define the time-current operation of this fuse (Minimum
    Melt)
    '''
    
    TotalClearingTimeCurve: Optional[FuseCharacteristicCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseCharacteristicCurve.FusInfoTotalClearing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Curves that define the time-current operation of this fuse (Total Clearing
    Time Curves)
    '''
    
@dataclass(repr=False)
class GasPrice(Identity):
    '''
    Price of gas in monetary units.
    '''

    FuelRegion: Optional[FuelRegion] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuelRegion.GasPrice',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    gasPriceIndex: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The average natural gas price at a defined fuel region.
    '''
    
    FuelRegion: Optional[FuelRegion] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuelRegion.GasPrice',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class GenDistributionFactor(Identity):
    '''
    This class models the generation distribution factors. This class needs
    to be used along with the AggregatedPnode and the IndividualPnode to show
    the distribution of each individual party.
    '''

    IndividualPnode: Optional[IndividualPnode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IndividualPnode.GenDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class GeneralDateTimeDescription(Identity):
    '''
    rdfs:label : "descripci�n de fecha-hora generalizada"@es
    rdfs:label : "Generalized date-time description"@en
    <http://www.w3.org/2004/02/skos/core#note> : "Some combinations of properties
    are redundant - for example, within a specified :year if :dayOfYear is
    provided then :day and :month can be computed, and vice versa. Individual
    values should be consistent with each other and the calendar, indicated
    through the value of the :hasTRS property."^^xsd:string
    rdfs:comment : "Description of date and time structured with separate values
    for the various elements of a calendar-clock system"@en
    rdfs:comment : "Descripci�n de fecha y hora estructurada con valores separados
    para los distintos elementos de un sistema calendario-reloj."@es
    <http://www.w3.org/2004/02/skos/core#definition> : "Description of date
    and time structured with separate values for the various elements of a
    calendar-clock system"@en
    <http://www.w3.org/2004/02/skos/core#definition> : "Descripci�n de fecha
    y hora estructurada con valores separados para los distintos elementos
    de un sistema calendario-reloj."^^xsd:string
    <http://www.w3.org/2004/02/skos/core#note> : "Algunas combinaciones de
    propiedades son redundantes - por ejemplo, dentro de un 'a�o' especificado
    si se proporciona 'd�a del a�o' entonces 'd�a' y 'mes' se pueden computar,
    y viceversa. Los valores individuales deber�an ser consistentes entre ellos
    y con el calendario, indicado a trav�s del valor de la propiedad 'tiene
    TRS'."@es
    '''

@dataclass(repr=False)
class GeometricElement(Identity):
    '''
    Exists solely as the parent of the separate geometry types (Point, Line,
    Circle, Polygon) in order to create an xsd Choice between the types.
    '''

    Geometry: Optional[Geometry] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Geometry.GeometricElement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Circle(GeometricElement):
    '''
    A circular area in space, described by a center point and radius. Any circle
    object must have a center and an outer radius and may have an inner radius.
    If an inner radius is specified, the area within the inner radius is to
    be excluded from the area within the outer radius, forming a ring shape.
    '''

    innerRadius: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A circle may have an inner radius. If specified the area described
    by the inner radius is to be excluded from the area within the outer
    radius, forming a ring shape.
    '''
    
    outerRadius: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Every circle must have an outer radius which describes the outer limit
    of the circular area.
    '''
    
    CircleCenterPositionPoint: Optional[PositionPoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PositionPoint.Circle',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A point representing the center of a circular area. Any circle object
    must have one CircleCenter.
    '''
    
@dataclass(repr=False)
class LineElement(GeometricElement):
    '''
    A geometric line segment, described by 2 or more coordinate tuples with
    linear interpolation between them. A line must contain at least 2 linear
    coordinates.
    '''

    Polygon: Optional[Polygon] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Polygon.OuterBoundaryLineElement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A polygon for which an outer boundary is defined.
    '''
    
@dataclass(repr=False)
class Polygon(GeometricElement):
    '''
    One or more self-closing line segments representing a polygonal area. In
    order to be self-closing, the first and last linear coordinates of each
    line segment must be identical. A polygon must have one outer boundary
    and may have one or more inner boundaries. If an inner boundary is specified,
    the area within the inner boundary is to be excluded from the area within
    the outer boundary. Each line description within a polygon (both outer
    and inner boundaries) must contain at least 4 linear coordinates.
    '''

    OuterBoundaryLineElement: list[LineElement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'LineElement.Polygon',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    One or more self-closing line segments representing a polygonal area.
    In order to be self-closing, the first and last linear coordinates
    of each line segment must be identical. A polygon must have one outer
    boundary and may have one or more inner boundaries. If an inner boundary
    is specified, the area within the inner boundary is to be excluded
    from the area within the outer boundary. Each line description within
    a polygon (both outer and inner boundaries) must contain at least 4
    linear coordinates.
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.gmdm)
@dataclass(repr=False)
class PositionPoint(GeometricElement):
    '''
    Set of spatial coordinates that determine a point, defined in the coordinate
    system specified in 'Location.CoordinateSystem'. Use a single position
    point instance to describe a point-oriented location. Use a sequence of
    position points to describe a line-oriented object (physical location of
    non-point oriented objects like cables or lines), or area of an object
    (like a substation or a geographical zone - in this case, have first and
    last position point with the same values).
    '''

    Circle: list[Circle] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Circle.CircleCenterPositionPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The circle for which a point defining the center has been specified.
    '''
    
    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    xPosition: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    X axis position.
    '''
    
    yPosition: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Y axis position.
    '''
    
    zPosition: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Z axis position.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.PositionPoints',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    RelativeHeight: Optional[RelativeHeight] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RelativeHeight.PositionPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.gmdm)
@dataclass(repr=False)
class LinearCoordinate(PositionPoint):
    '''
    Specifies a point on a line segment, including a sequence number and bulge.
    To visualize the line segment, each linear coordinate is to be connected
    in the order specified by the sequence attribute. Each linear coordinate
    must have a sequence value.
    '''

    bulge: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bulge is a factor that describes a curved line segment between two
    points. bulge=0 is a straight line: bulge=1 is a curve along the edge
    of a circle. A bulge can be associated only with the second point of
    a line segment. A negative bulge factor causes the line to bulge to
    the left as viewed from the first point to the second; a positive bulge
    causes the line to be curved to the right as viewed from the first
    point to the second.
    '''
    
    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The order in which linear coordinates are to be connected to form the
    line described. Sequence is required for all linear coordinates.
    '''
    
@dataclass(repr=False)
class IdentifiedObject(Identity):
    '''
    This is a class that provides common identification for all classes needing
    identification and naming attributes.
    '''

    DiagramObjects: list[DiagramObject] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DiagramObject.IdentifiedObject',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The diagram objects that are associated with the domain object.
    '''
    
    Name: list[Name] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Name.IdentifiedObject',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All names of this identified object. Names may be but are not guaranteed
    to be unique.
    '''
    
    AlternativeIdentifier: list[Name] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Name.UniqueIdentifiedObject',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All alternative identifiers of this identified object. No two identified
    objects can have the same alternative identifier.
    '''
    
    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in IETF RFC 4122, for the mRID. The use
    of UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    aliasName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The aliasName is free text human readable name of the object alternative
    to IdentifiedObject.name. It may be non unique and may not correlate
    to a naming hierarchy.
    The attribute aliasName is retained because of backwards compatibility
    between CIM releases. It is however recommended to replace aliasName
    with the Name class as aliasName is planned for retirement at a future
    time.
    '''
    
    description: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The description is a free human readable text describing or naming
    the object. It may be non unique and may not correlate to a naming
    hierarchy.
    '''
    
    energyIdentCodeEic: Optional[str] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    The attribute is used for an exchange of the EIC code (Energy identification
    Code). The length of the string is 16 characters as defined by the
    EIC code. For details on EIC scheme please refer to ENTSO-E web site.
    '''
    
    name: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The name is any free human readable and possibly non unique text naming
    the object.
    '''
    
    shortName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    The attribute is used for an exchange of a human readable short name
    with length of the string 12 characters maximum.
    '''
    
    InstanceSet: Optional[InstanceSet] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InstanceSet.InstanceSetMember',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Dataset containing the data objects.
    '''
    
    ObjectType: Optional[ObjectType] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ObjectType.IdentifiedObject',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The object type of the IdentifiedObject.
    '''
    
    PropertiesCIMDataObject: Optional[ChangeSetMember] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ChangeSetMember.PropertiesObject',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The single CIM data object in the appropriate dataset context.
    '''
    
@dataclass(repr=False)
class ACDCTerminal(IdentifiedObject):
    '''
    An electrical connection point (AC or DC) to a piece of conducting equipment.
    Terminals are connected at physical connection points called connectivity
    nodes.
    '''

    InfeedTerminal: list[InfeedTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'InfeedTerminal.ACDCTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Infeed terminal that is associated with an ACDCTerminal.
    '''
    
    Measurements: list[Measurement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Measurement.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurements associated with this terminal defining where the measurement
    is placed in the network topology. It may be used, for instance, to
    capture the sensor position, such as a voltage transformer (PT) at
    a busbar or a current transformer (CT) at the bar between a breaker
    and an isolator.
    '''
    
    OperationalLimitSet: list[OperationalLimitSet] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimitSet.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit sets at the terminal.
    '''
    
    connected: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'deprecated Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The connected status is related to a bus-branch model and the topological
    node to terminal relation. True implies the terminal is connected to
    the related topological node and false implies it is not.
    In a bus-branch model, the connected status is used to tell if equipment
    is disconnected without having to change the connectivity described
    by the topological node to terminal relation. A valid case is that
    conducting equipment can be connected in one end and open in the other.
    In particular for an AC line segment, where the reactive line charging
    can be significant, this is a relevant case.
    '''
    
    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The orientation of the terminal connections for a multiple terminal
    conducting equipment. The sequence numbering starts with 1 and additional
    terminals should follow in increasing order. The first terminal is
    the "starting point" for a two terminal branch.
    '''
    
    BusNameMarker: Optional[BusNameMarker] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BusNameMarker.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The bus name marker used to name the bus (topological node).
    '''
    
@dataclass(repr=False)
class DCBaseTerminal(ACDCTerminal):
    '''
    An electrical connection point at a piece of DC conducting equipment. DC
    terminals are connected at one physical DC node that may have multiple
    DC terminals connected. A DC node is similar to an AC connectivity node.
    The model requires that DC connections are distinct from AC connections.
    '''

    DCNode: Optional[DCNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCNode.DCTerminals',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC connectivity node to which this DC base terminal connects with
    zero impedance.
    '''
    
    DCTopologicalNode: Optional[DCTopologicalNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTopologicalNode.DCTerminals',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    See association end Terminal.TopologicalNode.
    '''
    
@dataclass(repr=False)
class ACDCConverterDCTerminal(DCBaseTerminal):
    '''
    A DC electrical connection point at the AC/DC converter. The AC/DC converter
    is electrically connected also to the AC side. The AC connection is inherited
    from the AC conducting equipment in the same way as any other AC equipment.
    The AC/DC converter DC terminal is separate from generic DC terminal to
    restrict the connection with the AC side to AC/DC converter and so that
    no other DC conducting equipment can be connected to the AC side.
    '''

    polarity: Optional[ DCPolarityKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Represents the normal network polarity condition. Depending on the
    converter configuration the value shall be set as follows:
    - For a monopole with two converter terminals use DCPolarityKind "positive"
    and "negative".
    - For a bi-pole or symmetric monopole with three converter terminals
    use DCPolarityKind "positive", "middle" and "negative".
    '''
    
    DCConductingEquipment: Optional[ACDCConverter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACDCConverter.DCTerminals',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A DC converter terminal belong to an DC converter.
    '''
    
@dataclass(repr=False)
class DCTerminal(DCBaseTerminal):
    '''
    An electrical connection point to generic DC conducting equipment.
    '''

    PinDCTerminal: list[PinDCTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinDCTerminal.DCTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pin DC terminal for this DC terminal.
    '''
    
    SvDCPowerFlow: list[SvDCPowerFlow] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SvDCPowerFlow.DCTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC power flow state variable associated with the DC terminal.
    '''
    
    polarity: Optional[ DCTerminalPolarityKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Represents the normal network polarity condition. Used in DC system
    configurations that have explicit polarity of the terminals, e.g.,
    voltage source converter (VSC) technology.
    '''
    
    DCConductingEquipment: Optional[DCConductingEquipment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCConductingEquipment.DCTerminals',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An DC terminal belong to a DC conducting equipment.
    '''
    
@dataclass(repr=False)
class Terminal(ACDCTerminal):
    '''
    An AC electrical connection point to a piece of conducting equipment. Terminals
    are connected at physical connection points called connectivity nodes.
    '''

    ConverterDCSides: list[ACDCConverter] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACDCConverter.PccTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All converters' DC sides linked to this point of common coupling terminal.
    '''
    
    AuxiliaryEquipment: list[AuxiliaryEquipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AuxiliaryEquipment.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The auxiliary equipment connected to the terminal.
    '''
    
    BranchGroupTerminal: list[BranchGroupTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'BranchGroupTerminal.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The directed branch group terminals for which this terminal is monitored.
    '''
    
    Bushing: Optional[Bushing] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Bushing.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    EquipmentFaults: list[EquipmentFault] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EquipmentFault.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The equipment faults at this terminal.
    '''
    
    FrequencyMonitoringTerminal: list[FrequencyMonitoringTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FrequencyMonitoringTerminal.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Frequency monitoring terminal that has a terminal.
    '''
    
    HasFirstMutualCoupling: list[MutualCoupling] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MutualCoupling.First_Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mutual couplings associated with the branch as the first branch.
    '''
    
    HasSecondMutualCoupling: list[MutualCoupling] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MutualCoupling.Second_Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mutual couplings with the branch associated as the first branch.
    '''
    
    PinTerminal: list[PinTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinTerminal.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pin that uses this input.
    '''
    
    ProtectionFunctionBlock: list[ProtectionFunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProtectionFunctionBlock.MonitoredTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The protection function blocks are connected to the monitored terminal.
    '''
    
    RegulatingControl: list[RegulatingControl] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegulatingControl.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The controls regulating this terminal.
    '''
    
    SvPowerFlow: list[SvPowerFlow] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SvPowerFlow.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The power flow state variable associated with the terminal.
    '''
    
    TieFlow: list[TieFlow] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TieFlow.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The control area tie flows to which this terminal associates.
    '''
    
    TransformerEnd: list[TransformerEnd] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerEnd.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All transformer ends connected at this terminal.
    '''
    
    VoltageAngleLimit: list[VoltageAngleLimit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'VoltageAngleLimit.AngleReferenceTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage angle limit which has this reference angle terminal.
    '''
    
    phases: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Represents the normal network phasing condition. If the attribute is
    missing, three phases (ABC) shall be assumed, except for terminals
    of grounding classes (specializations of EarthFaultCompensator, GroundDisconnector,
    and Ground) which will be assumed to be N. Therefore, phase code ABCN
    is explicitly declared when needed, e.g. for star point grounding equipment.
    The phase code on terminals connecting the same ConnectivityNode or
    TopologicalNode as well as for equipment between two terminals shall
    be consistent.
    '''
    
    BoundedSchedulingArea: Optional[SubSchedulingArea] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubSchedulingArea.BoundaryTerminals',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    '''
    
    Bushing: Optional[Bushing] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Bushing.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Circuit: Optional[Circuit] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Circuit.EndTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ConductingEquipment: Optional[ConductingEquipment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConductingEquipment.Terminals',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The conducting equipment of the terminal. Conducting equipment have
    terminals that may be connected to other conducting equipment terminals
    via connectivity nodes or topological nodes.
    '''
    
    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.Terminals',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The connectivity node to which this terminal connects with zero impedance.
    '''
    
    HasFromTerminalSVSMO4: Optional[SVSMO4] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SVSMO4.FromTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The SVSMO4 model that has this FromTerminal.
    '''
    
    HasToTerminalSVSMO4: Optional[SVSMO4] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SVSMO4.ToTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The SVSMO4 model that has this ToTerminal.
    '''
    
    NormalHeadFeeder: Optional[Feeder] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Feeder.NormalHeadTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The feeder that this terminal normally feeds. Only specified for the
    terminals at head of feeders.
    '''
    
    StateShortCircuitResult: Optional[StateShortCircuitResult] = field(
        default=None,
        metadata={
        'type': 'GB',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StateShortCircuitResult.Terminal',
        'namespace': 'http://GB/placeholder/ext#',
        })
    '''
    The short-circuit result for the terminal.
    '''
    
    TopologicalNode: Optional[TopologicalNode] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalNode.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The topological node associated with the terminal. This can be used
    as an alternative to the connectivity node path to topological node,
    thus making it unnecessary to model connectivity nodes in some cases.
    Note that the if connectivity nodes are in the model, this association
    would probably not be used as an input specification.
    '''
    
    WeccREPCC: Optional[WeccREPCC] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WeccREPCC.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The WECC REPCC model that has frequency measured at this Terminal.
    '''
    
    WeccWTGIBFFRA: Optional[WeccWTGIBFFRA] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WeccWTGIBFFRA.Terminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The WECC WTGIBFFRA model that has frequency measured at this Terminal.
    '''
    
    WindPlantDynamics: Optional[WindPlantDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WindPlantDynamics.PointOfConnection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The wind plant that has point of connection.
    '''
    
@dataclass(repr=False)
class ActivityRecord(IdentifiedObject):
    '''
    Records activity for an entity at a point in time; activity may be for
    an event that has already occurred or for a planned activity.
    '''

    createdDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time this activity record has been created (different from
    the 'status.dateTime', which is the time of a status change of the
    associated object, if applicable).
    '''
    
    reason: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reason for event resulting in this activity record, typically supplied
    when user initiated.
    '''
    
    severity: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Severity level of event resulting in this activity record.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of event resulting in this activity record.
    '''
    
    Author: Optional[Author] = field(
        default=None,
        metadata={
        'type': 'deprecated',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Author.ActivityRecords',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Author of this activity record.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Information on consequence of event resulting in this activity record.
    '''
    
    WorkRequest: Optional[WorkRequest] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WorkRequest.ActivityRecord',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Work request for which activity has been recorded.
    '''
    
@dataclass(repr=False)
class AssetHealthEvent(ActivityRecord):
    '''
    An asset health-related event that is created by an analytic. The event
    is a record of a change in asset health.
    '''

    actionRecommendation: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Recommendation for action.
    '''
    
    actionTimeline: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time horizon for action.
    '''
    
    effectiveDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The date and time when the event is effective.
    '''
    
    Analytic: Optional[Analytic] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Analytic.AssetHealthEvent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Analytic that initiated this asset health event.
    '''
    
@dataclass(repr=False)
class ConfigurationEvent(ActivityRecord):
    '''
    Used to report details on creation, change or deletion of an entity or
    its configuration.
    '''

    effectiveDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time this event has or will become effective.
    '''
    
    modifiedBy: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Source/initiator of modification.
    '''
    
    remark: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Free text remarks.
    '''
    
    ChangedAgentRole: Optional[AgentRole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AgentRole.ConfigurationEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Agent role whose change resulted in this configuration event.
    '''
    
    ChangedAsset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.ConfigurationEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset whose change resulted in this configuration event.
    '''
    
    ChangedDocument: Optional[Document] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Document.ConfigurationEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Document whose change resulted in this configuration event.
    '''
    
    ChangedLocation: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.ConfigurationEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Location whose change resulted in this configuration event.
    '''
    
    ChangedServiceCategory: Optional[ServiceCategory] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ServiceCategory.ConfigurationEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Service category whose change resulted in this configuration event.
    '''
    
    ChangedUsagePoint: Optional[UsagePoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UsagePoint.ConfigurationEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Usage point whose change resulted in this configuration event.
    '''
    
    FaultCauseType: Optional[FaultCauseType] = field(
        default=None,
        metadata={
        'type': 'Part 3 Ext',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FaultCauseType.ConfigurationEvent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PowerSystemResource: Optional[PowerSystemResource] = field(
        default=None,
        metadata={
        'type': 'Part 3 Ext',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerSystemResource.ConfigurationEvent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class EndDeviceEvent(ActivityRecord):
    '''
    Event detected by a device function associated with the end device.
    '''

    EndDeviceEventDetails: list[EndDeviceEventDetail] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDeviceEventDetail.EndDeviceEvent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All details of this end device event.
    '''
    
    issuerID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unique identifier of the business entity originating an end device
    control.
    '''
    
    issuerTrackingID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifier assigned by the initiator (e.g. retail electric provider)
    of an end device control action to uniquely identify the demand response
    event, text message, or other subject of the control action. Can be
    used when cancelling an event or text message request or to identify
    the originating event or text message in a consequential end device
    event.
    '''
    
    userID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if user initiated) ID of user who initiated this end device event.
    '''
    
    EndDevice: Optional[EndDevice] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDevice.EndDeviceEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End device that reported this end device event.
    '''
    
    EndDeviceEventType: Optional[EndDeviceEventType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceEventType.EndDeviceEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of this end device event.
    '''
    
    MeterReading: Optional[MeterReading] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeterReading.EndDeviceEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Set of measured values to which this event applies.
    '''
    
    UsagePoint: Optional[UsagePoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UsagePoint.EndDeviceEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Usage point for which this end device event is reported.
    '''
    
@dataclass(repr=False)
class FailureEvent(ActivityRecord):
    '''
    An event where an asset has failed to perform its functions within specified
    parameters. This class is intended to reflect the failure itself. Additional
    information resulting from forensic analysis could be captured by a diagnosis
    data set.
    '''

    corporateCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Code for asset failure.
    '''
    
    failureDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time and date of asset failure.
    '''
    
    faultLocatingMethod: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The method used for locating the faulted part of the asset. For example,
    cable options include: Cap Discharge-Thumping, Bridge Method, Visual
    Inspection, Other.
    '''
    
    location: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Failure location on an object.
    '''
    
    rootCause: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Root cause of asset failure.
    '''
    
    breakerFailureReason: Optional[ BreakerFailureReasonKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reason for breaker failure.
    '''
    
    failureClassification: Optional[ AssetFailureClassification ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Classification of failure.
    '''
    
    failureIsolationMethod: Optional[ FailureIsolationMethodKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    How the asset failure was isolated from the system.
    '''
    
    failureMode: Optional[ AssetFailureMode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    What asset failed to be able to do.
    '''
    
    transformerFailureReason: Optional[ TransformerFailureReasonKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reason for transformer failure.
    '''
    
@dataclass(repr=False)
class MktActivityRecord(ActivityRecord):
    '''
    Subclass of IEC61968: Common:ActivityRecord.
    '''

    MarketParticipant: list[MarketParticipant] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MarketParticipant.MktActivityRecord',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MktActivityRecord: list[MktActivityRecord] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MktActivityRecord.SelfMktActivityRecord',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SelfMktActivityRecord: Optional[MktActivityRecord] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktActivityRecord.MktActivityRecord',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Address(IdentifiedObject):
    '''
    Fundamental street address information.
    '''

    AdditionalAddressInformation: list[AdditionalAddressInformation] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AdditionalAddressInformation.Address',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Additional information for a given address.
    '''
    
    cityCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    City code.
    '''
    
    cityName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the city.
    '''
    
    country: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the country in which the address is located. It is recommended
    to use either the 3-letter ISO 3166-1 alpha 3 code such as "SGP," or
    the full country name such as "Singapore."
    '''
    
    county: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the second-level Administrative division of a country in which
    the address is located. The term used for the second-level Administrative
    division in a county varies from country to country and between first-level
    Administrative divisions within a country. For example, California
    has counties, Louisiana has parishes, British Columbia, Canada has
    regional districts, and Queensland Australia has shires and regions.
    Counties are usually made up of cities, towns, and rural populations.
    '''
    
    fullAddress: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A concatenated string specifying the complete address in a single string
    which may include delimiters.
    '''
    
    postalCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Postal code for the address.
    '''
    
    region: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the first-level Administrative division of a country in which
    the address is located. For example, California, Quebec, and Queensland
    are states and provinces of the United States of America, Canada, and
    Australia, respectively.
    '''
    
    streetCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Utilities often make use of external reference systems,
    such as those of the town-planner's department or surveyor general's
    mapping system, that allocate global reference codes to streets.
    '''
    
    streetName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the street.
    '''
    
    streetNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Designator of the specific location on the street.
    '''
    
    streetPrefix: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Prefix to the street name. For example: North, South, East, West.
    '''
    
    streetSuffix: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Suffix to the street name. For example: North, South, East, West.
    '''
    
    suiteNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of the apartment or suite.
    '''
    
    Cadastre: Optional[Cadastre] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Cadastre.Address',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cadastre encompassing one or more physical addresses.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current status of the address e.g. pending, approved
    '''
    
@dataclass(repr=False)
class PhysicalAddress(Address):
    '''
    The structured geographic and administrative context of a physical place
    where an organisation, person, or activity is located.
    PhysicalAddress is used for precisely identifying, classifying, and locating
    entities for regulatory, logistical, or informational purposes.
    '''

    Building: Optional[Building] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Building.PhysicalAddress',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Site: Optional[Site] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Site.PhysicalAddress',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    community: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Community in which the locality is, and which is in the municipality,
    city or town.. For example, Anderston, Glasgow City, Scotland or another
    appropriate fourth-level administrative division
    '''
    
    globalLocationNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Global Location Number (GLN, sometimes also referred to as International
    Location Number or ILN) of the respective organization, person, or
    place. The GLN is a 13-digit number used to identify parties and physical
    locations.
    '''
    
    isicV4: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    International Standard of Industrial Classification of All Economic
    Activities (ISIC), Revision 4 code for a particular organization, business
    person, or place.
    '''
    
    isWithinTownLimits: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If TRUE, this street is within the legal geographical boundaries of
    the specified town (default).
    '''
    
    municipality: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the municipality within which the address is located. A municipality
    refers to a village, town, or city that has corporate status and powers
    of self-government or jurisdiction as granted by national and regional
    laws to which it is subordinate.
    '''
    
    nearestIntersection: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The names of streets at the nearest intersection to work area.
    '''
    
    Building: Optional[Building] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Building.PhysicalAddress',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Site: Optional[Site] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Site.PhysicalAddress',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class PostalAddress(Address):
    '''
    A reliable, private, and secure mailing address housed within a postal
    facility.
    '''

    postOfficeBoxNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Post office box identifier. Typically a numeric or alphanumeric string
    with or without separators (dashes, spaces, or slashes) between numeric
    or alphanumeric characters.
    '''
    
@dataclass(repr=False)
class AdjacentCASet(IdentifiedObject):
    '''
    Groups Adjacent Control Areas.
    '''

    HostControlArea: Optional[HostControlArea] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HostControlArea.AdjacentCASet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredResource: list[RegisteredResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegisteredResource.AdjacentCASet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SubControlArea: list[SubControlArea] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SubControlArea.AdjacentCASet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    lossPercentage: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Loss percentage
    '''
    
    HostControlArea: Optional[HostControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HostControlArea.AdjacentCASet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.AdjacentCASet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Agent(IdentifiedObject):
    '''
    An agent is an entity that bears some form of responsibility for an activity
    taking place, for the existence of an entity, or for another agent's activity.
    '''

    AgentCapability: list[AgentCapability] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AgentCapability.Agent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    AgentRole: list[AgentRole] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AgentRole.Agent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ContactPoint: list[ContactPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContactPoint.Agent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    url: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    URL of the agent. Uniform Resource Locator (URL), colloquially termed
    a web address, is a reference to a web resource that specifies its
    location on a computer network and a mechanism for retrieving it. A
    URL is a specific type of Uniform Resource Identifier (URI).
    '''
    
@stereotype(CIMStereotype.prov)
@dataclass(repr=False)
class AutonomousAgent(Agent):
    '''
    An inanimate intelligent Thing that acts on behalf of a Person or Organization.
    An Autonomous Agent is a type of Agent.
    Note:An Agent is not a role.
    '''

    AutonomousFunction: list[AutonomousFunction] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AutonomousFunction.AutonomousAgent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    machineIdentity: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unique descriptors of an organisations device or workload used to authenticate
    communication and system access. Devices can be phone, mobile device,
    server, desktop computer, Internet of Things (IoT) or Operational Technology
    (OT).
    Workloads can be containers, virtual machine (VM), application, service,
    Robotic Process Automation (RPA) or script.
    '''
    
    otherAutonomousAgentKind: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This attribute should be used to specify the kind of autonomous agent
    when the value for the attribute AutonomousAgent.kind is "other."
    '''
    
    kind: Optional[ AutonomousAgentKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of autonomous agent.
    '''
    
@stereotype(CIMStereotype.prov)
@dataclass(repr=False)
class Organisation(Agent):
    '''
    A collection of one or more people organised together into some type of
    structure for a specific purpose.
    An Organisation is a type of Agent.
    '''

    AgentCapability: Optional[AgentCapability] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AgentCapability.CertificationOrganisation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Organisation: list[Organisation] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Organisation.ParentOrganisation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Organisation that is part of this parent organisation.
    '''
    
    iso6523Code: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Organisation identifier as defined in ISO 6523(-1). Note that many
    existing organization identifiers such as leiCode, duns and vatID can
    be expressed as an ISO 6523 identifier by setting the ICD part of the
    ISO 6523 identifier accordingly.
    '''
    
    vatID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Value-added Tax ID of the organisation.
    '''
    
    category: Optional[ OrganisationCategoryKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The list of the kinds of organisations regarded as having particular
    shared characteristics.
    '''
    
    legalEntity: Optional[ LegalEntityKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of legal entity the organisation is as defined by its articles
    of incorporation.
    '''
    
    AgentCapability: Optional[AgentCapability] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AgentCapability.CertificationOrganisation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ParentOrganisation: Optional[Organisation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ParentOrganization.Organisation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Parent organisation of this organisation.
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class ControlAreaOperator(Organisation):
    '''
    Operates the Control Area. Approves and implements energy transactions.
    Verifies both Inter-Control Area and Intra-Control Area transactions for
    the power system before granting approval (and implementing) the transactions.
    '''

    ControlledBy: Optional[HostControlArea] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HostControlArea.Controls',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A ControlAreaCompany controls a ControlArea.
    '''
    
@dataclass(repr=False)
class Crew(Organisation):
    '''
    Group of people with specific skills, tools, and vehicles.
    '''

    CrewMembers: list[CrewMember] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CrewMember.Crew',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All members of this crew.
    '''
    
    FieldDispatchHistory: list[FieldDispatchHistory] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FieldDispatchHistory.Crew',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CrewType: Optional[CrewType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CrewType.Crews',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of this crew.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.Crew',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of this crew.
    '''
    
    SwitchingAction: Optional[SwitchingAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SwitchingAction.Crew',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    WorkCapability: Optional[WorkCapability] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WorkCapability.Crew',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    WorkManager: Optional[WorkManager] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WorkManager.Crew',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The work organisation to which crews are assigned.
    '''
    
    WorkOrganisation: Optional[WorkOrganisation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WorkOrganisation.Crew',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The work organisation to which crews are assigned.
    '''
    
@dataclass(repr=False)
class MarketParticipant(Organisation):
    '''
    An identification of a party acting in a electricity market business process.
    This class is used to identify organisations that can participate in market
    management and/or market operations.
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegisteredResource.MarketParticipant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SchedulingCoordinator: list[SchedulingCoordinator] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SchedulingCoordinator.MarketParticipant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MktActivityRecord: Optional[MktActivityRecord] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktActivityRecord.MarketParticipant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RTO(MarketParticipant):
    '''
    Regional transmission operator.
    '''

    AdjacentCASet: list[AdjacentCASet] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AdjacentCASet.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    AggregateNode: list[AggregateNode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AggregateNode.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TransmissionContractRight: list[ContractRight] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContractRight.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    EnergyMarkets: list[EnergyMarket] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EnergyMarket.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FuelRegion: list[FuelRegion] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FuelRegion.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    HostControlArea: list[HostControlArea] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'HostControlArea.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    LocalReliabilityArea: list[LocalReliabilityArea] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'LocalReliabilityArea.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MSSAggregation: list[MSSAggregation] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MSSAggregation.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Pnodes: list[Pnode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Pnode.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SubControlArea: list[SubControlArea] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SubControlArea.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TransmissionRightChain: list[TransmissionRightChain] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransmissionRightChain.RTO',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class SchedulingCoordinator(MarketParticipant):
    '''
    Market participants could be represented by Scheduling Coordinators (SCs)
    that are registered with the RTO/ISO. One participant could register multiple
    SCs with the RTO/ISO. Many market participants can do business with the
    RTO/ISO using a single SC. One SC could schedule multiple generators. A
    load scheduling point could be used by multiple SCs. Each SC could schedule
    load at multiple scheduling points. An inter-tie scheduling point can be
    used by multiple SCs. Each SC can schedule interchange at multiple inter-tie
    scheduling points.
    '''

    TransmissionContractRight: list[ContractRight] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContractRight.SchedulingCoordinator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    LoadRatio: Optional[LoadRatio] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LoadRatio.SchedulingCoordinator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SchedulingCoordinatorUser: list[SchedulingCoordinatorUser] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SchedulingCoordinatorUser.SchedulingCoordinator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    creditStartEffectiveDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date that the scheduling coordinator becomes creditworthy.
    '''
    
    lastModified: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication of the last time this scheduling coordinator information
    was modified.
    '''
    
    qualificationStatus: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Scheduling coordinator qualification status, Qualified, Not Qualified,
    or Disqualified.
    '''
    
    scid: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the short name or Scheduling Coordinator ID field.
    '''
    
    creditFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicate creditworthiness (Y, N)
    '''
    
    LoadRatio: Optional[LoadRatio] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LoadRatio.SchedulingCoordinator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MarketParticipant: Optional[MarketParticipant] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MarketParticipant.SchedulingCoordinator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ParentOrganization(Organisation):
    '''
    '''

@dataclass(repr=False)
class WorkOrganisation(Organisation):
    '''
    Identifies an organisation that will be responsible for planning, scheduling
    and performing the work.
    '''

    Crew: list[Crew] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Crew.WorkOrganisation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Crews assigned to a given work organisation.
    '''
    
@stereotype(CIMStereotype.prov)
@dataclass(repr=False)
class Person(Agent):
    '''
    rdfs:label : "Person"^^xsd:string
    <http://www.w3.org/ns/prov#component> : "agents-responsibility"^^xsd:string
    <http://www.w3.org/ns/prov#definition> : "Person agents are people."@en
    <http://www.w3.org/ns/prov#n> : "http://www.w3.org/TR/2013/REC-prov-n-20130430/#expression-types"^^xsd:anyURI
    rdfs:isDefinedBy : http://www.w3.org/ns/prov-o#
    <http://www.w3.org/ns/prov#category> : "expanded"^^xsd:string
    <http://www.w3.org/ns/prov#dm> : "http://www.w3.org/TR/2013/REC-prov-dm-20130430/#term-agent"^^xsd:anyURI
    '''

    PersonRole: list[PersonRole] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PersonRole.Person',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All roles of this person.
    '''
    
    firstName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Person's first name.
    '''
    
    lastName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Person's last (family, sir) name.
    '''
    
    middleName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Middle name(s) or initial(s).
    '''
    
    preferredName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The name the person prefers to be used in communications and when spoken
    to.
    '''
    
    prefix: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A prefix or title for the person's name, such as Miss, Mister, Doctor,
    etc.
    '''
    
    suffix: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A suffix for the person's name
    '''
    
    generationalSuffix: Optional[ GenerationalSuffixKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A suffix used to distinguish persons who share the same name within
    a family, such as II, III, etc..
    '''
    
@stereotype(CIMStereotype.informative)
@stereotype(CIMStereotype.deprecated)
@dataclass(repr=False)
class OldPerson(Person):
    '''
    General purpose information for name and other information to contact people.
    '''

    MeasurementValues: list[MeasurementValue] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeasurementValue.ErpPerson',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Skills: list[Skill] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Skill.ErpPerson',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Utility-specific classification for this person, according to the utility's
    corporate standards and practices. Examples include employee, contractor,
    agent, not affiliated, etc.
    Note that this field is not used to indicate whether this person is
    a customer of the utility. Often an employee or contractor is also
    a customer. Customer information is gained with relationship to Organisation
    and CustomerData. In similar fashion, this field does not indicate
    the various roles this person may fill as part of utility operations.
    '''
    
    CustomerData: Optional[Customer] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Customer.ErpPersons',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ErpCompetency: Optional[ErpCompetency] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ErpCompetency.ErpPersons',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ErpPersonnel: Optional[ErpPersonnel] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ErpPersonnel.ErpPersons',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AgentRole(IdentifiedObject):
    '''
    The agent role captures the semantics of the role played by an agent in
    a particular agent relationship. The semantics are captured in the IdentifiedObject.description
    attribute.
    '''

    AgentRoleQualification: list[AgentRoleQualification] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AgentRoleQualification.AgentRole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConfigurationEvent.ChangedAgentRole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All configuration events created for this agent role.
    '''
    
    globalLocationNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Global Location Number (GLN, sometimes also referred to as International
    Location Number or ILN) of the respective organization, person, or
    place. The GLN is a 13-digit number used to identify parties and physical
    locations.
    '''
    
    isicV4: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    International Standard of Industrial Classification of All Economic
    Activities (ISIC), Revision 4 code for a particular organization, business
    person, or place.
    '''
    
    kind: Optional[ AgentRoleKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This attribute when used applies a restriction on the type of Agent
    that can play the role. For example, only a Person can play the role
    of Employee. If this attribute is not used then the role can be played
    by any type of Agent.
    '''
    
    Agent: Optional[Agent] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Agent.AgentRole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AssetTestSampleTaker(AgentRole):
    '''
    Identity of person/organization that took sample.
    '''

    Specimen: list[Specimen] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Specimen.AssetTestSampleTaker',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specimen taken by this sample taker.
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class Customer(AgentRole):
    '''
    An Organisation or Person receiving services from service supplier.
    '''

    Customer: Optional[Customer] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Customer.Customer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CustomerAccounts: list[CustomerAccount] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CustomerAccount.Customer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All accounts of this customer.
    '''
    
    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CustomerAgreement.Customer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All agreements of this customer.
    '''
    
    CustomerNotifications: list[CustomerNotification] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CustomerNotification.Customer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All notifications required by this customer.
    '''
    
    EndDevices: list[EndDevice] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDevice.Customer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All end devices of this customer.
    '''
    
    ErpPersons: list[OldPerson] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OldPerson.CustomerData',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TroubleTickets: list[TroubleTicket] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TroubleTicket.Customer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All trouble tickets for this customer.
    '''
    
    locale: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Locale designating language to use in communications with this customer.
    '''
    
    pucNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Public utilities commission (PUC) identification number.
    '''
    
    specialNeed: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if customer organisation has special service needs such as life
    support, hospitals, etc.
    '''
    
    vip: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'deprecated Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (deprecated) (use 'priority' instead) True if this is an important
    customer. Importance is for matters different than those in 'specialNeed'
    attribute.
    '''
    
    kind: Optional[ CustomerKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of customer.
    '''
    
    Customer: Optional[Customer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Customer.Customer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    OutagePlan: Optional[OutagePlan] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OutagePlan.Customer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The outage plan that identifies the customers that are affected.
    '''
    
    priority: Optional[Priority] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority of the customer.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of this customer.
    '''
    
@dataclass(repr=False)
class OrganisationRole(AgentRole):
    '''
    Identifies a way in which an organisation may participate in the utility
    enterprise (e.g., contractor, manufacturer, etc).
    '''

@dataclass(repr=False)
class AssetOrganisationRole(OrganisationRole):
    '''
    Role an organisation plays with respect to asset.
    '''

@dataclass(repr=False)
class AssetOwner(AssetOrganisationRole):
    '''
    Owner of the asset.
    '''

    Ownerships: list[Ownership] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Ownership.AssetOwner',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All ownerships of this owner.
    '''
    
@dataclass(repr=False)
class AssetTestLab(AssetOrganisationRole):
    '''
    Test lab that performs various types of testing related to assets.
    '''

    LabTestDataSet: list[LabTestDataSet] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'LabTestDataSet.AssetTestLab',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A set of lab test results produced by this test lab.
    '''
    
@dataclass(repr=False)
class AssetUser(AssetOrganisationRole):
    '''
    Organisation that is a user of the asset.
    '''

@dataclass(repr=False)
class Maintainer(AssetOrganisationRole):
    '''
    Organisation that maintains assets.
    '''

@dataclass(repr=False)
class Manufacturer(OrganisationRole):
    '''
    Organisation that manufactures asset products.
    '''

    ProductAssetModels: list[ProductAssetModel] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProductAssetModel.Manufacturer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All asset models by this manufacturer.
    '''
    
@dataclass(repr=False)
class MarketRole(OrganisationRole):
    '''
    The external intended behavior played by a party within the electricity
    market.
    '''

    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of market roles that can be played by parties for given domains
    within the electricity market. Types are flexible using dataType of
    string for free-entry of role types.
    '''
    
@dataclass(repr=False)
class ServiceSupplier(OrganisationRole):
    '''
    Organisation that provides services to customers.
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CustomerAgreement.ServiceSupplier',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All customer agreements of this service supplier.
    '''
    
    UsagePoints: list[UsagePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'UsagePoint.ServiceSupplier',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All usage points this service supplier utilises to deliver a service.
    '''
    
@dataclass(repr=False)
class PersonRole(AgentRole):
    '''
    Identifies a way in which a person may participate in the utility enterprise
    (e.g., contractor, crew member, etc).
    '''

    Person: Optional[Person] = field(
        default=None,
        metadata={
        'type': 'prov',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Person.PersonRole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Person having this role.
    '''
    
@dataclass(repr=False)
class CrewMember(PersonRole):
    '''
    Member of a crew.
    '''

    Crew: Optional[Crew] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Crew.CrewMembers',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Crew to which this crew member belongs.
    '''
    
@dataclass(repr=False)
class WorkManager(AgentRole):
    '''
    Identifies an organization or person that will be responsible for planning,
    scheduling and performing the work.
    '''

    Crew: list[Crew] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Crew.WorkManager',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Crews assigned to a given work organisation.
    '''
    
    workOrganisationType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of work organisation e.g. electrical contractor, maintenance
    department, engineering department, etc.
    '''
    
    WorkRequest: Optional[WorkRequest] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WorkRequest.WorkManager',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Work requests assigned to a work organization.
    '''
    
@dataclass(repr=False)
class AggregateNode(IdentifiedObject):
    '''
    An aggregated node can define a typed grouping further defined by the AnodeType
    enumeration. Types range from System Zone/Regions to Market Energy Regions
    to Aggregated Loads and Aggregated Generators.
    '''

    AggregatedPnode: Optional[AggregatedPnode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AggregatedPnode.AggregateNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CnodeDistributionFactor: list[CnodeDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CnodeDistributionFactor.AggregateNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredResource: list[RegisteredResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegisteredResource.AggregateNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A RegisteredResource can be associated to only one AggregateNode if
    not connected to a Pnode or MktConnectivityNode.
    '''
    
    qualifASOrder: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Processing Order for AS self-provisions for this region. The priority
    of this attribute directs the awards of any resource that resides in
    overlapping regions. The regions are processed in priority manner.
    '''
    
    anodeType: Optional[ AnodeType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of aggregated node
    '''
    
    AggregatedPnode: Optional[AggregatedPnode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AggregatedPnode.AggregateNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.AggregateNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class LoadAggregationPoint(AggregateNode):
    '''
    A specialized class of type AggregatedNode type. Defines Load Aggregation
    Points.
    '''

@dataclass(repr=False)
class MSSZone(AggregateNode):
    '''
    Model to define a zone within a Metered Sub System.
    '''

    lossFactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the default loss factor for the Metered Sub-System (MSS) zone.
    The actual losses are calculated during the RT market.
    '''
    
    ignoreLosses: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Provides an indication if losses are to be ignored for this metered
    subsystem zone.
    '''
    
    rucGrossSettlement: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Metered Sub-System (MSS) Load Following may select Net vs. Gross settlement.
    Net Settlement requires the net Demand settled at the Metered Sub-Sustem
    (MSS) Load Aggregation Point (LAP) and Net Supply needs to settle at
    the equivalent to the weighted average price of the MSS generation.
    Gross load will be settled at the System LAP and the Gross supply will
    be settled at the LMP. MSS Aggregation that elects gross settlement
    shall have to identify if its resources are Load Following or not.
    '''
    
    MeteredSubSystem: Optional[MeteredSubSystem] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeteredSubSystem.MSSZone',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarketRegion(AggregateNode):
    '''
    A specialized class of AggregatedNode type. Defines the MarketRegions.
    Regions could be system Market Regions, Energy Regions or Ancillary Service
    Regions.
    '''

@dataclass(repr=False)
class RUCZone(AggregateNode):
    '''
    A specialized class of type AggregatedNode type. Defines RUC Zones. A forecast
    region represents a collection of Nodes for which the Market operator has
    developed sufficient historical demand and relevant weather data to perform
    a demand forecast for such area. The Market Operator may further adjust
    this forecast to ensure that the Reliability Unit Commitment produces adequate
    local capacity procurement.
    '''

@dataclass(repr=False)
class AltGeneratingUnitMeas(IdentifiedObject):
    '''
    A prioritized measurement to be used for the generating unit in the control
    area specification.
    '''

    priority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority of a measurement usage. Lower numbers have first priority.
    '''
    
    AnalogValue: Optional[AnalogValue] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AnalogValue.AltGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The specific analog value used as a source.
    '''
    
    ControlAreaGeneratingUnit: Optional[ControlAreaGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlAreaGeneratingUnit.AltGeneratingUnitMeas',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The control area generating unit to which the prioritized measurement
    assignment is applied.
    '''
    
@dataclass(repr=False)
class AltTieMeas(IdentifiedObject):
    '''
    A prioritized measurement to be used for the tie flow as part of the control
    area specification.
    '''

    priority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority of a measurement usage. Lower numbers have first priority.
    '''
    
    AnalogValue: Optional[AnalogValue] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AnalogValue.AltTieMeas',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The specific analog value used as a source.
    '''
    
    TieFlow: Optional[TieFlow] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TieFlow.AltTieMeas',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tie flow of the alternate measurements.
    '''
    
@dataclass(repr=False)
class AnalyticScore(IdentifiedObject):
    '''
    An indicative scoring by an analytic that can be used to characterize the
    health of or the risk associated with one or more assets. The analytic
    score reflects the results of an execution of an analytic against an asset
    or group of assets.
    '''

    calculationDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Timestamp of when the score was calculated.
    '''
    
    effectiveDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date-time for when the score applies.
    '''
    
    value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset health score value.
    '''
    
    Analytic: Optional[Analytic] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Analytic.AnalyticScore',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Analytic which was executed to arrive at this analytic score..
    '''
    
    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.AnalyticScore',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset to which this analytic score applies.
    '''
    
    AssetAggregateScore: Optional[AggregateScore] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AggregateScore.AnalyticScore',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Aggregate score to which this analytic score contributed.
    '''
    
    AssetGroup: Optional[AssetGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetGroup.AnalyticScore',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset group to which this analytic score applies..
    '''
    
@dataclass(repr=False)
class AggregateScore(AnalyticScore):
    '''
    An aggregated indicative scoring by an analytic, which is based on other
    analytic scores, that can be used to characterize the health of or the
    risk associated with one or more assets.
    '''

    AnalyticScore: list[AnalyticScore] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AnalyticScore.AssetAggregateScore',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Analytic score contributing to this aggregate score.
    '''
    
@dataclass(repr=False)
class HealthScore(AggregateScore):
    '''
    Score that is indicative of the health of one or more assets.
    '''

    AssetRiskScore: Optional[RiskScore] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RiskScore.AssetHealthScore',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Risk score with which this health score is associated.
    '''
    
@dataclass(repr=False)
class RiskScore(AggregateScore):
    '''
    Score that is indicative of the risk associated with one or more assets.
    '''

    AssetHealthScore: list[HealthScore] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'HealthScore.AssetRiskScore',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Individual health score associated with this risk score.
    '''
    
    kind: Optional[ RiskScoreKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The risk kind, such as CustomerRisk, FinancialRisk, SafetyRisk, etc.
    '''
    
@dataclass(repr=False)
class Appointment(IdentifiedObject):
    '''
    Meeting time and location.
    '''

    callAhead: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if requested to call customer when someone is about to arrive
    at their premises.
    '''
    
@dataclass(repr=False)
class Asset(IdentifiedObject):
    '''
    Tangible resource of the utility, including power system equipment, various
    end devices, cabinets, buildings, etc. For electrical network equipment,
    the role of the asset is defined through PowerSystemResource and its subclasses,
    defined mainly in the Wires model (refer to IEC61970-301 and model package
    IEC61970::Wires). Asset description places emphasis on the physical characteristics
    of the equipment fulfilling that role.
    '''

    AnalyticScore: list[AnalyticScore] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AnalyticScore.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Analytic result related to this asset.
    '''
    
    AssetDeployment: Optional[AssetDeployment] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetDeployment.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This asset's deployment.
    '''
    
    AssetFunction: list[AssetFunction] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AssetFunction.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConfigurationEvent.ChangedAsset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All configuration events created for this asset.
    '''
    
    FinancialInfo: Optional[FinancialInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FinancialInfo.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Financial information related to this asset.
    '''
    
    Measurements: list[Measurement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Measurement.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement related to this asset.
    '''
    
    Ownerships: list[Ownership] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Ownership.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All ownerships of this asset.
    '''
    
    ProcedureDataSet: list[ProcedureDataSet] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProcedureDataSet.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Procedure data set that applies to this asset.
    '''
    
    BreakerOperation: Optional[SwitchOperationSummary] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SwitchOperationSummary.Breaker',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Breaker operation information for this breaker.
    '''
    
    Warranty: list[Warranty] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Warranty.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Weight: list[Weight] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Weight.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    baselineCondition: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Condition of asset at last baseline. Examples include new, rebuilt,
    overhaul required, other. Refer to inspection data for information
    on the most current condition of the asset.
    '''
    
    critical: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if asset is considered critical for some reason (for example,
    a pole with critical attachments).
    '''
    
    kindOther: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Other kind of asset that is not list in the AssetKind enumeration list.
    '''
    
    lotNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Lot number for this asset. Even for the same model and version number,
    many assets are manufactured in lots.
    '''
    
    position: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Position of asset or asset component. May often be in relation to other
    assets or components.
    '''
    
    serialNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Serial number of this asset.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Utility-specific classification of Asset and its subtypes, according
    to their corporate standards, practices, and existing IT systems (e.g.,
    for management of assets, maintenance, work, outage, customers, etc.).
    '''
    
    utcNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Uniquely tracked commodity (UTC) number.
    '''
    
    baselineLossOfLife: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of initial life expectancy that has been lost as of the
    last life expectancy baseline. Represents
    (initial life expectancy - current life expectancy) / initial life
    expectancy.
    '''
    
    inUseState: Optional[ InUseStateKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication of whether asset is currently deployed (in use), ready to
    be put into use or not available for use.
    '''
    
    kind: Optional[ AssetKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of asset. Used in description of asset components in asset instance
    templates.
    '''
    
    lifecycleState: Optional[ AssetLifecycleStateKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current lifecycle state of asset.
    '''
    
    purchasePrice: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Purchase price of asset.
    '''
    
    retiredReason: Optional[ RetiredReasonKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reason asset retired.
    '''
    
    AssetContainer: Optional[AssetContainer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetContainer.Assets',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Container of this asset.
    '''
    
    AssetDeployment: Optional[AssetDeployment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetDeployment.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This asset's deployment.
    '''
    
    AssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Data applicable to this asset.
    '''
    
    BreakerOperation: Optional[SwitchOperationSummary] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SwitchOperationSummary.Breaker',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Breaker operation information for this breaker.
    '''
    
    electronicAddress: Optional[ElectronicAddress] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Electronic address.
    '''
    
    ErpInventory: Optional[ErpInventory] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ErpInventory.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ErpItemMaster: Optional[ErpItemMaster] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ErpItemMaster.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FinancialInfo: Optional[FinancialInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FinancialInfo.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Financial information related to this asset.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.Assets',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Location of this asset.
    '''
    
    ProductAssetModel: Optional[ProductAssetModel] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProductAssetModel.Asset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The model of this asset.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of this asset.
    '''
    
@dataclass(repr=False)
class AssetContainer(Asset):
    '''
    Asset that is aggregation of other assets such as conductors, transformers,
    switchgear, land, fences, buildings, equipment, vehicles, etc.
    '''

    Assets: list[Asset] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Asset.AssetContainer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All assets within this container asset.
    '''
    
    Seals: list[Seal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Seal.AssetContainer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All seals applied to this asset container.
    '''
    
@dataclass(repr=False)
class Cabinet(AssetContainer):
    '''
    Enclosure that offers protection to the equipment it contains and/or safety
    to people/animals outside it.
    '''

@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class DuctBank(AssetContainer):
    '''
    A duct contains individual wires in the layout as specified with associated
    wire spacing instances; number of them gives the number of conductors in
    this duct.
    '''

    WireSpacingInfos: list[IntraphaseSpacing] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IntraphaseSpacing.DuctBank',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    WireSpacingInfos: list[IntraphaseSpacing] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'WireSpacingInfo.DuctBank',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    circuitCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of circuits in duct bank. Refer to associations between a duct
    (ConductorAsset) and an ACLineSegment to understand which circuits
    are in which ducts.
    '''
    
@dataclass(repr=False)
class EndDevice(AssetContainer):
    '''
    Asset container that performs one or more end device functions. One type
    of end device is a meter which can perform metering, load management, connect/disconnect,
    accounting functions, etc. Some end devices, such as ones monitoring and
    controlling air conditioners, refrigerators, pool pumps may be connected
    to a meter. All end devices may have communication capability defined by
    the associated communication function(s). An end device may be owned by
    a consumer, a service provider, utility or otherwise.
    There may be a related end device function that identifies a sensor or
    control point within a metering application or communications systems (e.g.,
    water, gas, electricity).
    Some devices may use an optical port that conforms to the ANSI C12.18 standard
    for communications.
    '''

    DispatchablePowerCapability: list[DispatchablePowerCapability] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DispatchablePowerCapability.EndDevice',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    EndDeviceEvents: list[EndDeviceEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDeviceEvent.EndDevice',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All events reported by this end device.
    '''
    
    EndDeviceFunctions: list[EndDeviceFunction] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDeviceFunction.EndDevice',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All end device functions this end device performs.
    '''
    
    amrSystem: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Automated meter reading (AMR) or other communication system responsible
    for communications to this end device.
    '''
    
    installCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Installation code.
    '''
    
    isPan: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, this is a premises area network (PAN) device.
    '''
    
    isSmartInverter: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    isVirtual: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, there is no physical device. As an example, a virtual meter
    can be defined to aggregate the consumption for two or more physical
    meters. Otherwise, this is a physical hardware device.
    '''
    
    timeZoneOffset: Optional[ float | Minutes ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time zone offset relative to GMT for the location of this end device.
    '''
    
    Customer: Optional[Customer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Customer.EndDevices',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Customer owning this end device.
    '''
    
    EndDeviceInfo: Optional[EndDeviceInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceInfo.EndDevices',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End device data.
    '''
    
    ServiceLocation: Optional[ServiceLocation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ServiceLocation.EndDevices',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Service location whose service delivery is measured by this end device.
    '''
    
    UsagePoint: Optional[UsagePoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UsagePoint.EndDevices',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Usage point to which this end device belongs.
    '''
    
@dataclass(repr=False)
class Meter(EndDevice):
    '''
    Physical asset that performs the metering role of the usage point. Used
    for measuring consumption and detection of events.
    '''

    MeterMultipliers: list[MeterMultiplier] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeterMultiplier.Meter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All multipliers applied at this meter.
    '''
    
    MeterReadings: list[MeterReading] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeterReading.Meter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All meter readings provided by this meter.
    '''
    
    MeterServiceWorkTask: list[MeterWorkTask] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeterWorkTask.Meter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All non-replacement work tasks on this meter.
    '''
    
    MeterReplacementWorkTasks: list[MeterWorkTask] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeterWorkTask.OldMeter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All work tasks on replacement of this old meter.
    '''
    
    connectionCategory: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A code used to specify the connection category, e.g. low voltage, where
    the meter operates.
    '''
    
    formNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Meter form designation per ANSI C12.10 or other applicable standard.
    An alphanumeric designation denoting the circuit arrangement for which
    the meter is applicable and its specific terminal arrangement.
    '''
    
@dataclass(repr=False)
class Facility(AssetContainer):
    '''
    A facility may contain buildings, storage facilities, switching facilities,
    power generation, manufacturing facilities, maintenance facilities, etc.
    '''

    facilityKindOther: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Other facility kind. Populated only when FacilityKind.other is selected.
    '''
    
    kind: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of this facility.
    '''
    
@dataclass(repr=False)
class LineAssetContainer(AssetContainer):
    '''
    LineAssetContainer refers to the line itself as an asset container (not
    a container of line asset). It can be single or multiple circuits.
    '''

    Span: list[Span] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Span.LineAssetContainer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Span(AssetContainer):
    '''
    Span is a container of (a collection of) assets such as the conductor (three
    phases between two structures as one Conductor asset). It is used to document
    information such as number of marker ball, vegetation clearance, etc. Physically
    it is defined by two (to and from) structures.
    '''

    FromStructure: Optional[Structure] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Structure.FromStructureSpan',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ToStructure: Optional[Structure] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Structure.ToStructureSpan',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    length: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Length of span
    '''
    
    requiredClearance: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum required clearance permitted between the lowest hanging conductor
    in the span and the highest object below the span (e.g., ground, water,
    vegetation, highway, etc.).
    '''
    
    FromStructure: Optional[Structure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Structure.FromStructureSpan',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    LineAssetContainer: Optional[LineAssetContainer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LineAssetContainer.Span',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ToStructure: Optional[Structure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Structure.ToStructureSpan',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Structure(AssetContainer):
    '''
    Construction holding assets such as conductors, transformers, switchgear,
    etc. Where applicable, number of conductors can be derived from the number
    of associated wire spacing instances.
    '''

    FromStructureSpan: Optional[Span] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Span.FromStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ToStructureSpan: Optional[Span] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Span.ToStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    StructureSupports: list[StructureSupport] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StructureSupport.SecuredStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Structure support for this structure.
    '''
    
    fumigantAppliedDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date fumigant was last applied.
    '''
    
    fumigantName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of fumigant.
    '''
    
    materialKindOther: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the material this structure is made of if the kind of material
    is not enumerated in the StructureMaterialKind enumeration class. This
    attribute should only be used when the value of the attribute Structure.materialKind
    is "other."
    '''
    
    removeWeed: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if weeds are to be removed around asset.
    '''
    
    weedRemovedDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date weed were last removed.
    '''
    
    height: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Visible height of structure above ground level for overhead construction
    (e.g., Pole or Tower) or below ground level for an underground vault,
    manhole, etc. Refer to associated DimensionPropertiesInfo for other
    types of dimensions.
    '''
    
    materialKind: Optional[ StructureMaterialKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Material this structure is made of.
    '''
    
    ratedVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum rated voltage of the equipment that can be mounted on/contained
    within the structure.
    '''
    
    FromStructureSpan: Optional[Span] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Span.FromStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ToStructureSpan: Optional[Span] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Span.ToStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarineStructure(Structure):
    '''
    A structure that supports underwater conductors and associated equipment
    used for the transmission and/or distribution of electricity or structure
    on water.
    '''

    hasTemperatureMeasurement: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if temperature measurement is available.
    '''
    
@dataclass(repr=False)
class OverheadStructure(Structure):
    '''
    A structure is an element of an electric transmission or distribution system
    that supports the overhead conductors and associated equipment used for
    the transmission of electricity.
    '''

    Anchor: list[Anchor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Anchor.OverheadStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Brace: list[Brace] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Brace.OverheadStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CathodicSystem: Optional[CathodicSystem] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CathodicSystem.OverheadStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Crossarm: list[Crossarm] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Crossarm.OverheadStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Guy: list[Guy] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Guy.OverheadStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Insulator: list[Insulator] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Insulator.OverheadStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Pole: list[Pole] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Pole.OverheadStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CathodicSystem: Optional[CathodicSystem] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CathodicSystem.OverheadStructure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class Pole(Structure):
    '''
    Pole asset.
    '''

    Streetlights: list[Streetlight] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Streetlight.Pole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All streetlights attached to this pole.
    '''
    
    breastBlock: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a block of material has been attached to base of pole in ground
    for stability. This technique is used primarily when anchors can not
    be used.
    '''
    
    classification: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pole class: 1, 2, 3, 4, 5, 6, 7, H1, H2, Other, Unknown.
    '''
    
    construction: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The framing structure mounted on the pole.
    '''
    
    jpaReference: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Joint pole agreement reference number.
    '''
    
    speciesType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pole species. Aluminum, Aluminum Davit, Concrete, Fiberglass, Galvanized
    Davit, Galvanized, Steel Davit Primed, Steel Davit, Steel Standard
    Primed, Steel, Truncated, Wood-Treated, Wood-Hard, Wood-Salt Treated,
    Wood-Soft, Wood, Other, Unknown.
    '''
    
    treatedDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time pole was last treated with preservative.
    '''
    
    baseKind: Optional[ PoleBaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of base for this pole.
    '''
    
    diameter: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Diameter of the pole.
    '''
    
    length: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Length of the pole (inclusive of any section of the pole that may be
    underground post-installation).
    '''
    
    preservativeKind: Optional[ PolePreservativeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of preservative for this pole.
    '''
    
    treatmentKind: Optional[ PoleTreatmentKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of treatment for this pole.
    '''
    
    OverheadStructure: Optional[OverheadStructure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OverheadStructure.Pole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class UndergroundStructure(Structure):
    '''
    Underground structure.
    '''

    hasVentilation: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if vault is ventilating.
    '''
    
    sealingWarrantyExpiresDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date sealing warranty expires.
    '''
    
    kind: Optional[ UndergroundStructureKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if vault is ventilating.
    '''
    
@dataclass(repr=False)
class Brace(Asset):
    '''
    Used to secure a structure such as push brace.
    '''

    OverheadStructure: Optional[OverheadStructure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OverheadStructure.Brace',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Bushing(Asset):
    '''
    Bushing asset.
    '''

    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.Bushing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Terminal to which this bushing is attached.
    '''
    
    FixedContact: Optional[InterrupterUnit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InterrupterUnit.FixedContactBushing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fixed contact of interrupter to which this bushing is attached.
    '''
    
    MovingContact: Optional[InterrupterUnit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InterrupterUnit.MovingContactBushing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Moving contact of interrupter to which this bushing is attached.
    '''
    
    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.Bushing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Terminal to which this bushing is attached.
    '''
    
@dataclass(repr=False)
class CathodicSystem(Asset):
    '''
    Cathodic system for corrosion protection
    '''

    OverheadStructure: Optional[OverheadStructure] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OverheadStructure.CathodicSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    OverheadStructure: Optional[OverheadStructure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OverheadStructure.CathodicSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ComMedia(Asset):
    '''
    Communication media such as fibre optic cable, power-line, telephone, etc.
    '''

@dataclass(repr=False)
class ComModule(Asset):
    '''
    An asset having communications capabilities that can be paired with a meter
    or other end device to provide the device with communication ability, through
    associated communication function. An end device that has communications
    capabilities through embedded hardware can use that function directly (without
    the communication module), or combine embedded communication function with
    additional communication functions provided through an external communication
    module (e.g. zigbee).
    '''

    ComFunctions: list[ComFunction] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ComFunction.ComModule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All functions this communication module performs.
    '''
    
    amrSystem: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Automated meter reading (AMR) system communicating with this com module.
    '''
    
    supportsAutonomousDst: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, autonomous daylight saving time (DST) function is supported.
    '''
    
    timeZoneOffset: Optional[ float | Minutes ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time zone offset relative to GMT for the location of this com module.
    '''
    
@dataclass(repr=False)
class Crossarm(Asset):
    '''
    Cross arm
    '''

    OverheadStructure: Optional[OverheadStructure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OverheadStructure.Crossarm',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Damper(Asset):
    '''
    Damper
    '''

@dataclass(repr=False)
class FACTSDevice(Asset):
    '''
    FACTS device asset.
    '''

    kind: Optional[ FACTSDeviceKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of FACTS device.
    '''
    
@dataclass(repr=False)
class Insulator(Asset):
    '''
    Insulator
    '''

    OverheadStructure: Optional[OverheadStructure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OverheadStructure.Insulator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class InterrupterUnit(Asset):
    '''
    Breaker interrupter.
    Some interrupters have one fixed and one moving contact, some have 2 fixed
    contacts, some 2 moving contacts. An interrupter will have relationships
    with 2 bushings and those relationships may be any combination of the FixedContact
    and MovingContact associations.
    '''

    FixedContactBushing: list[Bushing] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Bushing.FixedContact',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bushing(s) to which the fixed contact(s) of this interrupter is(are)
    attached. Some interrupters have one fixed and one moving contact,
    some have 2 fixed contacts, some 2 moving contacts. An interrupter
    will have relationships with 2 bushings and those relationships may
    be any combination of the FixedContact and MovingContact associations.
    '''
    
    MovingContactBushing: list[Bushing] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Bushing.MovingContact',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bushing(s) to which the moving contact(s) of this interrupter is(are)
    attached. Some interrupters have one fixed and one moving contact,
    some have 2 fixed contacts, some 2 moving contacts. An interrupter
    will have relationships with 2 bushings and those relationships may
    be any combination of the FixedContact and MovingContact associations.
    '''
    
    OperatingMechanism: Optional[OperatingMechanism] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OperatingMechanism.InterrupterUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Breaker mechanism controlling this interrupter.
    '''
    
@dataclass(repr=False)
class Joint(Asset):
    '''
    Joint connects two or more cables. It includes the portion of cable under
    wipes, welds, or other seals.
    '''

    insulation: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of insulation around the joint, classified according to the
    utility's asset management standards and practices.
    '''
    
    configurationKind: Optional[ JointConfigurationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Configuration of joint.
    '''
    
    fillKind: Optional[ JointFillKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Material used to fill the joint.
    '''
    
@dataclass(repr=False)
class OperatingMechanism(Asset):
    '''
    Breaker mechanism.
    '''

    InterrupterUnit: list[InterrupterUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'InterrupterUnit.OperatingMechanism',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Interrupter controlled by this mechanism.
    '''
    
@dataclass(repr=False)
class Streetlight(Asset):
    '''
    Streetlight asset.
    '''

    armLength: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Length of arm. Note that a new light may be placed on an existing arm.
    '''
    
    lampKind: Optional[ StreetlightLampKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Lamp kind.
    '''
    
    lightRating: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power rating of light.
    '''
    
    Pole: Optional[Pole] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Pole.Streetlights',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pole to which thiss streetlight is attached.
    '''
    
@dataclass(repr=False)
class StructureSupport(Asset):
    '''
    Support for structure assets.
    '''

    size: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Size of this support structure.
    '''
    
    direction: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direction of this support structure.
    '''
    
    kind: Optional[ StructureSupportKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of structure support.
    '''
    
    length: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Length of this support structure.
    '''
    
    SecuredStructure: Optional[Structure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Structure.StructureSupports',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The secured structure supported by this structure support.
    '''
    
@dataclass(repr=False)
class Anchor(StructureSupport):
    '''
    Anchor.
    '''

    anchorRodCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of anchor rods used.
    '''
    
    anchorKind: Optional[ AnchorKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of anchor.
    '''
    
    anchorRodLength: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Length of anchor rod(s) used.
    '''
    
    OverheadStructure: Optional[OverheadStructure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OverheadStructure.Anchor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Foundation(Anchor):
    '''
    Construction type such as direct embed, screw pile, culvert, grillage,
    and caisson.
    '''

@dataclass(repr=False)
class Guy(Anchor):
    '''
    Guy wire that is made up of a steel rope, or strand, selected for each
    application by an engineer from a variety of sizes to equal to the stress
    placed upon it at that particular situation.
    '''

    attachmentHeight: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Distance between guy wire attachment point on the structure and structure
    intersection point on the ground.
    '''
    
    OverheadStructure: Optional[OverheadStructure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OverheadStructure.Guy',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Tool(Asset):
    '''
    Tool asset.
    '''

    lastCalibrationDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Date the tool was last calibrated.
    '''
    
@dataclass(repr=False)
class Vehicle(Asset):
    '''
    Vehicle asset.
    '''

    odometerReadDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time the last odometer reading was recorded.
    '''
    
    odometerReading: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Odometer reading of this vehicle as of the 'odometerReadingDateTime'.
    Refer to associated ActivityRecords for earlier readings.
    '''
    
    usageKind: Optional[ VehicleUsageKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of usage of the vehicle.
    '''
    
@dataclass(repr=False)
class AssetDeployment(IdentifiedObject):
    '''
    Deployment of asset deployment in a power system resource role.
    '''

    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.AssetDeployment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset in this deployment.
    '''
    
    likelihoodOfFailure: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Likelihood of asset failure on a scale of 1(low) to 100 (high).
    '''
    
    deploymentState: Optional[ DeploymentStateKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current deployment state of asset.
    '''
    
    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.AssetDeployment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset in this deployment.
    '''
    
    BaseVoltage: Optional[BaseVoltage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BaseVoltage.NetworkAssetDeployment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Base voltage of this network asset deployment.
    '''
    
@dataclass(repr=False)
class BreakerAssetDeployment(AssetDeployment):
    '''
    Deployment of asset deployment in a power system resource role.
    '''

    breakerApplication: Optional[ BreakerApplicationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of network role breaker is playing in this deployment (applies
    to breaker assets only).
    '''
    
@dataclass(repr=False)
class PowerTransformerAssetDeployment(AssetDeployment):
    '''
    Deployment of asset deployment in a power system resource role.
    '''

    transformerApplication: Optional[ TransformerApplicationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of network role transformer is playing in this deployment (applies
    to transformer assets only).
    '''
    
@dataclass(repr=False)
class AssetFunction(IdentifiedObject):
    '''
    Function performed by an asset.
    '''

    configuration: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the arrangement of the hardware and software settings of the
    computer system. Management of the components and settings to archive
    the desired operational functionality.
    '''
    
    firmware: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Computer firmware name and version.
    '''
    
    hardware: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Computer hardware name and version.
    '''
    
    mACAddress: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Media Access Control Address (MAC) names the arrangement of the hardware
    and software settings of the computer system.
    '''
    
    program: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Computer program name and version.
    '''
    
    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.AssetFunction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AutonomousFunction(AssetFunction):
    '''
    Autonomous function performed by an autonomous agent or other devices that
    can before decision making in an autonomous way. Example are robot or a
    bot program.
    '''

    AutonomousAgent: Optional[AutonomousAgent] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AutonomousAgent.AutonomousFunction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class EndDeviceFunction(AssetFunction):
    '''
    Function performed by an end device such as a meter, communication equipment,
    controllers, etc.
    '''

    Registers: list[Register] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Register.EndDeviceFunction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All registers for quantities metered by this end device function.
    '''
    
    enabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the function is enabled.
    '''
    
    EndDevice: Optional[EndDevice] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDevice.EndDeviceFunctions',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End device that performs this function.
    '''
    
@dataclass(repr=False)
class ComFunction(EndDeviceFunction):
    '''
    Communication function of communication equipment or a device such as a
    meter.
    '''

    amrAddress: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Communication ID number (e.g. serial number, IP address, telephone
    number, etc.) of the AMR module which serves this meter.
    '''
    
    amrRouter: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Communication ID number (e.g. port number, serial number, data collector
    ID, etc.) of the parent device associated to this AMR module.
    '''
    
    direction: Optional[ ComDirectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of communication direction.
    '''
    
    technology: Optional[ ComTechnologyKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of communication technology.
    '''
    
    ComModule: Optional[ComModule] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ComModule.ComFunctions',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Module performing this communication function.
    '''
    
@dataclass(repr=False)
class ConnectDisconnectFunction(EndDeviceFunction):
    '''
    A function that will disconnect and reconnect the customer's load under
    defined conditions.
    '''

    eventCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Running cumulative count of connect or disconnect events, for the lifetime
    of this function or until the value is cleared.
    '''
    
    isConnected: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if this function is in the connected state.
    '''
    
    isDelayedDiscon: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If set true, the switch may disconnect the service at the end of a
    specified time delay after the disconnect signal has been given. If
    set false, the switch may disconnect the service immediately after
    the disconnect signal has been given. This is typically the case for
    over current circuit-breakers which are classified as either instantaneous
    or slow acting.
    '''
    
    isLocalAutoDisconOp: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If set true and if disconnection can be operated locally, the operation
    happens automatically. Otherwise it happens manually.
    '''
    
    isLocalAutoReconOp: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If set true and if reconnection can be operated locally, then the operation
    happens automatically. Otherwise, it happens manually.
    '''
    
    isRemoteAutoDisconOp: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If set true and if disconnection can be operated remotely, then the
    operation happens automatically. If set false and if disconnection
    can be operated remotely, then the operation happens manually.
    '''
    
    isRemoteAutoReconOp: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If set true and if reconnection can be operated remotely, then the
    operation happens automatically. If set false and if reconnection can
    be operated remotely, then the operation happens manually.
    '''
    
@dataclass(repr=False)
class SimpleEndDeviceFunction(EndDeviceFunction):
    '''
    Simple end device function distinguished by 'kind'. Use this class for
    instances that cannot be represented by another end device function specialisations.
    '''

    kind: Optional[ EndDeviceFunctionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of this function.
    '''
    
@dataclass(repr=False)
class AssetInfo(IdentifiedObject):
    '''
    Set of attributes of an asset, representing typical datasheet information
    of a physical device that can be instantiated and shared in different data
    exchange contexts:
    - as attributes of an asset instance (installed or in stock)
    - as attributes of an asset model (product by a manufacturer)
    - as attributes of a type asset (generic type of an asset as used in designs/extension
    planning).
    '''

    Asset: list[Asset] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Asset.AssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All assets described by this data.
    '''
    
    ParentAssetInfoComponent: Optional[AssetInfoComponent] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfoComponent.ChildAssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ChildAssetInfoComponent: Optional[AssetInfoComponent] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfoComponent.ParentAssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CatalogAssetType: Optional[CatalogAssetType] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CatalogAssetType.AssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset information (nameplate) for this catalog asset type.
    '''
    
    PowerSystemResources: list[PowerSystemResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerSystemResource.AssetDatasheet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All power system resources with this datasheet information.
    '''
    
    ProductAssetModel: Optional[ProductAssetModel] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProductAssetModel.AssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Product asset model which conforms to this catalog asset type.
    '''
    
    AssetRequirement: Optional[AssetRequirement] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetRequirement.AssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CatalogAssetType: Optional[CatalogAssetType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CatalogAssetType.AssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset information (nameplate) for this catalog asset type.
    '''
    
    ChildAssetInfoComponent: Optional[AssetInfoComponent] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfoComponent.ParentAssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ParentAssetInfoComponent: Optional[AssetInfoComponent] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfoComponent.ChildAssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ProductAssetModel: Optional[ProductAssetModel] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProductAssetModel.AssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Product asset model which conforms to this catalog asset type.
    '''
    
@dataclass(repr=False)
class CapacitorBankInfo(AssetInfo):
    '''
    Capacitor bank asset information
    '''

@dataclass(repr=False)
class ConductingAssetInfo(AssetInfo):
    '''
    Generic information for conducting asset
    '''

    ShortCircuitRespone: list[ShortCircuitResponse] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ShortCircuitResponse.ConductingAssetInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    phaseCount: Optional[ PhaseCountKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of phases
    '''
    
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated current.
    '''
    
    ratedFrequency: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated frequency such as 50Hz or 60Hz
    '''
    
    ratedVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated voltage.
    '''
    
@dataclass(repr=False)
class BundledCableInfo(ConductingAssetInfo):
    '''
    Bundling two or more conductors, at most one bare wire.
    '''

    additionalConductorCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Additional conductor count
    '''
    
    hasNeutral: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if neutral
    '''
    
    insulatedNeutral: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if neutral wire is insulated
    '''
    
    neutralSizeDescription: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Neutral wire size description
    '''
    
    neutralStrandCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Neutral wire strand count
    '''
    
    neutralStrandRDC20: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Neutral strand DC resistance per unit length of the conductor at 20
    &#176;C
    '''
    
@dataclass(repr=False)
class BusbarSectionInfo(ConductingAssetInfo):
    '''
    Busbar section data.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'gmdm Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    ratedVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'gmdm Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
@dataclass(repr=False)
class BushingInfo(ConductingAssetInfo):
    '''
    Bushing datasheet information.
    '''

    c1Capacitance: Optional[ float | Capacitance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Factory measured capacitance, measured between the power factor tap
    and the bushing conductor.
    '''
    
    c1PowerFactor: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Factory measured insulation power factor, measured between the power
    factor tap and the bushing conductor.
    '''
    
    c2Capacitance: Optional[ float | Capacitance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Factory measured capacitance measured between the power factor tap
    and ground.
    '''
    
    c2PowerFactor: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Factory measured insulation power factor, measured between the power
    factor tap and ground.
    '''
    
    insulationKind: Optional[ BushingInsulationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of insulation.
    '''
    
    ratedImpulseWithstandVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated impulse withstand voltage, also known as BIL (Basic Impulse Level).
    '''
    
    ratedLineToGroundVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated line-to-ground voltage. Also referred to as Uy on bushing nameplate.
    '''
    
@dataclass(repr=False)
class CapacitorCanInfo(ConductingAssetInfo):
    '''
    A CapacitorCan info class is used to store asset info data for the small
    2.4 - 25 KV capacitor units which make up a capacitor bank. These cans
    are connected in series to equal the energized voltage and connected in
    parallel groups to create the desired Mvar ratings.
    '''

    dielectricFluidType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of dielectric fluid used for the capacitors (ex. WEMCOL, DPO,
    AROCLOR, etc.).
    '''
    
    dielectricFluidVolume: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Volume of dielectric fluid (oil) in litres.
    '''
    
    ratedCapacitance: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The factory rating of the capacitor cans in uF (Farads). All the capacitors
    in a capacitor bank have more or less equal capacitance coming out
    of factory.
    '''
    
    ratedReactiveRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactive power rating of the capacitor cans in KVAR at the can
    rated voltage.
    '''
    
    weight: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total weight of one capacitor can (i.e., 20kG).
    '''
    
    dischargeResistorType: Optional[ DischargeResistorKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    discharge resister installed, what type is it? (i.e. internal, external
    or not installed)
    '''
    
    fusingType: Optional[ CapacitorCanFusingKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of fusing used (i.e. internal or external). Fuses may be included
    inside the can or attached to the external terminal of the can.
    '''
    
    terminalConnectionType: Optional[ TerminalConnectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal connection of the capacitor cans (i.e. single bushing
    double bushing or triple bushing).
    '''
    
@dataclass(repr=False)
class CompensatorInfo(ConductingAssetInfo):
    '''
    Data sheet for compensation devices which can be used in a shunt or series
    application.
    Compensator can be specialized to Capacitor or Reactor.
    '''

    maxPowerLoss: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum allowed apparent power loss.
    '''
    
    ratedReactivePower: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive Power produced by the bank at rated voltage
    '''
    
@dataclass(repr=False)
class CapacitorInfo(CompensatorInfo):
    '''
    Common properties of capacitor asset which can be used in a shunt or series
    application.
    Also named as capacitor bank by IEC 60050
    '''

    maxAmbientTempRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum Operating ambient temperature (i.e., +85 DEG C).
    '''
    
    minAmbientTempRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum Operating ambient temperature (i.e., -40 DEG C).
    '''
    
    numberOfCansPerPhase: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total number of cans per phase in the capacitor bank
    '''
    
    parallelUnitsPerPhase: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per phase how many elements are connected in parallel units per series
    group.
    '''
    
    seriesGroupsPerPhase: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per phase how many series groups (or sections) in the capacitor unit
    are connected.
    '''
    
    capacitorRackType: Optional[ CapacitorRackKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rack type used (ie. Enclosed Rack or Open Rack).
    '''
    
    ratedImpulseWithstandVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Basic Insulation Level voltage in kilovolts (lightening impulse withstand
    voltage).
    '''
    
@dataclass(repr=False)
class SeriesCapacitorInfo(CapacitorInfo):
    '''
    Class for specializing CapacitorInfo when used as in a series application.
    This specialization does not require any attributes.
    '''

@dataclass(repr=False)
class ShuntCapacitorInfo(CapacitorInfo):
    '''
    Class for specializing CapacitorInfo when used as in a shunt application
    and adding attributes for this specialization.
    '''

    connectionKind: Optional[ CompensatorConnectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Connection type of the capacitor bank (i.e. wye, grounded wye or delta).
    '''
    
@dataclass(repr=False)
class FACTSInfo(CompensatorInfo):
    '''
    Flexible alternating current transmission system
    High speed reactive compensation device
    '''

    appliedHarmonicFiltering: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description of the harmonic filtering applied in the FACTS (5th order,
    7th order, etc.) There may be multiple harmonics which are filtered
    '''
    
    coolingType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The cooling type of the FACTS Device Thyristors
    ex. Air Cooled, Water Cooled
    '''
    
    capacitorHarmonicFilterRating: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total Capacitor Harmonic Filter Rating in Reactance (imaginary part
    of impedance), at rated frequency provided in the applied harmonic
    filtering
    '''
    
    maxCapacitiveReactance: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Capacitive Reactance - Maximum Capacitive reactive impedance the FACTS
    can supply
    '''
    
    maxInductiveReactance: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive Reactance - Maximum inductive reactive impedance the FACTS
    can supply
    '''
    
    maxMechanicalSwitchedCapacitance: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total capacitor's reactive impedance of mechanically switched Capacitors
    under the control of the FACTS. Capacitors may be switched by breakers
    or circuit switchers.
    '''
    
    maxMechanicalSwitchedReactance: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total inductor's reactive impedance of mechanically switched Reactors
    under the control of the FACTS. Reactors may be switched by breakers
    or circuit switchers.
    '''
    
    nomU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated Voltage for the shunt capacitors and reactors in the FACTS device.
    '''
    
    reactorHarmonicFilterRating: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total Reactor Harmonic Filter Rating in Reactance (imaginary part of
    impedance), at rated frequency provided in the applied harmonic filtering.
    '''
    
@dataclass(repr=False)
class SVCInfo(FACTSInfo):
    '''
    Static Var Compensator - High speed switched reactor and capacitor.
    '''

    svcReactiveControlType: Optional[ SVCReactiveControlKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An SVC can either be set to control the voltage of a bus or provide
    contant Mvar to the bus.
    '''
    
    tcrRating: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rating in reactance if the Static Var Compensator has a Thyristor Switched
    Reactor
    '''
    
    tscRating: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rating in reactance if the Static Var Compensator has a Thyristor Switched
    Capacitor
    '''
    
@dataclass(repr=False)
class SelfSaturatedReactorInfo(SVCInfo):
    '''
    Inductor made up of a transformer like core. The secondary winding is driven
    by a DC source to saturate the AC winding.
    Shunt Capacitor in addition to saturated inductor provide Mvars to increase
    and decrease voltage.
    This is pretty old technology.
    '''

    fixedSeriesCapacitance: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Slope correcting capacitor rating in reactance which is connected in
    series with the self saturated reactor.
    '''
    
    fixedShuntCapacitance: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Shunt connected capacitors rating in reactance which are used to provide
    negative reactance for voltage support.
    '''
    
@dataclass(repr=False)
class StatComInfo(FACTSInfo):
    '''
    StatCom - Static Synchronous Compensator High speed continuous reactor
    and capacitor.
    '''

    activePowerSourceType: Optional[ ActivePowerSourceKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Enumeration used to designate the type of Active power source used
    by the STATCOM.
    '''
    
    dcConverterType: Optional[ STATCOMKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type DC to AC converter unit providing the AC compensation
    '''
    
    maxNegativeMW: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If an active power source is available in the STATCOM, the Maximum
    MW that the STATCOM can absorb from the grid
    '''
    
    maxPositiveMW: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If an active power source is available in the STATCOM, the Maximum
    MW that the STATCOM can provide to the grid
    '''
    
    powerElectronicsGateType: Optional[ PowerElectronicsGateKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of electronics used for the series gates.
    '''
    
@dataclass(repr=False)
class ReactorInfo(CompensatorInfo):
    '''
    Common properties of reactor asset which can be used in a shunt or series
    application. Reactors may be dry type or oil filled.
    '''

    coreCoilsWeight: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Weight of the core and coils of the device in kilograms.
    '''
    
    oilType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type or designation of oil used for the dielectric medium (ex. VoltEsso,
    Nynas, Luminol, etc.).
    '''
    
    oilWeight: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Weight of all the oil in the device in kilograms.
    '''
    
    ratedInductance: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inductance of device in mH - Milli-Henry.
    '''
    
    ratedMechanicalCurrent: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The amount of current that creates the maximum allowable force in the
    conductor of a reactor.
    '''
    
    ratedThermalCurrent: Optional[float] = field(
        default=None,
        metadata={
        'type': 'NeedsWork Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum current the device can withstand for a period of one second.
    '''
    
    tankAndFittingsWeight: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Weight of the tanks and fittings of the device in kilograms.
    '''
    
    temperatureClass: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Insulation class based on temperature (ie: Y, A, E, B, F, N, H, C).
    '''
    
    temperatureRise: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Temperature rise of equipment over ambient in degrees Celsius.
    '''
    
    volumeOfOil: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Volume of oil in litres.
    '''
    
    circulationAndCoolingType: Optional[ CirculationAndCoolingKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The method used to cool the shunt reactor, O: oil; A: air; N: natural;
    F: forced (ie: ON, ONAN, ONAF or OFAF).
    '''
    
    coreType: Optional[ ReactorCoreKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of core of the reactor. Example Air, steel, concrete
    '''
    
    insulationMedium: Optional[ ReactorInsulationMediumKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This property denotes whether the reactor is air or oil.
    '''
    
    oilPreservationType: Optional[ OilPreservationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of oil preservation.
    '''
    
    ratedImpulseWithstandVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Basic Insulation Level voltage in kilovolts (lightening impulse withstand
    voltage).
    '''
    
@dataclass(repr=False)
class SeriesReactorInfo(ReactorInfo):
    '''
    Class for specializing ReactorInfo when used as in a series application.
    This specialization does not require any attributes.
    '''

@dataclass(repr=False)
class ShuntReactorInfo(ReactorInfo):
    '''
    Class for specializing ReactorInfo when used as in a shunt application
    and adding attributes for this specialization.
    '''

    TapChangerInfo: Optional[TapChangerInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TapChangerInfo.ShuntReactorInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CompositeSwitchInfo(ConductingAssetInfo):
    '''
    Properties of a composite switch.
    '''

    ganged: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if multi-phase switch controls all phases concurrently.
    '''
    
    initOpMode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Initial operating mode, with the following values: Automatic, Manual.
    '''
    
    phaseCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Supported number of phases, typically 0, 1 or 3.
    '''
    
    remote: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if device is capable of being operated by remote control.
    '''
    
    switchStateCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of switch states represented by the composite switch.
    '''
    
    interruptingRating: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Breaking capacity, or short circuit rating, is the maximum rated current
    which the device can safely interrupt at the rated voltage.
    '''
    
    kind: Optional[ CompositeSwitchKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of composite switch.
    '''
    
    phaseCode: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phases carried, if applicable.
    '''
    
    ratedVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated voltage.
    '''
    
@dataclass(repr=False)
class ConductorInfo(ConductingAssetInfo):
    '''
    Common class for rigid and flexible conductors.
    [IEC 826-14-06]: Conductive part intended to carry a specified electric
    current
    '''

    purpose: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase, neutral, lighting, or something else
    '''
    
    crossSection: Optional[ float | Area ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Area of conducting material cross section
    '''
    
    material: Optional[ WireMaterialKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conductor material.
    '''
    
    rAC25: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    AC resistance per unit length of the conductor at 25 �C.
    '''
    
    rAC50: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    AC resistance per unit length of the conductor at 50 �C.
    '''
    
    rAC75: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    AC resistance per unit length of the conductor at 75 �C.
    '''
    
    rDC20: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC resistance per unit length of the conductor at 20 �C.
    '''
    
@dataclass(repr=False)
class RigidBusbarInfo(ConductorInfo):
    '''
    Rigid busbar information.
    <u>Definition</u>
    [IEC 605-02-21]: A substation busbar which is made up with metallic tubes
    or bars and which is supported by insulator posts
    https://www.electropedia.org/iev/iev.nsf/display?openform&amp;ievref=605-02-21
    '''

@dataclass(repr=False)
class AngleBusbarInfo(RigidBusbarInfo):
    '''
    L-shape bar with both legs of uniform thickness and same width
    '''

    crossSectionWidth: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cross section width of the conductor
    '''
    
    thickness: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Thickness of the angle bus bar
    '''
    
@dataclass(repr=False)
class BarBusbarInfo(RigidBusbarInfo):
    '''
    One rectangular slab with uniform thickness and width
    '''

    crossSectionWidth: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cross section width of the conductor
    '''
    
    thickness: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Thickness of bar busbar
    '''
    
@dataclass(repr=False)
class IntegralWebBusbarInfo(RigidBusbarInfo):
    '''
    I-beam type of conductor with the outer edges, turned into each other.
    '''

    crossSectionHeight: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cross section width of the conductor
    '''
    
    crossSectionWidth: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cross section width of the conductor
    '''
    
    thickness: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Thickness
    '''
    
@dataclass(repr=False)
class TubeBusbarInfo(RigidBusbarInfo):
    '''
    Tube busbar information
    '''

    outerDiameter: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Outer diameter
    '''
    
    wallThickness: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Wall thickness
    '''
    
@dataclass(repr=False)
class PipeBusbarInfo(TubeBusbarInfo):
    '''
    Pipe busbar information
    '''

    pipeType: Optional[ PipeBusbarKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    For cylindrical hollow rigid conductor only. Rigid cylindrical conductor
    comes in two types. Pipe Type cylindrical bus is based around schedule
    types such as Schedule 40 and schedule 80. The wall thickness is determined
    by the schedule number. Currently schedule 40 and schedule 80 are commonly
    used.
    '''
    
@dataclass(repr=False)
class WireInfo(ConductorInfo):
    '''
    Wire data that can be specified per line segment phase, or for the line
    segment as a whole in case its phases all have the same wire characteristics.
    '''

    ACLineSegmentPhase: list[ACLineSegmentPhase] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACLineSegmentPhase.WireInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    WirePhaseInfo: list[WirePhaseInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'WirePhaseInfo.WireInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Wire phase information associated with this wire information.
    '''
    
    coreStrandCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if used) Number of strands in the steel core.
    '''
    
    sizeDescription: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Describes the wire gauge or cross section (e.g., 4/0, #2, 336.5).
    '''
    
    strandCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of strands in the conductor.
    '''
    
    coreRadius: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if there is a different core material) Radius of the central core.
    '''
    
    gmr: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Geometric mean radius. If we replace the conductor by a thin walled
    tube of radius GMR, then its reactance is identical to the reactance
    of the actual conductor.
    '''
    
    radius: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Outside radius of the wire.
    '''
    
@dataclass(repr=False)
class BareWireInfo(WireInfo):
    '''
    Bare wire data.
    '''

    wireConstructionKind: Optional[ WireConstructionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of wire construction
    '''
    
@dataclass(repr=False)
class CableInfo(WireInfo):
    '''
    Cable data.
    '''

    InsulationInfo: Optional[InsulationInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InsulationInfo.CableInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    isStrandFill: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if wire strands are extruded in a way to fill the voids in the
    cable.
    '''
    
    isSubmarine: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'gmdm Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    sheathAsNeutral: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if sheath / shield is used as a neutral (i.e., bonded).
    '''
    
    constructionKind: Optional[ CableConstructionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of construction of this cable.
    '''
    
    diameterOverCore: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Diameter over the core, including any semi-con screen; should be the
    insulating layer's inside diameter.
    '''
    
    diameterOverInsulation: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Diameter over the insulating layer, excluding outer screen.
    '''
    
    diameterOverJacket: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Diameter over the outermost jacketing layer.
    '''
    
    diameterOverScreen: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Diameter over the outer screen; should be the shield's inside diameter.
    '''
    
    nominalTemperature: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum nominal design operating temperature.
    '''
    
    outerJacketKind: Optional[ CableOuterJacketKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of outer jacket of this cable.
    '''
    
    shieldMaterial: Optional[ CableShieldMaterialKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Material of the shield.
    '''
    
    InsulationInfo: Optional[InsulationInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InsulationInfo.CableInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ConcentricNeutralCableInfo(CableInfo):
    '''
    Concentric neutral cable data.
    '''

    neutralStrandCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of concentric neutral strands.
    '''
    
    diameterOverNeutral: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Diameter over the concentric neutral strands.
    '''
    
    neutralStrandGmr: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Geometric mean radius of the neutral strand.
    '''
    
    neutralStrandRadius: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Outside radius of the neutral strand.
    '''
    
    neutralStrandRDC20: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC resistance per unit length of the neutral strand at 20 �C.
    '''
    
@dataclass(repr=False)
class MultiCoreCableInfo(CableInfo):
    '''
    Multi core cable information
    '''

    hasNeutral: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if neutral is included
    '''
    
    neutralStrandCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Neutral wire strand count
    '''
    
    phaseCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase count
    '''
    
    neutralStrandRDC20: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Neutral strand DC resistance per unit length of the conductor at 20
    &#176;C
    '''
    
@dataclass(repr=False)
class TapeShieldCableInfo(CableInfo):
    '''
    Tape shield cable data.
    '''

    tapeLap: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of the tape shield width that overlaps in each wrap, typically
    10% to 25%.
    '''
    
    tapeThickness: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Thickness of the tape shield, before wrapping.
    '''
    
@dataclass(repr=False)
class OverheadWireInfo(WireInfo):
    '''
    Overhead wire data.
    '''

    wireConstructionKind: Optional[ WireConstructionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute add',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class GridEdgeDeviceInfo(ConductingAssetInfo):
    '''
    A Grid Edge Device is any device that is connected to the power grid with
    the ability to produce, store, and/or variably consume electricity. This
    include devices like local generation (solar photovoltaic and wind), storage
    (chemical or electrical batteries), flexible loads (heading, cooling, lighting
    systems), and electric vehicles (essentially a combination of storage and
    flexible load)
    '''

    apparentPowerMaximum: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Apparent power maximum rating</i>
    <i>
    </i>Maximum apparent power rating in voltamperes
    '''
    
    ratedVoltageMax: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>AC voltage maximum rating</i>
    Maximum AC voltage rating in RMS volts
    '''
    
    ratedVoltageMin: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>AC voltage minimum rating</i>
    Minimum AC voltage rating in RMS volts
    '''
    
@dataclass(repr=False)
class InverterInfo(GridEdgeDeviceInfo):
    '''
    Inverter-based devices are a type of Grid Edge Device which convert DC
    sources (and/or sinks) into AC sources (and/or sinks) allowing for the
    power to be synchronized to the grid.
    '''

    powerFactorOverExcited: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Specified over-excited power factor</i>
    Over-excited power factor
    '''
    
    powerFactorUnderExcited: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Specified under-excited power factor</i>
    Under-excited power factor
    '''
    
    activePowerRatingOverExcited: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Active power rating at specified over-excited power factor</i>
    Active power rating in watts at specified over-excited power factor
    '''
    
    activePowerRatingUnderExcited: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Active power rating at specified under-excited power factor</i>
    Active power rating in watts at specified under-excited power factor
    '''
    
    activePowerRatingUnityPowerFactor: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Active power rating at unity power factor (nameplate active power
    rating)</i>
    Active power rating in watts at unity power factor
    '''
    
    reactivePowerAbsorbedMax: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Reactive power absorbed maximum rating</i>
    Maximum absorbed reactive power rating in vars
    '''
    
    reactivePowerInjectedMax: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Reactive power injected maximum rating</i>
    Maximum injected reactive power rating in vars
    '''
    
    susceptanceOffline: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Reactive susceptance that remains connected to the Area EPS in the
    cease to energize and trip state</i>
    '''
    
    InverterCapabilites: Optional[InverterCapabilities] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InverterCapabilities.IntervalInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class GenerationInverterInfo(InverterInfo):
    '''
    A Generation Inverter is an inverter backed by a source that is capable
    of generating electricity from an external source such as solar radiation,
    wind, or other fuels.
    '''

@dataclass(repr=False)
class StorageInverterInfo(InverterInfo):
    '''
    A Storage Inverter is an inverter backed by a device that is capable of
    storing and later discharging electric energy.
    '''

    chargeRateActiveMax: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Active power charge maximum rating</i>
    Maximum active power charge rating in watts
    '''
    
    chargeRateReactiveMax: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Apparent power charge maximum rating</i>
    Maximum apparent power charge rating in voltamperes. May differ from
    the apparent power maximum rating
    '''
    
    storageCapacity: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class SwitchInfo(ConductingAssetInfo):
    '''
    Switch datasheet information.
    '''

    isSinglePhase: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, it is a single phase switch.
    '''
    
    isUnganged: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, the switch is not ganged (i.e., a switch phase may be operated
    separately from other phases).
    '''
    
    breakingCapacity: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum fault current a breaking device can break safely under
    prescribed conditions of use.
    '''
    
    lowPressureAlarm: Optional[ float | Pressure ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Gas or air pressure at or below which a low pressure alarm is generated.
    '''
    
    lowPressureLockOut: Optional[ float | Pressure ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Gas or air pressure below which the breaker will not open.
    '''
    
    oilVolumePerTank: Optional[ float | Volume ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Volume of oil in each tank of bulk oil breaker.
    '''
    
    ratedFrequency: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Frequency for which switch is rated.
    '''
    
    ratedImpulseWithstandVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated impulse withstand voltage, also known as BIL (Basic Impulse Level).
    '''
    
    ratedInterruptingTime: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Switch rated interrupting time in seconds.
    '''
    
@dataclass(repr=False)
class TapChangerInfo(ConductingAssetInfo):
    '''
    Tap changer data.
    '''

    ShuntReactorInfo: list[ShuntReactorInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ShuntReactorInfo.TapChangerInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ctRatio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Built-in current transducer ratio.
    '''
    
    highStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Highest possible tap step position, advance from neutral.
    '''
    
    isTcul: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Whether this tap changer has under load tap changing capabilities.
    '''
    
    lowStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Lowest possible tap step position, retard from neutral.
    '''
    
    neutralStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The neutral tap step position for the winding.
    '''
    
    ptRatio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Built-in voltage transducer ratio.
    '''
    
    bil: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Basic Insulation Level (BIL) expressed as the impulse crest voltage
    of a nominal wave, typically 1.2 X 50 microsecond. This is a measure
    of the ability of the insulation to withstand very high voltage surges.
    '''
    
    ctRating: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Built-in current transformer primary rating.
    '''
    
    frequency: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Frequency at which the ratings apply.
    '''
    
    neutralU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage at which the winding operates at the neutral tap setting.
    '''
    
    ratedApparentPower: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated apparent power.
    '''
    
    stepPhaseIncrement: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase shift per step position.
    '''
    
    stepReactiveIncrement: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tap step increment, in per cent of rated Mvar, per step position.
    '''
    
    stepVoltageIncrement: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tap step increment, in per cent of rated voltage, per step position.
    '''
    
@dataclass(repr=False)
class TransformerEndInfo(ConductingAssetInfo):
    '''
    Transformer end data.
    '''

    EnergisedEndNoLoadTests: list[NoLoadTest] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'NoLoadTest.EnergisedEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All no-load test measurements in which this transformer end was energised.
    '''
    
    EnergisedEndOpenCircuitTests: list[OpenCircuitTest] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OpenCircuitTest.EnergisedEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All open-circuit test measurements in which this transformer end was
    excited.
    '''
    
    OpenEndOpenCircuitTests: list[OpenCircuitTest] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OpenCircuitTest.OpenEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All open-circuit test measurements in which this transformer end was
    not excited.
    '''
    
    EnergisedEndShortCircuitTests: list[ShortCircuitTest] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ShortCircuitTest.EnergisedEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All short-circuit test measurements in which this transformer end was
    energised.
    '''
    
    GroundedEndShortCircuitTests: list[ShortCircuitTest] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ShortCircuitTest.GroundedEnds',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All short-circuit test measurements in which this transformer end was
    short-circuited.
    '''
    
    CoreAdmittance: Optional[TransformerCoreAdmittance] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerCoreAdmittance.TransformerEndInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Core admittance calculated from this transformer end datasheet, representing
    magnetising current and core losses. The full values of the transformer
    should be supplied for one transformer end info only.
    '''
    
    FromMeshImpedances: list[TransformerMeshImpedance] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerMeshImpedance.FromTransformerEndInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All mesh impedances between this 'to' and other 'from' transformer
    ends.
    '''
    
    TransformerStarImpedance: Optional[TransformerStarImpedance] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerStarImpedance.TransformerEndInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer star impedance calculated from this transformer end datasheet.
    '''
    
    endNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number for this transformer end, corresponding to the end's order in
    the PowerTransformer.vectorGroup attribute. Highest voltage winding
    should be 1.
    '''
    
    phaseAngleClock: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Winding phase angle where 360 degrees are represented with clock hours,
    so the valid values are {0, ..., 11}. For example, to express the second
    winding in code 'Dyn11', set attributes as follows: 'endNumber'=2,
    'connectionKind' = Yn and 'phaseAngleClock' = 11.
    '''
    
    connectionKind: Optional[ WindingConnection ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of connection.
    '''
    
    emergencyS: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Apparent power that the winding can carry under emergency conditions
    (also called long-term emergency power).
    '''
    
    insulationU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Basic insulation level voltage rating.
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC resistance.
    '''
    
    ratedS: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal apparent power rating.
    '''
    
    shortTermS: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Apparent power that this winding can carry for a short period of time
    (in emergency).
    '''
    
    CoreAdmittance: Optional[TransformerCoreAdmittance] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerCoreAdmittance.TransformerEndInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Core admittance calculated from this transformer end datasheet, representing
    magnetising current and core losses. The full values of the transformer
    should be supplied for one transformer end info only.
    '''
    
    TransformerStarImpedance: Optional[TransformerStarImpedance] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerStarImpedance.TransformerEndInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer star impedance calculated from this transformer end datasheet.
    '''
    
    TransformerTankInfo: Optional[TransformerTankInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerTankInfo.TransformerEndInfos',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer tank data that this end description is part of.
    '''
    
@dataclass(repr=False)
class CoolingInfo(AssetInfo):
    '''
    Cooling information
    '''

    typeOfCooling: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of cooling.
    '''
    
    Specification: Optional[Specification] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Specification.CoolingInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CrossarmInfo(AssetInfo):
    '''
    Cross arm information
    '''

@dataclass(repr=False)
class DamperInfo(AssetInfo):
    '''
    Damper asset information
    '''

@dataclass(repr=False)
class EndDeviceInfo(AssetInfo):
    '''
    End device data.
    '''

    EndDevices: list[EndDevice] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDevice.EndDeviceInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All end devices described with this data.
    '''
    
    isSolidState: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, this is a solid state end device (as opposed to a mechanical
    or electromechanical device).
    '''
    
    phaseCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of potential phases the end device supports, typically 0, 1
    or 3.
    '''
    
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated current.
    '''
    
    ratedVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated voltage.
    '''
    
@dataclass(repr=False)
class InsulationInfo(AssetInfo):
    '''
    Wire data that can be specified per line segment phase, or for the line
    segment as a whole in case its phases all have the same wire characteristics.
    '''

    CableInfo: Optional[CableInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CableInfo.InsulationInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    insulated: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if conductor is insulated.
    '''
    
    insulationMaterial: Optional[ WireInsulationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if insulated conductor) Material used for insulation.
    '''
    
    insulationThickness: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if insulated conductor) Thickness of the insulation.
    '''
    
    CableInfo: Optional[CableInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CableInfo.InsulationInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class InsulatorInfo(AssetInfo):
    '''
    Insulator information
    '''

@dataclass(repr=False)
class InterrupterUnitInfo(AssetInfo):
    '''
    Interrupter datasheet information.
    '''

    interruptingMedium: Optional[ InterruptingMediumKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Interrupting medium.
    '''
    
@dataclass(repr=False)
class OperatingMechanismInfo(AssetInfo):
    '''
    Breaker operating mechanism datasheet information.
    '''

    closeAmps: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Close current (nominal).
    '''
    
    closeVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Close voltage in volts DC.
    '''
    
    mechanismKind: Optional[ OperatingMechanismKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of breaker operating mechanism.
    '''
    
    motorRunCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated motor run current in amps.
    '''
    
    motorStartCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated motor start current in amps.
    '''
    
    motorVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Nominal motor voltage in volts DC.
    '''
    
    tripAmps: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Trip current (nominal).
    '''
    
    tripVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Trip voltage in volts DC.
    '''
    
@dataclass(repr=False)
class PoleAssetInfo(AssetInfo):
    '''
    Pole asset data sheet.
    '''

@dataclass(repr=False)
class PowerTransformerInfo(AssetInfo):
    '''
    Set of power transformer data, from an equipment library.
    '''

    TransformerTankInfos: list[TransformerTankInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerTankInfo.PowerTransformerInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Data for all the tanks described by this power transformer data.
    '''
    
@dataclass(repr=False)
class ShuntCompensatorInfo(AssetInfo):
    '''
    Properties of shunt capacitor, shunt reactor or switchable bank of shunt
    capacitor or reactor assets.
    '''

    maxPowerLoss: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum allowed apparent power loss.
    '''
    
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated current.
    '''
    
    ratedReactivePower: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated reactive power.
    '''
    
    ratedVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated voltage.
    '''
    
    ShuntCompensatorControl: Optional[ShuntCompensatorControl] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShuntCompensatorControl.ShuntCompensatorInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class SoundInfo(AssetInfo):
    '''
    Sound information
    '''

    minSoundPressureLevel: Optional[ float | Pressure ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum sound pressure level.
    '''
    
    Specification: Optional[Specification] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Specification.SoundInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class StructureInfo(AssetInfo):
    '''
    Structure information
    '''

    hasTemperatureMeasurement: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if structure includes a temperature measurement.
    '''
    
    hasVentilation: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if vault is ventilating.
    '''
    
    material: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Material this structure is made of.
    '''
    
    materialKind: Optional[ StructureMaterialKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Material this structure is made of.
    '''
    
    ratedVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum rated voltage of the equipment that can be mounted on/contained
    within the structure.
    '''
    
    ConstructedDimensions: Optional[DimensionsInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DimensionsInfo.ConstructedStructureInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TransportDimensionsInfo: Optional[DimensionsInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Dimension.TransportStructureInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarineStructureInfo(StructureInfo):
    '''
    Marine structure information.
    '''

    kind: Optional[ MarineStructureKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of submarine structure.
    '''
    
@dataclass(repr=False)
class OverheadStructureInfo(StructureInfo):
    '''
    Overhead structure information
    '''

@dataclass(repr=False)
class UndergroundStructureInfo(StructureInfo):
    '''
    Underground structure information
    '''

    kind: Optional[ UndergroundStructureKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of underground structure
    '''
    
@dataclass(repr=False)
class SurfaceTreatmentInfo(AssetInfo):
    '''
    Surface treatment information
    '''

    galvanizationThickness: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Galvanization thickness.
    '''
    
    paintThickness: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Paint thickness.
    '''
    
    Specification: Optional[Specification] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Specification.SurfaceTreatmentInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ToolInfo(AssetInfo):
    '''
    Type of tool needed to perform a certain type of work.
    '''

    toolType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of the tool
    '''
    
@stereotype(CIMStereotype.gmdm)
@dataclass(repr=False)
class TransformerTankInfo(AssetInfo):
    '''
    Set of transformer tank data, from an equipment library.
    '''

    TransformerEndInfos: list[TransformerEndInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerEndInfo.TransformerTankInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Data for all the ends described by this transformer tank data.
    '''
    
    TransformerTanks: list[TransformerTank] = field(
        default_factory=list,
        metadata={
        'type': 'gmdm',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerTank.TransformerTankInfo',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    PowerTransformerInfo: Optional[PowerTransformerInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerTransformerInfo.TransformerTankInfos',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power transformer data that this tank description is part of.
    '''
    
@dataclass(repr=False)
class VehicleInfo(AssetInfo):
    '''
    Type of vehicle needed to perform certain type of work.
    '''

    vehicleType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of vehicle.
    '''
    
@dataclass(repr=False)
class WireAssemblyInfo(AssetInfo):
    '''
    Describes the construction of a multi-conductor wire.<-NOTE: period missing.
    '''

    PerLengthLineParameter: list[PerLengthLineParameter] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PerLengthLineParameter.WireAssemblyInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per length line parameter associated with this wire assembly.
    '''
    
    WirePhaseInfo: list[WirePhaseInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'WirePhaseInfo.WireAssemblyInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Wire phase information associated with this wire assembly.
    '''
    
@stereotype(CIMStereotype.deprecated)
@dataclass(repr=False)
class WireSpacingInfo(AssetInfo):
    '''
    Wire spacing data that associates multiple wire positions with the line
    segment, and allows to calculate line segment impedances. Number of phases
    can be derived from the number of associated wire positions whose phase
    is not neutral.
    '''

    ACLineSegment: list[ACLineSegment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACLineSegment.WireSpacingInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    WirePositions: list[WirePosition] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'WirePosition.WireSpacingInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All positions of single wires (phase or neutral) making the conductor.
    '''
    
    isCable: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, this spacing data describes a cable.
    '''
    
    phaseWireCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'modify Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of wire sub-conductors in the symmetrical bundle (typically
    between 1 and 4).
    '''
    
    phaseWireSpacing: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'modify Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Distance between wire sub-conductors in a symmetrical bundle.
    '''
    
    usage: Optional[ WireUsageKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Usage of the associated wires.
    '''
    
    DuctBank: Optional[DuctBank] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DuctBank.WireSpacingInfos',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AssetInfoComponent(IdentifiedObject):
    '''
    Components of an asset info
    '''

    ParentAssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.ChildAssetInfoComponent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ChildAssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.ParentAssetInfoComponent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of component
    '''
    
    ChildAssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.ParentAssetInfoComponent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ParentAssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.ChildAssetInfoComponent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AssetRequirement(IdentifiedObject):
    '''
    This is an asset requirement information defined by designed (product procurer).
    It is related to AssetInfo.
    '''

    AssetInfo: list[AssetInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AssetInfo.AssetRequirement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Weight: list[Weight] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Weight.AssetSpecification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of an asset requirement.
    '''
    
    Specification: Optional[Specification] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Specification.AssetRequirement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AsynchronousMachineDynamics(IdentifiedObject):
    '''
    Asynchronous machine whose behaviour is described by reference to a standard
    model expressed in either time constant reactance form or equivalent circuit
    form <font color="#0f0f0f">or by definition of a user-defined model.</font>
    Parameter details:
    <ol>
    <li>Asynchronous machine parameters such as <i>Xl, Xs,</i> etc. are actually
    used as inductances in the model, but are commonly referred to as reactances
    since, at nominal frequency, the PU values are the same. However, some
    references use the symbol <i>L</i> instead of <i>X</i>.</li>
    </ol>
    '''

    AsynchronousMachine: Optional[AsynchronousMachine] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AsynchronousMachine.AsynchronousMachineDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asynchronous machine to which this asynchronous machine dynamics model
    applies.
    '''
    
@dataclass(repr=False)
class Auction(IdentifiedObject):
    '''
    A class providing the identification and type of an auction.
    '''

    allocationMode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identification of the method of allocation in an auction.
    '''
    
    cancelled: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An indicator that signifies that the auction has been cancelled.
    '''
    
    category: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The product category of an auction.
    '''
    
    paymentTerms: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terms which dictate the determination of the bid payment price.
    '''
    
    rights: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The rights of use the transmission capacity acquired in an auction.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of the Auction (e.g. implicit, explicit ...).
    '''
    
@dataclass(repr=False)
class BaseFrequency(IdentifiedObject):
    '''
    The BaseFrequency class describes a base frequency for a power system network.
    In case of multiple power networks with different frequencies, e.g. 50
    Hz or 60 Hz each network will have its own base frequency class. Hence
    it is assumed that power system objects having different base frequencies
    appear in separate documents where each document has a single base frequency
    instance.
    '''

    frequency: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The base frequency.
    '''
    
@dataclass(repr=False)
class BasePower(IdentifiedObject):
    '''
    The BasePower class defines the base power used in the per unit calculations.
    '''

    basePower: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value used as base power.
    '''
    
@dataclass(repr=False)
class BaseVoltage(IdentifiedObject):
    '''
    Defines a system base voltage which is referenced. This may be different
    than the rated voltage.
    '''

    NetworkAssetDeployment: list[AssetDeployment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AssetDeployment.BaseVoltage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A network asset deployment at this base voltage level.
    '''
    
    ConductingEquipment: list[ConductingEquipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConductingEquipment.BaseVoltage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All conducting equipment with this base voltage. Use only when there
    is no voltage level container used and only one base voltage applies.
    For example, not used for transformers.
    '''
    
    TopologicalNode: list[TopologicalNode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TopologicalNode.BaseVoltage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The topological nodes at the base voltage.
    '''
    
    TransformerEnds: list[TransformerEnd] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerEnd.BaseVoltage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer ends at the base voltage. This is essential for PU calculation.
    '''
    
    VoltageLevel: list[VoltageLevel] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'VoltageLevel.BaseVoltage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage levels having this base voltage.
    '''
    
    nominalVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The power system resource's base voltage, expressed on a phase-to-phase
    (line-to-line) basis. Shall be a positive value and not zero.
    '''
    
@dataclass(repr=False)
class BasicIntervalSchedule(IdentifiedObject):
    '''
    Schedule of values at points in time.
    '''

    startTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time for the first time point. The value can be a time of day,
    not a specific date.
    '''
    
    value1Description: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description for value1.
    '''
    
    value2Description: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description for value2.
    '''
    
    value3Description: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description for value3.
    '''
    
    value1Multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiplier for value1.
    '''
    
    value1Unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value1 units of measure.
    '''
    
    value2Multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiplier for value2.
    '''
    
    value2Unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value2 units of measure.
    '''
    
    value3Multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiplier for value3.
    '''
    
    value3Unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value3 units of measure.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class IrregularIntervalSchedule(BasicIntervalSchedule):
    '''
    The schedule has time points where the time between them varies.
    '''

    TimePoints: list[IrregularTimePoint] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IrregularTimePoint.IntervalSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The point data values that define a curve.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class RegularIntervalSchedule(BasicIntervalSchedule):
    '''
    The schedule has time points where the time between them is constant.
    '''

    TimePoints: list[RegularTimePoint] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegularTimePoint.IntervalSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The regular interval time point data values that define this schedule.
    '''
    
    endTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time for the last time point. The value can be a time of day, not
    a specific date.
    '''
    
    timeStep: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time between each pair of subsequent regular time points in sequence
    order.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class GenUnitOpSchedule(RegularIntervalSchedule):
    '''
    The generating unit's Operator-approved current operating schedule (or
    plan), typically produced with the aid of unit commitment type analyses.
    The X-axis represents absolute time. The Y1-axis represents the status
    (0=off-line and unavailable: 1=available: 2=must run: 3=must run at fixed
    power value: etc.). The Y2-axis represents the must run fixed power value
    where required.
    '''

    GeneratingUnit: Optional[GeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GeneratingUnit.GenUnitOpSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A generating unit may have an operating schedule, indicating the planned
    operation of the unit.
    '''
    
    GeneratingUnit: Optional[GeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GeneratingUnit.GenUnitOpSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A generating unit may have an operating schedule, indicating the planned
    operation of the unit.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class HydroPumpOpSchedule(RegularIntervalSchedule):
    '''
    The hydro pump's Operator-approved current operating schedule (or plan),
    typically produced with the aid of unit commitment type analyses. The unit's
    operating schedule status is typically given as: (0=unavailable) (1=available
    to startup or shutdown) (2=must pump).
    '''

    HydroPump: Optional[HydroPump] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroPump.HydroPumpOpSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro pump has a pumping schedule over time, indicating when pumping
    is to occur.
    '''
    
    HydroPump: Optional[HydroPump] = field(
        default=None,
        metadata={
        'type': 'OfAggregate NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroPump.HydroPumpOpSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro pump has a pumping schedule over time, indicating when pumping
    is to occur.
    '''
    
@dataclass(repr=False)
class InflowForecast(RegularIntervalSchedule):
    '''
    Natural water inflow to a reservoir, usually forecasted from predicted
    rain and snowmelt. Typically in one hour increments for up to 10 days.
    The forecast is given in average cubic meters per second over the time
    increment.
    '''

    Reservoir: Optional[Reservoir] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Reservoir.InflowForecasts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may have a "natural" inflow forecast.
    '''
    
@dataclass(repr=False)
class SeasonDayTypeSchedule(RegularIntervalSchedule):
    '''
    A time schedule covering a 24 hour period, with curve data for a specific
    type of season and day.
    '''

    DayType: Optional[DayType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DayType.SeasonDayTypeSchedules',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DayType for the Schedule.
    '''
    
    Season: Optional[Season] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Season.SeasonDayTypeSchedules',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Season for the Schedule.
    '''
    
@dataclass(repr=False)
class ConformLoadSchedule(SeasonDayTypeSchedule):
    '''
    A curve of load versus time (X-axis) showing the active power values (Y1-axis)
    and reactive power (Y2-axis) for each unit of the period covered. This
    curve represents a typical pattern of load over the time period for a given
    day type and season.
    '''

    ConformLoadGroup: Optional[ConformLoadGroup] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConformLoadGroup.ConformLoadSchedules',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ConformLoadGroup where the ConformLoadSchedule belongs.
    '''
    
@dataclass(repr=False)
class NonConformLoadSchedule(SeasonDayTypeSchedule):
    '''
    An active power (Y1-axis) and reactive power (Y2-axis) schedule (curves)
    versus time (X-axis) for non-conforming loads, e.g., large industrial load
    or power station service (where modelled).
    '''

    NonConformLoadGroup: Optional[NonConformLoadGroup] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'NonConformLoadGroup.NonConformLoadSchedules',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The NonConformLoadGroup where the NonConformLoadSchedule belongs.
    '''
    
@dataclass(repr=False)
class RegulationSchedule(SeasonDayTypeSchedule):
    '''
    A pre-established pattern over time for a controlled variable, e.g., busbar
    voltage.
    '''

    VoltageControlZones: list[VoltageControlZone] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'VoltageControlZone.RegulationSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A VoltageControlZone may have a voltage regulation schedule.
    '''
    
    RegulatingControl: Optional[RegulatingControl] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegulatingControl.RegulationSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Regulating controls that have this schedule.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class SwitchSchedule(SeasonDayTypeSchedule):
    '''
    A schedule of switch positions. If RegularTimePoint.value1 is 0, the switch
    is open. If 1, the switch is closed.
    '''

    Switch: Optional[Switch] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Switch.SwitchSchedules',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A SwitchSchedule is associated with a Switch.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class SteamSendoutSchedule(RegularIntervalSchedule):
    '''
    The cogeneration plant's steam sendout schedule in volume per time unit.
    '''

    CogenerationPlant: Optional[CogenerationPlant] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CogenerationPlant.SteamSendoutSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A cogeneration plant has a steam sendout schedule.
    '''
    
    CogenerationPlant: Optional[CogenerationPlant] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CogenerationPlant.SteamSendoutSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A cogeneration plant has a steam sendout schedule.
    '''
    
@dataclass(repr=False)
class BilateralExchangeActor(IdentifiedObject):
    '''
    BilateralExchangeActor describes an actor that provides ICCP data, consumes
    ICCP data or both. The ICCP data provider lists the data it makes available
    to an ICCP data consumer. This data is described by ProvidedBilateralPoints.
    The relation between an ICCP data provider and a consumer is established
    by a BilateralExchangeAgreement. It is up to the ICCP data consumer to
    select what ProvidedBilateralPoints to use. The selection made is not described
    in this information model.
    '''

    ConsumerBilateralExchange: list[BilateralExchangeAgreement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'BilateralExchangeAgreement.Consumer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Agreement to information subscriber.
    '''
    
    ProviderBilateralExchange: list[BilateralExchangeAgreement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'BilateralExchangeAgreement.Provider',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Agreement to information provider.
    '''
    
    CommunicationLink: list[CommunicationLink] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CommunicationLink.BilateralExchangeActor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Communication addressing for a Bilateral Table used by a ICCP data
    provider or consumer.
    '''
    
    ProvidedBilateralIOPoint: list[ProvidedBilateralPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProvidedBilateralPoint.BilateralExchangeActor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ICCP information in a Bilateral table that will be exposed to a remote
    peer.
    '''
    
@dataclass(repr=False)
class ICCPVCC(BilateralExchangeActor):
    '''
    Indicates that the ICCP information is global in nature and normally is
    available to all authorized peers.
    '''

@dataclass(repr=False)
class ICCPVirtualControlCentre(BilateralExchangeActor):
    '''
    This contains the information that a particular actor exposes for a particular
    agreed upon ICCP Bilateral Table.
    '''

    calling: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used to indicate if the Provider is responsible for initiating the
    TASE.2 connection. If the value is TRUE, the provider is responsible
    for establishing the association. If the value is FALSE, the peer provider
    of the Bilateral Table will need to establish the association.
    '''
    
    clientAndServer: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If True the value indicates that the entity represented by the bilateral
    table is capable of issuing requests and responding to request (e.g.
    bidirectional support of ICCP requests).
    If False, this indicates that a calling entity (e.g. calling = True)
    will not be able to respond to ICCP requests. If False, and calling=False,
    this indicates that the entity will only respond to ICCP requests and
    not issue ICCP requests.
    '''
    
    minimumUpdateInterval: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the fastest update interval that can be provided for integrity
    information and Transfer Set creation. The value is in seconds.
    '''
    
    nameOfLocalICC: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the ICC scope name that the remote can use to access the
    information in the Bilateral Table if the information is not VCC scoped.
    This value may not be null.
    '''
    
    supportForBlock1: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per IEC 60870-6-702: If true indicates support for basic services.
    Must always be true.
    '''
    
    supportForBlock2: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per IEC 60870-6-702: If true indicates support for extended conditions.
    '''
    
    supportForBlock3: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per IEC 60870-6-702: If true indicates support for blocked transfers.
    '''
    
    supportForBlock4: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per IEC 60870-6-702: If true indicates support for information messages.
    '''
    
    supportForBlock5: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per IEC 60870-6-702: If true indicates support for device control.
    '''
    
    supportForDepriciatedBlock8: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per IEC 60870-6-702: If true indicates support for accounts. The use
    of this block was deprecated in Edition 3.
    '''
    
    transportSecurityRequirement: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, then transport level security as specified by IEC 62351-6
    is required.
    '''
    
    applicationSecurityRequirement: Optional[ ApplicationSecurityKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the expected security mechanism, per IEC 62351-4, to be utilized.
    '''
    
@dataclass(repr=False)
class BilateralExchangeAgreement(IdentifiedObject):
    '''
    This is the representation of the information exchange agreement between
    peers.
    '''

    Consumer: Optional[BilateralExchangeActor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BilateralExchangeActor.ConsumerBilateralExchange',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Subscriber of information from a remote peer.
    '''
    
    Provider: Optional[BilateralExchangeActor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BilateralExchangeActor.ProviderBilateralExchange',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Provider of information to a remote peer.
    '''
    
@dataclass(repr=False)
class TASE2BilateralTable(BilateralExchangeAgreement):
    '''
    This class describe the sending (providing) side in a bilateral ICCP data
    exchange. Hence the ICCP bilateral (table) descriptions are created by
    exchanging ICCP Provider data between the parties.
    '''

    bilateralTableID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the version of the Bilateral Table configuration that is
    being exchanged.
    '''
    
    bilateralTableVersion: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Version attribute identifies a unique version of the Bilateral
    Table. If any changes are made to a Bilateral Table, then a new unique
    value for this attribute shall be generated.
    '''
    
    tase2version: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the version of the TASE.2 that is needed to access the Bilateral
    Table information via TASE.2.
    In order for a link to be established, both sides must have the same
    value.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class BranchGroup(IdentifiedObject):
    '''
    A group of branch terminals whose directed flow summation is to be monitored.
    A branch group need not form a cutset of the network.
    '''

    BranchGroupTerminal: list[BranchGroupTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'BranchGroupTerminal.BranchGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The directed branch group terminals to be summed.
    '''
    
    monitorActivePower: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Monitor the active power flow.
    '''
    
    monitorReactivePower: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Monitor the reactive power flow.
    '''
    
    maximumActivePower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum active power flow.
    '''
    
    maximumReactivePower: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum reactive power flow.
    '''
    
    minimumActivePower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum active power flow.
    '''
    
    minimumReactivePower: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum reactive power flow.
    '''
    
@dataclass(repr=False)
class Building(IdentifiedObject):
    '''
    A representation of the spatial structural characteristics of any built
    or constructed asset, including buildings, infrastructure, and other engineered
    structures (e.g., roads, fences, bridges).
    '''

    BuildingSpace: list[BuildingSpace] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'BuildingSpace.Building',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PhysicalAddress: Optional[PhysicalAddress] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PhysicalAddress.Building',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    buildingNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Building number refers to a unique numeric or alphanumeric identifier
    assigned to a building within a property or site, primarily for administrative,
    legal, or logistical purposes, which may differ from the building�s
    commonly known name or descriptive label.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.Building',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PhysicalAddress: Optional[PhysicalAddress] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PhysicalAddress.Building',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Site: Optional[Site] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Site.Building',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class BuildingSpace(IdentifiedObject):
    '''
    A defined, delimited area or volume within or around any built or constructed
    asset, including enclosed spaces such as: 1) rooms in a building, 2) open
    linear spaces such as areas along a fence, or segments of a road, or 3)
    zones within infrastructure structures.
    '''

    LocationAccess: Optional[LocationAccess] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LocationAccess.BuildingSpace',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    floor: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Floor is referring to the vertical position or designation of the space
    within a building, indicating its relationship to other levels, typically
    represented by a numeric or descriptive value (e.g., "Ground Floor,"
    "1st Floor," "Basement")
    '''
    
    spaceNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Space Number refers to the floor or building numerical identifier assigned
    to a specific space within a building, typically represented by a alphanumeric
    code, used to distinguish the space from others on the same or different
    floors, e.g Room 101, Office A12 or 2-203 (Floor 2, Space 203).
    '''
    
    spaceType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Space type is the classification of the space, e.g. Residential, Commercial,
    Industrial, Storage etc.
    '''
    
    Building: Optional[Building] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Building.BuildingSpace',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    LocationAccess: Optional[LocationAccess] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LocationAccess.BuildingSpace',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class BusNameMarker(IdentifiedObject):
    '''
    Used to apply user standard names to TopologicalNodes. Associated with
    one or more terminals that are normally connected with the bus name. The
    associated terminals are normally connected by non-retained switches. For
    a ring bus station configuration, all BusbarSection terminals in the ring
    are typically associated. For a breaker and a half scheme, both BusbarSections
    would normally be associated. For a ring bus, all BusbarSections would
    normally be associated. For a "straight" busbar configuration, normally
    only the main terminal at the BusbarSection would be associated.
    '''

    Terminal: list[ACDCTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACDCTerminal.BusNameMarker',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminals associated with this bus name marker.
    '''
    
    priority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority of bus name marker for use as topology bus name. Use 0 for
    do not care. Use 1 for highest priority. Use 2 as priority is less
    than 1 and so on.
    '''
    
    ReportingGroup: Optional[ReportingGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReportingGroup.BusNameMarker',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reporting group to which this bus name marker belongs.
    '''
    
    TopologicalNode: Optional[TopologicalNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalNode.BusNameMarker',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A user defined topological node that was originally defined in a planning
    model not yet having topology described by ConnectivityNodes. Once
    ConnectivityNodes have been created they may be linked to user defined
    ToplogicalNodes using BusNameMarkers.
    '''
    
@dataclass(repr=False)
class CSCDynamics(IdentifiedObject):
    '''
    CSC function block whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''

    CSConverter: Optional[CsConverter] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CsConverter.CSCDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current source converter to which current source converter dynamics
    model applies.
    '''
    
@dataclass(repr=False)
class Cadastre(IdentifiedObject):
    '''
    A singular complete record of all land parcels within some hierarchical
    level of administrative jurisdiction. The cadastre provides the ability
    to find the results of land parcel surveys typically used for land management
    and planning.
    '''

    Address: list[Address] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Address.Cadastre',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Physical addresses encompassed within a given cadastre.
    '''
    
    Location: list[Location] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Location.Cadastre',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Location within a cadastre.
    '''
    
    administrationLevel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Administrative level is referring to the organisation that is administrative
    authority for managing the a hierarchical division of a geographic
    area into land, property groups. This typically established by government
    that has the responsibility of managing governance, services, taxation,
    and legal jurisdiction, such as municipalities, townships, counties,
    or regions.
    '''
    
    cadastralReference: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Local or national unique identification reference for the cadastral
    for land parcel, ensuring effective land management, ownership tracking,
    and legal compliance.
    '''
    
    levelFourDivision: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Level Four Division refers to a further subdivision of a Level Three
    Division within a cadastral hierarchy, typically used to represent
    specific units or sections within a shared property or structure, such
    as apartments, condominiums, or co-owned facilities.
    '''
    
    levelOneDivision: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Level One Division refers to the highest organizational or reference
    unit within a cadastral hierarchy, typically representing a primary
    division of land, such as a farm or property group, which can be further
    subdivided into smaller parcels.
    '''
    
    levelThreeDivision: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Level Three Division refers to a further subdivision of a Level Two
    Division within a cadastral hierarchy, typically used to represent
    specialized land units such as leased parcels, easements, or other
    secondary divisions associated with distinct legal or usage rights.
    '''
    
    levelTwoDivision: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Level Two Division refers to a subdivision of a Level One Parcel within
    a cadastral hierarchy, representing smaller, distinct land units typically
    used for individual ownership, usage, or development, such as specific
    plots or lots within a farm or property group.
    '''
    
    CadastreType: Optional[CadastreType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CadastreType.Cadastre',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Site: Optional[Site] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Site.Cadastre',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CadastreType(IdentifiedObject):
    '''
    Cadastre type specifies the labels associated with each administrative
    level within the administrative system used by the land management governing
    authority.
    '''

    Cadastre: list[Cadastre] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Cadastre.CadastreType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    administrationLabel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Label for the administrative level of a property cadastral, e.g. municipalities,
    townships, counties, or regions.
    '''
    
    levelFourLabel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Label for level four of a property cadastral, e.g. [need example(s)].
    '''
    
    levelOneLabel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Label for level one of a property cadastral, e.g. [need example(s)].
    '''
    
    levelThreeLabel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Label for level three of a property cadastral, e.g. [need example(s)].
    '''
    
    levelTwoLabel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Label for level two of a property cadastral, e.g. [need example(s)].
    '''
    
@stereotype(CIMStereotype.harmonization)
@dataclass(repr=False)
class CalculationMethodHierarchy(IdentifiedObject):
    '''
    The hierarchy of calculation methods used to derive this measurement.
    '''

    CalculationMethodOrder: list[CalculationMethodOrder] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CalculationMethodOrder.CalculationMethodHierarchy',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Order of a statistical calculation associated with this calculation
    method hierarchy.
    '''
    
    Measurement: list[Measurement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Measurement.CalculationMethodHierarchy',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement to which this calculation method hierarchy applies.
    '''
    
    MeasurementValue: Optional[MeasurementValue] = field(
        default=None,
        metadata={
        'type': 'harmonization',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementValue.CalculationMethodHierarchy',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement value to which this calculation method hierarchy applies.
    '''
    
    MeasurementValue: Optional[MeasurementValue] = field(
        default=None,
        metadata={
        'type': 'harmonization',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementValue.CalculationMethodHierarchy',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement value to which this calculation method hierarchy applies.
    '''
    
@dataclass(repr=False)
class CatalogAssetType(IdentifiedObject):
    '''
    a Assets that may be used for planning, work or design purposes.
    '''

    AssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.CatalogAssetType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generic nameplate information associated with this catalog asset type.
    '''
    
    ProductAssetModel: list[ProductAssetModel] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProductAssetModel.CatalogAssetType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Product asset model conforming to this catalog asset type.
    '''
    
    stockItem: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if item is a stock item (default).
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description of type of asset.
    '''
    
    estimatedUnitCost: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Estimated unit cost (or cost per unit length) of this type of asset.
    It does not include labor to install, construct or configure it.
    '''
    
    kind: Optional[ AssetKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of asset (from enumerated list).
    '''
    
    AssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.CatalogAssetType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generic nameplate information associated with this catalog asset type.
    '''
    
    TypeAssetCatalogue: Optional[TypeAssetCatalogue] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TypeAssetCatalogue.TypeAssets',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Channel(IdentifiedObject):
    '''
    A single path for the collection or reporting of register values over a
    period of time. For example, a register which measures forward energy can
    have two channels, one providing bulk quantity readings and the other providing
    interval readings of a fixed interval size.
    '''

    ReadingType: Optional[ReadingType] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReadingType.Channel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reading type for register values reported/collected by this channel.
    '''
    
    isVirtual: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, the data is being calculated by an enterprise system rather
    than metered directly.
    '''
    
    ReadingType: Optional[ReadingType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReadingType.Channel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reading type for register values reported/collected by this channel.
    '''
    
    Register: Optional[Register] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Register.Channels',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Register whose values are collected/reported by this channel.
    '''
    
@dataclass(repr=False)
class CnodeDistributionFactor(IdentifiedObject):
    '''
    Participation factors per Cnode. Used to calculate "participation" of Cnode
    in an AggregateNode. Each Cnode associated to an AggregateNode would be
    assigned a participation factor for its participation within the AggregateNode.
    '''

    factor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used to calculate "participation" of Cnode in an AggregateNode
    '''
    
    podLossFactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Point of delivery loss factor
    '''
    
    AggregateNode: Optional[AggregateNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AggregateNode.CnodeDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.CnodeDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    HostControlArea: Optional[HostControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HostControlArea.CnodeDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SubControlArea: Optional[SubControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubControlArea.CnodeDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CombinedCycleConfigurationMember(IdentifiedObject):
    '''
    Configuration Member of CCP Configuration.
    '''

    primary: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    primary configuration.
    '''
    
    steam: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Steam plant.
    '''
    
    CombinedCycleConfiguration: Optional[CombinedCycleConfiguration] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CombinedCycleConfiguration.CombinedCycleConfigurationMember',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MktThermalGeneratingUnit: Optional[MktThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktThermalGeneratingUnit.CombinedCycleConfigurationMember',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CombinedCycleLogicalConfiguration(IdentifiedObject):
    '''
    Logical Configuration of a Combined Cycle plant.
    Operating Combined Cycle Plant (CCP) configurations are represented as
    Logical CCP Resources. Logical representation shall be used for Market
    applications to optimize and control Market Operations. Logical representation
    is also necessary for controlling the number of CCP configurations and
    to temper performance issues that may otherwise occur.
    For example,(2CT configuration),(1CT + 1ST configuration) are examples
    of logical configuration, without specifying the specific CT and ST participating
    in the configuration.
    '''

    CombinedCycleConfiguration: list[CombinedCycleConfiguration] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CombinedCycleConfiguration.CombinedCycleLogicalConfiguration',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MktCombinedCyclePlant: Optional[MktCombinedCyclePlant] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktCombinedCyclePlant.CombinedCycleLogicalConfiguration',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.European)
@dataclass(repr=False)
class ConnectivityNode(IdentifiedObject):
    '''
    Connectivity nodes are points where terminals of AC conducting equipment
    are connected together with zero impedance.
    '''

    ACPointOfCommonCoupling: Optional[ACPointOfCommonCoupling] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACPointOfCommonCoupling.ConnectivityNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifies this ConnectivityNode as a point of common coupling AC.
    '''
    
    BoundaryPoint: Optional[BoundaryPoint] = field(
        default=None,
        metadata={
        'type': 'European',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BoundaryPoint.ConnectivityNode',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    The boundary point associated with the connectivity node.
    '''
    
    CnodeDistributionFactor: list[CnodeDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CnodeDistributionFactor.ConnectivityNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    IndividualPnode: Optional[IndividualPnode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IndividualPnode.ConnectivityNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredResource: list[RegisteredResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegisteredResource.ConnectivityNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Terminals: list[Terminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Terminal.ConnectivityNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Terminals interconnected with zero impedance at a this connectivity
    node.
    '''
    
    ACPointOfCommonCoupling: Optional[ACPointOfCommonCoupling] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACPointOfCommonCoupling.ConnectivityNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifies this ConnectivityNode as a point of common coupling AC.
    '''
    
    BoundaryPoint: Optional[BoundaryPoint] = field(
        default=None,
        metadata={
        'type': 'European',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BoundaryPoint.ConnectivityNode',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    The boundary point associated with the connectivity node.
    '''
    
    ConnectivityNodeContainer: Optional[ConnectivityNodeContainer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNodeContainer.ConnectivityNodes',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Container of this connectivity node.
    '''
    
    IndividualPnode: Optional[IndividualPnode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IndividualPnode.ConnectivityNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TopologicalNode: Optional[TopologicalNode] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalNode.ConnectivityNodes',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The topological node to which this connectivity node is assigned. May
    depend on the current state of switches in the network.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class Contingency(IdentifiedObject):
    '''
    An event threatening system reliability, consisting of one or more contingency
    elements.
    '''

    ContingencyElement: list[ContingencyElement] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContingencyElement.Contingency',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A contingency can have any number of contingency elements.
    '''
    
    PinContingency: list[PinContingency] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinContingency.Contingency',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pin that uses this input.
    '''
    
    mustStudy: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Set true if must study this contingency.
    '''
    
    EquipmentOperator: Optional[SystemOperator] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SystemOperator.Contingency',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    System operator that is operating the equipment that is being run a
    contingency on.
    '''
    
@dataclass(repr=False)
class MktContingency(Contingency):
    '''
    Subclass of IEC 61970:Contingency.
    '''

    loadRolloverFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    load change flag
    Flag that indicates whether load rollover and load pickup should be
    processed for this contingency
    '''
    
    ltcControlFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ltc enable flag
    Flag that indicates if LTCs regulate voltage during the solution of
    the contingency
    '''
    
    participationFactorSet: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Participation Factor flag
    An indication which set of generator participation factors should be
    used to re-allocate generation in this contingency
    '''
    
    screeningFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    sceening flag for outage
    Flag that indicated whether screening is bypassed for the contingency
    '''
    
    TransferInterfaceSolutionA: Optional[TransferInterfaceSolution] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransferInterfaceSolution.MktContingencyA',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TransferInterfaceSolutionB: Optional[TransferInterfaceSolution] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransferInterfaceSolution.MktContingencyB',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ContingencyElement(IdentifiedObject):
    '''
    An element of a system event to be studied by contingency analysis, representing
    a change in status of a single piece of equipment.
    '''

    Contingency: Optional[Contingency] = field(
        default=None,
        metadata={
        'type': 'OfAggregate NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Contingency.ContingencyElement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A contingency element belongs to one contingency.
    '''
    
@dataclass(repr=False)
class ContingencyEquipment(ContingencyElement):
    '''
    Equipment whose in service status is to change, such as a power transformer
    or AC line segment.
    '''

    contingentStatus: Optional[ ContingencyEquipmentStatusKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The status for the associated equipment when in the contingency state.
    This status is independent of the case to which the contingency is
    originally applied, but defines the equipment status when the contingency
    is applied.
    '''
    
    Equipment: Optional[Equipment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Equipment.ContingencyEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The single piece of equipment to which to apply the contingency.
    '''
    
@dataclass(repr=False)
class ContractRight(IdentifiedObject):
    '''
    Provides definition of Transmission Ownership Right and Existing Transmission
    Contract identifiers for use by SCUC. RMR contract hosting: Startup lead
    time, Contract Service Limits, Max Service Hours, Max MWhs, Max Start-ups,
    Ramp Rate, Max Net Dependable Capacity, Min Capacity and Unit Substitution
    for DAM/RTM to retrieve.
    '''

    ContractDistributionFactor: list[ContractDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContractDistributionFactor.TransmissionContractRight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SubstitutionResourceList: list[SubstitutionResourceList] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SubstitutionResourceList.TransmissionContractRight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Chain_TransmissionRightChain: Optional[TransmissionRightChain] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransmissionRightChain.Chain_ContractRight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    chainOrder: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    When used in conjunction with a Transmission Right contract chain,
    this is the precedence for the contracts.
    '''
    
    contractMW: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    MW value of the contract
    '''
    
    contractPriority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority for the contract. This should be unique amoung all contracts
    for a specific resource. This value is the directive for the SCUC algorithm
    on the order to satisfy/cut contracts.
    '''
    
    contractStatus: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Contract status
    '''
    
    fuelAdder: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Estimated Fuel Adder
    '''
    
    latestSchedMinutes: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This indicates the latest schedule minutes (e.g. t - xx) that this
    resource can be notified to respond. This attribute is only used if
    the market type is not supplied.
    '''
    
    maximumScheduleQuantity: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum schedule MW quantity
    '''
    
    maximumServiceHours: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum service hours
    '''
    
    maximumStartups: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum startups
    '''
    
    maxNetDependableCapacity: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum Net Dependable Capacity
    '''
    
    minimumLoad: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum Load
    '''
    
    minimumScheduleQuantity: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum schedule quanity
    '''
    
    startupLeadTime: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Start up lead time
    '''
    
    contractPrice: Optional[ float | CostPerEnergyUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Financial value of the contract
    '''
    
    contractType: Optional[ ContractType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    type of the contract. Possible values are but not limited by:
    ETC, TOR or RMR and RMT self schedules
    '''
    
    financialLocation: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicator if the location associated with this contract is financial
    (e.g. pricing nodes) or physical (e.g. connectivity nodes).
    '''
    
    financialRightsDAM: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicate this contract provides financial rights in the DA
    Market
    '''
    
    financialRightsRTM: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicate this contract provides financial rights in the RT
    Market
    '''
    
    latestSchedMktType: Optional[ MarketType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This indicates the latest schedule market type a contract can be applied
    to. This is used in conjunction with the latestSchedMinutes attribute
    to determine the latest time this contract can be called in. The possible
    values for this attribute are: DAM, RTM or it can be omitted. If omitted,
    the latestSchedMinutes attribute defines the value.
    '''
    
    physicalRightsDAM: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicate this contract provides physical rights in the DA Market
    '''
    
    physicalRightsRTM: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicate this contract provides physical rights in the RT Market
    '''
    
    TRType: Optional[ TRType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transmission Right type - is this an individual contract right or a
    chain contract right. Types = CHAIN or INDIVIDUAL
    '''
    
    Chain_TransmissionRightChain: Optional[TransmissionRightChain] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransmissionRightChain.Chain_ContractRight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Ind_TransmissionRightChain: Optional[TransmissionRightChain] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransmissionRightChain.Ind_ContractRight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.TransmissionContractRight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SchedulingCoordinator: Optional[SchedulingCoordinator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SchedulingCoordinator.TransmissionContractRight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class ControlAreaGeneratingUnit(IdentifiedObject):
    '''
    A control area generating unit. This class is needed so that alternate
    control area definitions may include the same generating unit. It should
    be noted that only one instance within a control area should reference
    a specific generating unit.
    '''

    AltGeneratingUnitMeas: list[AltGeneratingUnitMeas] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AltGeneratingUnitMeas.ControlAreaGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The link to prioritized measurements for this GeneratingUnit.
    '''
    
    ControlArea: Optional[ControlArea] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlArea.ControlAreaGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The parent control area for the generating unit specifications.
    '''
    
    GeneratingUnit: Optional[GeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GeneratingUnit.ControlAreaGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The generating unit specified for this control area. Note that a control
    area should include a GeneratingUnit only once.
    '''
    
@dataclass(repr=False)
class ControlAreaPowerElectronicsUnit(IdentifiedObject):
    '''
    A control area power electronics unit. This class is needed so that alternate
    control area definitions may include the same power electronics unit. It
    should be noted that only one instance within a control area should reference
    a specific power electronics unit.
    '''

    ControlArea: Optional[ControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlArea.ControlAreaPowerElectronicsUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The power electronics unit specifications for the control area.
    '''
    
    PowerElectronicsUnit: Optional[PowerElectronicsUnit] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsUnit.ControlAreaPowerElectronicsUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The power electronics unit specified for this control area. Note that
    a control area should include a PowerElectronicsUnit only once.
    '''
    
@dataclass(repr=False)
class CoordinateSystem(IdentifiedObject):
    '''
    Coordinate reference system.
    '''

    Geometry: list[Geometry] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Geometry.CoordinateSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The geometry which uses a given coordinate system.
    '''
    
    Location: list[Location] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Location.CoordinateSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All locations described with position points in this coordinate system.
    '''
    
    crsUrn: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A Uniform Resource Name (URN) for the coordinate reference system (crs)
    used to define 'Location.PositionPoints'.
    An example would be the European Petroleum Survey Group (EPSG) code
    for a coordinate reference system, defined in URN under the Open Geospatial
    Consortium (OGC) namespace as: urn:ogc:def:crs:EPSG::XXXX, where XXXX
    is an EPSG code (a full list of codes can be found at the EPSG Registry
    web site http://www.epsg-registry.org/). To define the coordinate system
    as being WGS84 (latitude, longitude) using an EPSG OGC, this attribute
    would be urn:ogc:def:crs:EPSG::4236.
    A profile should limit this code to a set of allowed URNs agreed to
    by all sending and receiving parties.
    '''
    
@dataclass(repr=False)
class CoupledLineSegmentGroup(IdentifiedObject):
    '''
    Aggregates a set of line segments that are on the same tower, or in the
    same right-of-way, close enough that mutual coupling impedances between
    the lines need to be included in network analysis.
    '''

    LineSegmentCoupling: list[LineSegmentCoupling] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'LineSegmentCoupling.CoupledLineSegmentGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A coupled line in this coupled group of lines.
    '''
    
@dataclass(repr=False)
class CrewType(IdentifiedObject):
    '''
    Custom description of the type of crew. This may be used to determine the
    type of work the crew can be assigned to. Examples include repair, tree
    trimming, switching, etc.
    '''

    Crews: list[Crew] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Crew.CrewType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All crews of this type.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class Curve(IdentifiedObject):
    '''
    A multi-purpose curve or functional relationship between an independent
    variable (X-axis) and dependent (Y-axis) variables.
    '''

    CurveDatas: list[CurveData] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CurveData.Curve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The point data values that define this curve.
    '''
    
    curveStyle: Optional[ CurveStyle ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The style or shape of the curve.
    '''
    
    xMultiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiplier for X-axis.
    '''
    
    xUnit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The X-axis units of measure.
    '''
    
    y1Multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiplier for Y1-axis.
    '''
    
    y1Unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Y1-axis units of measure.
    '''
    
    y2Multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiplier for Y2-axis.
    '''
    
    y2Unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Y2-axis units of measure.
    '''
    
    y3Multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiplier for Y3-axis.
    '''
    
    y3Unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Y3-axis units of measure.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class CTTempActivePowerCurve(Curve):
    '''
    Relationship between the combustion turbine's power output rating in gross
    active power (X-axis) and the ambient air temperature (Y-axis).
    '''

    CombustionTurbine: Optional[CombustionTurbine] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CombustionTurbine.CTTempActivePowerCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A combustion turbine may have an active power versus ambient temperature
    relationship.
    '''
    
    CombustionTurbine: Optional[CombustionTurbine] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CombustionTurbine.CTTempActivePowerCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A combustion turbine may have an active power versus ambient temperature
    relationship.
    '''
    
@dataclass(repr=False)
class EmissionAccount(Curve):
    '''
    Accounts for tracking emissions usage and credits for thermal generating
    units. A unit may have zero or more emission accounts, and will typically
    have one for tracking usage and one for tracking credits.
    '''

    emissionType: Optional[ EmissionType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of emission, for example sulfur dioxide (SO2). The y1AxisUnits
    of the curve contains the unit of measure (e.g. kg) and the emissionType
    is the type of emission (e.g. sulfur dioxide).
    '''
    
    emissionValueSource: Optional[ EmissionValueSource ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The source of the emission value.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.EmmissionAccounts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have one or more emission allowance accounts.
    '''
    
@dataclass(repr=False)
class EmissionCurve(Curve):
    '''
    Relationship between the unit's emission rate in units of mass per hour
    (Y-axis) and output active power (X-axis) for a given type of emission.
    This curve applies when only one type of fuel is being burned.
    '''

    isNetGrossP: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    
    emissionContent: Optional[ float | Emission ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The emission content per quantity of fuel burned.
    '''
    
    emissionType: Optional[ EmissionType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of emission, which also gives the production rate measurement
    unit. The y1AxisUnits of the curve contains the unit of measure (e.g.
    kg) and the emissionType is the type of emission (e.g. sulfur dioxide).
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.EmissionCurves',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have one or more emission curves.
    '''
    
@dataclass(repr=False)
class FuelAllocationSchedule(Curve):
    '''
    The amount of fuel of a given type which is allocated for consumption over
    a specified period of time.
    '''

    fuelAllocationEndDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The end time and date of the fuel allocation schedule.
    '''
    
    fuelAllocationStartDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The start time and date of the fuel allocation schedule.
    '''
    
    maxFuelAllocation: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum amount of fuel that is allocated for consumption for the
    scheduled time period.
    '''
    
    minFuelAllocation: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum amount of fuel that is allocated for consumption for the
    scheduled time period, e.g., based on a "take-or-pay" contract.
    '''
    
    fuelType: Optional[ FuelType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of fuel, which also indicates the corresponding measurement
    unit.
    '''
    
    FossilFuel: Optional[FossilFuel] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FossilFuel.FuelAllocationSchedules',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A fuel allocation schedule shall have a fossil fuel.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.FuelAllocationSchedules',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have one or more fuel allocation schedules.
    '''
    
@dataclass(repr=False)
class FuelCostCurve(Curve):
    '''
    Relationship between unit fuel cost in $/kWh(Y-axis) and unit output in
    MW (X-axis).
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.FuelCostCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.FuelCostCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class GenUnitOpCostCurve(Curve):
    '''
    Relationship between unit operating cost (Y-axis) and unit output active
    power (X-axis). The operating cost curve for thermal units is derived from
    heat input and fuel costs. The operating cost curve for hydro units is
    derived from water flow rates and equivalent water costs.
    '''

    isNetGrossP: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    
    GeneratingUnit: Optional[GeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GeneratingUnit.GenUnitOpCostCurves',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A generating unit may have one or more cost curves, depending upon
    fuel mixture and fuel cost.
    '''
    
@dataclass(repr=False)
class GrossToNetActivePowerCurve(Curve):
    '''
    Relationship between the generating unit's gross active power output on
    the X-axis (measured at the terminals of the machine(s)) and the generating
    unit's net active power output on the Y-axis (based on utility-defined
    measurements at the power station). Station service loads, when modelled,
    should be treated as non-conforming bus loads. There may be more than one
    curve, depending on the auxiliary equipment that is in service.
    '''

    GeneratingUnit: Optional[GeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GeneratingUnit.GrossToNetActivePowerCurves',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A generating unit may have a gross active power to net active power
    curve, describing the losses and auxiliary power requirements of the
    unit.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class HeatInputCurve(Curve):
    '''
    Relationship between unit heat input in energy per time for main fuel (Y1-axis)
    and supplemental fuel (Y2-axis) versus unit output in active power (X-axis).
    The quantity of main fuel used to sustain generation at this output level
    is prorated for throttling between definition points. The quantity of supplemental
    fuel used at this output level is fixed and not prorated.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.HeatInputCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a heat input curve.
    '''
    
    isNetGrossP: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    
    auxPowerMult: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power output - auxiliary power multiplier adjustment factor.
    '''
    
    auxPowerOffset: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power output - auxiliary power offset adjustment factor.
    '''
    
    heatInputEff: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Heat input - efficiency multiplier adjustment factor.
    '''
    
    heatInputOffset: Optional[ float | HeatRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Heat input - offset adjustment factor.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.HeatInputCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a heat input curve.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class HeatRateCurve(Curve):
    '''
    Relationship between unit heat rate per active power (Y-axis) and unit
    output (X-axis). The heat input is from all fuels.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.HeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a heat rate curve.
    '''
    
    isNetGrossP: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.HeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a heat rate curve.
    '''
    
@dataclass(repr=False)
class MktHeatRateCurve(HeatRateCurve):
    '''
    Subclass of IEC 61970: Generation: Production:HeatRateCurve.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.MktHeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceVerifiableCosts.MktHeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.MktHeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceVerifiableCosts.MktHeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class HydroGeneratingEfficiencyCurve(Curve):
    '''
    Relationship between unit efficiency as percentage and unit output active
    power for a given net head in meters. The relationship between efficiency,
    discharge, head, and power output is expressed as follows: E =KP/HQ
    where: E is the efficiency, as a percentage; P is the active power; H is
    the height; Q is the discharge, volume/time unit; K is a constant.
    For example, a curve instance for a given net head could show efficiency
    (Y-axis) versus active power output (X-axis) or versus discharge on the
    X-axis.
    '''

    HydroGeneratingUnit: Optional[HydroGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroGeneratingUnit.HydroGeneratingEfficiencyCurves',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A hydro generating unit has an efficiency curve.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class IncrementalHeatRateCurve(Curve):
    '''
    Relationship between unit incremental heat rate in (delta energy/time)
    per (delta active power) and unit output in active power. The IHR curve
    represents the slope of the HeatInputCurve. Note that the "incremental
    heat rate" and the "heat rate" have the same engineering units.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.IncrementalHeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have an incremental heat rate curve.
    '''
    
    isNetGrossP: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.IncrementalHeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have an incremental heat rate curve.
    '''
    
@dataclass(repr=False)
class LevelVsVolumeCurve(Curve):
    '''
    Relationship between reservoir volume and reservoir level. The volume is
    at the Y-axis and the reservoir level at the X-axis.
    '''

    Reservoir: Optional[Reservoir] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Reservoir.LevelVsVolumeCurves',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may have a level versus volume relationship.
    '''
    
@dataclass(repr=False)
class LimitDependencyCurve(Curve):
    '''
    A curve or functional relationship between an independent variable (X-axis)
    and limiting dependent (Y-axis) variables.
    '''

@dataclass(repr=False)
class AmbientTemperatureDependencyCurve(LimitDependencyCurve):
    '''
    A curve or functional relationship between the ambient temperature independent
    variable (X-axis) and relative temperature dependent (Y-axis) variables.
    '''

    OperationalLimitType: list[OperationalLimitType] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimitType.PermanentAmbientTemperatureDependencyCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit type that has this permanent ambient temperature
    dependency curve.
    '''
    
@dataclass(repr=False)
class BaseOverloadLimitCurve(LimitDependencyCurve):
    '''
    A curve or functional relationship between
    - the relative loading - current loading over permanent loading (PATL)
    independent variable (X-axis), and
    - temporary overloading (TATL) limiting dependent (Y-axis) variables.
    '''

    OperationalLimitType: list[OperationalLimitType] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimitType.TemporaryBaseOverloadLimitCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit type that has this temporary base overload limit
    curve.
    '''
    
@dataclass(repr=False)
class DurationOverloadLimitCurve(LimitDependencyCurve):
    '''
    A curve or functional relationship between
    - the overload duration independent variable (X-axis), and
    - temporary overloading (TATL) limiting dependent (Y-axis) variables.
    '''

    OperationalLimitType: list[OperationalLimitType] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimitType.TemporaryDurationOverloadLimitCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit type that has this temporary duration overload
    limit curve.
    '''
    
@dataclass(repr=False)
class RecoveryOverloadLimitCurve(LimitDependencyCurve):
    '''
    The relation between the recovery time and an overload limit.
    '''

    OperationalLimitType: list[OperationalLimitType] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimitType.RecoveryOverloadLimitCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit type which has recovery time characteristic.
    '''
    
@dataclass(repr=False)
class SolarRadiationDependencyCurve(LimitDependencyCurve):
    '''
    A curve or functional relationship between
    - the solar radiation independent variable (X-axis), and
    - relative dependent (Y-axis) variables.
    '''

    OperationalLimitType: list[OperationalLimitType] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimitType.PermanentSolarRadiationCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit type that has this permanent solar radiation
    curve.
    '''
    
@dataclass(repr=False)
class LossCurve(Curve):
    '''
    Represents the losses in the equipment due to operation position.
    '''

    FACTSEquipment: Optional[FACTSEquipment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FACTSEquipment.LossCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The FACTS equipment which has a loss curve.
    '''
    
@dataclass(repr=False)
class MaxStartUpCostCurve(Curve):
    '''
    The maximum Startup costs and time as a function of down time. Relationship
    between unit startup cost (Y1-axis) vs. unit elapsed down time (X-axis).
    This is used to validate the information provided in the Bid.
    '''

@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class PenstockLossCurve(Curve):
    '''
    Relationship between penstock head loss (in meters) and total discharge
    through the penstock (in cubic meters per second). One or more turbines
    may be connected to the same penstock.
    '''

    HydroGeneratingUnit: Optional[HydroGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroGeneratingUnit.PenstockLossCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A hydro generating unit has a penstock loss curve.
    '''
    
    HydroGeneratingUnit: Optional[HydroGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroGeneratingUnit.PenstockLossCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A hydro generating unit has a penstock loss curve.
    '''
    
@dataclass(repr=False)
class RMRHeatRateCurve(Curve):
    '''
    Model to support processing of reliability must run units.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRHeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRHeatRateCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RMRStartUpCostCurve(Curve):
    '''
    Model to support processing of reliability must run units.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRStartUpCostCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRStartUpCostCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RMRStartUpEnergyCurve(Curve):
    '''
    Model to support processing of reliability must run units.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRStartUpEnergyCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRStartUpEnergyCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RMRStartUpFuelCurve(Curve):
    '''
    Model to support processing of reliability must run units.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRStartUpFuelCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRStartUpFuelCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RMRStartUpTimeCurve(Curve):
    '''
    Model to support processing of reliability must run units.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRStartUpTimeCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RMRStartUpTimeCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ReactiveCapabilityCurve(Curve):
    '''
    Reactive power rating envelope versus the synchronous machine's active
    power, in both the generating and motoring modes. For each active power
    value there is a corresponding high and low reactive power limit value.
    Typically there will be a separate curve for each coolant condition, such
    as hydrogen pressure. The Y1 axis values represent reactive minimum and
    the Y2 axis values represent reactive maximum.
    '''

    InitiallyUsedBySynchronousMachine: list[SynchronousMachine] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SynchronousMachine.InitialReactiveCapabilityCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Synchronous machines using this curve as default.
    '''
    
    coolantTemperature: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The machine's coolant temperature (e.g., ambient air or stator circulating
    water).
    '''
    
    hydrogenPressure: Optional[ float | Pressure ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydrogen coolant pressure.
    '''
    
    referenceVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reference voltage for which the capability curve is valid.
    '''
    
    ExtendedWardEquivalent: Optional[ExtendedWardEquivalent] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ExtendedWardEquivalent.ReactiveCapabilityCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The extended ward equivalent using this reactive capability curve.
    '''
    
    SynchronousMachine: Optional[SynchronousMachine] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SynchronousMachine.ReactiveCapabilityCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The synchronous machine using this curve.
    '''
    
@dataclass(repr=False)
class ResourceOperationMaintenanceCost(Curve):
    '''
    To model the Operation and Maintenance (O and M) costs of a generation
    resource.
    '''

    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceVerifiableCosts.ResourceOperationMaintenanceCost',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    omCostColdStartup: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Verifiable O&amp;M Cost ($), Cold Startup
    '''
    
    omCostHotStartup: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Verifiable O&amp;M Cost ($), Hot Startup
    '''
    
    omCostIntermediateStartup: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Verifiable O&amp;M Cost ($), Intermediate Startup
    '''
    
    omCostLowSustainedLimit: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Verifiable O&amp;M Cost ($/MWh), LSL
    '''
    
    gasPercentAboveLowSustainedLimit: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Fuel Index Price (gas) for operating above Low Sustained
    Limit (LSL)
    '''
    
    oilPercentAboveLowSustainedLimit: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Fuel Oil Price (FOP) for operating above Low Sustained
    Limit (LSL)
    '''
    
    solidfuelPercentAboveLowSustainedLimit: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Solid Fuel for operating above Low Sustained Limit (LSL)
    '''
    
    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceVerifiableCosts.ResourceOperationMaintenanceCost',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class ShutdownCurve(Curve):
    '''
    Relationship between the rate in gross active power/minute (Y-axis) at
    which a unit should be shutdown and its present gross MW output (X-axis).
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.ShutdownCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a shutdown curve.
    '''
    
    shutdownDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The date and time of the most recent generating unit shutdown.
    '''
    
    shutdownCost: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fixed shutdown cost.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.ShutdownCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a shutdown curve.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class StartIgnFuelCurve(Curve):
    '''
    The quantity of ignition fuel (Y-axis) used to restart and repay the auxiliary
    power consumed versus the number of hours (X-axis) the unit was off line.
    '''

    StartupModel: Optional[StartupModel] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartupModel.StartIgnFuelCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup ignition fuel curve.
    '''
    
    ignitionFuelType: Optional[ FuelType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of ignition fuel.
    '''
    
    StartupModel: Optional[StartupModel] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartupModel.StartIgnFuelCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup ignition fuel curve.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class StartMainFuelCurve(Curve):
    '''
    The quantity of main fuel (Y-axis) used to restart and repay the auxiliary
    power consumed versus the number of hours (X-axis) the unit was off line.
    '''

    StartupModel: Optional[StartupModel] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartupModel.StartMainFuelCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup main fuel curve.
    '''
    
    mainFuelType: Optional[ FuelType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of main fuel.
    '''
    
    StartupModel: Optional[StartupModel] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartupModel.StartMainFuelCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup main fuel curve.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class StartRampCurve(Curve):
    '''
    Rate in gross active power per minute (Y-axis) at which a unit can be loaded
    versus the number of hours (X-axis) the unit was off line.
    '''

    StartupModel: Optional[StartupModel] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartupModel.StartRampCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup ramp curve.
    '''
    
    hotStandbyRamp: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The startup ramp rate in gross for a unit that is on hot standby.
    '''
    
    StartupModel: Optional[StartupModel] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartupModel.StartRampCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup ramp curve.
    '''
    
@dataclass(repr=False)
class StartUpEnergyCurve(Curve):
    '''
    The energy consumption of a generating resource to complete a start-up
    from the StartUpEnergyCurve. Definition of the StartUpEnergyCurve includes,
    xvalue as the cooling time and y1value as the MW value.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.StartUpEnergyCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.StartUpEnergyCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class StartUpFuelCurve(Curve):
    '''
    The fuel consumption of a Generating Resource to complete a Start-Up.(x=cooling
    time) Form Startup Fuel Curve. xAxisData -&gt; cooling time, y1AxisData
    -&gt; MBtu.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.StartUpFuelCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.StartUpFuelCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class StartUpTimeCurve(Curve):
    '''
    Startup time curve as a function of down time, where time is specified
    in minutes. Relationship between unit startup time (Y1-axis) vs. unit elapsed
    down time (X-axis).
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.StartUpTimeCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class TailbayLossCurve(Curve):
    '''
    Relationship between tailbay head loss height (Y-axis) and the total discharge
    into the power station's tailbay volume per time unit (X-axis) . There
    could be more than one curve depending on the level of the tailbay reservoir
    or river level.
    '''

    HydroGeneratingUnit: Optional[HydroGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroGeneratingUnit.TailbayLossCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A hydro generating unit has a tailbay loss curve.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class TargetLevelSchedule(Curve):
    '''
    Reservoir water level targets from advanced studies or "rule curves". Typically
    in one hour increments for up to 10 days.
    '''

    Reservoir: Optional[Reservoir] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Reservoir.TargetLevelSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may have a water level target schedule.
    '''
    
    highLevelLimit: Optional[ float | WaterLevel ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High target level limit, above which the reservoir operation will be
    penalized.
    '''
    
    lowLevelLimit: Optional[ float | WaterLevel ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Low target level limit, below which the reservoir operation will be
    penalized.
    '''
    
    Reservoir: Optional[Reservoir] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Reservoir.TargetLevelSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may have a water level target schedule.
    '''
    
@dataclass(repr=False)
class TimeCurrentCurve(Curve):
    '''
    Specialization of Curve class to restrict the usage to Time in the y-axis
    and CurrentFlow in the x-axis. Serves as base to many special use-cases,
    particularly in the protection coordination context.
    '''

@dataclass(repr=False)
class ConductorCharacteristicCurve(TimeCurrentCurve):
    '''
    Class to associate damage curves to conductors or to their datasheets.
    '''

    Conductor: list[Conductor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Conductor.DamageCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A conductor can have a damage curve associated to it.
    '''
    
@dataclass(repr=False)
class FuseCharacteristicCurve(TimeCurrentCurve):
    '''
    This class represents the characteristic curve of fuse.
    '''

    FuseMinimumMelt: Optional[Fuse] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Fuse.MiinimumMeltCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fuse this curve is associated to.
    '''
    
    FuseTotalClearing: Optional[Fuse] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Fuse.TotalClearingTimeCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fuse this curve is associated to.
    '''
    
    FuseInfoMinimumMelt: Optional[FuseInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseInfo.MinimumMeltCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    FuseInfo this curve is associated to.
    '''
    
    FusInfoTotalClearing: Optional[FuseInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseInfo.TotalClearingTimeCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    FuseInfo this curve is associated to.
    '''
    
    FuseInfoMinimumMelt: Optional[FuseInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseInfo.MinimumMeltCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    FuseInfo this curve is associated to.
    '''
    
    FuseMinimumMelt: Optional[Fuse] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Fuse.MiinimumMeltCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fuse this curve is associated to.
    '''
    
    FuseTotalClearing: Optional[Fuse] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Fuse.TotalClearingTimeCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fuse this curve is associated to.
    '''
    
    FusInfoTotalClearing: Optional[FuseInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseInfo.TotalClearingTimeCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    FuseInfo this curve is associated to.
    '''
    
@dataclass(repr=False)
class ProtectionOperationCharacteristicCurve(TimeCurrentCurve):
    '''
    This class expthe base class of characteristic curve of protection relay
    functions.
    '''

    ProtectionOperationCharacteristicType: Optional[ ProtectionOperationCharacteristicKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This attributes means the type of protection operation characteristic
    curves.
    '''
    
    ProtectionFunctionBlock: Optional[ProtectionFunctionBlock] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionFunctionBlock.ProtectionOperationCharacteristicCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Several operation characteristic curves for protection are possessed
    by this ProtectionFunctionBlock.
    '''
    
@dataclass(repr=False)
class TransformerCharacteristicCurve(TimeCurrentCurve):
    '''
    Class to associate damage or inrush curves (or points) to transformers
    or to their datasheets.
    '''

@dataclass(repr=False)
class VsCapabilityCurve(Curve):
    '''
    The P-Q capability curve for a voltage source converter, with P on X-axis
    and Qmin and Qmax on Y1-axis and Y2-axis.
    '''

    referenceVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reference voltage for which the capability curve is valid.
    '''
    
    VsConverter: Optional[VsConverter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'VsConverter.CapabilityCurve',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage source vonverters with this capability curve.
    '''
    
@dataclass(repr=False)
class DCNode(IdentifiedObject):
    '''
    DC nodes are points where terminals of DC conducting equipment are connected
    together with zero impedance.
    '''

    DCTerminals: list[DCBaseTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCBaseTerminal.DCNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC base terminals interconnected with zero impedance at a this DC connectivity
    node.
    '''
    
    DCPointOfCommonCoupling: Optional[DCPointOfCommonCoupling] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPointOfCommonCoupling.DCNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifies that this DC node is a point of common coupling DC.
    '''
    
    DCEquipmentContainer: Optional[DCEquipmentContainer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCEquipmentContainer.DCNodes',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC container for the DC nodes.
    '''
    
    DCPointOfCommonCoupling: Optional[DCPointOfCommonCoupling] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPointOfCommonCoupling.DCNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifies that this DC node is a point of common coupling DC.
    '''
    
    DCTopologicalNode: Optional[DCTopologicalNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTopologicalNode.DCNodes',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC topological node to which this DC connectivity node is assigned.
    May depend on the current state of switches in the network.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class DCTopologicalIsland(IdentifiedObject):
    '''
    An electrically connected subset of the network. DC topological islands
    can change as the current network state changes, e.g. due to:
    - disconnect switches or breakers changing state in a SCADA/EMS.
    - manual creation, change or deletion of topological nodes in a planning
    tool.
    Only energised TopologicalNode-s shall be part of the topological island.
    '''

    DCTopologicalNodes: list[DCTopologicalNode] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCTopologicalNode.DCTopologicalIsland',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC topological nodes in a DC topological island.
    '''
    
@dataclass(repr=False)
class DCTopologicalNode(IdentifiedObject):
    '''
    DC bus.
    '''

    DCTerminals: list[DCBaseTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCBaseTerminal.DCTopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    See association end TopologicalNode.Terminal.
    '''
    
    DCNodes: list[DCNode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCNode.DCTopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC connectivity nodes combined together to form this DC topological
    node. May depend on the current state of switches in the network.
    '''
    
    SvDCVoltage: list[SvDCVoltage] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SvDCVoltage.DCTopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The state DC voltage associated with the DC topological node.
    '''
    
    DCEquipmentContainer: Optional[DCEquipmentContainer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCEquipmentContainer.DCTopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The connectivity node container to which the topological node belongs.
    '''
    
    DCTopologicalIsland: Optional[DCTopologicalIsland] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTopologicalIsland.DCTopologicalNodes',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A DC topological node belongs to a DC topological island.
    '''
    
@dataclass(repr=False)
class DERDynamics(IdentifiedObject):
    '''
    Parent class supporting relationships to DER dynamics models.
    '''

    AsynchronousMachine: list[AsynchronousMachine] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AsynchronousMachine.DERDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asynchronous machine model with which this DER dynamics model is associated.
    '''
    
    PowerElectronicsConnection: list[PowerElectronicsConnection] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsConnection.DERDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power electronics connection with which this DER dynamics model is
    associated.
    '''
    
    SynchronousMachine: list[SynchronousMachine] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SynchronousMachine.DERDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Synchronous machine model with which this DER dynamics model is associated.
    '''
    
@dataclass(repr=False)
class DERGroupDispatch(IdentifiedObject):
    '''
    '''

@dataclass(repr=False)
class DERGroupForecast(IdentifiedObject):
    '''
    '''

    predictionCreationDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The timestamp for when a prediction was created
    '''
    
@dataclass(repr=False)
class DayType(IdentifiedObject):
    '''
    Group of similar days. For example it could be used to represent weekdays,
    weekend, or holidays.
    '''

    SeasonDayTypeSchedules: list[SeasonDayTypeSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SeasonDayTypeSchedule.DayType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Schedules that use this DayType.
    '''
    
@dataclass(repr=False)
class DemandResponseProgram(IdentifiedObject):
    '''
    Demand response program.
    '''

    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of demand response program; examples are CPP (critical-peak pricing),
    RTP (real-time pricing), DLC (direct load control), DBP (demand bidding
    program), BIP (base interruptible program). Note that possible types
    change a lot and it would be impossible to enumerate them all.
    '''
    
@dataclass(repr=False)
class DesignElement(IdentifiedObject):
    '''
    An element of a design that places a compatible unit or an asset at a specific
    design location
    '''

    PowerSystemResource: Optional[PowerSystemResource] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerSystemResource.DesignElement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An existing or future PSR affected by the conceptual design
    '''
    
@stereotype(CIMStereotype.deprecated)
@dataclass(repr=False)
class DesignLocation(IdentifiedObject):
    '''
    Associates a specific physical location with a design and a number of design
    elements.
    '''

    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.DesignLocation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Physical location where design elements are to be placed
    '''
    
@dataclass(repr=False)
class Diagram(IdentifiedObject):
    '''
    The diagram being exchanged. The coordinate system is a standard Cartesian
    coordinate system and the orientation attribute defines the orientation.
    The initial view related attributes can be used to specify an initial view
    with the x,y coordinates of the diagonal points.
    '''

    DiagramElements: list[DiagramObject] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DiagramObject.Diagram',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A diagram is made up of multiple diagram objects.
    '''
    
    x1InitialView: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    X coordinate of the first corner of the initial view.
    '''
    
    x2InitialView: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    X coordinate of the second corner of the initial view.
    '''
    
    y1InitialView: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Y coordinate of the first corner of the initial view.
    '''
    
    y2InitialView: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Y coordinate of the second corner of the initial view.
    '''
    
    orientation: Optional[ OrientationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coordinate system orientation of the diagram. A positive orientation
    gives standard "right-hand" orientation, with negative orientation
    indicating a "left-hand" orientation. For 2D diagrams, a positive orientation
    will result in X values increasing from left to right and Y values
    increasing from bottom to top. A negative orientation gives the "left-hand"
    orientation (favoured by computer graphics displays) with X values
    increasing from left to right and Y values increasing from top to bottom.
    '''
    
    DiagramStyle: Optional[DiagramStyle] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DiagramStyle.Diagram',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A Diagram may have a DiagramStyle.
    '''
    
@dataclass(repr=False)
class DiagramObject(IdentifiedObject):
    '''
    An object that defines one or more points in a given space. This object
    can be associated with anything that specializes IdentifiedObject. For
    single line diagrams such objects typically include such items as analog
    values, breakers, disconnectors, power transformers, and transmission lines.
    '''

    DiagramObjectPoints: list[DiagramObjectPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DiagramObjectPoint.DiagramObject',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A diagram object can have 0 or more points to reflect its layout position,
    routing (for polylines) or boundary (for polygons).
    '''
    
    drawingOrder: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The drawing order of this element. The higher the number, the later
    the element is drawn in sequence. This is used to ensure that elements
    that overlap are rendered in the correct order.
    '''
    
    isPolygon: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Defines whether or not the diagram objects points define the boundaries
    of a polygon or the routing of a polyline. If this value is true then
    a receiving application should consider the first and last points to
    be connected.
    '''
    
    offsetX: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The offset in the X direction. This is used for defining the offset
    from centre for rendering an icon (the default is that a single point
    specifies the centre of the icon).
    The offset is in per-unit with 0 indicating there is no offset from
    the horizontal centre of the icon. -0.5 indicates it is offset by 50%
    to the left and 0.5 indicates an offset of 50% to the right.
    '''
    
    offsetY: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The offset in the Y direction. This is used for defining the offset
    from centre for rendering an icon (the default is that a single point
    specifies the centre of the icon).
    The offset is in per-unit with 0 indicating there is no offset from
    the vertical centre of the icon. The offset direction is dependent
    on the orientation of the diagram, with -0.5 and 0.5 indicating an
    offset of +/- 50% on the vertical axis.
    '''
    
    rotation: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Sets the angle of rotation of the diagram object. Zero degrees is pointing
    to the top of the diagram. Rotation is clockwise. DiagramObject.rotation=0
    has the following meaning: The connection point of an element which
    has one terminal is pointing to the top side of the diagram. The connection
    point "From side" of an element which has more than one terminal is
    pointing to the top side of the diagram.
    DiagramObject.rotation=90 has the following meaning: The connection
    point of an element which has one terminal is pointing to the right
    hand side of the diagram. The connection point "From side" of an element
    which has more than one terminal is pointing to the right hand side
    of the diagram.
    '''
    
    Diagram: Optional[Diagram] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Diagram.DiagramElements',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A diagram object is part of a diagram.
    '''
    
    DiagramObjectStyle: Optional[DiagramObjectStyle] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DiagramObjectStyle.StyledObjects',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A diagram object has a style associated that provides a reference for
    the style used in the originating system.
    '''
    
    IdentifiedObject: Optional[IdentifiedObject] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IdentifiedObject.DiagramObjects',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The domain object to which this diagram object is associated.
    '''
    
@dataclass(repr=False)
class TextDiagramObject(DiagramObject):
    '''
    A diagram object for placing free-text or text derived from an associated
    domain object.
    '''

    text: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The text that is displayed by this text diagram object.
    '''
    
@dataclass(repr=False)
class DiagramObjectStyle(IdentifiedObject):
    '''
    A reference to a style used by the originating system for a diagram object.
    A diagram object style describes information such as line thickness, shape
    such as circle or rectangle etc, and colour.
    '''

    StyledObjects: list[DiagramObject] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DiagramObject.DiagramObjectStyle',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A style can be assigned to multiple diagram objects.
    '''
    
@dataclass(repr=False)
class DiagramStyle(IdentifiedObject):
    '''
    The diagram style refers to a style used by the originating system for
    a diagram. A diagram style describes information such as schematic, geographic,
    etc.
    '''

    Diagram: list[Diagram] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Diagram.DiagramStyle',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A DiagramStyle can be used by many Diagrams.
    '''
    
@dataclass(repr=False)
class Dimension(IdentifiedObject):
    '''
    As applicable, the basic linear, area, or volume dimensions of an asset,
    asset type (AssetModel) or other type of object (such as land area). Units
    and multipliers are specified per dimension.
    '''

    orientation: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A description of the orientation of the object relative to the dimensions.
    As an example, a vault may have north-south orientation for the sizeLength
    measurement and sizeDepth may be the height of the vault.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of dimension.
    '''
    
    sizeDepth: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Depth measurement.
    '''
    
    sizeDiameter: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Diameter measurement.
    '''
    
    sizeLength: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Length measurement.
    '''
    
    sizeWidth: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Width measurement.
    '''
    
    ProductAssetModel: Optional[ProductAssetModel] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProductAssetModel.Dimension',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class DimensionsInfo(IdentifiedObject):
    '''
    As applicable, the basic linear, area, or volume dimensions of an asset,
    asset type (AssetModel) or other type of object (such as land area). Units
    and multipliers are specified per dimension.
    '''

    ConstructedStructureInfo: list[StructureInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StructureInfo.ConstructedDimensions',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TransportStructureInfo: list[StructureInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StructureInfo.TransportDimensionsInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Document(IdentifiedObject):
    '''
    Parent class for different groupings of information collected and managed
    as a part of a business process. It will frequently contain references
    to other objects, such as assets, people and power system resources.
    A Document will only have one valid version. A document gets updated by
    creating a new version that supersedes the old version.
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConfigurationEvent.ChangedDocument',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All configuration events created for this document.
    '''
    
    RelatedDocument: list[Document] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Document.Document',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    comment: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Free text comment.
    '''
    
    createdDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time that this document was created.
    '''
    
    lastModifiedDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time this document was last modified. Documents may potentially
    be modified many times during their lifetime.
    '''
    
    revisionNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Revision number for this document.
    '''
    
    subject: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Document subject.
    '''
    
    title: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Document title.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Utility-specific classification of this document, according to its
    corporate standards, practices, and existing IT systems (e.g., for
    management of assets, maintenance, work, outage, customers, etc.).
    '''
    
    url: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Electronic address specifying where a document can be found.
    '''
    
    Approver: Optional[Approver] = field(
        default=None,
        metadata={
        'type': 'deprecated',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Approver.Documents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Approver of this document.
    '''
    
    Author: Optional[Author] = field(
        default=None,
        metadata={
        'type': 'deprecated',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Author.Documents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Author of this document.
    '''
    
    docStatus: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of this document. For status of subject matter this document
    represents (e.g., Agreement, Work), use 'status' attribute.
    Example values for 'docStatus.status' are draft, approved, cancelled,
    etc.
    '''
    
    Document: Optional[Document] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Document.RelatedDocument',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Editor: Optional[Editor] = field(
        default=None,
        metadata={
        'type': 'deprecated',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Editor.Documents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Editor of this document.
    '''
    
    Issuer: Optional[Issuer] = field(
        default=None,
        metadata={
        'type': 'deprecated',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Issuer.Documents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Issuer of this document.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of subject matter (e.g., Agreement, Work) this document represents.
    For status of the document itself, use 'docStatus' attribute.
    '''
    
@dataclass(repr=False)
class Agreement(Document):
    '''
    Formal agreement between two parties defining the terms and conditions
    for a set of services. The specifics of the services are, in turn, defined
    via one or more service agreements.
    '''

    signDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date this agreement was consummated among associated persons and/or
    organisations.
    '''
    
    pricingKind: Optional[ AgreementPricingKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of pricing for a contractual agreement where goods and services
    are exchanged for money.
    '''
    
@dataclass(repr=False)
class ContractResourceCertificationAgreement(Agreement):
    '''
    A specialized agreement that represents the contract between the Resource
    Owner/Operator and the grid operator for delivering grid services specified
    by the ResourceCertification.
    '''

    ResourceCertification: Optional[ResourceCertification] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceCertification.ContractResourceCertificationAgreement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CustomerAgreement(Agreement):
    '''
    Agreement between the customer and the service supplier to pay for service
    at a specific service location. It records certain billing information
    about the type of service provided at the service location and is used
    during charge creation to determine the type of service.
    '''

    MeterReadings: list[MeterReading] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeterReading.CustomerAgreement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (could be deprecated in the future) All meter readings for this customer
    agreement.
    '''
    
    UsagePoints: list[UsagePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'UsagePoint.CustomerAgreement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All service delivery points regulated by this customer agreement.
    '''
    
    isPrePay: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, the customer is a pre-pay customer for the specified service.
    '''
    
    loadMgmt: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Load management code.
    '''
    
    shutOffDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Final date and time the service will be billed to the previous customer.
    '''
    
    Customer: Optional[Customer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Customer.CustomerAgreements',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Customer for this agreement.
    '''
    
    CustomerAccount: Optional[CustomerAccount] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CustomerAccount.CustomerAgreements',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Customer account owning this agreement.
    '''
    
    ServiceCategory: Optional[ServiceCategory] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ServiceCategory.CustomerAgreements',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Service category for this agreement.
    '''
    
    ServiceSupplier: Optional[ServiceSupplier] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ServiceSupplier.CustomerAgreements',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Service supplier for this customer agreement.
    '''
    
    StandardIndustryCode: Optional[StandardIndustryCode] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StandardIndustryCode.CustomerAgreements',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Analytic(Document):
    '''
    An algorithm or calculation for making an assessment about an asset or
    asset grouping for lifecycle decision making.
    '''

    AnalyticScore: list[AnalyticScore] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AnalyticScore.Analytic',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Analytic score produced by this analytic.
    '''
    
    AssetHealthEvent: list[AssetHealthEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AssetHealthEvent.Analytic',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset health event which can be generated by this analytic.
    '''
    
    bestValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value that indicates best possible numeric value.
    '''
    
    worstValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value that indicates worst possible numeric value.
    '''
    
    kind: Optional[ AnalyticKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analytic this analytic is.
    '''
    
    scaleKind: Optional[ ScaleKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The scoring scale kind.
    '''
    
@dataclass(repr=False)
class AssetGroup(Document):
    '''
    A grouping of assets created for a purpose such as fleet analytics, inventory
    or compliance management.
    '''

    AnalyticScore: list[AnalyticScore] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AnalyticScore.AssetGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Analytic score for this asset group.
    '''
    
    kind: Optional[ AssetGroupKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of asset group this asset group is.
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class AssetModelCatalogueItem(Document):
    '''
    Provides pricing and other relevant information about a specific manufacturer's
    product (i.e., AssetModel), and its price from a given supplier. A single
    AssetModel may be availble from multiple suppliers. Note that manufacturer
    and supplier are both types of organisation, which the association is inherited
    from Document.
    '''

    ErpPOLineItems: list[POLineItem] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'POLineItem.AssetModelCatalogueItem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ChargeType(Document):
    '''
    Charge Type is the basic level configuration for settlement to process
    specific charges for invoicing purpose. Examples such as: Day Ahead Spinning
    Reserve Default Invoice Interest Charge, etc.
    '''

    chargeOrder: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Sequence of calculation.
    '''
    
    chargeVersion: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Charge version.
    '''
    
    effectiveDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Charge type effective date.
    '''
    
    factor: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Adjustment factor.
    '''
    
    frequencyType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Frequency of calculation.
    '''
    
    terminationDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Charge type termination date.
    '''
    
    totalInterval: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total number of intervals to indicate if charge is 5 minute (300),
    10 minute (150) hourly (25) or daily or monthly (1).
    '''
    
@dataclass(repr=False)
class CongestionRevenueRight(Document):
    '''
    Congestion Revenue Rights (CRR) class that is inherited from a Document
    class.
    A CRR is a financial concept that is used to hedge congestion charges.
    The CRR is usually settled based on the Locational Marginal Prices (LMPs)
    that are calculated in the day-ahead market. These LMPs are determined
    by the Day-ahead resource schedules/bids. CRRs will not hedge against marginal
    losses. If the congestion component of LMP at the sink is greater than
    at the source, then the CRR owner is entitled to receive a portion of congestion
    revenues. If the congestion component at the sink is less than at the source,
    then an obligation-type CRR owner will be charged, but an option-type CRR
    owner will not.
    '''

    Flowgate: Optional[Flowgate] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Flowgate.CongestionRevenueRight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CustomerAccount(Document):
    '''
    Assignment of a group of products and services purchased by the customer
    through a customer agreement, used as a mechanism for customer billing
    and payment. It contains common information from the various types of customer
    agreements to create billings (invoices) for a customer and receive payment.
    '''

    AccountNotification: list[AccountNotification] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AccountNotification.CustomerAccount',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CustomerAgreement.CustomerAccount',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All agreements for this customer account.
    '''
    
    billingCycle: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cycle day on which the associated customer account will normally be
    billed, used to determine when to produce the billing.
    '''
    
    budgetBill: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Budget bill code.
    '''
    
    lastBillAmount: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The last amount that will be billed to the customer prior to shut off
    of the account.
    '''
    
    Customer: Optional[Customer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Customer.CustomerAccounts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Customer owning this account.
    '''
    
@dataclass(repr=False)
class DefaultBid(Document):
    '''
    DefaultBid is a generic class to hold Default Energy Bid, Default Startup
    Bid, and Default Minimum Load Bid:
    Default Energy Bid
    A Default Energy Bid is a monotonically increasing staircase function consisting
    at maximum 10 economic bid segments, or 10 ($/MW, MW) pairs. There are
    three methods for determining the Default Energy Bid:
    <ul>
    <li>Cost Based: derived from the Heat Rate or Average Cost multiplied by
    the Gas Price Index plus 10%.</li>
    <li>LMP Based: a weighted average of LMPs in the preceding 90 days.</li>
    <li>Negotiated: an amount negotiated with the designated Independent Entity.</li>
    </ul>
    Default Startup Bid
    A Default Startup Bid (DSUB) shall be calculated for each RMR unit based
    on the Startup Cost stored in the Master File and the applicable GPI and
    EPI.
    Default Minimum Load Bid
    A Default Minimum Load Bid (DMLB) shall be calculated for each RMR unit
    based on the Minimum Load Cost stored in the Master File and the applicable
    GPI.
    '''

    RegisteredResource: Optional[RegisteredResource] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredResource.DefaultBid',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Incident(Document):
    '''
    Description of a problem in the field that may be reported in a trouble
    ticket or come from another source. It may have to do with an outage.
    '''

    CustomerNotifications: list[CustomerNotification] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CustomerNotification.Incident',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All notifications for a customer related to the status change of this
    incident.
    '''
    
    IncidentHazard: list[IncidentHazard] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IncidentHazard.Incident',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All hazards associated with this incident.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.Incident',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Location of this incident.
    '''
    
    TroubleTickets: list[TroubleTicket] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TroubleTicket.Incident',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All trouble tickets reporting this incident.
    '''
    
@dataclass(repr=False)
class InterTieBid(Document):
    '''
    This class represents the inter tie bid.
    '''

    RegisteredInterTie: Optional[RegisteredInterTie] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredInterTie.InterTieBid',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarketDocument(Document):
    '''
    Electronic document containing the information necessary to satisfy a given
    business process set of requirements.
    '''

@dataclass(repr=False)
class MarketAgreement(MarketDocument):
    '''
    An identification or eventually the contents of an agreement between two
    or more parties.
    '''

@dataclass(repr=False)
class MarketSkill(Document):
    '''
    Proficiency level of a craft, which is required to operate or maintain
    a particular type of asset and/or perform certain types of work.
    '''

    effectiveDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time the skill became effective.
    '''
    
    level: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Level of skill for a Craft.
    '''
    
    MarketPerson: Optional[MarketPerson] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MarketPerson.MarketSkills',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Outage(Document):
    '''
    Document describing details of an active or planned outage in a part of
    the electrical network.
    A non-planned outage may be created upon:
    - a breaker trip,
    - a fault indicator status change,
    - a meter event indicating customer outage,
    - a reception of one or more customer trouble calls, or
    - an operator command, reflecting information obtained from the field crew.
    Outage restoration may be performed using a switching plan which complements
    the outage information with detailed switching activities, including the
    relationship to the crew and work.
    A planned outage may be created upon:
    - a request for service, maintenance or construction work in the field,
    or
    - an operator-defined outage for what-if/contingency network analysis.
    '''

    OutageIsolationEquipment: list[ConductingEquipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConductingEquipment.Outage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Faults: list[Fault] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Fault.Outage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All faults involved in this outage.
    '''
    
@dataclass(repr=False)
class PlannedOutage(Outage):
    '''
    '''

    FieldDispatchHistory: Optional[FieldDispatchHistory] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FieldDispatchHistory.PlannedOutage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class UnplannedOutage(Outage):
    '''
    Document describing the consequence of an unplanned outage in a part of
    the electrical network. For the purposes of this model, an unplanned outage
    refers to a state where energy is not delivered; such as, customers out
    of service, a street light is not served, etc.
    A unplanned outage may be created upon:
    - impacts the SAIDI calculation
    - a breaker trip,
    - a fault indicator status change,
    - a meter event indicating customer outage,
    - a reception of one or more customer trouble calls, or
    - an operator command, reflecting information obtained from the field crew.
    Outage restoration may be performed using a switching plan which complements
    the outage information with detailed switching activities, including the
    relationship to the crew and work.
    '''

    FieldDispatchHistory: Optional[FieldDispatchHistory] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FieldDispatchHistory.UnplannedOutage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TroubleTicket: list[TroubleTicket] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TroubleTicket.UnplannedOutage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class OutagePlan(Document):
    '''
    Document containing the definition of planned outages of equipment and/or
    usage points. It will reference switching plans that are used to execute
    the planned outage.
    '''

    Customer: list[Customer] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Customer.OutagePlan',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The customers that are affected by this planned outage.
    '''
    
@dataclass(repr=False)
class POLineItem(Document):
    '''
    Of an PurchaseOrder, this is an individually ordered item or product along
    with the quantity, price and other descriptive information.
    '''

    AssetModelCatalogueItem: Optional[AssetModelCatalogueItem] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetModelCatalogueItem.ErpPOLineItems',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ErpRecDelLineItem: Optional[ErpRecDelvLineItem] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ErpRecDelvLineItem.ErpPOLineItem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ErpReqLineItem: Optional[ErpReqLineItem] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ErpReqLineItem.ErpPOLineItem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PurchaseOrder: Optional[PurchaseOrder] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PurchaseOrder.POLineItem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class PricingStructure(Document):
    '''
    Grouping of pricing components and prices used in the creation of customer
    charges and the eligibility criteria under which these terms may be offered
    to a customer. The reasons for grouping include state, customer classification,
    site characteristics, classification (i.e. fee price structure, deposit
    price structure, electric service price structure, etc.) and accounting
    requirements.
    '''

    code: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unique user-allocated key for this pricing structure, used by company
    representatives to identify the correct price structure for allocating
    to a customer. For rate schedules it is often prefixed by a state code.
    '''
    
    dailyCeilingUsage: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Absolute maximum valid non-demand usage quantity used in validating
    a customer's billed non-demand usage.
    '''
    
    dailyEstimatedUsage: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used in place of actual computed estimated average when history of
    usage is not available, and typically manually entered by customer
    accounting.
    '''
    
    dailyFloorUsage: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Absolute minimum valid non-demand usage quantity used in validating
    a customer's billed non-demand usage.
    '''
    
    taxExemption: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if this pricing structure is not taxable.
    '''
    
    revenueKind: Optional[ RevenueKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (accounting) Kind of revenue, often used to determine the grace period
    allowed, before collection actions are taken on a customer (grace periods
    vary between revenue classes).
    '''
    
    ServiceCategory: Optional[ServiceCategory] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ServiceCategory.PricingStructures',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Service category to which this pricing structure applies.
    '''
    
@dataclass(repr=False)
class Procedure(Document):
    '''
    Documented procedure for various types of work or work tasks on assets.
    '''

    ProcedureDataSets: list[ProcedureDataSet] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProcedureDataSet.Procedure',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All data sets captured by this procedure.
    '''
    
    instruction: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Textual description of this procedure.
    '''
    
    sequenceNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Sequence number in a sequence of procedures being performed.
    '''
    
    kind: Optional[ ProcedureKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of procedure.
    '''
    
@dataclass(repr=False)
class ProcedureDataSet(Document):
    '''
    A data set recorded each time a procedure is executed. Observed results
    are captured in associated measurement values and/or values for properties
    relevant to the type of procedure performed.
    '''

    completedDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time procedure was completed.
    '''
    
    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.ProcedureDataSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset to which this procedure data set applies.
    '''
    
    Procedure: Optional[Procedure] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Procedure.ProcedureDataSets',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Procedure capturing this data set.
    '''
    
    WorkTaskStep: Optional[WorkTaskStep] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WorkTaskStep.ProcedureDataSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Work task step that created this procedure data set.
    '''
    
@dataclass(repr=False)
class DiagnosisDataSet(ProcedureDataSet):
    '''
    The result of a problem (typically an asset failure) diagnosis. Contains
    complete information like what might be received from a lab doing forensic
    analysis of a failed asset.
    '''

    effect: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Effect of problem.
    '''
    
    failureMode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Failuer mode, for example: Failure to Insulate; Failure to conduct;
    Failure to contain oil; Failure to provide ground plane; Other.
    '''
    
    finalCause: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cause of problem determined during diagnosis.
    '''
    
    finalCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Code for diagnosed probem type.
    '''
    
    finalOrigin: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Origin of problem determined during diagnosis.
    '''
    
    finalRemark: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Remarks pertaining to findings during problem diagnosis.
    '''
    
    preliminaryCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Code for problem type determined during preliminary assessment.
    '''
    
    preliminaryDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time preliminary assessment of problem was performed.
    '''
    
    preliminaryRemark: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Remarks pertaining to preliminary assessment of problem.
    '''
    
    rootCause: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Root cause of problem determined during diagnosis.
    '''
    
    rootOrigin: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Root origin of problem determined during diagnosis.
    '''
    
    rootRemark: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Remarks pertaining to root cause findings during problem diagnosis.
    '''
    
    phaseCode: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase(s) diagnosed.
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class InspectionDataSet(ProcedureDataSet):
    '''
    Documents the result of one inspection, for a given attribute of an asset.
    '''

    AccordingToSchedules: list[ScheduledEventData] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ScheduledEventData.InspectionDataSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    locationCondition: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description of the conditions of the location where the asset resides.
    '''
    
@dataclass(repr=False)
class LabTestDataSet(ProcedureDataSet):
    '''
    Results of testing done by a lab.
    '''

    conclusion: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conclusion drawn from test results.
    '''
    
    conclusionConfidence: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description of confidence in conclusion.
    '''
    
    testEquipmentID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identity of lab equipment used to perform test.
    '''
    
    reasonForTest: Optional[ TestReason ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reason for performing test.
    '''
    
    AssetTestLab: Optional[AssetTestLab] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetTestLab.LabTestDataSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Test lab which produced this set of lab test results.
    '''
    
    Specimen: Optional[Specimen] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Specimen.LabTestDataSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specimen on which lab testing done in determining results.
    '''
    
@dataclass(repr=False)
class MaintenanceDataSet(ProcedureDataSet):
    '''
    The result of a maintenance activity, a type of Procedure, for a given
    attribute of an asset.
    '''

    conditionAfter: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Condition of asset just following maintenance procedure.
    '''
    
    conditionBefore: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description of the condition of the asset just prior to maintenance
    being performed.
    '''
    
    maintCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Code for the type of maintenance performed.
    '''
    
@dataclass(repr=False)
class TestDataSet(ProcedureDataSet):
    '''
    Test results, usually obtained by a lab or other independent organisation.
    '''

    conclusion: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conclusion drawn from test results.
    '''
    
    specimenID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifier of specimen used in inspection or test.
    '''
    
    specimenToLabDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time the specimen was received by the lab.
    '''
    
@dataclass(repr=False)
class PurchaseOrder(Document):
    '''
    A document that communicates an order to purchase goods from a buyer to
    a supplier. The PurchaseOrder carries information to and from the buyer
    and supplier. It is a legally binding document once both Parties agree
    to the contents and the specified terms and conditions of the order.
    '''

    POLineItem: list[POLineItem] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'POLineItem.PurchaseOrder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ServiceOrder(Document):
    '''
    A Service Order is a Work Order for work directly related to a Service
    Location.
    '''

    serviceWorkKindOther: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identification of the service work kind if the enumeration is other.
    '''
    
    UsagePoint: Optional[UsagePoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UsagePoint.ServiceOrder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    UsagePoint for which a ServiceOrder has been created
    '''
    
@dataclass(repr=False)
class Skill(Document):
    '''
    Proficiency level of a craft, which is required to operate or maintain
    a particular type of asset and/or perform certain types of work.
    '''

    effectiveDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time the skill became effective.
    '''
    
    level: Optional[ SkillLevelKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration deprecated Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Level of skill for a Craft.
    '''
    
    ErpPerson: Optional[OldPerson] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OldPerson.Skills',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class Specification(Document):
    '''
    Specification can be used for various purposes relative to an asset, a
    logical device (PowerSystemResource), location, etc. Examples include documents
    supplied by manufacturers such as asset installation instructions, asset
    maintenance instructions, etc.
    '''

    AssetRequirement: list[AssetRequirement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AssetRequirement.Specification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CoolingInfo: list[CoolingInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CoolingInfo.Specification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Mediums: list[Medium] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Medium.Specification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SoundInfo: list[SoundInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SoundInfo.Specification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SurfaceTreatmentInfo: list[SurfaceTreatmentInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SurfaceTreatmentInfo.Specification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    AssetProperites: list[UserAttribute] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'UserAttribute.PropertySpecification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    UserAttributes used to specify further properties of the asset covered
    with this specification. Use 'name' to specify what kind of property
    it is, and 'value.value' attribute for the actual value.
    '''
    
    Ratings: list[UserAttribute] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'UserAttribute.RatingSpecification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    UserAttributes used to specify ratings of the asset covered by this
    specification. Ratings also can be used to set the initial value of
    operational measurement limits. Use 'name' to specify what kind of
    rating it is (e.g., voltage, current), and 'value' attribute for the
    actual value and unit information of the rating.
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class StandardIndustryCode(Document):
    '''
    The Standard Industrial Classification (SIC) are the codes that identify
    the type of products/service an industry is involved in, and used for statutory
    reporting purposes. For example, in the USA these codes are located by
    the federal government, and then published in a book entitled "The Standard
    Industrial Classification Manual". The codes are arranged in a hierarchical
    structure.
    Note that Residential Service Agreements are not classified according to
    the SIC codes.
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CustomerAgreement.StandardIndustryCode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class SwitchingOrder(Document):
    '''
    Transmits a switching plan to a crew in order for the plan to be executed.
    '''

    Location: list[Location] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Location.SwitchingOrder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Tariff(Document):
    '''
    Document, approved by the responsible regulatory agency, listing the terms
    and conditions, including a schedule of prices, under which utility services
    will be provided. It has a unique number within the state or province.
    For rate schedules it is frequently allocated by the affiliated Public
    utilities commission (PUC).
    '''

    endDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if tariff became inactive) Date tariff was terminated.
    '''
    
    startDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date tariff was activated.
    '''
    
@dataclass(repr=False)
class TimeSchedule(Document):
    '''
    Description of anything that changes through time. Time schedule is used
    to perform a single-valued function of time. Use inherited 'type' attribute
    to give additional information on this schedule, such as: periodic (hourly,
    daily, weekly, monthly, etc.), day of the month, by date, calendar (specific
    times and dates).
    '''

    TimePoints: list[TimePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TimePoint.TimeSchedule',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Sequence of time points belonging to this time schedule.
    '''
    
    dayOfWeek: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The day of the week associated with a schedule.
    '''
    
    disabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if this schedule is deactivated (disabled).
    '''
    
    recurrencePattern: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Interval at which the scheduled action repeats (e.g., first Monday
    of every month, last day of the month, etc.).
    '''
    
    scheduleFrequency: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The defined interval or regularity at which a task, event, or process
    is planned to occur within a schedule.
    '''
    
    scheduleMonth: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The month in which a schedule occurs.
    '''
    
    offset: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The offset from midnight (i.e., 0 h, 0 min, 0 s) for the periodic time
    points to begin. For example, for an interval meter that is set up
    for five minute intervals ('recurrencePeriod'=300=5 min), setting 'offset'=120=2
    min would result in scheduled events to read the meter executing at
    2 min, 7 min, 12 min, 17 min, 22 min, 27 min, 32 min, 37 min, 42 min,
    47 min, 52 min, and 57 min past each hour.
    '''
    
    recurrencePeriod: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Duration between time points, from the beginning of one period to the
    beginning of the next period. Note that a device like a meter may have
    multiple interval periods (e.g., 1 min, 5 min, 15 min, 30 min, or 60
    min).
    '''
    
    scheduleHour: Optional[ float | Hours ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hour of the day associated with a schedule.
    '''
    
    scheduleMinute: Optional[ float | Minutes ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minute(s) after the hour associated with a schedule.
    '''
    
@dataclass(repr=False)
class TroubleOrder(Document):
    '''
    Trouble order sends an incident to a crew to initiate a response to an
    unplanned outage.
    '''

    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.TroubleOrder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TroubleTicket: list[TroubleTicket] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TroubleTicket.TroubleOrder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class TroubleTicket(Document):
    '''
    '''

    IncidentHazard: list[IncidentHazard] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IncidentHazard.TroubleTicket',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All hazards reported with this trouble ticket.
    '''
    
    comment: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Free-form comment associated with the trouble call for example, "customer
    reported a large flash", etc.
    '''
    
    dateTimeOfReport: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time the trouble has been reported.
    '''
    
    firstResponderStatus: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates whether the first responder such as police, fire department
    etc.has been notified and whether they are on site or en route.
    '''
    
    multiplePremises: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Set to true if the outage report indicated that other neighbors are
    also out of power.
    '''
    
    resolvedDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time this trouble ticket has been resolved.
    '''
    
    troubleCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Trouble code (e.g., power down, flickering lights, partial power, etc).
    '''
    
    reportingKind: Optional[ TroubleReportingKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates how the customer reported trouble.
    '''
    
    Customer: Optional[Customer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Customer.TroubleTickets',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Customer for whom this trouble ticket is relevant.
    '''
    
    Incident: Optional[Incident] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Incident.TroubleTickets',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Incident reported in this trouble ticket
    '''
    
    ServiceLocation: Optional[ServiceLocation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ServiceLocation.TroubleTicket',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TroubleOrder: Optional[TroubleOrder] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TroubleOrder.TroubleTicket',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    UnplannedOutage: Optional[UnplannedOutage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UnplannedOutage.TroubleTicket',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Warranty(Document):
    '''
    The document stipulates what is guaranteed and what repairs or remediations
    will be performed to ensure the promised quality of the service or good,
    failing these conditions. Warranties commonly cover defects in workmanship
    but may also cover physical abuse.
    '''

    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.Warranty',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class WorkRequest(Document):
    '''
    Document used to plan or initiate work
    '''

    ActivityRecord: list[ActivityRecord] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ActivityRecord.WorkRequest',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Record of activity on a work request.
    '''
    
    WorkManager: list[WorkManager] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'WorkManager.WorkRequest',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Work organization assigned to process the work request.
    '''
    
@dataclass(repr=False)
class ServiceRequest(WorkRequest):
    '''
    Request for work related to service provided to a customer.
    '''

    appointmentRequested: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    serviceSize: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The size or quantity requested by the customer; for example, 200 AMPS
    for electrical service, 50 MBits per second for internet service, etc.
    '''
    
    kind: Optional[ WorkKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    serviceKind: Optional[ ServiceKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Domain(IdentifiedObject):
    '''
    An area of activity defined within the energy market.
    '''

@stereotype(CIMStereotype.deprecated)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class ElectronicAddress(IdentifiedObject):
    '''
    Electronic address information.
    '''

    email: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Primary email address.
    '''
    
    email1: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Primary email address.
    '''
    
    email2: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Alternate email address.
    '''
    
    ipv4: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Internet address using internet protocol version 4 format.
    '''
    
    ipv6: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Internet address using internet protocol version 6 format.
    '''
    
    lan: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Address on local area network.
    '''
    
    mac: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    MAC (Media Access Control) address.
    '''
    
    password: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Password needed to log in.
    '''
    
    radio: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unique identifier assigned to a wireless communication device.
    For example, Bluetooth Address, RFID Tag Address, Zigbee Network Address.
    '''
    
    text: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unique identifier assigned to a device capable of sending SMS messages.
    '''
    
    userID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    User ID needed to log in, which can be for an individual person, an
    organisation, a location, etc.
    '''
    
    web: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    World wide web address.
    '''
    
@dataclass(repr=False)
class EndDeviceControl(IdentifiedObject):
    '''
    Instructs an end device (or an end device group) to perform a specified
    action.
    '''

    EndDeviceAction: Optional[EndDeviceAction] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceAction.EndDeviceControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End device action issued by this end device control.
    '''
    
    drProgramLevel: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Level of a demand response program request, where 0=emergency. Note:
    Attribute is not defined on DemandResponseProgram as it is not its
    inherent property (it serves to control it).
    '''
    
    drProgramMandatory: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Whether a demand response program request is mandatory. Note: Attribute
    is not defined on DemandResponseProgram as it is not its inherent property
    (it serves to control it).
    '''
    
    issuerID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unique identifier of the business entity originating an end device
    control.
    '''
    
    issuerTrackingID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifier assigned by the initiator (e.g. retail electric provider)
    of an end device control action to uniquely identify the demand response
    event, text message, or other subject of the control action. Can be
    used when cancelling an event or text message request or to identify
    the originating event or text message in a consequential end device
    event.
    '''
    
    reason: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reason for the control action that allows to determine how to continue
    processing. For example, disconnect meter command may require different
    processing by the receiving system if it has been issued for a network-related
    reason (protection) or for a payment-related reason.
    '''
    
    EndDeviceAction: Optional[EndDeviceAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceAction.EndDeviceControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End device action issued by this end device control.
    '''
    
    EndDeviceControlType: Optional[EndDeviceControlType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceControlType.EndDeviceControls',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of this end device control.
    '''
    
@dataclass(repr=False)
class EndDeviceControlType(IdentifiedObject):
    '''
    Detailed description for a control produced by an end device. Values in
    attributes allow for creation of recommended codes to be used for identifying
    end device controls as follows: <type>.<domain>.<subDomain>.<eventOrAction>.
    '''

    EndDeviceControls: list[EndDeviceControl] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDeviceControl.EndDeviceControlType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All end device controls of this type.
    '''
    
    domain: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High-level nature of the control.
    '''
    
    eventOrAction: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The most specific part of this control type. It is mainly in the form
    of a verb that gives action to the control that just occurred.
    '''
    
    subDomain: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    More specific nature of the control, as a further sub-categorisation
    of 'domain'.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of physical device from which the control was created. A value
    of zero (0) can be used when the source is unknown.
    '''
    
@dataclass(repr=False)
class EndDeviceEventType(IdentifiedObject):
    '''
    Detailed description for an event produced by an end device. Values in
    attributes allow for creation of recommended codes to be used for identifying
    end device events as follows: <type>.<domain>.<subDomain>.<eventOrAction>.
    '''

    EndDeviceEvents: list[EndDeviceEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDeviceEvent.EndDeviceEventType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All end device events of this type.
    '''
    
    domain: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High-level nature of the event. By properly classifying events by a
    small set of domain codes, a system can more easily run reports based
    on the types of events that have occurred or been received.
    '''
    
    eventOrAction: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The most specific part of this event type. It is mainly in the form
    of a verb that gives action to the event that just occurred.
    '''
    
    subDomain: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    More specific nature of the event, as a further sub-categorisation
    of 'domain'.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of physical device from which the event was created. A value of
    zero (0) can be used when the source is unknown.
    '''
    
@dataclass(repr=False)
class EndDeviceGroup(IdentifiedObject):
    '''
    Abstraction for management of group communications within a two-way AMR
    system or the data for a group of related end devices. Commands can be
    issued to all of the end devices that belong to the group using a defined
    group address and the underlying AMR communication infrastructure. A DERGroup
    and a PANDeviceGroup is an EndDeviceGroup.
    '''

    DispatchablePowerCapability: Optional[DispatchablePowerCapability] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DispatchablePowerCapability.EndDeviceGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of this group.
    '''
    
    DERFunction: Optional[DERFunction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DERFunction.EndDeviceGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    DispatchablePowerCapability: Optional[DispatchablePowerCapability] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DispatchablePowerCapability.EndDeviceGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    version: Optional[Version] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class EnergyArea(IdentifiedObject):
    '''
    Describes an area having energy production or consumption. Specializations
    are intended to support the load allocation function as typically required
    in energy management systems or planning studies to allocate hypothesized
    load levels to individual load points for power flow analysis. Often the
    energy area can be linked to both measured and forecast load levels.
    '''

    ControlArea: Optional[ControlArea] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlArea.EnergyArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The control area specification that is used for the load forecast.
    '''
    
    ControlArea: Optional[ControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlArea.EnergyArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The control area specification that is used for the load forecast.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class LoadArea(EnergyArea):
    '''
    The class is the root or first level in a hierarchical structure for grouping
    of loads for the purpose of load flow load scaling.
    '''

    SubLoadAreas: list[SubLoadArea] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SubLoadArea.LoadArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The SubLoadAreas in the LoadArea.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class SubLoadArea(EnergyArea):
    '''
    The class is the second level in a hierarchical structure for grouping
    of loads for the purpose of load flow load scaling.
    '''

    LoadGroups: list[LoadGroup] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'LoadGroup.SubLoadArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Loadgroups in the SubLoadArea.
    '''
    
    LoadArea: Optional[LoadArea] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LoadArea.SubLoadAreas',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The LoadArea where the SubLoadArea belongs.
    '''
    
@dataclass(repr=False)
class EnergyPriceIndex(IdentifiedObject):
    '''
    An Energy Price Index for each Resource is valid for a period (e.g. daily)
    that is identified by a Valid Period Start Time and a Valid Period End
    Time. An Energy Price Index is in $/MWh.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.EnergyPriceIndex',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class EnergySchedulingType(IdentifiedObject):
    '''
    Used to define the type of generation for scheduling purposes.
    '''

    EnergySource: list[EnergySource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EnergySource.EnergySchedulingType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Energy Source of a particular Energy Scheduling Type.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class EnergySourceModification(IdentifiedObject):
    '''
    Energy source action.
    '''

    EnergySource: Optional[EnergySource] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergySource.EnergySourceAction',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The EnergySource which is associated with an EnergySourceAction.
    '''
    
@dataclass(repr=False)
class EnvironmentalMonitoringStation(IdentifiedObject):
    '''
    An environmental monitoring station, examples of which could be a weather
    station or a seismic monitoring station.
    '''

    UsagePoint: list[UsagePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'UsagePoint.EnvironmentalMonitoringStation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    dstObserved: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Whether this station is currently reporting using daylight saving time.
    Intended to aid a utility Weather Service in interpreting information
    coming from a station and has no direct relationship to the manner
    in which time is expressed in EnvironmentalValueSet.
    '''
    
    isNetworked: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that station is part of a network of stations used to monitor
    weather phenomena covering a large geographical area.
    '''
    
    timeZoneOffset: Optional[ float | Minutes ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time offset from UTC (a.k.a. GMT) configured in the station "clock",
    not (necessarily) the time zone in which the station is physically
    located.
    This attribute exists to support management of utility monitoring stations
    and has no direct relationship to the manner in which time is expressed
    in EnvironmentalValueSet.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.EnvironmentalMonitoringStation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Location of this monitoring station.
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class ErpCompetency(IdentifiedObject):
    '''
    Information that describes aptitudes of a utility employee. Unlike Skills
    that an ErpPerson must be certified to perform before undertaking certain
    type of assignments (to be able to perfrom a Craft), ErpCompetency has
    more to do with typical Human Resource (HR) matters such as schooling,
    training, etc.
    '''

    ErpPersons: list[OldPerson] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OldPerson.ErpCompetency',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class ErpInventory(IdentifiedObject):
    '''
    Utility inventory-related information about an item or part (and not for
    description of the item and its attributes). It is used by ERP applications
    to enable the synchronization of Inventory data that exists on separate
    Item Master databases. This data is not the master data that describes
    the attributes of the item such as dimensions, weight, or unit of measure
    - it describes the item as it exists at a specific location.
    '''

    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.ErpInventory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class ErpItemMaster(IdentifiedObject):
    '''
    Any unique purchased part for manufactured product tracked by ERP systems
    for a utility.
    Item, as used by the OAG, refers to the basic information about an item,
    including its attributes, cost, and locations. It does not include item
    quantities. Compare to the Inventory, which includes all quantities and
    other location-specific information.
    '''

    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.ErpItemMaster',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class ErpPersonnel(IdentifiedObject):
    '''
    Information that applies to the basic data about a utility person, used
    by ERP applications to transfer Personnel data for a worker.
    '''

    ErpPersons: list[OldPerson] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OldPerson.ErpPersonnel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class ErpRecDelvLineItem(IdentifiedObject):
    '''
    Of an ErpReceiveDelivery, this is an individually received good or service
    by the Organisation receiving goods or services. It may be used to indicate
    receipt of goods in conjunction with a purchase order line item.
    '''

    ErpPOLineItem: Optional[POLineItem] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'POLineItem.ErpRecDelLineItem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class ErpReqLineItem(IdentifiedObject):
    '''
    Information that describes a requested item and its attributes.
    '''

    ErpPOLineItem: Optional[POLineItem] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'POLineItem.ErpReqLineItem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class Fault(IdentifiedObject):
    '''
    Abnormal condition causing current flow through conducting equipment, such
    as caused by equipment failure or short circuits from objects not typically
    modelled (for example, a tree falling on a line).
    '''

    occurredDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The date and time at which the fault occurred.
    '''
    
    kind: Optional[ PhaseConnectedFaultKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of phase fault.
    '''
    
    phases: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The phases participating in the fault. The fault connections into these
    phases are further specified by the type of fault.
    '''
    
    FaultyEquipment: Optional[Equipment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Equipment.Faults',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Equipment carrying this fault.
    '''
    
    GridDisturbance: Optional[GridDisturbance] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GridDisturbance.Fault',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    A grid disturbance to contain all faults.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.Fault',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Outage: Optional[Outage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Outage.Faults',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Outage associated with this fault.
    '''
    
    SimulationEvents: Optional[SimulationEvents] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SimulationEvents.FaultEvent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The simulation events to which this simulation fault event belongs
    to.
    '''
    
    SystemOperator: Optional[SystemOperator] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SystemOperator.Fault',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The system operator in whose control area this fault occurred.
    '''
    
@dataclass(repr=False)
class EquipmentFault(Fault):
    '''
    A fault applied at the terminal, external to the equipment. This class
    is not used to specify faults internal to the equipment.
    '''

    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.EquipmentFaults',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal connecting to the bus to which the fault is applied.
    '''
    
@dataclass(repr=False)
class LineFault(Fault):
    '''
    A fault that occurs on an AC line segment at some point along the length.
    '''

    lengthFromTerminal1: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The length to the place where the fault is located starting from terminal
    with sequence number 1 of the faulted line segment.
    '''
    
    ACLineSegment: Optional[ACLineSegment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACLineSegment.LineFaults',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line segment of this line fault.
    '''
    
@stereotype(CIMStereotype.Part3Ext)
@dataclass(repr=False)
class FaultCauseType(IdentifiedObject):
    '''
    Type of cause of the fault.
    '''

    ConfigurationEvent: list[ConfigurationEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Part 3 Ext',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConfigurationEvent.FaultCauseType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class FieldDispatchHistory(IdentifiedObject):
    '''
    The history of field dispatch statuses for this work.
    '''

    FieldDispatchStep: list[FieldDispatchStep] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FieldDispatchStep.FieldDispatchHistory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Crew: Optional[Crew] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Crew.FieldDispatchHistory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PlannedOutage: Optional[PlannedOutage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PlannedOutage.FieldDispatchHistory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    UnplannedOutage: Optional[UnplannedOutage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UnplannedOutage.FieldDispatchHistory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class FinancialInfo(IdentifiedObject):
    '''
    Various current financial properties associated with a particular asset.
    Historical properties may be determined by ActivityRecords associated with
    the asset.
    '''

    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.FinancialInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The asset to which this financial information relates.
    '''
    
    account: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The account to which this actual material item is charged.
    '''
    
    costDescription: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description of the cost.
    '''
    
    costType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of cost to which this Material Item belongs.
    '''
    
    plantTransferDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time asset's financial value was put in plant for regulatory
    accounting purposes (e.g., for rate base calculations). This is sometime
    referred to as the "in-service date".
    '''
    
    purchaseDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time asset was purchased.
    '''
    
    purchaseOrderNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Purchase order identifier.
    '''
    
    valueDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time at which the financial value was last established.
    '''
    
    warrantyEndDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time warranty on asset expires.
    '''
    
    actualPurchaseCost: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The actual purchase cost of this particular asset.
    '''
    
    financialValue: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of asset as of 'valueDateTime'.
    '''
    
    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.FinancialInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The asset to which this financial information relates.
    '''
    
@dataclass(repr=False)
class FlowgatePartner(IdentifiedObject):
    '''
    Flowgate defined partner.
    '''

    FlowgateValue: Optional[FlowgateValue] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FlowgateValue.FlowgatePartner',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FlowgateValue: Optional[FlowgateValue] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FlowgateValue.FlowgatePartner',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ForbiddenRegion(IdentifiedObject):
    '''
    Forbbiden region is operating ranges where the units are unable to maintain
    steady operation without causing equipment damage. The four attributes
    that define a forbidden region are the low MW, the High MW, the crossing
    time, and the crossing cost.
    '''

    crossingCost: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cost associated with crossing the forbidden region
    '''
    
    crossTime: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time to cross the forbidden region in minutes.
    '''
    
    highMW: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High end of the region definition
    '''
    
    lowMW: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Low end of the region definition.
    '''
    
@dataclass(repr=False)
class FormerReference(IdentifiedObject):
    '''
    Used to indicate former references to the same piece of equipment. The
    ID, name, and effectivity dates are utilized.
    '''

    RegisteredResource: Optional[RegisteredResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredResource.FormerReference',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class FossilFuel(IdentifiedObject):
    '''
    The fossil fuel consumed by the non-nuclear thermal generating unit. For
    example, coal, oil, gas, etc. These are the specific fuels that the generating
    unit can consume.
    '''

    FuelAllocationSchedules: list[FuelAllocationSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FuelAllocationSchedule.FossilFuel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A fuel allocation schedule shall have a fossil fuel.
    '''
    
    PowerElectronicsThermalUnit: list[PowerElectronicsThermalUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsThermalUnit.FossilFuels',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    fuelHeatContent: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The amount of heat per weight (or volume) of the given type of fuel.
    '''
    
    fossilFuelType: Optional[ FuelType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of fossil fuel, such as coal, oil, or gas.
    '''
    
    fuelCost: Optional[ float | CostPerHeatUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The cost in terms of heat value for the given type of fuel.
    '''
    
    fuelDispatchCost: Optional[ float | CostPerHeatUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The cost of fuel used for economic dispatching which includes: fuel
    cost, transportation cost, and incremental maintenance cost.
    '''
    
    fuelEffFactor: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The efficiency factor for the fuel (per unit) in terms of the effective
    energy absorbed.
    '''
    
    fuelHandlingCost: Optional[ float | CostPerHeatUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Handling and processing cost associated with this fuel.
    '''
    
    fuelMixture: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Relative amount of the given type of fuel, when multiple fuels are
    being consumed.
    '''
    
    fuelSulfur: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The fuel's fraction of pollution credit per unit of heat content.
    '''
    
    highBreakpointP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power output level of the unit at which the given type of
    fuel is switched on. This fuel (e.g., oil) is sometimes used to supplement
    the base fuel (e.g., coal) at high active power output levels.
    '''
    
    lowBreakpointP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power output level of the unit at which the given type of
    fuel is switched off. This fuel (e.g., oil) is sometimes used to stabilize
    the base fuel (e.g., coal) at low active power output levels.
    '''
    
    FuelStorage: Optional[FuelStorage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuelStorage.FossilFuel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fuel storage that store fossil fuels.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.FossilFuels',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have one or more fossil fuels.
    '''
    
@dataclass(repr=False)
class FuelRegion(IdentifiedObject):
    '''
    Indication of region for fuel inventory purposes.
    '''

    GasPrice: Optional[GasPrice] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GasPrice.FuelRegion',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    OilPrice: Optional[OilPrice] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OilPrice.FuelRegion',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: list[RegisteredGenerator] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegisteredGenerator.FuelRegion',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    fuelRegionType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of fuel region
    '''
    
    lastModified: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time of last update
    '''
    
    GasPrice: Optional[GasPrice] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GasPrice.FuelRegion',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    OilPrice: Optional[OilPrice] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OilPrice.FuelRegion',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.FuelRegion',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class FunctionBlock(IdentifiedObject):
    '''
    Function block is a function described as a set of elementary blocks. The
    blocks describe the function between input variables and output variables.
    '''

    DestinationSideLink: list[FunctionFunctionLink] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionFunctionLink.DestinationFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    FunctionFunctionLink providing a function block input from another
    function block output.
    '''
    
    SourceSideLink: list[FunctionFunctionLink] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionFunctionLink.SourceFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    FunctionFunctionLink providing a function block output to another function
    block as input.
    '''
    
    Input: list[FunctionInputVariable] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionInputVariable.Function',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function input variable describe the input or domain to the function
    block.
    '''
    
    FunctionOutputVariable: list[FunctionOutputVariable] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionOutputVariable.FunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function output variable describe the output or codomain to the function
    block.
    '''
    
    enabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True, if the function block is enabled (active). Otherwise false.
    '''
    
    normalEnabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True, if the function block is normally enabled (active). Otherwise
    false.
    '''
    
    AutomationBlockGroup: Optional[AutomationBlockGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AutomationBlockGroup.FunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Automation block group which has function blocks.
    '''
    
    AutomationFunction: Optional[AutomationFunction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AutomationFunction.FunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Automation function describe automation that this function block is
    part of.
    '''
    
    FunctionBlockType: Optional[FunctionBlockType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FunctionBlockType.FunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    FunctionBlockType defining the behaviour inputs and outputs of generic
    FunctionBlock.
    '''
    
@dataclass(repr=False)
class BooleanLogic(FunctionBlock):
    '''
    Specialization of FunctionBlock class intended to define a boolean logic
    gate. Its inputs should be specified by FunctionFunctionLink instances.
    If the comparisonValue attribute is defined, operate against the comparisonValue
    (same number of inputs as outputs).
    '''

@dataclass(repr=False)
class ConstantFunctionBlock(FunctionBlock):
    '''
    Class to define a function block containing a constant value. A FunctionBlockType
    should be associated along with a FunctionLogicDescription with an specified
    language attribute. The typeConstant attribute should be aligned with available
    data types in the chosen programing language.
    '''

@dataclass(repr=False)
class ControlFunctionBlock(FunctionBlock):
    '''
    Control function block is a function block that contains an algorithm for
    controlling the equipment.
    '''

    isDiscrete: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True, if the control function is discrete. This applies to equipment
    with discrete controls, e.g. tap changers and shunt compensators.
    '''
    
    targetDeadband: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target deadband is used with discrete control to avoid excessive update
    of controls like tap changers and shunt compensator banks while regulating.
    The attribute shall be a positive value or zero. If isDiscrete is set
    to "false", the targetDeadband is to be ignored.
    Note that for instance, if the targetValue is 100 kV and the targetDeadband
    is 2 kV the range is from 99 to 101 kV.
    '''
    
    maxAllowedTargetValue: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum allowed target value given by the percent of target value.
    The allowed value range is [0,100].
    '''
    
    minAllowedTargetValue: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum allowed target value given by the percent of target value.
    The allowed value range is [0,100].
    '''
    
    normalMaxAllowedTargetValue: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal maximum allowed target value given by the percent of target
    value.
    The allowed value range is [0,100].
    '''
    
    normalMinAllowedTargetValue: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal minimum allowed target value given by the percent of target
    value.
    The allowed value range is [0,100].
    '''
    
@dataclass(repr=False)
class ACEmulationControlFunction(ControlFunctionBlock):
    '''
    The AC emulation control function is used when AC emulation model is activated
    for a DC system. It consists in computing the active power set point of
    the DC system as a function of the voltage angle difference between both
    points of common coupling with the AC network in order to mimic the behavior
    of an AC transmission line. This control mode enables the automatic adjustment
    of the active power reference following variations of the AC system operational
    point.
    The setpoint of the DC system is calculated by Psetpoint=Pref+Kdc*(angle1-angle2),
    where
    - Pref is the existing active power setpoint;
    - Kdc is the control system gain and
    - angle1 and angle2 are the phase angle measurement (measured at points
    of common coupling with the AC network) respectively at the side 1 and
    2 of the DC system.
    '''

    gain: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Control system gain in AC transmission emulation control measured in
    MW/deg. It plays the role of an admittance of the equivalent AC transmission
    line that the control is emulating the higher is the gain the higher
    is the active power transfer at steady state.
    '''
    
    referenceP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Existing active power setpoint used to calculate the active power setpoint
    of the AC emulation control.
    '''
    
    timeConstant: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Control system time constant in AC transmission emulation control.
    It affects the time needed to
    reach a new steady state equilibrium point after a network perturbation
    extremely important to guarantee N-1 relief related to an interconnection.
    The higher is time constant the slower is the DC system dynamic.
    '''
    
@dataclass(repr=False)
class ActivePowerControlFunction(ControlFunctionBlock):
    '''
    Active power control function is a function block that calculates operating
    point of the controlled equipment to achieve the target active power.
    '''

    targetValue: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the active power that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class CurrentControlFunction(ControlFunctionBlock):
    '''
    Current control function is a function block that calculates the operating
    point of the controlled equipment to achieve the target current.
    '''

    targetValue: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the current that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class CurrentDroopControlFunction(ControlFunctionBlock):
    '''
    Current droop control function is a function block that calculates the
    operating point of the controlled equipment to achieve the target current.
    '''

    droopCapacitive: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Droop in capacitive region. The unit is V/A.
    '''
    
    droopInductive: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Droop in inductive region. The unit is V/A.
    '''
    
    offsetCapacitive: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Offset in capacitive region.
    '''
    
    offsetInductive: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Offset in capacitive region.
    '''
    
    targetValueCapacitive: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Setpoint when control is active in capacitive region.
    '''
    
    targetValueInductive: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Setpoint when control is active in inductive region.
    '''
    
@dataclass(repr=False)
class DCCurrentControlFunction(ControlFunctionBlock):
    '''
    DC current control function is a function block that calculates the operating
    point of the controlled equipment to achieve the target current.
    '''

    droop: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Droop constant. The pu value is obtained as D [kV/MW] x Sb / Ubdc.
    The attribute shall be a positive value.
    '''
    
    droopCompensation: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Compensation constant. Used to compensate for voltage drop when controlling
    voltage at a distant bus. The attribute shall be a positive value.
    '''
    
    targetValue: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the current that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class DCVoltageControlFunction(ControlFunctionBlock):
    '''
    DC voltage control function is a function block that calculate the operating
    point of the controlled equipment to achieve the target voltage.
    '''

    targetValue: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the voltage that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class FrequencyControlFunction(ControlFunctionBlock):
    '''
    Frequency control function is a function block that calculate the operating
    point of the controlled equipment to achieve the target frequency.
    '''

    frequencyBias: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the active power that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
    targetValue: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the frequency that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class ImpedanceControlFunction(ControlFunctionBlock):
    '''
    Impedance control function is a function block that calculates the operating
    point of the controlled equipment to achieve the target impedance.
    '''

    targetValue: Optional[ float | Impedance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the impedance that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class PhaseControlFunction(ControlFunctionBlock):
    '''
    Phase control function is a function block that calculate the operating
    point of the controlled equipment to achieve the target voltage.
    '''

    targetValue: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the phase that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class PowerFactorControlFunction(ControlFunctionBlock):
    '''
    Power factor control function is a function block that calculates the operating
    point of the controlled equipment to achieve the target power factor.
    '''

    targetValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the power factor that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class ReactivePowerControlFunction(ControlFunctionBlock):
    '''
    Reactive power control function is a function block that calculate the
    operating point of the controlled equipment to achieve the target reactive
    power.
    '''

    targetValue: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the reactive power that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class VoltageControlFunction(ControlFunctionBlock):
    '''
    Voltage control function is a function block that calculate the operating
    point of the controlled equipment to achieve the target voltage.
    '''

    targetValue: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the voltage that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class VoltageInjectionControlFunction(ControlFunctionBlock):
    '''
    Voltage injection control function is a function block that calculates
    the operating point of the controlled equipment to achieve the target voltage
    injection. The controlled point is the Terminal with sequenceNumber =1.
    '''

    targetValue: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for the voltage that the control function is calculating
    to achieve by adjusting the operational setting to the controlled equipment.
    '''
    
@dataclass(repr=False)
class DelayTimer(FunctionBlock):
    '''
    Class to define a DelayTimer. Behavior matches that of the On Delay Timer
    and Off Delay Timer standard function blocks from IEC 61131-3.
    '''

@dataclass(repr=False)
class EdgeDetector(FunctionBlock):
    '''
    Class to define an Edge detector. Similar to the R_TRIG and F_TRIG standard
    function blocks from IEC 61131-3.
    '''

@dataclass(repr=False)
class FlipFlop(FunctionBlock):
    '''
    Class to define a Flipflop. Behavior matches that of the SR or RS Bistable
    standard function blocks from IEC 61131-3.
    '''

@dataclass(repr=False)
class LogicalOperation(FunctionBlock):
    '''
    Specialization of FunctionBlock class intended to define a logical operation.
    Its inputs should be specified by FunctionFunctionLink instances. If the
    comparisonValue attribute is defined, operate against the comparisonValue
    (same number of inputs as outputs).
    '''

@dataclass(repr=False)
class NumericOperation(FunctionBlock):
    '''
    Class to represent a numerical operation.
    '''

    numericOperationType: Optional[ CalculationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class ProtectionFunctionBlock(FunctionBlock):
    '''
    Protection function block is a function block that contains an algorithm
    for protecting the equipment.
    '''

    ProprietarySettingValue: list[ProprietarySettingValue] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProprietarySettingValue.ProtectionFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Application-specific setting value may be possessed by this ProtectionFunctionBlock.
    '''
    
    ProtectionOperationCharacteristicCurve: list[ProtectionOperationCharacteristicCurve] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProtectionOperationCharacteristicCurve.ProtectionFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection function block may have several operation characteristic
    curves for protection.
    '''
    
    operatingQuantityType: Optional[ ProtectionOperatingQuantityKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Attribute to specify an operating quantity when the phases attribute
    is defined as ABC. Required for current and voltage protection function
    blocks to clearly identify which quantity to operate on.
    '''
    
    MonitoredTerminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.ProtectionFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal is monitored by multiple protection function blocks.
    '''
    
    ProtectionEquipment: Optional[ProtectionEquipment] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionEquipment.ProtectionFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection equipment may contain protection function blocks.
    '''
    
    ProtectionSettingsGroup: Optional[ProtectionSettingsGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionSettingsGroup.ProtectionFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ProtectionSettingsGroup can combine setting values possessed by several
    instances of ProtectionFunctionBlocks that constitutes a certain protection
    function.
    '''
    
@dataclass(repr=False)
class FaultClearanceProtectionFunctionBlock(ProtectionFunctionBlock):
    '''
    This class is the base class of protection function blocks for fault clearance.
    '''

@dataclass(repr=False)
class CurrentProtectionFunctionBlock(FaultClearanceProtectionFunctionBlock):
    '''
    This class is the base class of current relay function.
    '''

@dataclass(repr=False)
class OverCurrentProtectionFunctionBlock(CurrentProtectionFunctionBlock):
    '''
    This class represents a function for over current protection.
    '''

    OverCurrentTypeFunctionBlock: Optional[OverCurrentTypeFunctionBlock] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OverCurrentTypeFunctionBlock.OverCurrentProtectionFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiple over current protection functions compose the over current
    type of over load protection function.
    '''
    
@dataclass(repr=False)
class UnderCurrentProtectionFunctionBlock(CurrentProtectionFunctionBlock):
    '''
    This class represents a function for under current protection.
    '''

@dataclass(repr=False)
class DifferentialProtectionFuntionBlock(FaultClearanceProtectionFunctionBlock):
    '''
    This class represents a function for differential protection and has some
    attributes based on IEC 60255-187-1.
    '''

@dataclass(repr=False)
class DirectionalProtectionFunctionBlock(FaultClearanceProtectionFunctionBlock):
    '''
    This class is the base class of directional relay function.
    '''

@dataclass(repr=False)
class OverPowerDirectionProtectionFunctionBlock(DirectionalProtectionFunctionBlock):
    '''
    This class represents a function for over power direction protection.
    '''

@dataclass(repr=False)
class UnderPowerDirectionProtectionFunctionBlock(DirectionalProtectionFunctionBlock):
    '''
    This class represents a function for under power direction protection.
    '''

@dataclass(repr=False)
class DistanceProtectionFunctionBlock(FaultClearanceProtectionFunctionBlock):
    '''
    This class represents a function for distance protection.
    '''

    ImpedanceLocusTypeFunctionBlock: Optional[ImpedanceLocusTypeFunctionBlock] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ImpedanceLocusTypeFunctionBlock.DistanceProtectionFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Impedance locus type of out-of-step relay function is composed by multiple
    distance relay elements.
    '''
    
@dataclass(repr=False)
class GroundDistanceProtectionFunctionBlock(DistanceProtectionFunctionBlock):
    '''
    This class represents a function for ground distance protection.
    '''

@dataclass(repr=False)
class VoltageProtectionFunctionBlock(FaultClearanceProtectionFunctionBlock):
    '''
    This class is the base class of voltage relay function.
    '''

@dataclass(repr=False)
class OverVoltageProtectionFunctionBlock(VoltageProtectionFunctionBlock):
    '''
    This class represents a function for over voltage protection.
    '''

@dataclass(repr=False)
class UnderVoltageProtectionFunctionBlock(VoltageProtectionFunctionBlock):
    '''
    This class represents a function for under voltage protection.
    '''

@dataclass(repr=False)
class ProtectionTripConditioningFunctionBlock(ProtectionFunctionBlock):
    '''
    A protection function block concept borrowed from 61850-7-4. The intention
    of this class is to serve as a point of compilation of the operate outputs
    of multiple ProtectionFunctionBlock instances. It is also use here to establish
    a logical combination of the inputs and outputs of protection and protection-related
    function blocks.
    '''

@dataclass(repr=False)
class WideAreaProtectionFunctionBlock(ProtectionFunctionBlock):
    '''
    This class is the base class of protection blocks for wide area protection.
    '''

@dataclass(repr=False)
class FrequencyProtectionFunctionBlock(WideAreaProtectionFunctionBlock):
    '''
    This class is the base class of frequency protections.
    '''

@dataclass(repr=False)
class OverFrequencyProtectionFunctionBlock(FrequencyProtectionFunctionBlock):
    '''
    This class represents a function for over frequency protection.
    '''

@dataclass(repr=False)
class RateOfChangeOfFrequencyProtectionFunction(FrequencyProtectionFunctionBlock):
    '''
    This class represents a function for rate-of-change of frequency protection.
    '''

@dataclass(repr=False)
class UnderFrequencyProtectionFunctionBlock(FrequencyProtectionFunctionBlock):
    '''
    This class represents a function for under frequency protection.
    '''

@dataclass(repr=False)
class OutOfStepProtectionFunctionBlock(WideAreaProtectionFunctionBlock):
    '''
    This class is the base class for out-of-step protection function.
    '''

@dataclass(repr=False)
class ImpedanceLocusTypeFunctionBlock(OutOfStepProtectionFunctionBlock):
    '''
    This class represents impedance locus type for out-of-step protection function.
    '''

    DistanceProtectionFunctionBlock: list[DistanceProtectionFunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DistanceProtectionFunctionBlock.ImpedanceLocusTypeFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The distance relay elements may compose a impedance locus type of out-of-step
    relay function.
    '''
    
@dataclass(repr=False)
class VoltagePhaseComparisontypeFunctionBlock(OutOfStepProtectionFunctionBlock):
    '''
    This class represents voltage phase comparison type for out-of-step protection
    function.
    '''

@dataclass(repr=False)
class OverLoadProtectionFunctionBlock(WideAreaProtectionFunctionBlock):
    '''
    This class is the base class for over load protection function.
    '''

@dataclass(repr=False)
class OverCurrentTypeFunctionBlock(OverLoadProtectionFunctionBlock):
    '''
    This class represents over current type for over load protection function.
    '''

    OverCurrentProtectionFunctionBlock: list[OverCurrentProtectionFunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OverCurrentProtectionFunctionBlock.OverCurrentTypeFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Over current type of over load protection function is composed by multiple
    over current relay functions.
    '''
    
@dataclass(repr=False)
class TemperatureCalculationTypeFunctionBlock(OverLoadProtectionFunctionBlock):
    '''
    This class represents temperature calculation type for over load protection
    function.
    '''

@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class ProtectionRelatedFunctionBlock(FunctionBlock):
    '''
    Protection related functions that do not have an operate output but can
    be part of a protection scheme or logic.
    '''

    ProprietarySettingValue: list[ProprietarySettingValue] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProprietarySettingValue.ProtectionRelatedFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Application-specific setting value may be possessed by this ProtectionRelatedFunctionBlock.
    '''
    
    operatingQuantityType: Optional[ ProtectionOperatingQuantityKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Attribute to specify an operating quantity when the phases attribute
    is defined as ABC.
    '''
    
    ProtectionEquipment: Optional[ProtectionEquipment] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionEquipment.ProtectionRelatedFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection equipment may contain protection related function blocks.
    '''
    
    ProtectionSettingsGroup: Optional[ProtectionSettingsGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionSettingsGroup.ProtectionRelatedFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ProtectionSettingsGroup can combine setting values possessed by several
    instances of ProtectionRelatedFunctionBlocks that constitutes a certain
    protection function.
    '''
    
@dataclass(repr=False)
class AutoreclosingFunctionBlock(ProtectionRelatedFunctionBlock):
    '''
    This class represents a function for auto-reclosing.
    '''

    RecloseSequences: list[RecloseSequence] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RecloseSequence.AutoreclosingFunctionBlock',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reclose sequences associated to a given autoreclose function
    '''
    
@dataclass(repr=False)
class BreakerFailureFunctionBlock(ProtectionRelatedFunctionBlock):
    '''
    This class represents a breaker failure function.
    '''

@dataclass(repr=False)
class SynchrocheckFunctionBlock(ProtectionRelatedFunctionBlock):
    '''
    This class represents a function for check of synchronism.
    '''

@dataclass(repr=False)
class UpDownCounter(FunctionBlock):
    '''
    Class to define a rising or falling edge counter. Similar to the CTU and
    CTD standard function blocks from IEC 61131-3.
    '''

@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class FunctionBlockType(IdentifiedObject):
    '''
    Class used to specify the behavior of one or many instances of the FunctionBlock
    class.
    '''

    FunctionBlock: list[FunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionBlock.FunctionBlockType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generic FunctionBlock with behavior, inputs and outputs defined by
    a FunctionBlockType.
    '''
    
    FunctionLogicDescriptions: list[FunctionLogicDescription] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionLogicDescription.FunctionBlockType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Funcion logic description for a function block type.
    '''
    
    FunctionTypeInputs: list[FunctionTypeInput] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionTypeInput.FunctionBlockType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Input to a function block type
    '''
    
    FunctionTypeOutputs: list[FunctionTypeOutput] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionTypeOutput.FunctionBlockType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Output from a function block type
    '''
    
@dataclass(repr=False)
class FunctionInputVariable(IdentifiedObject):
    '''
    Functional input variable defines the domain of the function.
    '''

    Function: Optional[FunctionBlock] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FunctionBlock.Input',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function block describe the function that function input variable provides
    the domain for.
    '''
    
@dataclass(repr=False)
class GateInputPin(FunctionInputVariable):
    '''
    Input pin for a logical gate. The condition described in the input pin
    gives a logical true or false. The result from measurement and calculation
    are converted to a true or false.
    '''

    absoluteValue: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates if the absolute value is used for comparison. If true, use
    the absolute value. If false, use the complex value (vector).
    '''
    
    duration: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time duration for which the condition is satisfied before acting.
    Default is 0 seconds.
    '''
    
    isValuePreFault: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates if the gate input pin value is referring to the value prior
    to a fault (e.g. simulated by a contingency or due to a SIPS activation
    in a N-x-y case). If it is true, it means that the value is referring
    to pre-fault. If it is false or not populated, then it is post-fault.
    '''
    
    negate: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Invert/negate the result of the comparison.
    '''
    
    thresholdValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The threshold value that should be used for compare with the input
    value.
    '''
    
    logicKind: Optional[ LogicalOperatorsKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The logical operator kind used for comparison.
    '''
    
    thresholdPercentage: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The threshold percentage that should be used for compare with the percentage
    change between input value and threshold value.
    The allowed value range is [0,100].
    '''
    
    Gate: Optional[Gate] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Gate.GateInputPin',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Gate that has this input.
    '''
    
@dataclass(repr=False)
class PinContingency(GateInputPin):
    '''
    Input pin associated with a Contingency. It is used for comparison.
    '''

    Contingency: Optional[Contingency] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Contingency.PinContingency',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Contingency that is used in the input pin.
    '''
    
@dataclass(repr=False)
class PinDCTerminal(GateInputPin):
    '''
    Input pin associated with a DCTerminal. It is used for comparison.
    '''

    kind: Optional[ PinDCTerminalKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of quantity which is used as an input value.
    '''
    
    DCTerminal: Optional[DCTerminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTerminal.PinDCTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC terminal that has this pin DC terminal.
    '''
    
@dataclass(repr=False)
class PinEquipment(GateInputPin):
    '''
    Input pin associated with an Equipment. It is used for the comparison.
    '''

    Equipment: Optional[Equipment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Equipment.PinEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Equipment that is used in the input pin.
    '''
    
    PropertyReference: Optional[PropertyReference] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PropertyReference.PinEquipment',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The property reference for this pin equipment.
    '''
    
@dataclass(repr=False)
class PinEquipmentTripping(GateInputPin):
    '''
    Input pin associated with an Equipment. It is used to determine if the
    equipment is tripped between two consecutive stages, i.e. the equipment
    is in service at pre-fault stage and it is out of service at post-fault
    stage.
    '''

    Equipment: Optional[Equipment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Equipment.PinEquipmentTripping',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Equipment that is tripped.
    '''
    
@dataclass(repr=False)
class PinGate(GateInputPin):
    '''
    An output from one gate represents an input to another gate.
    '''

    GateOutput: Optional[Gate] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Gate.PinGate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The output of the gate.
    '''
    
@dataclass(repr=False)
class PinMeasurement(GateInputPin):
    '''
    Input pin associated with a Measurement. It is used for comparison.
    '''

    Measurement: Optional[Measurement] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Measurement.PinMeasurement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Measurement that is used in the input pin.
    '''
    
    MeasurementCalculator: Optional[MeasurementCalculator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementCalculator.PinMeasurement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The result of the calculation used as input to a gate.
    '''
    
@dataclass(repr=False)
class PinOperationalLimit(GateInputPin):
    '''
    Input pin associated with the limits of a Terminal. It is used for comparison.
    '''

    OperationalLimit: Optional[OperationalLimit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OperationalLimit.PinOperationallLimit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit that is used in the input pin.
    '''
    
@dataclass(repr=False)
class PinPowerTransferCorridor(GateInputPin):
    '''
    Input pin associated with a PowerTransferCorridor. It is used for comparison.
    '''

    kind: Optional[ PinPowerTransferCorridorKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of quantity which is used as an input value.
    '''
    
    PowerTransferCorridor: Optional[PowerTransferCorridor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerTransferCorridor.PinPowerTransferCorridor',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The PowerTransferCorridor that is used in the input pin.
    '''
    
@dataclass(repr=False)
class PinTerminal(GateInputPin):
    '''
    Input pin associated with a Terminal. It is used for comparison.
    '''

    kind: Optional[ PinTerminalKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of quantity which is used as an input value.
    '''
    
    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.PinTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Terminal that is used in the input pin.
    '''
    
@dataclass(repr=False)
class FunctionOutputVariable(IdentifiedObject):
    '''
    Functional output variable defines the codomain of the function.
    '''

    FunctionBlock: Optional[FunctionBlock] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FunctionBlock.FunctionOutputVariable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function block describe the function that function output variable
    provides the codomain for.
    '''
    
    PropertyReference: Optional[PropertyReference] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PropertyReference.FunctionOutputVariable',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Property reference refers to a given class and property that is populated
    by the function output variable.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class Gate(IdentifiedObject):
    '''
    Logical gate that supports a logical operation based on the input.
    '''

    GateInputPin: list[GateInputPin] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'GateInputPin.Gate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the input to the gate.
    '''
    
    PinGate: list[PinGate] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinGate.GateOutput',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pin for this gate output.
    '''
    
    RemedialActionScheme: list[RemedialActionScheme] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RemedialActionScheme.GateArmed',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The remedial action scheme which has an armed gate.
    '''
    
    StageTriggerArmed: list[StageTrigger] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StageTrigger.GateArmed',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The stage trigger associated with the armed gate.
    '''
    
    StageTriggerCom: list[StageTrigger] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StageTrigger.GateComCondition',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The stage trigger associated with the communication gate.
    '''
    
    StageTrigger: list[StageTrigger] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StageTrigger.GateTrigger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The stage trigger associated with the gate trigger.
    '''
    
    TriggerCondition: list[TriggerCondition] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TriggerCondition.GateTrigger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The trigger condition that has a gate trigger.
    '''
    
    kind: Optional[ GateLogicKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The logical operation of the gate.
    '''
    
@dataclass(repr=False)
class GenericConstraints(IdentifiedObject):
    '''
    Generic constraints can represent secure areas, voltage profile, transient
    stability and voltage collapse limits.
    The generic constraints can be one of the following forms:
    a) Thermal MW limit constraints type
    b) Group line flow constraint type
    '''

    Flowgate: list[Flowgate] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Flowgate.GenericConstraints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class GeographicalRegion(IdentifiedObject):
    '''
    A geographical region of a power system network model.
    '''

    Regions: list[SubGeographicalRegion] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SubGeographicalRegion.Region',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All sub-geographical regions within this geographical region.
    '''
    
@dataclass(repr=False)
class Geometry(IdentifiedObject):
    '''
    Geo-spatial representation of a physical location. A location may be represented
    as a Point, Line, Polygon, or Circle.
    '''

    GeometricElement: list[GeometricElement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'GeometricElement.Geometry',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    spatialFeatureType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reference to the type of GIS spatial feature represented by this
    geometry.
    '''
    
    CoordinateSystem: Optional[CoordinateSystem] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CoordinateSystem.Geometry',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The coordinate system used for a given geometry.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.Geometry',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The location for which a geometry is specified.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class GridDisturbance(IdentifiedObject):
    '''
    Automatic, unintended, or manual undeferrable switching of breakers as
    a result of faults in the power grid.
    '''

    Fault: list[Fault] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Fault.GridDisturbance',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Faults that are related to one grid disturbance.
    '''
    
@dataclass(repr=False)
class GridStateAlterationCollection(IdentifiedObject):
    '''
    A collection of grid state alterations.
    '''

    StageAction: list[Stage] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Stage.GridStateAlterationCollection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The stage action related to this GridStateAlterationCollection.
    '''
    
@dataclass(repr=False)
class HVDCInterconnectionDynamics(IdentifiedObject):
    '''
    HVDC interconnection function block whose behaviour is described by reference
    to a standard model <font color="#0f0f0f">or by definition of a user-defined
    model.</font>
    '''

    DCEquipmentContainer: list[DCEquipmentContainer] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCEquipmentContainer.HVDCInterconnectionDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC equipment container to which HVDC interconnection dynamics model
    applies.
    '''
    
@dataclass(repr=False)
class Hazard(IdentifiedObject):
    '''
    An object or a condition that is a danger for causing loss or perils to
    an asset and/or people.
    '''

    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of this hazard.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of this hazard.
    '''
    
@dataclass(repr=False)
class AssetLocationHazard(Hazard):
    '''
    Potential hazard related to the location of an asset. Examples are trees
    growing under overhead power lines, a park being located by a substation
    (i.e., children climb fence to recover a ball), a lake near an overhead
    distribution line (fishing pole/line contacting power lines), dangerous
    neighbour, etc.
    '''

    kind: Optional[ AssetHazardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of hazard.
    '''
    
@dataclass(repr=False)
class IncidentHazard(Hazard):
    '''
    Hazardous situation associated with an incident. Examples are line down,
    gas leak, fire, etc.
    '''

    Incident: Optional[Incident] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Incident.IncidentHazard',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Incident associated with this hazard.
    '''
    
    TroubleTicket: Optional[TroubleTicket] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TroubleTicket.IncidentHazard',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Trouble ticket associated with this hazard.
    '''
    
@dataclass(repr=False)
class ICCPInformationMessage(IdentifiedObject):
    '''
    This class represents the TASE.2 Information Message Object. The IdentifiedObject.name
    attribute must be non-null. The value of the attribute shall be used as
    the TASE.2 Information Reference, as specified by 60870-6-503.
    '''

    localReference: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Local Reference attribute specifies a value agreed upon between
    sender and receiver of the Information Message. It further identifies
    the Information Message.
    '''
    
    scope: Optional[ ICCPScopeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates if the Point is global scoped (e.g. VCC) or accessible only
    to the Bilateral table peer (e.g. ICC).
    '''
    
@dataclass(repr=False)
class IOPoint(IdentifiedObject):
    '''
    The class describe a measurement or control value. The purpose is to enable
    having attributes and associations common for measurement and control.
    '''

    BilateralToIOPoint: list[ProvidedBilateralPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProvidedBilateralPoint.IOPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bilateral ICCP point for the measurement or control.
    '''
    
    IOPointSource: Optional[IOPointSource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IOPointSource.IOPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Local merasurement value source for an ICCP point.
    '''
    
@dataclass(repr=False)
class Control(IOPoint):
    '''
    Control is used for supervisory/device control. It represents control outputs
    that are used to change the state in a process, e.g. close or open breaker,
    a set point value or a raise lower command.
    '''

    RemoteControl: Optional[RemoteControl] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RemoteControl.Control',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The remote point controlling the physical actuator.
    '''
    
    controlType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the type of Control. For example, this specifies if the Control
    represents BreakerOpen, BreakerClose, GeneratorVoltageSetPoint, GeneratorRaise,
    GeneratorLower, etc.
    '''
    
    operationInProgress: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates that a client is currently sending control commands that
    has not completed.
    '''
    
    timeStamp: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The last time a control output was sent.
    '''
    
    unitMultiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit multiplier of the controlled quantity.
    '''
    
    unitSymbol: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit of measure of the controlled quantity.
    '''
    
    ControlAction: Optional[ControlAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlAction.Control',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PowerSystemResource: Optional[PowerSystemResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerSystemResource.Controls',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Regulating device governed by this control output.
    '''
    
    RemoteControl: Optional[RemoteControl] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RemoteControl.Control',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The remote point controlling the physical actuator.
    '''
    
@dataclass(repr=False)
class AccumulatorReset(Control):
    '''
    This command resets the counter value to zero.
    '''

    AccumulatorValue: Optional[AccumulatorValue] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AccumulatorValue.AccumulatorReset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The accumulator value that is reset by the command.
    '''
    
    AccumulatorValue: Optional[AccumulatorValue] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AccumulatorValue.AccumulatorReset',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The accumulator value that is reset by the command.
    '''
    
@dataclass(repr=False)
class AnalogControl(Control):
    '''
    An analog control used for supervisory control.
    '''

    AnalogValue: Optional[AnalogValue] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AnalogValue.AnalogControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The MeasurementValue that is controlled.
    '''
    
    maxValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal value range maximum for any of the Control.value. Used for scaling,
    e.g. in bar graphs.
    '''
    
    minValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal value range minimum for any of the Control.value. Used for scaling,
    e.g. in bar graphs.
    '''
    
    AnalogValue: Optional[AnalogValue] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AnalogValue.AnalogControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The MeasurementValue that is controlled.
    '''
    
@dataclass(repr=False)
class RaiseLowerCommand(AnalogControl):
    '''
    An analog control that increases or decreases a set point value with pulses.
    Unless otherwise specified, one pulse moves the set point by one.
    '''

    ValueAliasSet: Optional[ValueAliasSet] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ValueAliasSet.RaiseLowerCommands',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ValueAliasSet used for translation of a Control value to a name.
    '''
    
@dataclass(repr=False)
class SetPoint(AnalogControl):
    '''
    An analog control that issues a set point value.
    '''

    normalValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal value for Control.value e.g. used for percentage scaling.
    '''
    
    value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The value representing the actuator output.
    '''
    
@dataclass(repr=False)
class Command(Control):
    '''
    A Command is a discrete control used for supervisory control.
    '''

    DiscreteValue: Optional[DiscreteValue] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DiscreteValue.Command',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The MeasurementValue that is controlled.
    '''
    
    normalValue: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal value for Control.value e.g. used for percentage scaling.
    '''
    
    value: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The value representing the actuator output.
    '''
    
    DiscreteValue: Optional[DiscreteValue] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DiscreteValue.Command',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The MeasurementValue that is controlled.
    '''
    
    ValueAliasSet: Optional[ValueAliasSet] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ValueAliasSet.Commands',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ValueAliasSet used for translation of a Control value to a name.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@stereotype(CIMStereotype.harmonization)
@dataclass(repr=False)
class MeasurementValue(IOPoint):
    '''
    The current state for a measurement. A state value is an instance of a
    measurement from a specific source. Measurements can be associated with
    many state values, each representing a different source for the measurement.
    '''

    CalculationMethodHierarchy: Optional[CalculationMethodHierarchy] = field(
        default=None,
        metadata={
        'type': 'harmonization',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CalculationMethodHierarchy.MeasurementValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MeasurementValueQuality: Optional[MeasurementValueQuality] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementValueQuality.MeasurementValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A MeasurementValue has a MeasurementValueQuality associated with it.
    '''
    
    RemoteSource: Optional[RemoteSource] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RemoteSource.MeasurementValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Link to the physical telemetered point associated with this measurement.
    '''
    
    timeStamp: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time when the value was last updated.
    '''
    
    sensorAccuracy: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The limit, expressed as a percentage of the sensor maximum, that errors
    will not exceed when the sensor is used under reference conditions.
    '''
    
    CalculationMethodHierarchy: Optional[CalculationMethodHierarchy] = field(
        default=None,
        metadata={
        'type': 'harmonization',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CalculationMethodHierarchy.MeasurementValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ErpPerson: Optional[OldPerson] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OldPerson.MeasurementValues',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MeasurementValueQuality: Optional[MeasurementValueQuality] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementValueQuality.MeasurementValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A MeasurementValue has a MeasurementValueQuality associated with it.
    '''
    
    MeasurementValueSource: Optional[MeasurementValueSource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementValueSource.MeasurementValues',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reference to the type of source that updates the MeasurementValue,
    e.g. SCADA, CCLink, manual, etc. User conventions for the names of
    sources are contained in the introduction to IEC 61970-301.
    '''
    
    RemoteSource: Optional[RemoteSource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RemoteSource.MeasurementValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Link to the physical telemetered point associated with this measurement.
    '''
    
@dataclass(repr=False)
class AccumulatorValue(MeasurementValue):
    '''
    AccumulatorValue represents an accumulated (counted) MeasurementValue.
    '''

    AccumulatorReset: Optional[AccumulatorReset] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AccumulatorReset.AccumulatorValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The command that resets the accumulator value.
    '''
    
    value: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The value to supervise. The value is positive.
    '''
    
    Accumulator: Optional[Accumulator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Accumulator.AccumulatorValues',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement to which this value is connected.
    '''
    
    AccumulatorReset: Optional[AccumulatorReset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AccumulatorReset.AccumulatorValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The command that resets the accumulator value.
    '''
    
@dataclass(repr=False)
class AnalogValue(MeasurementValue):
    '''
    AnalogValue represents an analog MeasurementValue.
    '''

    AltGeneratingUnit: list[AltGeneratingUnitMeas] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AltGeneratingUnitMeas.AnalogValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The alternate generating unit for which this measurement value applies.
    '''
    
    AltTieMeas: list[AltTieMeas] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AltTieMeas.AnalogValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The usage of the measurement within the control area specification.
    '''
    
    AnalogControl: Optional[AnalogControl] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AnalogControl.AnalogValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Control variable associated with the MeasurementValue.
    '''
    
    value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The value to supervise.
    '''
    
    Analog: Optional[Analog] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Analog.AnalogValues',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement to which this value is connected.
    '''
    
    AnalogControl: Optional[AnalogControl] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AnalogControl.AnalogValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Control variable associated with the MeasurementValue.
    '''
    
@dataclass(repr=False)
class BaseReading(MeasurementValue):
    '''
    Common representation for reading values. Note that a reading value may
    have multiple qualities, as produced by various systems ('ReadingQuality.source').
    '''

    ReadingQualities: list[ReadingQuality] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ReadingQuality.Reading',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All qualities of this reading.
    '''
    
    reportedDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (used only when there are detailed auditing requirements) Date and
    time at which the reading was first delivered to the metering system.
    '''
    
    source: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    System that originally supplied the reading (e.g., customer, AMI system,
    handheld reading system, another enterprise system, etc.).
    '''
    
    value: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of this reading.
    '''
    
@dataclass(repr=False)
class IntervalReading(BaseReading):
    '''
    Data captured at regular intervals of time. Interval data could be captured
    as incremental data, absolute data, or relative data. The source for the
    data is usually a tariff quantity or an engineering quantity. Data is typically
    captured in time-tagged, uniform, fixed-length intervals of 5 min, 10 min,
    15 min, 30 min, or 60 min.
    Note: Interval Data is sometimes also called "Interval Data Readings" (IDR).
    '''

@dataclass(repr=False)
class Reading(BaseReading):
    '''
    Specific value measured by a meter or other asset, or calculated by a system.
    Each Reading is associated with a specific ReadingType.
    '''

    position: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A sequential value representing the relative position within a given
    time interval.
    '''
    
    valueMissing: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The indication of whether or not the quantity of this reading is missing.
    '''
    
    reason: Optional[ ReadingReasonKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reason for this reading being taken.
    '''
    
    ReadingType: Optional[ReadingType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReadingType.Readings',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type information for this reading value.
    '''
    
@dataclass(repr=False)
class DiscreteValue(MeasurementValue):
    '''
    DiscreteValue represents a discrete MeasurementValue.
    '''

    Command: Optional[Command] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Command.DiscreteValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Control variable associated with the MeasurementValue.
    '''
    
    value: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The value to supervise.
    '''
    
    Command: Optional[Command] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Command.DiscreteValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Control variable associated with the MeasurementValue.
    '''
    
    Discrete: Optional[Discrete] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Discrete.DiscreteValues',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement to which this value is connected.
    '''
    
@dataclass(repr=False)
class StringMeasurementValue(MeasurementValue):
    '''
    StringMeasurementValue represents a measurement value of type string.
    '''

    value: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The value to supervise.
    '''
    
    StringMeasurement: Optional[StringMeasurement] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StringMeasurement.StringMeasurementValues',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement to which this value is connected.
    '''
    
@dataclass(repr=False)
class ImpedanceTapChangerTable(IdentifiedObject):
    '''
    Describes a curve for how the power transformer end impedance varies with
    the tap step.
    '''

    ImpedanceTapChangerTablePoint: list[ImpedanceTapChangerTablePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ImpedanceTapChangerTablePoint.ImpedanceTapChangerTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The points of this table.
    '''
    
    ImpedanceTapChangerTabular: list[ImpedanceTapChangerTabular] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ImpedanceTapChangerTabular.ImpedanceTapChangerTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The impedance tap changer to which this impedance tap table applies.
    '''
    
@dataclass(repr=False)
class InternalLocation(IdentifiedObject):
    '''
    Description of location internal to a building.
    '''

    buildingName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of building where location is.
    '''
    
    buildingNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of building where location is.
    '''
    
    floor: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Floor of location.
    '''
    
    roomNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Room number of location.
    '''
    
    suiteNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.InternalLocation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class IntraphaseSpacing(IdentifiedObject):
    '''
    Wire spacing data that associates multiple wire positions with the line
    segment, and allows to calculate line segment impedances. Number of phases
    can be derived from the number of associated wire positions whose phase
    is not neutral.
    '''

    ACLineSegmentPhase: list[ACLineSegmentPhase] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACLineSegmentPhase.IntraphaseSpacing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    isCable: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, this spacing data describes a cable.
    '''
    
    wireCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of wire sub-conductors in the symmetrical bundle (typically
    between 1 and 4).
    '''
    
    wireSpacing: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Distance between wire sub-conductors in a symmetrical bundle.
    '''
    
    DuctBank: Optional[DuctBank] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DuctBank.WireSpacingInfos',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Limit(IdentifiedObject):
    '''
    Specifies one limit value for a Measurement. A Measurement typically has
    several limits that are kept together by the LimitSet class. The actual
    meaning and use of a Limit instance (i.e., if it is an alarm or warning
    limit or if it is a high or low limit) is not captured in the Limit class.
    However the name of a Limit instance may indicate both meaning and use.
    '''

@dataclass(repr=False)
class AccumulatorLimit(Limit):
    '''
    Limit values for Accumulator measurements.
    '''

    value: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The value to supervise against. The value is positive.
    '''
    
    LimitSet: Optional[AccumulatorLimitSet] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AccumulatorLimitSet.Limits',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The set of limits.
    '''
    
@dataclass(repr=False)
class AnalogLimit(Limit):
    '''
    Limit values for Analog measurements.
    '''

    value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The value to supervise against.
    '''
    
    LimitSet: Optional[AnalogLimitSet] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AnalogLimitSet.Limits',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The set of limits.
    '''
    
@dataclass(repr=False)
class LimitSet(IdentifiedObject):
    '''
    Specifies a set of Limits that are associated with a Measurement. A Measurement
    may have several LimitSets corresponding to seasonal or other changing
    conditions. The condition is captured in the name and description attributes.
    The same LimitSet may be used for several Measurements. In particular percentage
    limits are used this way.
    '''

    isPercentageLimits: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tells if the limit values are in percentage of normalValue or the specified
    Unit for Measurements and Controls.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class AccumulatorLimitSet(LimitSet):
    '''
    An AccumulatorLimitSet specifies a set of Limits that are associated with
    an Accumulator measurement.
    '''

    Limits: list[AccumulatorLimit] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AccumulatorLimit.LimitSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The limit values used for supervision of Measurements.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class AnalogLimitSet(LimitSet):
    '''
    An AnalogLimitSet specifies a set of Limits that are associated with an
    Analog measurement.
    '''

    Limits: list[AnalogLimit] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AnalogLimit.LimitSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The limit values used for supervision of Measurements.
    '''
    
@dataclass(repr=False)
class LineSegmentCoupling(IdentifiedObject):
    '''
    Describes the relationship of a line in a coupled group to the reference
    line in the group. (Reference line has a coupledLineNumber = 1.)
    '''

    ACLineSegment: Optional[ACLineSegment] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACLineSegment.LineSegmentCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line whose relationship in a coupled group is described.
    '''
    
    coupledLineNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Sequence number of coupled line. Value of 1 indicates that line is
    the reference line. Valid value range is from 1 to number of coupled
    lines in the group.
    '''
    
    reverseFlow: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication of whether the reference end of a line in a coupled group
    is the same as the reference end of the reference line.
    Set reverseFlow to True for any lines that do not have their Terminal
    with sequenceNumber = 1 at the same end as the reference line.
    Set reverseFlow to False for the reference line and for any lines that
    have their Terminal with sequenceNumber = 1 at the same end as the
    reference line.
    The sign of the coupled voltage drop of an ACLineSegment reverses when
    two coupled lines have their Terminals with sequenceNumber = 1 at opposite
    ends.
    '''
    
    xOffset: Optional[ float | Displacement ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The horizontal offset between the horizontal reference point of a coupled
    line and the horizontal reference point of the reference line in the
    group.
    The horizontal reference point for a line is established by the line's
    WireAssembly. It is the zero x position on which the xCoord values
    of WirePositions in the WireAssembly are based.
    '''
    
    ACLineSegment: Optional[ACLineSegment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACLineSegment.LineSegmentCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line whose relationship in a coupled group is described.
    '''
    
    CoupledLineSegmentGroup: Optional[CoupledLineSegmentGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CoupledLineSegmentGroup.LineSegmentCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The coupled group of lines with which this coupled line has relationships.
    '''
    
@dataclass(repr=False)
class LoadDynamics(IdentifiedObject):
    '''
    Load whose behaviour is described by reference to a standard model <font
    color="#0f0f0f">or by definition of a user-defined model.</font>
    A standard feature of dynamic load behaviour modelling is the ability to
    associate the same behaviour to multiple energy consumers by means of a
    single load definition. The load model is always applied to individual
    bus loads (energy consumers).
    '''

    EnergyConsumer: list[EnergyConsumer] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EnergyConsumer.LoadDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Energy consumer to which this dynamics load model applies.
    '''
    
@dataclass(repr=False)
class LoadGroup(IdentifiedObject):
    '''
    The class is the third level in a hierarchical structure for grouping of
    loads for the purpose of load flow load scaling.
    '''

    SubLoadArea: Optional[SubLoadArea] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubLoadArea.LoadGroups',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The SubLoadArea where the Loadgroup belongs.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class ConformLoadGroup(LoadGroup):
    '''
    A group of loads conforming to an allocation pattern.
    '''

    EnergyConsumers: list[ConformLoad] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConformLoad.LoadGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conform loads assigned to this ConformLoadGroup.
    '''
    
    ConformLoadSchedules: list[ConformLoadSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConformLoadSchedule.ConformLoadGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ConformLoadSchedules in the ConformLoadGroup.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class NonConformLoadGroup(LoadGroup):
    '''
    Loads that do not follow a daily and seasonal load variation pattern.
    '''

    EnergyConsumers: list[NonConformLoad] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'NonConformLoad.LoadGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conform loads assigned to this ConformLoadGroup.
    '''
    
    NonConformLoadSchedules: list[NonConformLoadSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'NonConformLoadSchedule.NonConformLoadGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The NonConformLoadSchedules in the NonConformLoadGroup.
    '''
    
@dataclass(repr=False)
class LoadResponseCharacteristic(IdentifiedObject):
    '''
    Models the characteristic response of the load demand due to changes in
    system conditions such as voltage and frequency. It is not related to demand
    response.
    If LoadResponseCharacteristic.exponentModel is True, the exponential voltage
    or frequency dependent models are specified and used as to calculate active
    and reactive power components of the load model.
    The equations to calculate active and reactive power components of the
    load model are internal to the power flow calculation, hence they use different
    quantities depending on the use case of the data exchange.
    The equations for exponential voltage dependent load model injected power
    are:
    pInjection= Pnominal* (Voltage/cim:BaseVoltage.nominalVoltage) ** cim:LoadResponseCharacteristic.pVoltageExponent
    qInjection= Qnominal* (Voltage/cim:BaseVoltage.nominalVoltage) ** cim:LoadResponseCharacteristic.qVoltageExponent
    pInjection = Pnominal* (Frequency/(Nominal frequency))**cim:LoadResponseCharacteristic.pFrequencyExponent
    qInjection = Qnominal* (Frequency/(Nominal frequency))**cim:LoadResponseCharacteristic.qFrequencyExponent
    Note that both voltage and frequency exponents could be used together so
    the full equation would be:
    pInjection = Pnominal* (Voltage/(cim:BaseVoltage.nominalVoltage))**cim:LoadResponseCharacteristic.pVoltageExponent
    * (Frequency/(base frequency))**cim:LoadResponseCharacteristic.pFrequencyExponent
    qInjection = Qnominal* (Voltage/(cim:BaseVoltage.nominalVoltage))**cim:LoadResponseCharacteristic.qVoltageExponent
    * (Frequency/(base frequency))**cim:LoadResponseCharacteristic.qFrequencyExponent
    The voltage and frequency expressed in the equation are values obtained
    from solved power flow. Base voltage and base frequency are those derived
    from the connectivity of the static network model.
    Where:
    1) * means "multiply" and ** is "raised to the power of";
    2) Pnominal and Qnominal represent the active power and reactive power
    at nominal voltage as any load described by the voltage exponential model
    shall be given at nominal voltage. This means that EnergyConsumer.p and
    EnergyConsumer.q are at nominal voltage.
    3) After power flow is solved:
    -pInjection and qInjection correspond to SvPowerflow.p and SvPowerflow.q
    respectively.
    - Voltage corresponds to SvVoltage.v at the TopologicalNode where the load
    is connected.
    '''

    EnergyConsumer: list[EnergyConsumer] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EnergyConsumer.LoadResponse',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The set of loads that have the response characteristics.
    '''
    
    exponentModel: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the exponential voltage dependency model is to be used. If
    false, the coefficient model is to be used.
    The exponential voltage dependency model consist of the attributes:
    - pVoltageExponent
    - qVoltageExponent
    - pFrequencyExponent
    - qFrequencyExponent.
    The coefficient model consist of the attributes:
    - pConstantImpedance
    - pConstantCurrent
    - pConstantPower
    - qConstantImpedance
    - qConstantCurrent
    - qConstantPower.
    The sum of pConstantImpedance, pConstantCurrent and pConstantPower
    shall equal 1.
    The sum of qConstantImpedance, qConstantCurrent and qConstantPower
    shall equal 1.
    '''
    
    pConstantCurrent: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Portion of active power load modelled as constant current.
    '''
    
    pConstantImpedance: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Portion of active power load modelled as constant impedance.
    '''
    
    pConstantPower: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Portion of active power load modelled as constant power.
    '''
    
    pFrequencyExponent: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Exponent of per unit frequency effecting active power.
    '''
    
    pVoltageExponent: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Exponent of per unit voltage effecting real power.
    '''
    
    qConstantCurrent: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Portion of reactive power load modelled as constant current.
    '''
    
    qConstantImpedance: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Portion of reactive power load modelled as constant impedance.
    '''
    
    qConstantPower: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Portion of reactive power load modelled as constant power.
    '''
    
    qFrequencyExponent: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Exponent of per unit frequency effecting reactive power.
    '''
    
    qVoltageExponent: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Exponent of per unit voltage effecting reactive power.
    '''
    
@dataclass(repr=False)
class LocalReliabilityArea(IdentifiedObject):
    '''
    Allows definition of reliability areas (e.g.. load pockets) within the
    ISO/RTO.
    '''

    RegisteredGenerator: list[RegisteredGenerator] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegisteredGenerator.LocalReliabilityArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.LocalReliabilityArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.gmdm)
@dataclass(repr=False)
class Location(IdentifiedObject):
    '''
    The place, scene, or point of something where someone or something has
    been, is, and/or will be at a given moment in time. It can be defined with
    one or more position points (coordinates) in a given coordinate system.
    '''

    Assets: list[Asset] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Asset.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All assets at this location.
    '''
    
    Building: list[Building] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Building.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConfigurationEvent.ChangedLocation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All configuration events created for this location.
    '''
    
    Crew: list[Crew] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Crew.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    EnvironmentalMonitoringStation: list[EnvironmentalMonitoringStation] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EnvironmentalMonitoringStation.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Monitoring station located at this location.
    '''
    
    Fault: list[Fault] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Fault.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Geometry: list[Geometry] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Geometry.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The geometry for a given location.
    '''
    
    InternalLocation: list[InternalLocation] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'InternalLocation.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SubLocation: list[Location] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Location.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    LocationAccess: Optional[LocationAccess] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LocationAccess.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PositionPoints: list[PositionPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PositionPoint.Location',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    PowerSystemResources: list[PowerSystemResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerSystemResource.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All power system resources at this location.
    '''
    
    Site: Optional[Site] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Site.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    direction: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    (if applicable) Direction that allows field crews to quickly find a
    given asset. For a given location, such as a street address, this is
    the relative direction in which to find the asset. For example, a streetlight
    may be located at the 'NW' (northwest) corner of the customer's site,
    or a usage point may be located on the second floor of an apartment
    building.
    '''
    
    geoInfoReference: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Reference to geographical information source, often
    external to the utility.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Classification by utility's corporate standards and practices, relative
    to the location itself (e.g., geographical, functional accounting,
    etc., not a given property that happens to exist at that location).
    '''
    
    Cadastre: Optional[Cadastre] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Cadastre.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cadastre encompassing a location.
    '''
    
    CoordinateSystem: Optional[CoordinateSystem] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CoordinateSystem.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coordinate system used to describe position points of this location.
    '''
    
    DesignLocation: Optional[DesignLocation] = field(
        default=None,
        metadata={
        'type': 'deprecated',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DesignLocation.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Se of design elements associated with the physical location
    '''
    
    electronicAddress: Optional[ElectronicAddress] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    Electronic address.
    '''
    
    Incident: Optional[Incident] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Incident.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Incident at this location.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.SubLocation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    LocationAccess: Optional[LocationAccess] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LocationAccess.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    phone1: Optional[TelephoneNumber] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    Phone number.
    '''
    
    phone2: Optional[TelephoneNumber] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    Additional phone number.
    '''
    
    Site: Optional[Site] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Site.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    Status of this location.
    '''
    
    SwitchingOrder: Optional[SwitchingOrder] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SwitchingOrder.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TroubleOrder: Optional[TroubleOrder] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TroubleOrder.Location',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.gmdm)
@dataclass(repr=False)
class ServiceLocation(Location):
    '''
    A real estate location, commonly referred to as premises.
    '''

    EndDevices: list[EndDevice] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDevice.ServiceLocation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All end devices that measure the service delivered to this service
    location.
    '''
    
    TroubleTicket: list[TroubleTicket] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TroubleTicket.ServiceLocation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    UsagePoints: list[UsagePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'UsagePoint.ServiceLocation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All usage points delivering service (of the same type) to this service
    location.
    '''
    
    accessMethod: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Method for the service person to access this service location. For
    example, a description of where to obtain a key if the facility is
    unmanned and secured.
    '''
    
    needsInspection: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if inspection is needed of facilities at this service location.
    This could be requested by a customer, due to suspected tampering,
    environmental concerns (e.g., a fire in the vicinity), or to correct
    incompatible data.
    '''
    
    siteAccessProblem: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Problems previously encountered when visiting or performing work on
    this location. Examples include: bad dog, violent customer, verbally
    abusive occupant, obstructions, safety hazards, etc.
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.gmdm)
@dataclass(repr=False)
class UsagePointLocation(Location):
    '''
    Location of an individual usage point.
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'UsagePoint.UsagePointLocation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All usage points at this location.
    '''
    
    accessMethod: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Method for the service person to access this usage point location.
    For example, a description of where to obtain a key if the facility
    is unmanned and secured.
    '''
    
    remark: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Remarks about this location.
    '''
    
    siteAccessProblem: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Problems previously encountered when visiting or performing work at
    this location. Examples include: bad dog, violent customer, verbally
    abusive occupant, obstructions, safety hazards, etc.
    '''
    
@dataclass(repr=False)
class MPMTestCategory(IdentifiedObject):
    '''
    Provides a reference to the Market Power Mitigation test identifiers and
    methods for the results of the DA or RT markets. Specific data is the test
    identifier (Price, Conduct, or Impact) and the test method (System MPM,
    Local MPM, Alternate System MPM, or Alternate Local MPM).
    '''

    MPMTestThreshold: list[MPMTestThreshold] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MPMTestThreshold.MPMTestCategory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    purposeFlag: Optional[ PurposeFlagType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Nature of threshold data:
    'M' - Mitigation threshold
    'R' - Reporting threshold
    '''
    
    testIdentifier: Optional[ MPMTestIdentifierType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    1 - Global Price Test
    2 - Global Conduct Test
    3 - Global Impact Test
    4 - Local Price Test
    5 - Local Conduct Test
    6 - Local Impact Test
    '''
    
    testMethod: Optional[ MPMTestMethodType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The method of performing the market power monitoring. Examples are
    Normal (default) thresholds or Alternate thresholds.
    '''
    
@dataclass(repr=False)
class MSSAggregation(IdentifiedObject):
    '''
    Metered Sub-System aggregation of MSS Zones.
    '''

    MeteredSubSystem: list[MeteredSubSystem] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeteredSubSystem.MSSAggregation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    costRecovery: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Charge for Emission Costs, Start Up Costs, or Minimum Load Costs.
    '''
    
    grossSettlement: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    MSS Load Following may select Net vs. Gross settlement. Net Settlement
    requires the net Demand settled at the MSS LAP and Net Supply needs
    to settle at the equivalent to the weighted average price of the MSS
    generation. Gross load will be settled at the System LAP and the Gross
    supply will be settled at the LMP. MSS Aggregation that elects gross
    settlement shall have to identify if its resources are Load Following
    or not.
    '''
    
    ignoreLosses: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Provides an indication if losses are to be ignored for this zone. Also
    refered to as Exclude Marginal Losses.
    '''
    
    ignoreMarginalLosses: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Provides an indication if marginal losses are to be ignored for this
    zone.
    '''
    
    loadFollowing: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that this particular MSSA participates in the Load Following
    function.
    '''
    
    rucProcurement: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates that RUC will be procured by the ISO or self provided.
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.MSSAggregation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarketOccurrence(IdentifiedObject):
    '''
    Represents an occurrence of a market. For example a planned DA/HA/RT market
    with a defined market start and end time.
    '''

    MarketProducts: list[MarketProduct] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MarketProduct.Market',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class EnergyMarket(MarketOccurrence):
    '''
    Energy and Ancillary Market (e.g. Energy, Spinning Reserve, Non-Spinning
    Reserve) with a description of the Market operation control parameters.
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TimeSeries.EnergyMarket',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    timeframe: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A specified period of time in which something occurs or is planned
    to take place.
    '''
    
    MarketResults: Optional[MarketResults] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MarketResults.EnergyMarket',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.EnergyMarkets',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarketPerson(IdentifiedObject):
    '''
    General purpose information for name and other information to contact people.
    '''

    MarketSkills: list[MarketSkill] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MarketSkill.MarketPerson',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    category: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Category of this person relative to utility operations, classified
    according to the utility's corporate standards and practices. Examples
    include employee, contractor, agent, not affiliated, etc.
    This field is not used to indicate whether this person is a customer
    of the utility. Often an employee or contractor is also a customer.
    Customer information is gained with relationship to Organisation and
    CustomerData. In similar fashion, this field does not indicate the
    various roles this person may fill as part of utility operations.
    '''
    
    firstName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Person's first name.
    '''
    
    governmentID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unique identifier for person relative to its governing authority, for
    example a federal tax identifier (such as a Social Security number
    in the United States).
    '''
    
    lastName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Person's last (family, sir) name.
    '''
    
    mName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Middle name(s) or initial(s).
    '''
    
    prefix: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A prefix or title for the person's name, such as Miss, Mister, Doctor,
    etc.
    '''
    
    specialNeed: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Special service needs for the person (contact) are described; examples
    include life support, etc.
    '''
    
    suffix: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A suffix for the person's name, such as II, III, etc.
    '''
    
    userID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The user name for the person; required to log in.
    '''
    
    electronicAddressAlternate: Optional[ElectronicAddress] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Alternate Electronic address.
    '''
    
    electronicAddressPrimary: Optional[ElectronicAddress] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Primary Electronic address.
    '''
    
    landlinePhone: Optional[TelephoneNumber] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Landline phone number.
    '''
    
    mobilePhone: Optional[TelephoneNumber] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mobile phone number.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarketProduct(IdentifiedObject):
    '''
    A product traded by an RTO (e.g. energy, 10 minute spinning reserve). Ancillary
    service product examples include: Regulation, Regulation Up, Regulation
    Down, Spinning Reserve, Non-Spinning Reserve, etc.
    '''

    BidPriceCap: list[BidPriceCap] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'BidPriceCap.MarketProduct',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    marketProductType: Optional[ MarketProductType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Market product type examples:
    EN (Energy)
    RU (Regulation Up)
    RD (Regulation Dn)
    SR (Spinning Reserve)
    NR (Non-Spinning Reserve)
    RC (RUC)
    '''
    
    rampInterval: Optional[ float | Minutes ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ramping time interval for the specific market product type specified
    by marketProductType attribute. For example, if marketProductType =
    RU (from enumeration MarketProductType), then the rampInterval is the
    time in which the service must become available.
    The rampInterval is used for market products that have a minimum ramp
    requirement. For example, rampInterval = 10 (minutes) for a contingency
    reserve marketProductType vs a rampInterval = 30 (minutes) for a replacement
    reserve marketProductType.
    '''
    
    Market: Optional[MarketOccurrence] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MarketOccurrence.MarketProducts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MarketRegionResults: Optional[MarketRegionResults] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MarketRegionResults.MarketProduct',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarketQualificationRequirement(IdentifiedObject):
    '''
    Certain skills are required and shall be certified in order for a person
    (typically a member of a crew) to be qualified to work on types of equipment.
    '''

    effectiveDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Effective date of the privilege, terminate date of the privilege, or
    effective date of the application for the organization
    '''
    
    expirationDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the terminate date of the application for the organization
    The specific organization can no longer access the application as of
    the terminate date
    '''
    
    qualificationID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Qualification identifier.
    '''
    
    status: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The status of the privilege. Shows the status of the user�s qualification.
    The current statuses are: 1=New, 2=Active, 3=Refused, 4=Terminated,
    5=Withdrawn
    and it is subject to update.
    '''
    
    statusType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the name of the status of the qualification and is used to
    display the status of the user's or organization's status.
    '''
    
@dataclass(repr=False)
class Measurement(IdentifiedObject):
    '''
    A Measurement represents any measured, calculated or non-measured non-calculated
    quantity. Any piece of equipment may contain Measurements, e.g. a substation
    may have temperature measurements and door open indications, a transformer
    may have oil temperature and tank pressure measurements, a bay may contain
    a number of power flow measurements and a Breaker may contain a switch
    status measurement.
    The PSR - Measurement association is intended to capture this use of Measurement
    and is included in the naming hierarchy based on EquipmentContainer. The
    naming hierarchy typically has Measurements as leaves, e.g. Substation-VoltageLevel-Bay-Switch-Measurement.
    Some Measurements represent quantities related to a particular sensor location
    in the network, e.g. a voltage transformer (VT) or potential transformer
    (PT) at a busbar or a current transformer (CT) at the bar between a breaker
    and an isolator. The sensing position is not captured in the PSR - Measurement
    association. Instead it is captured by the Measurement - Terminal association
    that is used to define the sensing location in the network topology. The
    location is defined by the connection of the Terminal to ConductingEquipment.
    If both a Terminal and PSR are associated, and the PSR is of type ConductingEquipment,
    the associated Terminal should belong to that ConductingEquipment instance.
    When the sensor location is needed both Measurement-PSR and Measurement-Terminal
    are used. The Measurement-Terminal association is never used alone.
    '''

    MeasurementCalculatorInput: list[MeasurementCalculatorInput] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeasurementCalculatorInput.Measurement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The calculator input used for this measurement.
    '''
    
    PinMeasurement: list[PinMeasurement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinMeasurement.Measurement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pin that uses this input.
    '''
    
    measurementType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the type of measurement. For example, this specifies if the
    measurement represents an indoor temperature, outdoor temperature,
    bus voltage, line flow, etc.
    When the measurementType is set to "Specialization", the type of Measurement
    is defined in more detail by the specialized class which inherits from
    Measurement.
    '''
    
    phases: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates to which phases the measurement applies and avoids the need
    to use 'measurementType' to also encode phase information (which would
    explode the types). The phase information in Measurement, along with
    'measurementType' and 'phases' uniquely defines a Measurement for a
    device, based on normal network phase. Their meaning will not change
    when the computed energizing phasing is changed due to jumpers or other
    reasons.
    If the attribute is missing three phases (ABC) shall be assumed.
    '''
    
    unitMultiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit multiplier of the measured quantity.
    '''
    
    unitSymbol: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit of measure of the measured quantity.
    '''
    
    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.Measurements',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CalculationMethodHierarchy: Optional[CalculationMethodHierarchy] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CalculationMethodHierarchy.Measurement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Calculation method hierarchy which applies to this analog.
    '''
    
    MeasurementAction: Optional[MeasurementAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementAction.Measurement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PowerSystemResource: Optional[PowerSystemResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerSystemResource.Measurements',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The power system resource that contains the measurement.
    '''
    
    Terminal: Optional[ACDCTerminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACDCTerminal.Measurements',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    One or more measurements may be associated with a terminal in the network.
    '''
    
@dataclass(repr=False)
class Accumulator(Measurement):
    '''
    Accumulator represents an accumulated (counted) Measurement, e.g. an energy
    value.
    '''

    AccumulatorValues: list[AccumulatorValue] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AccumulatorValue.Accumulator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The values connected to this measurement.
    '''
    
    maxValue: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal value range maximum for any of the MeasurementValue.values.
    Used for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
    
@dataclass(repr=False)
class Analog(Measurement):
    '''
    Analog represents an analog Measurement.
    '''

    AnalogValues: list[AnalogValue] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AnalogValue.Analog',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The values connected to this measurement.
    '''
    
    maxValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal value range maximum for any of the MeasurementValue.values.
    Used for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
    
    minValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal value range minimum for any of the MeasurementValue.values.
    Used for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
    
    normalValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal measurement value, e.g., used for percentage calculations.
    '''
    
    positiveFlowIn: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the direction of positive flow relative to the primary equipment
    connectivity.
    The attribute is applicable for measurements of flow such as active
    power, reactive power or current.
    TRUE means a positive measurement value at the terminal, where the
    measurement is located, indicates power is flowing into the related
    PowerSystemResource.
    FALSE means a positive measurement value at the terminal, where the
    measurement is located, indicates power is flowing out of the related
    PowerSystemResource.
    '''
    
@dataclass(repr=False)
class AssetAnalog(Analog):
    '''
    Definition of type of analog useful in asset domain.
    '''

    detectionLimit: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Detection limit of related analog value if different from detection
    limit of test standard or if there is no test standard. The detection
    limit (also known as lower limit of detection or limit of detection
    (LOD), is the lowest quantity of a substance that can be distinguished
    from the absence of that substance (a blank value) within a stated
    confidence limit (generally 1%).
    '''
    
    precision: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Precision of related analog value if different from precision of test
    standard or if there is no test standard. Precision is a measure of
    how closely individual measurements agree with one another. Expressed
    as 'plus or minus' the value of this attribute.
    '''
    
    reportingTemperature: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reporting temperature of related analog value if different from reporting
    temperature of test standard or if there is no test standard. Reporting
    temperature is what gas volumes are normalized to. Different reporting
    temperatures are used by different sources. For example, ASTM specifies
    0�C, whereas IEC specifies 20�C. Online monitors often have their own
    unique reporting temperatures.
    '''
    
    TestStandard: Optional[TestStandard] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TestStandard.AssetAnalog',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The lab test standard to which this asset health analog is related.
    '''
    
@dataclass(repr=False)
class AssetTemperaturePressureAnalog(AssetAnalog):
    '''
    Temperature or pressure type of asset analog.
    '''

    kind: Optional[ AssetTemperaturePressureAnalogKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analog representing temperature or pressure related to an asset.
    '''
    
@dataclass(repr=False)
class InspectionAnalog(AssetAnalog):
    '''
    Asset inspection type of analog.
    '''

    kind: Optional[ InspectionAnalogKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analog representing inspection result.
    '''
    
@dataclass(repr=False)
class OilAnalysisFluidAnalog(AssetAnalog):
    '''
    Asset oil analysis fluid test type of analog.
    '''

    kind: Optional[ OilAnalysisFluidAnalogKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analog representing oil fluid test analysis result.
    '''
    
@dataclass(repr=False)
class OilAnalysisGasAnalog(AssetAnalog):
    '''
    Asset oil analysis gas type of analog.
    '''

    kind: Optional[ OilAnalysisGasAnalogKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analog representing oil dissolved gases analysis result.
    '''
    
@dataclass(repr=False)
class OilAnalysisMetalsAnalog(AssetAnalog):
    '''
    Asset oil analysis metals type of analog.
    '''

    kind: Optional[ OilAnalysisMetalsAnalogKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analog representing oil metals elements analysis result.
    '''
    
@dataclass(repr=False)
class OilAnalysisMoistureAnalog(AssetAnalog):
    '''
    Asset oil analysis moisture type of analog.
    '''

    kind: Optional[ OilAnalysisMoistureAnalogKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analog representing oil moisture analysis result.
    '''
    
@dataclass(repr=False)
class OilAnalysisPCBAnalog(AssetAnalog):
    '''
    Asset oil analysis PCB type of analog.
    '''

    kind: Optional[ OilAnalysisPCBAnalogKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analog representing oil PCB analysis result.
    '''
    
@dataclass(repr=False)
class OilAnalysisPaperAnalog(AssetAnalog):
    '''
    Asset oil inspection paper type of analog.
    '''

    kind: Optional[ OilAnalysisPaperAnalogKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analog representing oil paper degradation analysis result.
    '''
    
@dataclass(repr=False)
class OilAnalysisParticleAnalog(AssetAnalog):
    '''
    Asset oil analysis particle type of analog.
    '''

    kind: Optional[ OilAnalysisParticleAnalogKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of analog representing oil particulate analysis result.
    '''
    
@dataclass(repr=False)
class Discrete(Measurement):
    '''
    Discrete represents a discrete Measurement, i.e. a Measurement representing
    discrete values, e.g. a Breaker position.
    '''

    DiscreteValues: list[DiscreteValue] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DiscreteValue.Discrete',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The values connected to this measurement.
    '''
    
    maxValue: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal value range maximum for any of the MeasurementValue.values.
    Used for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
    
    minValue: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal value range minimum for any of the MeasurementValue.values.
    Used for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
    
    normalValue: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal measurement value, e.g., used for percentage calculations.
    '''
    
    ValueAliasSet: Optional[ValueAliasSet] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ValueAliasSet.Discretes',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ValueAliasSet used for translation of a MeasurementValue.value
    to a name.
    '''
    
@dataclass(repr=False)
class AssetDiscrete(Discrete):
    '''
    Definition of type of discrete useful in asset domain.
    '''

    TestStandard: Optional[TestStandard] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TestStandard.AssetDiscrete',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The lab test standard to which this asset health discrete is related.
    '''
    
@dataclass(repr=False)
class InspectionDiscrete(AssetDiscrete):
    '''
    Asset inspection type of discrete.
    '''

    kind: Optional[ InspectionDiscreteKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of discrete representing inspection result.
    '''
    
@dataclass(repr=False)
class OilAnalysisFluidDiscrete(AssetDiscrete):
    '''
    Asset oil analysis fluid type of discrete.
    '''

    kind: Optional[ OilAnalysisFluidDiscreteKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of discrete representing oil fluid test analysis result.
    '''
    
@dataclass(repr=False)
class OilAnalysisPCBDiscrete(AssetDiscrete):
    '''
    Asset oil analysis PCB type of discrete.
    '''

    kind: Optional[ OilAnalysisPCBDiscreteKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of discrete representing oil PCB test analysis result.
    '''
    
@dataclass(repr=False)
class OilAnalysisParticleDiscrete(AssetDiscrete):
    '''
    Asset oil analysis particle type of discrete.
    '''

    kind: Optional[ OilAnalysisParticleDiscreteKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of discrete representing oil particulate analysis result.
    '''
    
@dataclass(repr=False)
class StringMeasurement(Measurement):
    '''
    StringMeasurement represents a measurement with values of type string.
    '''

    StringMeasurementValues: list[StringMeasurementValue] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StringMeasurementValue.StringMeasurement',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The values connected to this measurement.
    '''
    
@dataclass(repr=False)
class AssetStringMeasurement(StringMeasurement):
    '''
    Definition of type of string measurement useful in asset domain.
    '''

    kind: Optional[ AssetStringKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of string useful in asset domain.
    '''
    
    TestStandard: Optional[TestStandard] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TestStandard.AssetString',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Test standard which describes this asset string measurement.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class MeasurementCalculator(IdentifiedObject):
    '''
    Result of a calculation of one or more measurement.
    '''

    MeasurementCalculatorInput: list[MeasurementCalculatorInput] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeasurementCalculatorInput.MeasurementCalculator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The input used for the calculator.
    '''
    
    PinMeasurement: list[PinMeasurement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinMeasurement.MeasurementCalculator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pin that uses this input.
    '''
    
    kind: Optional[ CalculationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Calculation operation executed on the operands.
    '''
    
@dataclass(repr=False)
class MeasurementCalculatorInput(IdentifiedObject):
    '''
    Input to measurement calculation. It supports Analog, Discrete and Accumulator
    measurements.
    '''

    absoluteValue: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates if the absolute value is used for comparison. If true, use
    the absolute value. If false, use the complex value (vector).
    '''
    
    order: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive number that defines the order of the operand in the calculation.
    0 means default in which case the order is not relevant.
    '''
    
    Measurement: Optional[Measurement] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Measurement.MeasurementCalculatorInput',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement used as input to a calculation.
    '''
    
    MeasurementCalculator: Optional[MeasurementCalculator] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementCalculator.MeasurementCalculatorInput',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The measurement calculator using this calculator input.
    '''
    
@dataclass(repr=False)
class MeasurementValueSource(IdentifiedObject):
    '''
    MeasurementValueSource describes the alternative sources updating a MeasurementValue.
    User conventions for how to use the MeasurementValueSource attributes are
    defined in IEC 61970-301.
    '''

    MeasurementValues: list[MeasurementValue] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeasurementValue.MeasurementValueSource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The MeasurementValues updated by the source.
    '''
    
@dataclass(repr=False)
class IOPointSource(MeasurementValueSource):
    '''
    Indicates the point source for an IO Point.
    '''

    IOPoint: list[IOPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IOPoint.IOPointSource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ICCP point for a local measurement value source.
    '''
    
@dataclass(repr=False)
class Medium(IdentifiedObject):
    '''
    A substance that either (1) provides the means of transmission of a force
    or effect, such as hydraulic fluid, or (2) is used for a surrounding or
    enveloping substance, such as oil in a transformer or circuit breaker.
    '''

    kind: Optional[ MediumKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of this medium.
    '''
    
    volumeSpec: Optional[ float | Volume ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The volume of the medium specified for this application. Note that
    the actual volume is a type of measurement associated witht the asset.
    '''
    
    Specification: Optional[Specification] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Specification.Mediums',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MeterMultiplier(IdentifiedObject):
    '''
    Multiplier applied at the meter.
    '''

    value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiplier value.
    '''
    
    kind: Optional[ MeterMultiplierKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of multiplier.
    '''
    
    Meter: Optional[Meter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Meter.MeterMultipliers',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Meter applying this multiplier.
    '''
    
@dataclass(repr=False)
class MeterReading(IdentifiedObject):
    '''
    Set of values obtained from the meter.
    '''

    EndDeviceEvents: list[EndDeviceEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDeviceEvent.MeterReading',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All end device events associated with this set of measured values.
    '''
    
    IntervalBlocks: list[IntervalBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IntervalBlock.MeterReading',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All interval blocks contained in this meter reading.
    '''
    
    isCoincidentTrigger: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, this meter reading is the meter reading for which other coincident
    meter readings are requested or provided.
    '''
    
    CustomerAgreement: Optional[CustomerAgreement] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CustomerAgreement.MeterReadings',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (could be deprecated in the future) Customer agreement for this meter
    reading.
    '''
    
    Meter: Optional[Meter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Meter.MeterReadings',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Meter providing this reading.
    '''
    
    UsagePoint: Optional[UsagePoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UsagePoint.MeterReadings',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Usage point from which this meter reading (set of values) has been
    obtained.
    '''
    
@dataclass(repr=False)
class MeterWorkTask(IdentifiedObject):
    '''
    Work task involving meters.
    '''

    Meter: Optional[Meter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Meter.MeterServiceWorkTask',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Meter on which this non-replacement work task is performed.
    '''
    
    OldMeter: Optional[Meter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Meter.MeterReplacementWorkTasks',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Meter being replaced by a meter replacement work task
    '''
    
    UsagePoint: Optional[UsagePoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UsagePoint.MeterServiceWorkTasks',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Usage point to which this meter service work task applies.
    '''
    
@dataclass(repr=False)
class MeteredSubSystem(IdentifiedObject):
    '''
    A metered subsystem.
    '''

    MSSZone: list[MSSZone] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MSSZone.MeteredSubSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MSSAggregation: Optional[MSSAggregation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MSSAggregation.MeteredSubSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MetrologyRequirement(IdentifiedObject):
    '''
    A specification of the metering requirements for a particular point within
    a network.
    '''

    reason: Optional[ ReadingReasonKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reason for this metrology requirement being specified.
    '''
    
@dataclass(repr=False)
class MutualCoupling(IdentifiedObject):
    '''
    This class represents the zero sequence line mutual coupling.
    '''

    b0ch: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence mutual coupling shunt (charging) susceptance, uniformly
    distributed, of the entire line section.
    '''
    
    distance11: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Distance to the start of the coupled region from the first line's terminal
    having sequence number equal to 1.
    '''
    
    distance12: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Distance to the end of the coupled region from the first line's terminal
    with sequence number equal to 1.
    '''
    
    distance21: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Distance to the start of coupled region from the second line's terminal
    with sequence number equal to 1.
    '''
    
    distance22: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Distance to the end of coupled region from the second line's terminal
    with sequence number equal to 1.
    '''
    
    g0ch: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence mutual coupling shunt (charging) conductance, uniformly
    distributed, of the entire line section.
    '''
    
    r0: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence branch-to-branch mutual impedance coupling, resistance.
    '''
    
    x0: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence branch-to-branch mutual impedance coupling, reactance.
    '''
    
    First_Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.HasFirstMutualCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The starting terminal for the calculation of distances along the first
    branch of the mutual coupling. Normally MutualCoupling would only be
    used for terminals of AC line segments. The first and second terminals
    of a mutual coupling should point to different AC line segments.
    '''
    
    Second_Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.HasSecondMutualCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The starting terminal for the calculation of distances along the second
    branch of the mutual coupling.
    '''
    
@dataclass(repr=False)
class OperatingParticipant(IdentifiedObject):
    '''
    An operator of multiple power system resource objects. Note multiple operating
    participants may operate the same power system resource object. This can
    be used for modeling jointly owned units where each owner operates as a
    contractual share.
    '''

    OperatingShare: list[OperatingShare] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperatingShare.OperatingParticipant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operating shares of this operating participant. An operating participant
    can be resused for any number of power system resources.
    '''
    
@dataclass(repr=False)
class OperationalLimit(IdentifiedObject):
    '''
    A value and normal value associated with a specific kind of limit.
    The sub class value and normalValue attributes vary inversely to the associated
    OperationalLimitType.acceptableDuration (acceptableDuration for short).
    If a particular piece of equipment has multiple operational limits of the
    same kind (apparent power, current, etc.), the limit with the greatest
    acceptableDuration shall have the smallest limit value and the limit with
    the smallest acceptableDuration shall have the largest limit value. Note:
    A large current can only be allowed to flow through a piece of equipment
    for a short duration without causing damage, but a lesser current can be
    allowed to flow for a longer duration.
    '''

    PinOperationallLimit: list[PinOperationalLimit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinOperationalLimit.OperationalLimit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit pin pin that uses this operational limit.
    '''
    
    OperationalLimitSet: Optional[OperationalLimitSet] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OperationalLimitSet.OperationalLimitValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The limit set to which the limit values belong.
    '''
    
    OperationalLimitType: Optional[OperationalLimitType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OperationalLimitType.OperationalLimit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The limit type associated with this limit.
    '''
    
    StepOperationalLimitTable: Optional[StepOperationalLimitTable] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StepOperationalLimitTable.OperationalLimit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The step operational limit table for this operational limit.
    '''
    
@dataclass(repr=False)
class ActivePowerLimit(OperationalLimit):
    '''
    Limit on active power flow.
    '''

    normalValue: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal value of active power limit. The attribute shall be a positive
    value or zero.
    '''
    
    value: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of active power limit. The attribute shall be a positive value
    or zero.
    '''
    
@dataclass(repr=False)
class ApparentPowerLimit(OperationalLimit):
    '''
    Apparent power limit.
    '''

    normalValue: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal apparent power limit. The attribute shall be a positive
    value or zero.
    '''
    
    value: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The apparent power limit. The attribute shall be a positive value or
    zero.
    '''
    
@dataclass(repr=False)
class CurrentLimit(OperationalLimit):
    '''
    Operational limit on current.
    '''

    normalValue: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal value for limit on current flow. The attribute shall be
    a positive value or zero.
    '''
    
    value: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Limit on current flow. The attribute shall be a positive value or zero.
    '''
    
@dataclass(repr=False)
class InfeedLimit(OperationalLimit):
    '''
    Infeed limit set constraints fed in to the network by two or more terminals.
    '''

    InfeedTerminal: list[InfeedTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'InfeedTerminal.InfeedConstraint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Infeed terminal that has infeed constraints.
    '''
    
    normalValueA: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal current limit. The attribute shall be a positive value or
    zero.
    '''
    
    normalValueW: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal value of active power limit. The attribute shall be a positive
    value or zero.
    '''
    
    valueA: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of current limit. The attribute shall be a positive value or
    zero.
    '''
    
    valueW: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of active power limit. The attribute shall be a positive value
    or zero.
    '''
    
@dataclass(repr=False)
class VoltageAngleLimit(OperationalLimit):
    '''
    Voltage angle limit between two terminals. The association end OperationalLimitSet.Terminal
    defines one end and the host of the limit. The association end VoltageAngleLimit.AngleReferenceTerminal
    defines the reference terminal.
    '''

    isFlowToRefTerminal: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the flow is from the operating limit terminal to the angle
    reference terminal. False means that the flow is the other direction.
    When it is not given, the limit is the same for both directions.
    '''
    
    normalValue: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The difference in angle degrees between referenced by the association
    end OperationalLimitSet.Terminal and the Terminal referenced by the
    association end VoltageAngleLimit.AngleReferenceTerminal. The value
    shall be positive (greater than zero).
    '''
    
    value: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The difference in angle degrees between referenced by the association
    end OperationalLimitSet.Terminal and the Terminal referenced by the
    association end VoltageAngleLimit.AngleReferenceTerminal. The value
    shall be positive (greater than zero).
    '''
    
    AngleReferenceTerminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.VoltageAngleLimit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The angle reference terminal for the voltage angle limit.
    '''
    
@dataclass(repr=False)
class VoltageLimit(OperationalLimit):
    '''
    Operational limit applied to voltage.
    The use of operational VoltageLimit is preferred instead of limits defined
    at VoltageLevel. The operational VoltageLimits are used, if present.
    '''

    normalValue: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal limit on voltage. High or low limit nature of the limit
    depends upon the properties of the operational limit type. The attribute
    shall be a positive value or zero.
    '''
    
    value: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Limit on voltage. High or low limit nature of the limit depends upon
    the properties of the operational limit type. The attribute shall be
    a positive value or zero.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class OperationalLimitSet(IdentifiedObject):
    '''
    A set of limits associated with equipment. Sets of limits might apply to
    a specific temperature, or season for example. A set of limits may contain
    different severities of limit levels that would apply to the same equipment.
    The set may contain limits of different types such as apparent power and
    current limits or high and low voltage limits that are logically applied
    together as a set.
    '''

    OperationalLimitValue: list[OperationalLimit] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimit.OperationalLimitSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Values of equipment limits.
    '''
    
    Equipment: Optional[Equipment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Equipment.OperationalLimitSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The equipment to which the limit set applies.
    '''
    
    PowerTransferCorridor: Optional[PowerTransferCorridor] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerTransferCorridor.OperationalLimitSet',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The power transfer corridor that has this operational limit set.
    '''
    
    Terminal: Optional[ACDCTerminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACDCTerminal.OperationalLimitSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal where the operational limit set apply.
    '''
    
@dataclass(repr=False)
class OperationalLimitType(IdentifiedObject):
    '''
    The operational meaning of a category of limits.
    '''

    OperationalLimit: list[OperationalLimit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimit.OperationalLimitType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limits associated with this type of limit.
    '''
    
    isInfiniteDuration: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Defines if the operational limit type has infinite duration. If true,
    the limit has infinite duration. If false, the limit has definite duration
    which is defined by the attribute acceptableDuration.
    '''
    
    isMinimum: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'NC Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Defines if the operational limit type is minimum. If true, the value
    is a minimum value of the same kind. This applies to stability and
    PATL. If false, the limit has the normal behaviour. OperationalLimitType.direction
    attribute shall be absoluteValue.
    '''
    
    acceptableDuration: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The nominal acceptable duration of the limit. Limits are commonly expressed
    in terms of the time limit for which the limit is normally acceptable.
    The actual acceptable duration of a specific limit may depend on other
    local factors such as temperature or wind speed. The attribute has
    meaning only if the flag isInfiniteDuration is set to false, hence
    it shall not be exchanged when isInfiniteDuration is set to true.
    '''
    
    direction: Optional[ OperationalLimitDirectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The direction of the limit.
    '''
    
    kind: Optional[ LimitKind ] = field(
        default=None,
        metadata={
        'type': 'European enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    Types of limits defined in the ENTSO-E Operational Handbook Policy
    3.
    '''
    
    PermanentAmbientTemperatureDependencyCurve: Optional[AmbientTemperatureDependencyCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AmbientTemperatureDependencyCurve.OperationalLimitType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The permanent ambient temperature dependency curve for this operational
    limit type.
    '''
    
    PermanentSolarRadiationCurve: Optional[SolarRadiationDependencyCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SolarRadiationDependencyCurve.OperationalLimitType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The permanent solar radiation curve for this operational limit type.
    '''
    
    RecoveryOverloadLimitCurve: Optional[RecoveryOverloadLimitCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RecoveryOverloadLimitCurve.OperationalLimitType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the curve which provides the recovery time information for
    this limit type.
    '''
    
    TemporaryBaseOverloadLimitCurve: Optional[BaseOverloadLimitCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BaseOverloadLimitCurve.OperationalLimitType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The temporary base overload limit curve for this operational limit
    type.
    '''
    
    TemporaryDurationOverloadLimitCurve: Optional[DurationOverloadLimitCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DurationOverloadLimitCurve.OperationalLimitType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The temporary duration overload limit curve for this operational limit
    type.
    '''
    
@dataclass(repr=False)
class OrgPnodeAllocation(IdentifiedObject):
    '''
    This class models the allocation between asset owners and pricing nodes.
    '''

    maxMWAllocation: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum MW for the Source/Sink for the Allocation
    '''
    
    Pnode: Optional[Pnode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Pnode.OrgPnodeAllocation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class OrgResOwnership(IdentifiedObject):
    '''
    This class model the ownership percent and type of ownership between resource
    and organisation.
    '''

    asscType: Optional[ ResourceAssnType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    association type for the association between Organisation and Resource:
    '''
    
    masterSchedulingCoordinatorFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicate that the SC representing the Resource is the Master
    SC.
    '''
    
    ownershipPercent: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ownership percentage for each resource
    '''
    
    RegisteredResource: Optional[RegisteredResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredResource.OrgResOwnership',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Ownership(IdentifiedObject):
    '''
    Ownership of e.g. asset.
    '''

    share: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Share of this ownership.
    '''
    
    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.Ownerships',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset that is object of this ownership.
    '''
    
    AssetOwner: Optional[AssetOwner] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetOwner.Ownerships',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset owner that is subject in this ownership.
    '''
    
@dataclass(repr=False)
class PSRType(IdentifiedObject):
    '''
    Classifying instances of the same class, e.g. overhead and underground
    ACLineSegments. This classification mechanism is intended to provide flexibility
    outside the scope of this document, i.e. provide customisation that is
    non standard.
    '''

    PowerSystemResources: list[PowerSystemResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerSystemResource.PSRType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power system resources classified with this power system resource type.
    '''
    
@dataclass(repr=False)
class MktPSRType(PSRType):
    '''
    The type of a power system resource.
    '''

    psrType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The coded type of a power system resource.
    '''
    
@dataclass(repr=False)
class PerLengthLineParameter(IdentifiedObject):
    '''
    Common type for per-length electrical line parameters.
    '''

    WireAssemblyInfo: Optional[WireAssemblyInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WireAssemblyInfo.PerLengthLineParameter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class PerLengthDCLineParameter(PerLengthLineParameter):
    '''
    Common type for per-length electrical catalogues describing DC line parameters.
    '''

    DCLineSegments: list[DCLineSegment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCLineSegment.PerLengthParameter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All line segments described by this set of per-length parameters.
    '''
    
    capacitance: Optional[ float | CapacitancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Capacitance per unit of length of the DC line segment; significant
    for cables only.
    '''
    
    inductance: Optional[ float | InductancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inductance per unit of length of the DC line segment.
    '''
    
    resistance: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance per length of the DC line segment.
    '''
    
@dataclass(repr=False)
class PerLengthImpedance(PerLengthLineParameter):
    '''
    Common type for per-length electrical impedances.
    '''

    ACLineSegments: list[ACLineSegment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACLineSegment.PerLengthImpedance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All line segments described by this per-length impedance.
    '''
    
@dataclass(repr=False)
class PerLengthPhaseImpedance(PerLengthImpedance):
    '''
    The per length phase impedance matrix expresses impedance and admittance
    parameters per unit length for n-conductor unbalanced line segments. A
    phase impedance matrix contains both self impedances for each phase and
    mutual impedances between pairs of phases. The matrix is stored in symmetric
    lower triangular format where the diagonal entries represent self-impedances
    (and have the same value in row and column) and the off diagonal entries
    represent phase-to-phase impedances (and have different row and column
    values).
    The matrix can be use to express impedances for both non-coupled and coupled
    line segments. Coupled line segments share a single per length phase impedance
    matrix whose entries reflect the self and mutual impedances of all the
    phases of all the wires.
    '''

    PhaseImpedanceData: list[PhaseImpedanceData] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PhaseImpedanceData.PhaseImpedance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All data that belong to this conductor phase impedance.
    '''
    
    conductorCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conductor count identifies the number of phase, neutral, and other
    wires represented in the phase impedance matrix and constrains the
    number of elements in the matrix. Typically, Kron reduction is used
    for incorporating effects of neutral impedance in the phase conductor
    values (so conductor count only considers phase wires), but neutrals
    can be included in the matrix (in which case conductor count would
    include the neutral wire(s)). For a phase impedance matrix associated
    with the lines of a coupled line segment group, the conductor count
    reflects the total of the conductors associated with all the coupled
    line segments in the group.
    '''
    
@dataclass(repr=False)
class PerLengthSequenceImpedance(PerLengthImpedance):
    '''
    Sequence impedance and admittance parameters per unit length, for transposed
    line segments of 1, 2, or 3 phases. For 1-phase line segments, define x
    = x0 = xself. For 2-phase line segments, define x = xself - xmutual and
    x0 = xself + xmutual.
    '''

    b0ch: Optional[ float | SusceptancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence shunt (charging) susceptance, per unit of length.
    '''
    
    bch: Optional[ float | SusceptancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence shunt (charging) susceptance, per unit of length.
    '''
    
    g0ch: Optional[ float | ConductancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence shunt (charging) conductance, per unit of length.
    '''
    
    gch: Optional[ float | ConductancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence shunt (charging) conductance, per unit of length.
    '''
    
    r: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series resistance, per unit of length.
    '''
    
    r0: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series resistance, per unit of length.
    '''
    
    x: Optional[ float | ReactancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series reactance, per unit of length.
    '''
    
    x0: Optional[ float | ReactancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series reactance, per unit of length.
    '''
    
@dataclass(repr=False)
class PhaseTapChangerTable(IdentifiedObject):
    '''
    Describes a tabular curve for how the phase angle difference and impedance
    varies with the tap step.
    '''

    PhaseTapChangerTablePoint: list[PhaseTapChangerTablePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PhaseTapChangerTablePoint.PhaseTapChangerTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The points of this table.
    '''
    
    PhaseTapChangerTabular: list[PhaseTapChangerTabular] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PhaseTapChangerTabular.PhaseTapChangerTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The phase tap changers to which this phase tap table applies.
    '''
    
@dataclass(repr=False)
class ConnectionAngleTapChangerTable(PhaseTapChangerTable):
    '''
    Describes a tabular curve for how the connection angle varies with the
    tap step. This table is used when its winding connection angle matches
    the operating angle of the tap changer. There must be an instance of this
    table for each winding connection angle that can be used.
    '''

    windingConnectionAngle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The phase angle between the in-phase winding and the out-of -phase
    winding used for creating phase shift. The out-of-phase winding produces
    what is known as the difference voltage. Setting this angle to 90 degrees
    is not the same as a symmetrical transformer. In this scenario you
    will still treat the 90-degree angle as a phase shifting transformer.
    The attribute can only be multiples of 30 degrees. When 0 degree is
    used the asymmetrical phase tap changer acts as ratio tap changer controlling
    voltage.
    '''
    
    ConnectionAngleTapChanger: Optional[ConnectionAngleTapChanger] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectionAngleTapChanger.ConnectionAngleTapChangerTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The connection angle tap changer that has this connection angle tap
    changer table.
    '''
    
@dataclass(repr=False)
class Pnode(IdentifiedObject):
    '''
    A pricing node is directly associated with a connectivity node. It is a
    pricing location for which market participants submit their bids, offers,
    buy/sell CRRs, and settle.
    '''

    OrgPnodeAllocation: list[OrgPnodeAllocation] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OrgPnodeAllocation.Pnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredResources: list[RegisteredResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegisteredResource.Pnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A registered resource injects power at one or more connectivity nodes
    related to a pnode
    '''
    
    isPublic: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, this Pnode is public (prices are published for DA/RT and FTR
    markets), otherwise it is private (location is not usable by market
    for bidding/FTRs/transactions).
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.Pnodes',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SubControlArea: Optional[SubControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubControlArea.Pnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AggregatedPnode(Pnode):
    '''
    An aggregated pricing node is a specialized type of pricing node used to
    model items such as System Zone, Default Price Zone, Custom Price Zone,
    Control Area, Aggregated Generation, Aggregated Particpating Load, Aggregated
    Non-Participating Load, Trading Hub, Designated Control Area(DCA) Zone.
    '''

    AggregateNode: Optional[AggregateNode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AggregateNode.AggregatedPnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MktCombinedCyclePlant: list[MktCombinedCyclePlant] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MktCombinedCyclePlant.AggregatedPnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PnodeDistributionFactor: list[PnodeDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PnodeDistributionFactor.AggregatedPnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    apnodeType: Optional[ ApnodeType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Aggregate Price Node Types
    '''
    
    participationCategory: Optional[ ParticipationCategoryMPM ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Designated Control Area participation in LMP price measurement
    'Y' - Participates in both Local Market Power Mitigation (LMPM) and
    System Market Power Mitigation (SMPM)
    'N' - Not included in LMP price measures
    'S' - Participatesin SMPM price measures
    'L' - Participatesin LMPM price measures
    '''
    
    AggregateNode: Optional[AggregateNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AggregateNode.AggregatedPnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CongestionArea(AggregatedPnode):
    '''
    Designated Congestion Area Definition (DCA).
    '''

@dataclass(repr=False)
class IndividualPnode(Pnode):
    '''
    Individual pricing node based on Pnode.
    '''

    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.IndividualPnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PnodeDistributionFactor: list[PnodeDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PnodeDistributionFactor.IndividualPnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.IndividualPnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    GenDistributionFactor: Optional[GenDistributionFactor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GenDistributionFactor.IndividualPnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    LoadDistributionFactor: Optional[LoadDistributionFactor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LoadDistributionFactor.IndividualPnode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class PointOfCommonCoupling(IdentifiedObject):
    '''
    Point of Common Coupling (PCC) refers to the location where multiple electrical
    sources or loads are electrically connected and provide a reference point
    where the voltages and currents from different parts of the system are
    considered to be common. The PCC is used to support system analysis, control,
    and monitoring, as it provides a reference for understanding the interactions
    and power flow between various components within the system. It is also
    relevant to define the requirement and responsibility between different
    actors in operating a power system.
    '''

@dataclass(repr=False)
class ACPointOfCommonCoupling(PointOfCommonCoupling):
    '''
    Point of interconnection of the DC converter station to the adjacent AC
    system (IEC 60633).
    '''

    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.ACPointOfCommonCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Connectivity node which is a point of common coupling AC.
    '''
    
    DCConverterUnit: Optional[DCConverterUnit] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCConverterUnit.ACPointOfCommonCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC converter unit that has AC point of common coupling.
    '''
    
    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.ACPointOfCommonCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Connectivity node which is a point of common coupling AC.
    '''
    
    DCConverterUnit: Optional[DCConverterUnit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCConverterUnit.ACPointOfCommonCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC converter unit that has AC point of common coupling.
    '''
    
@dataclass(repr=False)
class DCPointOfCommonCoupling(PointOfCommonCoupling):
    '''
    Point of interconnection of the DC converter station to the DC transmission
    line (IEC 60633).
    '''

    DCConverterUnit: Optional[DCConverterUnit] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCConverterUnit.DCPointOfCommonCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC converter unit that has DC point of common coupling.
    '''
    
    DCNode: Optional[DCNode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCNode.DCPointOfCommonCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DCNode that is a point of common coupling DC.
    '''
    
    DCConverterUnit: Optional[DCConverterUnit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCConverterUnit.DCPointOfCommonCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC converter unit that has DC point of common coupling.
    '''
    
    DCNode: Optional[DCNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCNode.DCPointOfCommonCoupling',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DCNode that is a point of common coupling DC.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class PowerShiftKeyDistribution(IdentifiedObject):
    '''
    Distribution of the bid action on the power shift keys.
    '''

    PowerElectronicsUnit: list[PowerElectronicsUnit] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsUnit.PowerShiftKeyDistribution',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Power electronics unit distribution for a given bid.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class PowerShiftKeyStrategy(IdentifiedObject):
    '''
    Strategy of the power shift key.
    '''

    PowerFrequencyController: list[PowerFrequencyController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerFrequencyController.PowerShiftKeyStrategy',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Power frequency controller that has power shift key strategy.
    '''
    
@stereotype(CIMStereotype.Part3Ext)
@dataclass(repr=False)
class PowerSystemResource(IdentifiedObject):
    '''
    A power system resource (PSR) can be an item of equipment such as a switch,
    an equipment container containing many individual items of equipment such
    as a substation, or an organisational entity such as sub-control area.
    Power system resources can have measurements associated.
    '''

    ConfigurationEvent: list[ConfigurationEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Part 3 Ext',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConfigurationEvent.PowerSystemResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Controls: list[Control] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Control.PowerSystemResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The controller outputs used to actually govern a regulating device,
    e.g. the magnetization of a synchronous machine or capacitor bank breaker
    actuator.
    '''
    
    Measurements: list[Measurement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Measurement.PowerSystemResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The measurements associated with this power system resource.
    '''
    
    OperatingShare: list[OperatingShare] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperatingShare.PowerSystemResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operating shares of this power system resource.
    '''
    
    AssetDatasheet: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.PowerSystemResources',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Datasheet information for this power system resource.
    '''
    
    DesignElement: Optional[DesignElement] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DesignElement.PowerSystemResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Operation to be performed with the resource in context of a particular
    design
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.PowerSystemResources',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Location of this power system resource.
    '''
    
    PSRType: Optional[PSRType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PSRType.PowerSystemResources',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Custom classification for this power system resource.
    '''
    
@dataclass(repr=False)
class ACLineSegmentPhase(PowerSystemResource):
    '''
    A line segment phase represents one phase (or optionally the neutral) of
    an alternating current line segment.
    Under most circumstances there is not a line segment phase for the neutral.
    However, if a wire assembly is being used and it does not specify phase,
    a line segment phase must exist for each position in the assembly (including
    the neutral).
    '''

    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Sequence number provides the numbering for this line segment phase.
    When impedance is directly described, sequence number binds the phase
    to the column and row for entries in the per length phase impedance
    matrix (PhaseImpedanceData of PerLengthPhaseImpedance). When used in
    conjunction with a wire assembly description, sequence number associates
    the line segment phase to a position.
    For a line segment not a part of a parallel line segment group, sequence
    number starts at one and increments by one through each line segment
    phase associated with the line segment. If there is a line segment
    phase for neutral, it is numbered last.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase identifies the phase or neutral connection of the conductor at
    both ends.
    '''
    
    ACLineSegment: Optional[ACLineSegment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACLineSegment.ACLineSegmentPhases',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line segment to which the phase belongs.
    '''
    
    IntraphaseSpacing: Optional[IntraphaseSpacing] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IntraphaseSpacing.ACLineSegmentPhase',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    WireInfo: Optional[WireInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WireInfo.ACLineSegmentPhase',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class AirCompressor(PowerSystemResource):
    '''
    Combustion turbine air compressor which is an integral part of a compressed
    air energy storage (CAES) plant.
    '''

    CAESPlant: Optional[CAESPlant] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CAESPlant.AirCompressor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An air compressor may be a member of a compressed air energy storage
    plant.
    '''
    
    CombustionTurbine: Optional[CombustionTurbine] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CombustionTurbine.AirCompressor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A CAES air compressor is driven by combustion turbine.
    '''
    
    airCompressorRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rating of the CAES air compressor.
    '''
    
    CAESPlant: Optional[CAESPlant] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CAESPlant.AirCompressor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An air compressor may be a member of a compressed air energy storage
    plant.
    '''
    
    CombustionTurbine: Optional[CombustionTurbine] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CombustionTurbine.AirCompressor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A CAES air compressor is driven by combustion turbine.
    '''
    
@stereotype(CIMStereotype.NC)
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class AreaDispatchableUnit(PowerSystemResource):
    '''
    Allocates a given producing or consuming unit, including direct current
    corridor and collection of units, to a given control area (through the
    scheduling area) for supporting the control of the given area through dispatch
    instruction.
    '''

    EnergyConsumer: Optional[EnergyConsumer] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergyConsumer.AreaDispatchableUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Energy consumer for this area dispatchable unit.
    '''
    
    GeneratingUnit: Optional[GeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'NC OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GeneratingUnit.AreaDispatchableUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The generating unit that belongs to area dispatchable unit.
    '''
    
    HydroPump: Optional[HydroPump] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroPump.AreaDispatchableUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Hydro Pump which is associated with the area dispatchable unit.
    '''
    
    PowerElectronicsUnit: Optional[PowerElectronicsUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsUnit.AreaDispatchableUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The power electronics unit that belongs to this area dispatchable unit.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class AutomationFunction(PowerSystemResource):
    '''
    Automation function is a collection of functional block or other automation
    function that can be executed as a work cycle program as part of an automated
    system.
    '''

    AutomationBlockGroup: list[AutomationBlockGroup] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AutomationBlockGroup.AutomationFunction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Automation block group which belongs to an automation function.
    '''
    
    HasPart: list[AutomationFunction] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AutomationFunction.PartOf',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Automation function has this automation function as a part.
    '''
    
    FunctionBlock: list[FunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionBlock.AutomationFunction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Function block is part of this automation function.
    '''
    
    enabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True, if the automation function is enabled (active). Otherwise false.
    '''
    
    normalEnabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True, if the automation function is normally enabled (active). Otherwise
    false.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of automation function.
    '''
    
    PartOf: Optional[AutomationFunction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AutomationFunction.HasPart',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Automation function is part of this automation function.
    '''
    
@dataclass(repr=False)
class EquipmentController(AutomationFunction):
    '''
    Equipment controller is an automation function that can control one or
    multiple equipment function to achieve all the targets inside the given
    tolerance.
    '''

    RegulatingCondEq: list[RegulatingCondEq] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegulatingCondEq.EquipmentController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All regulating conducting equipment that belongs to this equipment
    controller.
    '''
    
    SystemControl: Optional[SystemControl] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SystemControl.EquipmentController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    System control which controls this equipment controller.
    '''
    
@dataclass(repr=False)
class CompensatorController(EquipmentController):
    '''
    Compensator controller is controlling the equipment to optimize the use
    of the compensators.
    '''

    mode: Optional[ CompensatorControlModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mode of the compensator controller.
    '''
    
@dataclass(repr=False)
class DirectCurrentEquipmentController(EquipmentController):
    '''
    Direct current equipment controller used to control different parts of
    the hierarchical structure of the DC control system defined by IEC 60633.
    '''

    mode: Optional[ DCControlModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mode of the dc controller.
    '''
    
@dataclass(repr=False)
class ACDCConverterController(DirectCurrentEquipmentController):
    '''
    ACDC converter unit control. According to IEC 60633, it is the control
    system used for the controlling, monitoring and protection of a single
    converter unit.
    '''

    ACDCConverter: Optional[ACDCConverter] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACDCConverter.ACDCConverterController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ACDC converter controlled by the direct current controller.
    '''
    
    ACDCConverter: Optional[ACDCConverter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACDCConverter.ACDCConverterController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ACDC converter controlled by the direct current controller.
    '''
    
    DirectCurrentPoleController: Optional[DirectCurrentPoleController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentPoleController.ACDCConverterController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole controller that controls this ACDC controller.
    '''
    
@dataclass(repr=False)
class DirectCurrentBipoleController(DirectCurrentEquipmentController):
    '''
    DC system bipole control that is the control system of a bipole in accordance
    with IEC 60633.
    '''

    DirectCurrentPoleController: list[DirectCurrentPoleController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DirectCurrentPoleController.DirectCurrentBipoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole controller that is controlled by a DC bipole controller.
    '''
    
    DirectCurrentMasterController: Optional[DirectCurrentMasterController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentMasterController.DirectCurrentBipoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direct current master controller which has direct current bipole controllers.
    '''
    
@dataclass(repr=False)
class DirectCurrentMasterController(DirectCurrentEquipmentController):
    '''
    Direct current system control is a control system which governs the operation
    of an entire DC system consisting of more than one DC substation and performs
    those functions of controlling, monitoring and protection which require
    information from more than one substation. This can also be a multiterminal
    control which is a DC system control for more that two DC substations or
    a DC master control, which is a general concept for control coordination
    of a DC system. The DC master control may be implemented at the bipole
    and/or pole level as defined in IEC 60633.
    The DC system control/multiterminal control/master control is part of the
    hierarchical structure of an HVDC control system that has an integrated
    AC/DC system control as the highest level of control which governs the
    integrated operation of AC and DC systems of a power system. This control
    system is under the responsibility of the system operator.
    '''

    DCTieCorridor: Optional[DCTieCorridor] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTieCorridor.DirectCurrentMasterController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DCTieCorridor controlled by this direct current master controller.
    '''
    
    DirectCurrentBipoleController: list[DirectCurrentBipoleController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DirectCurrentBipoleController.DirectCurrentMasterController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direct current bipole controller which belongs to a direct current
    master controller.
    '''
    
    DirectCurrentPoleController: list[DirectCurrentPoleController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DirectCurrentPoleController.DirectCurrentMasterController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole controller that is controlled by this DC master controller.
    '''
    
    DirectCurrentSubstationController: list[DirectCurrentSubstationController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DirectCurrentSubstationController.MultiterminalControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation controller controlled by a multiterminal control.
    '''
    
    DCTieCorridor: Optional[DCTieCorridor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTieCorridor.DirectCurrentMasterController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DCTieCorridor controlled by this direct current master controller.
    '''
    
@dataclass(repr=False)
class DirectCurrentPoleController(DirectCurrentEquipmentController):
    '''
    DC system pole control, which is the control system of a pole in accordance
    with IEC 60633.
    '''

    ACDCConverterController: list[ACDCConverterController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACDCConverterController.DirectCurrentPoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ACDC converter controller that is controlled by a DC pole controller.
    '''
    
    DCPole: Optional[DCPole] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPole.DirectCurrentPoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole that is controlled by a DC pole controller.
    '''
    
    DCPole: Optional[DCPole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPole.DirectCurrentPoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole that is controlled by a DC pole controller.
    '''
    
    DirectCurrentBipoleController: Optional[DirectCurrentBipoleController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentBipoleController.DirectCurrentPoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC bipole controller that controls this DC pole controller.
    '''
    
    DirectCurrentMasterController: Optional[DirectCurrentMasterController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentMasterController.DirectCurrentPoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC master controller that has a DC pole controller.
    '''
    
@dataclass(repr=False)
class DirectCurrentSubstationController(DirectCurrentEquipmentController):
    '''
    Control system used for the controlling, monitoring and protection within
    a DC substation (IEC 60633). A DC substation control may be implemented
    at the bipole and/or pole level and may be referred to as local control.
    '''

    MultiterminalControl: Optional[DirectCurrentMasterController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentMasterController.DirectCurrentSubstationController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiterminal control that controls more than two DC substation controllers.
    '''
    
@dataclass(repr=False)
class DirectCurrentSubstationBipoleController(DirectCurrentSubstationController):
    '''
    Control system of a substation bipole (IEC 60633).
    '''

    DCSubstationBipole: Optional[DCSubstationBipole] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCSubstationBipole.DirectCurrentSubstationBipoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation bipole that is controlled by a DC substation bipole controller.
    '''
    
    DCSubstationBipole: Optional[DCSubstationBipole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCSubstationBipole.DirectCurrentSubstationBipoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation bipole that is controlled by a DC substation bipole controller.
    '''
    
@dataclass(repr=False)
class DirectCurrentSubstationPoleController(DirectCurrentSubstationController):
    '''
    Control system of a substation pole (IEC 60633).
    '''

    DCSubstationPole: Optional[DCSubstationPole] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCSubstationPole.DirectCurrentSubstationPoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation pole that is controlled by a DC substation pole controller.
    '''
    
    DCSubstationPole: Optional[DCSubstationPole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCSubstationPole.DirectCurrentSubstationPoleController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation pole that is controlled by a DC substation pole controller.
    '''
    
@dataclass(repr=False)
class InjectionController(EquipmentController):
    '''
    Injection controller is controlling the equipment which represents an injection
    or an external network.
    '''

    EquivalentInjection: list[EquivalentInjection] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EquivalentInjection.InjectionController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Equivalent injection controlled by the injection controller.
    '''
    
    mode: Optional[ InjectionControlModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mode of the injection controller.
    '''
    
@dataclass(repr=False)
class PowerElectronicsConnectionController(EquipmentController):
    '''
    Power electronics connection controller is controlling the equipment to
    optimize the power electronics connection.
    '''

    PowerElectronicsUnitController: list[PowerElectronicsUnitController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsUnitController.PowerElectronicsConnectionController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power electronics unit controller that has this power electronics connection
    controller.
    '''
    
@dataclass(repr=False)
class PowerElectronicsUnitController(EquipmentController):
    '''
    Power electronics unit controller is controlling the equipment to optimize
    the power electronics unit.
    '''

    PowerElectronicsUnit: list[PowerElectronicsUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsUnit.PowerElectronicsUnitController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power electronics unit that has this power electronics unit controller.
    '''
    
    PowerElectronicsConnectionController: Optional[PowerElectronicsConnectionController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsConnectionController.PowerElectronicsUnitController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power electronics connection controller for the power electronics unit
    controller.
    '''
    
@dataclass(repr=False)
class PowerPlantController(EquipmentController):
    '''
    Power plant controller is controlling the equipment of a power plant.
    '''

@dataclass(repr=False)
class RotatingMachineController(EquipmentController):
    '''
    Rotating machine controller is controlling the equipment which may be used
    as a generator or motor.
    '''

    mode: Optional[ RotatingMachineControlModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mode of the rotating machine controller.
    '''
    
@dataclass(repr=False)
class SSSCController(EquipmentController):
    '''
    The controller of a Static synchronous series compensator (SSSC).
    '''

    CurrentDroopOverride: Optional[CurrentDroopOverride] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CurrentDroopOverride.SSSCController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The current droop override for this SSSC controller. It is not used
    when the SSSC controller is in mode currentDroop.
    '''
    
    maxInjectionU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum voltage that the device can inject.
    '''
    
    maxLimitI: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum operating current limit applied for the controller and used
    by any of the available control functions.
    '''
    
    minInjectionU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum voltage that the device can inject.
    '''
    
    minLimitI: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum operating current limit applied for the controller and used
    by any of the available control functions.
    '''
    
    mode: Optional[ SSSCControlModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mode of the Static Synchronous Series compensator controller.
    '''
    
    CurrentDroopOverride: Optional[CurrentDroopOverride] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CurrentDroopOverride.SSSCController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The current droop override for this SSSC controller. It is not used
    when the SSSC controller is in mode currentDroop.
    '''
    
    SSSCSimulationSettings: Optional[SSSCSimulationSettings] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SSSCSimulationSettings.SSSCController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The simulation setings that apply for this controller.
    '''
    
@dataclass(repr=False)
class ScheduleResourceController(EquipmentController):
    '''
    Schedule resource controller is controlling the equipment to optimize the
    schedule resource.
    '''

    ScheduleResource: Optional[ScheduleResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ScheduleResource.ScheduleResourceController',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Schedule resource that has a schedule resource controller.
    '''
    
@dataclass(repr=False)
class SubstationController(EquipmentController):
    '''
    Substation controller is controlling the equipment to optimize the use
    of the controlling equipment within a substation.
    '''

    mode: Optional[ SubstationControllerModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mode of the substation controller.
    '''
    
@dataclass(repr=False)
class TCSCController(EquipmentController):
    '''
    TCSC controller is controlling the equipment to optimize the performance
    of the TCSC.
    '''

    mode: Optional[ TCSCControlModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mode of the TCSC controller.
    '''
    
@dataclass(repr=False)
class TapChangerController(EquipmentController):
    '''
    Tap changer controller is an equipment controller that controls a tap changer,
    e.g. how the voltage at the end of a line varies with the load level and
    compensation of the voltage drop by tap adjustment.
    '''

    TapChanger: list[TapChanger] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TapChanger.TapChangeController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All tap changers controlled by this controller.
    '''
    
@dataclass(repr=False)
class UnifiedPowerFlowController(EquipmentController):
    '''
    Unified power flow controller (UPFC) is providing fast-acting reactive
    power compensation on high-voltage electricity transmission networks.
    '''

@dataclass(repr=False)
class ProtectionFunction(AutomationFunction):
    '''
    Protection function is an automation function that can protect one or multiple
    equipment.
    '''

    ProtectionSettingsGroup: list[ProtectionSettingsGroup] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProtectionSettingsGroup.ProtectionFunction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection-settings group can be defined 0 to many for a protection
    function.
    '''
    
    protectionFunctionRoleType: Optional[ ProtectionFunctionRoleKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This attribute means the role of ProtectionFunction instance.
    '''
    
    protectionFunctionSchemeType: Optional[ ProtectionFunctionSchemeKInd ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This attibute means the kind of protection relay scheme, e.g busbar
    protection, generation protection and so on.
    '''
    
    ProtectionEquipment: Optional[ProtectionEquipment] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionEquipment.ProtectionFunction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection equipment may contain protection functions.
    '''
    
    RelayDynamics: Optional[RelayDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RelayDynamics.ProtectionFunction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The relay dynamics may represent the detail logic of the ProtectionFunction.
    '''
    
@dataclass(repr=False)
class SystemControl(AutomationFunction):
    '''
    System control is the management and regulation of various parameters within
    the electrical grid to ensure its stable and reliable operation. The primary
    goal of system control is to maintain the balance between electricity generation
    and consumption, while also managing factors such as voltage, frequency,
    and power quality. This involves the use of control devices, automation,
    and monitoring systems to respond to changes in the grid and maintain its
    overall stability.
    This serves as Integrated AC and DC control system (IEC 60633) which governs
    the integrated operation of AC and DC systems of a power system.
    '''

    EquipmentController: list[EquipmentController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EquipmentController.SystemControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Equipment controller controlles by this system control
    '''
    
@dataclass(repr=False)
class AreaInterchangeController(SystemControl):
    '''
    Area interchange control is set to control active power of an area.
    '''

    ControlArea: Optional[ControlArea] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlArea.AreaInterchangeController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Control area that has a area interchange controller.
    '''
    
    pTolerance: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power net interchange tolerance. The attribute shall be a positive
    value or zero.
    '''
    
    BiddingZone: Optional[BiddingZone] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BiddingZone.AreaInterchangeController',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Bidding zone which has an area interchange controller.
    '''
    
    BiddingZoneBorder: Optional[BiddingZoneBorder] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BiddingZoneBorder.AreaInterchangeController',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Bidding zone border that has an area interchange controller.
    '''
    
    ControlArea: Optional[ControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlArea.AreaInterchangeController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Control area that has a area interchange controller.
    '''
    
@dataclass(repr=False)
class PowerFrequencyController(SystemControl):
    '''
    Power frequency controller is controlling the active power balance as typically
    done by the secondary control. If an unbalance between the scheduled active
    power values of each generation unit and the loads plus losses occurs,
    primary control will adapt (increase/decrease) the active power production
    of each unit (depending on the power shift key strategy), leading to an
    over- or under-frequency situation. The secondary frequency controller
    will then control the frequency back to its nominal value, re- establishing
    a cost-efficient generation delivered by each unit.
    '''

    ControlArea: Optional[ControlArea] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlArea.PowerFrequencyController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Control area which has a power frequency controller.
    '''
    
    FrequencyMonitoringTerminal: list[FrequencyMonitoringTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FrequencyMonitoringTerminal.PowerFrequencyController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Frequency monitoring terminal for this power frequency controller.
    '''
    
    mode: Optional[ PowerFrequencyControlKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mode of the power frequency controller.
    '''
    
    ControlArea: Optional[ControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlArea.PowerFrequencyController',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Control area which has a power frequency controller.
    '''
    
    MonitoringArea: Optional[MonitoringArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MonitoringArea.PowerFrequencyController',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Monitoring area that has this power frequency controller.
    '''
    
    PowerShiftKeyStrategy: Optional[PowerShiftKeyStrategy] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerShiftKeyStrategy.PowerFrequencyController',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Power shift key strategy for this power frequency controller.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class BiddingZone(PowerSystemResource):
    '''
    A bidding zone is a market-based method for handling power transmission
    congestion. It consists of scheduling areas that include the relevant production
    (supply) and consumption (demand) to form an electrical area with the same
    market price without capacity allocation.
    '''

    AreaInterchangeController: Optional[AreaInterchangeController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AreaInterchangeController.BiddingZone',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Area interchange controller for this bidding zone.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class BiddingZoneBorder(PowerSystemResource):
    '''
    Defines the aggregated connection capacity between two Bidding Zones.
    '''

    AreaInterchangeController: Optional[AreaInterchangeController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AreaInterchangeController.BiddingZoneBorder',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Area interchange controller that relates to this bidding zone border.
    '''
    
    TieCorridor: list[TieCorridor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TieCorridor.BiddingZoneBorder',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Tie corridor for a given bidding zone border.
    '''
    
@stereotype(CIMStereotype.European)
@dataclass(repr=False)
class BoundaryPoint(PowerSystemResource):
    '''
    Designates a connection point at which one or more model authority sets
    shall connect to. The location of the connection point as well as other
    properties are agreed between organisations responsible for the interconnection,
    hence all attributes of the class represent this agreement. It is primarily
    used in a boundary model authority set which can contain one or many BoundaryPoint-s
    among other Equipment-s and their connections.
    '''

    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'European',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.BoundaryPoint',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    The connectivity node that is designated as a boundary point.
    '''
    
    fromEndIsoCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    The ISO code of the region which the "From" side of the Boundary point
    belongs to or it is connected to.
    The ISO code is a two-character country code as defined by ISO 3166
    (http://www.iso.org/iso/country_codes). The length of the string is
    2 characters maximum.
    '''
    
    fromEndName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    A human readable name with length of the string 64 characters maximum.
    It covers the following two cases:
    -if the Boundary point is placed on a tie-line, it is the name (IdentifiedObject.name)
    of the substation at which the "From" side of the tie-line is connected
    to.
    -if the Boundary point is placed in a substation, it is the name (IdentifiedObject.name)
    of the element (e.g. PowerTransformer, ACLineSegment, Switch, etc.)
    at which the "From" side of the Boundary point is connected to.
    '''
    
    fromEndNameTso: Optional[str] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    Identifies the name of the transmission system operator, distribution
    system operator or other entity at which the "From" side of the interconnection
    is connected to. The length of the string is 64 characters maximum.
    '''
    
    isDirectCurrent: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    If true, this boundary point is a point of common coupling (PCC) of
    a direct current (DC) interconnection, otherwise the interconnection
    is AC (default).
    '''
    
    isExcludedFromAreaInterchange: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    If true, this boundary point is on the interconnection that is excluded
    from control area interchange calculation and consequently has no related
    tie flows. Otherwise, the interconnection is included in control area
    interchange and a TieFlow is required at all sides of the boundary
    point (default).
    '''
    
    toEndIsoCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    The ISO code of the region which the "To" side of the Boundary point
    belongs to or is connected to.
    The ISO code is a two-character country code as defined by ISO 3166
    (http://www.iso.org/iso/country_codes). The length of the string is
    2 characters maximum.
    '''
    
    toEndName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    A human readable name with length of the string 64 characters maximum.
    It covers the following two cases:
    -if the Boundary point is placed on a tie-line, it is the name (IdentifiedObject.name)
    of the substation at which the "To" side of the tie-line is connected
    to.
    -if the Boundary point is placed in a substation, it is the name (IdentifiedObject.name)
    of the element (e.g. PowerTransformer, ACLineSegment, Switch, etc.)
    at which the "To" side of the Boundary point is connected to.
    '''
    
    toEndNameTso: Optional[str] = field(
        default=None,
        metadata={
        'type': 'European Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    Identifies the name of the transmission system operator, distribution
    system operator or other entity at which the "To" side of the interconnection
    is connected to. The length of the string is 64 characters maximum.
    '''
    
    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'European',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.BoundaryPoint',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    The connectivity node that is designated as a boundary point.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class CAESPlant(PowerSystemResource):
    '''
    Compressed air energy storage plant.
    '''

    AirCompressor: Optional[AirCompressor] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AirCompressor.CAESPlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An air compressor may be a member of a compressed air energy storage
    plant.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.CAESPlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may be a member of a compressed air energy
    storage plant.
    '''
    
    energyStorageCapacity: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The rated energy storage capacity. The attribute shall be a positive
    value.
    '''
    
    ratedCapacityP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The CAES plant's gross rated generating capacity. The attribute shall
    be a positive value.
    '''
    
    AirCompressor: Optional[AirCompressor] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AirCompressor.CAESPlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An air compressor may be a member of a compressed air energy storage
    plant.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.CAESPlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may be a member of a compressed air energy
    storage plant.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class CogenerationPlant(PowerSystemResource):
    '''
    A set of thermal generating units for the production of electrical energy
    and process steam (usually from the output of the steam turbines). The
    steam sendout is typically used for industrial purposes or for municipal
    heating and cooling.
    '''

    SteamSendoutSchedule: Optional[SteamSendoutSchedule] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SteamSendoutSchedule.CogenerationPlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A cogeneration plant has a steam sendout schedule.
    '''
    
    ThermalGeneratingUnits: list[ThermalGeneratingUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ThermalGeneratingUnit.CogenerationPlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may be a member of a cogeneration plant.
    '''
    
    cogenHPSendoutRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The high pressure steam sendout.
    '''
    
    cogenHPSteamRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The high pressure steam rating.
    '''
    
    cogenLPSendoutRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The low pressure steam sendout.
    '''
    
    cogenLPSteamRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The low pressure steam rating.
    '''
    
    ratedP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The rated output active power of the cogeneration plant.
    The attribute shall be a positive value.
    '''
    
    SteamSendoutSchedule: Optional[SteamSendoutSchedule] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SteamSendoutSchedule.CogenerationPlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A cogeneration plant has a steam sendout schedule.
    '''
    
@dataclass(repr=False)
class CombinedCyclePlant(PowerSystemResource):
    '''
    A set of combustion turbines and steam turbines where the exhaust heat
    from the combustion turbines is recovered to make steam for the steam turbines,
    resulting in greater overall plant efficiency.
    '''

    ThermalGeneratingUnits: list[ThermalGeneratingUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ThermalGeneratingUnit.CombinedCyclePlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may be a member of a combined cycle plant.
    '''
    
    combCyclePlantRating: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The combined cycle plant's active power output rating.
    '''
    
@dataclass(repr=False)
class MktCombinedCyclePlant(CombinedCyclePlant):
    '''
    Subclass of Production: CombinedCyclePlant from IEC 61970 package.
    A set of combustion turbines and steam turbines where the exhaust heat
    from the combustion turbines is recovered to make steam for the steam turbines,
    resulting in greater overall plant efficiency.
    '''

    CombinedCycleLogicalConfiguration: list[CombinedCycleLogicalConfiguration] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CombinedCycleLogicalConfiguration.MktCombinedCyclePlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    AggregatedPnode: Optional[AggregatedPnode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AggregatedPnode.MktCombinedCyclePlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CommunicationLink(PowerSystemResource):
    '''
    The connection to remote units is through one or more communication links.
    Reduntant links may exist. The CommunicationLink class inherits PowerSystemResource.
    The intention is to allow CommunicationLinks to have Measurements. These
    Measurements can be used to model link status as operational, out of service,
    unit failure etc.
    '''

    BilateralExchangeActor: Optional[BilateralExchangeActor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BilateralExchangeActor.CommunicationLink',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ICCP data provider or consumer using communication addressing for a
    Bilateral table.
    '''
    
@dataclass(repr=False)
class IPAccessPoint(CommunicationLink):
    '''
    Internet Protocol Access Point � used to represent an addressing structure
    is based upon an Internet Protocol (IP) address.
    '''

    address: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is the dotted decimal IP Address resolve the IP address. The format
    is controlled by the value of the addressType.
    '''
    
    gateway: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is the dotted decimal IPAddress of the first hop router. Format is
    controlled by the addressType.
    '''
    
    subnet: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the IP subnet mask which controls the local vs non-local routing.
    '''
    
    addressType: Optional[ IPAddressKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    IP address type.
    '''
    
@dataclass(repr=False)
class TCPAccessPoint(IPAccessPoint):
    '''
    Allows addressing and behavioural information regarding the use of TCP
    by ICCP links.
    '''

    PublicX509Certificate: list[PublicX509Certificate] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PublicX509Certificate.TCPAccessPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is the Public Certificate used for mutual authentication between peers.
    '''
    
    keepAliveTime: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the default interval at which TCP will check if the TCP connection
    is still valid.
    '''
    
    port: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This value is only needed to be specified for called nodes (e.g. those
    that respond to a TCP.Open request).
    This value specifies the TCP port to be used. Well known and "registered"
    ports are preferred and can be found at:
    http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml
    For IEC 60870-6 TASE.2 (e.g. ICCP) and IEC 61850, the value used shall
    be 102 for non-TLS protected exchanges. The value shall be 3782 for
    TLS transported ICCP and 61850 exchanges.
    '''
    
@dataclass(repr=False)
class ISOUpperLayer(TCPAccessPoint):
    '''
    Is a set of configure addressing information that is required since ICCP
    utilizes addressing other than a TCP port.
    '''

    UpperLayerPublicX509Certificate: list[PublicX509Certificate] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PublicX509Certificate.ISOUpperLayer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Certificate to be bound for use for Application layer mutual authentication.
    '''
    
    aeInvoke: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is part of the Application Entity addressing as specified by ISO Addressing.
    '''
    
    aeQual: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is the AE qualifier and represents further application level addressing
    information.
    '''
    
    apInvoke: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is a further application level OSI addressing parameter.
    '''
    
    apTitle: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is a sequence of integer strings separated by ".". The value, in conjunction
    with other application addressing attributes (e.g. other APs) are used
    to select a specific application (e.g. the ICCP application entity)
    per the OSI reference model. The sequence, and its values, represent
    a namespace whose values are governed by ISO/IEC 7498-3.
    '''
    
    osiPsel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is the addressing selector for OSI presentation addressing.
    '''
    
    osiSsel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is the OSI session layer addressing information.
    '''
    
    osiTsel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is the OSI Transport Layer addressing information.
    '''
    
@dataclass(repr=False)
class ConnectivityNodeContainer(PowerSystemResource):
    '''
    A base class for all objects that may contain connectivity nodes or topological
    nodes.
    '''

    ConnectivityNodes: list[ConnectivityNode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConnectivityNode.ConnectivityNodeContainer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Connectivity nodes which belong to this connectivity node container.
    '''
    
    TopologicalNode: list[TopologicalNode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TopologicalNode.ConnectivityNodeContainer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The topological nodes which belong to this connectivity node container.
    '''
    
@dataclass(repr=False)
class EquipmentContainer(ConnectivityNodeContainer):
    '''
    A modelling construct to provide a root class for containing equipment.
    '''

    Equipments: list[Equipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Equipment.EquipmentContainer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Contained equipment.
    '''
    
@dataclass(repr=False)
class Bay(EquipmentContainer):
    '''
    A collection of power system resources (within a given substation) including
    conducting equipment, protection relays, measurements, and telemetry. A
    bay typically represents a physical grouping related to modularization
    of equipment.
    '''

    bayEnergyMeasFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the presence/absence of energy measurements.
    '''
    
    bayPowerMeasFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the presence/absence of active/reactive power measurements.
    '''
    
    breakerConfiguration: Optional[ BreakerConfiguration ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Breaker configuration.
    '''
    
    busBarConfiguration: Optional[ BusbarConfiguration ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Busbar configuration.
    '''
    
    Circuit: Optional[Circuit] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Circuit.EndBay',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Circuit containing the bay.
    '''
    
    Substation: Optional[Substation] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Substation.Bays',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Substation containing the bay.
    '''
    
    VoltageLevel: Optional[VoltageLevel] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'VoltageLevel.Bays',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage level containing this bay.
    '''
    
@dataclass(repr=False)
class DCEquipmentContainer(EquipmentContainer):
    '''
    A modelling construct to provide a root class for containment of DC as
    well as AC equipment. The class differ from the EquipmentContainer for
    AC in that it may also contain DCNode(-s). Hence it can contain both AC
    and DC equipment.
    '''

    DCNodes: list[DCNode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCNode.DCEquipmentContainer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC nodes contained in the DC equipment container.
    '''
    
    DCTopologicalNode: list[DCTopologicalNode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCTopologicalNode.DCEquipmentContainer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The topological nodes which belong to this connectivity node container.
    '''
    
    HVDCInterconnectionDynamics: Optional[HVDCInterconnectionDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HVDCInterconnectionDynamics.DCEquipmentContainer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    HVDC interconnection dynamics model used to describe dynamic behaviour
    of this HVDC interconnection.
    '''
    
@dataclass(repr=False)
class DCConverterUnit(DCEquipmentContainer):
    '''
    Indivisible operative unit comprising all equipment between the point of
    common coupling on the AC side and the point of common coupling � DC side,
    essentially one or more converters, together with one or more converter
    transformers, converter control equipment, essential protective and switching
    devices and auxiliaries, if any, used for conversion.
    '''

    ACPointOfCommonCoupling: Optional[ACPointOfCommonCoupling] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACPointOfCommonCoupling.DCConverterUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    AC point of common coupling for this DC converter unit.
    '''
    
    DCPointOfCommonCoupling: Optional[DCPointOfCommonCoupling] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPointOfCommonCoupling.DCConverterUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DCNode that is the point of common coupling at DC side of this DCConverterUnit.
    '''
    
    operationMode: Optional[ DCConverterOperatingModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operating mode of an DC bipole (bipolar, monopolar metallic return,
    etc.).
    '''
    
    ACPointOfCommonCoupling: Optional[ACPointOfCommonCoupling] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACPointOfCommonCoupling.DCConverterUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    AC point of common coupling for this DC converter unit.
    '''
    
    DCPointOfCommonCoupling: Optional[DCPointOfCommonCoupling] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPointOfCommonCoupling.DCConverterUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DCNode that is the point of common coupling at DC side of this DCConverterUnit.
    '''
    
    DCPole: Optional[DCPole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPole.DCConverterUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC pole that has this DC converter unit.
    '''
    
    DCSubstation: Optional[DCSubstation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCSubstation.DCConverterUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation that has one or more DC converter units.
    '''
    
    DirectCurrentSystemOperator: Optional[DirectCurrentSystemOperator] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentSystemOperator.DCConverterUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The direct system operator that operates this DC converter unit.
    '''
    
    Substation: Optional[Substation] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Substation.DCConverterUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The containing substation of the DC converter unit.
    '''
    
@dataclass(repr=False)
class DCLine(DCEquipmentContainer):
    '''
    Overhead lines and/or cables connecting two or more DC substations.
    '''

    DCPole: Optional[DCPole] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPole.DCLine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC pole that has this DC line.
    '''
    
    DCPole: Optional[DCPole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPole.DCLine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC pole that has this DC line.
    '''
    
    Region: Optional[SubGeographicalRegion] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubGeographicalRegion.DCLines',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The SubGeographicalRegion containing the DC line.
    '''
    
@dataclass(repr=False)
class DCSubstation(DCEquipmentContainer):
    '''
    DC substation or DC converter station (IEC 60633) is part of an DC system
    which consists of one or more converter units installed in a single location
    together with buildings, reactors, filters, reactive power supply, control,
    monitoring, protective, measuring and auxiliary equipment. A DC substation
    forming part of an DC transmission system may be referred to as an DC transmission
    substation.
    '''

    DCConverterUnit: list[DCConverterUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCConverterUnit.DCSubstation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC converter unit that belongs to this DC substation.
    '''
    
    DCSubstationBipole: list[DCSubstationBipole] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCSubstationBipole.DCSubstation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation bipole which is part of the DC substation.
    '''
    
    DCSubstationPole: list[DCSubstationPole] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCSubstationPole.DCSubstation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation pole which is part of the DC substation.
    '''
    
    isTapping: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC tapping substation (IEC 60633) is a DC substation, mainly used for
    inversion, with a rating which is a small fraction of that of the rectifier(s)
    in the system.
    '''
    
    Substation: Optional[Substation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Substation.DCSubstation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Substation that contains this DC susbstation.
    '''
    
@dataclass(repr=False)
class DCSubstationBipole(DCEquipmentContainer):
    '''
    Part of a bipolar DC system (IEC 60633) contained within a DC substation.
    '''

    DirectCurrentSubstationBipoleController: Optional[DirectCurrentSubstationBipoleController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentSubstationBipoleController.DCSubstationBipole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation bipole controller controlling this DC substation bipole.
    '''
    
    DCSubstation: Optional[DCSubstation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCSubstation.DCSubstationBipole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation that contains this DC substation bipole part.
    '''
    
    DirectCurrentSubstationBipoleController: Optional[DirectCurrentSubstationBipoleController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentSubstationBipoleController.DCSubstationBipole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation bipole controller controlling this DC substation bipole.
    '''
    
@dataclass(repr=False)
class DCSubstationPole(DCEquipmentContainer):
    '''
    Part of an DC system pole (IEC 60633) which is contained within a DC substation.
    '''

    DirectCurrentSubstationPoleController: Optional[DirectCurrentSubstationPoleController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentSubstationPoleController.DCSubstationPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation pole controller controlling this DC substation pole.
    '''
    
    DCSubstation: Optional[DCSubstation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCSubstation.DCSubstationPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation that contains this DC substation pole part.
    '''
    
    DirectCurrentSubstationPoleController: Optional[DirectCurrentSubstationPoleController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentSubstationPoleController.DCSubstationPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation pole controller controlling this DC substation pole.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class Feeder(EquipmentContainer):
    '''
    A collection of equipment for organizational purposes, used for grouping
    distribution resources.
    The organization a feeder does not necessarily reflect connectivity or
    current operation state.
    '''

    NamingSecondarySubstation: list[Substation] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Substation.NamingFeeder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The secondary substations that are normally energized from the feeder.
    Used for naming purposes. Should be consistent with the other associations
    for energizing terminal specification and the feeder energization specification.
    '''
    
    NormalHeadTerminal: list[Terminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Terminal.NormalHeadFeeder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal head terminal or terminals of the feeder.
    '''
    
    NormalEnergizingSubstation: Optional[Substation] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Substation.NormalEnergizedFeeder',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The substation that nominally energizes the feeder. Also used for naming
    purposes.
    '''
    
    SubSchedulingArea: Optional[SubSchedulingArea] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubSchedulingArea.Feeder',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The subscheduling area that has this feeder.
    '''
    
@dataclass(repr=False)
class Line(EquipmentContainer):
    '''
    Contains equipment beyond a substation belonging to a power transmission
    line.
    '''

    ACTieCorridor: Optional[ACTieCorridor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACTieCorridor.Line',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ACTieCorridor that the line is part of.
    '''
    
    Region: Optional[SubGeographicalRegion] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubGeographicalRegion.Lines',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The sub-geographical region of the line.
    '''
    
    SchedulingArea: Optional[SchedulingArea] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SchedulingArea.Line',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The scheduling area that has this line.
    '''
    
@stereotype(CIMStereotype.NC)
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class Circuit(Line):
    '''
    '''

    EndBay: list[Bay] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Bay.Circuit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    EndTerminal: list[Terminal] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Terminal.Circuit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Plant(EquipmentContainer):
    '''
    A Plant is a collection of equipment for purposes of generation.
    '''

@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class Substation(EquipmentContainer):
    '''
    A collection of equipment for purposes other than generation or utilization,
    through which electric energy in bulk is passed for the purposes of switching
    or modifying its characteristics.
    '''

    Bays: list[Bay] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Bay.Substation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bays contained in the substation.
    '''
    
    DCConverterUnit: list[DCConverterUnit] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCConverterUnit.Substation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC converter unit belonging of the substation.
    '''
    
    DCSubstation: list[DCSubstation] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCSubstation.Substation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC substation that is part of AC and DC substation.
    '''
    
    NormalEnergizedFeeder: list[Feeder] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Feeder.NormalEnergizingSubstation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal energized feeders of the substation. Also used for naming
    purposes.
    '''
    
    VoltageLevels: list[VoltageLevel] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'VoltageLevel.Substation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage levels within this substation.
    '''
    
    NamingFeeder: Optional[Feeder] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Feeder.NamingSecondarySubstation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The primary feeder that normally energizes the secondary substation.
    Used for naming purposes. Either this association or the substation
    to subgeographical region should be used for hierarchical containment
    specification.
    '''
    
    Region: Optional[SubGeographicalRegion] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubGeographicalRegion.Substations',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The SubGeographicalRegion containing the substation.
    '''
    
    SchedulingArea: Optional[SchedulingArea] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SchedulingArea.Substation',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The scheduling area that has this substation.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class VoltageLevel(EquipmentContainer):
    '''
    A collection of equipment at one common system voltage forming a switchgear.
    The equipment typically consists of breakers, busbars, instrumentation,
    control, regulation and protection devices as well as assemblies of all
    these.
    '''

    Bays: list[Bay] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Bay.VoltageLevel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The bays within this voltage level.
    '''
    
    highVoltageLimit: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The bus bar's high voltage limit.
    The limit applies to all equipment and nodes contained in a given VoltageLevel.
    It is not required that it is exchanged in pair with lowVoltageLimit.
    It is preferable to use operational VoltageLimit, which prevails, if
    present.
    '''
    
    lowVoltageLimit: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The bus bar's low voltage limit.
    The limit applies to all equipment and nodes contained in a given VoltageLevel.
    It is not required that it is exchanged in pair with highVoltageLimit.
    It is preferable to use operational VoltageLimit, which prevails, if
    present.
    '''
    
    BaseVoltage: Optional[BaseVoltage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BaseVoltage.VoltageLevel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The base voltage used for all equipment within the voltage level.
    '''
    
    Substation: Optional[Substation] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Substation.VoltageLevels',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The substation of the voltage level.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class EquivalentNetwork(ConnectivityNodeContainer):
    '''
    A class that groups electrical equivalents, including internal nodes, of
    a network that has been reduced. The ConnectivityNodes contained in the
    equivalent are intended to reflect internal nodes of the equivalent. The
    boundary Connectivity nodes where the equivalent connects outside itself
    are not contained by the equivalent.
    '''

    EquivalentEquipments: list[EquivalentEquipment] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EquivalentEquipment.EquivalentNetwork',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The associated reduced equivalents.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class ControlArea(PowerSystemResource):
    '''
    A control area is a grouping of generating units and/or loads and a cutset
    of tie lines (as terminals) which may be used for a variety of purposes
    including automatic generation control, power flow solution area interchange
    control specification, and input to load forecasting. All generation and
    load within the area defined by the terminals on the border are considered
    in the area interchange control. Note that any number of overlapping control
    area specifications may be superimposed on the physical model. The following
    general principles apply to ControlArea:
    1. The control area orientation for net interchange is positive for an
    import, negative for an export.
    2. The control area net interchange is determined by summing flows in Terminals.
    The Terminals are identified by creating a set of TieFlow objects associated
    with a ControlArea object. Each TieFlow object identifies one Terminal.
    3. In a single network model, a tie between two control areas must be modelled
    in both control area specifications, such that the two representations
    of the tie flow sum to zero.
    4. The normal orientation of Terminal flow is positive for flow into the
    conducting equipment that owns the Terminal. (i.e. flow from a bus into
    a device is positive.) However, the orientation of each flow in the control
    area specification must align with the control area convention, i.e. import
    is positive. If the orientation of the Terminal flow referenced by a TieFlow
    is positive into the control area, then this is confirmed by setting TieFlow.positiveFlowIn
    flag TRUE. If not, the orientation must be reversed by setting the TieFlow.positiveFlowIn
    flag FALSE.
    '''

    AreaInterchangeController: Optional[AreaInterchangeController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AreaInterchangeController.ControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Area interchange controller for this control area.
    '''
    
    ControlAreaGeneratingUnit: list[ControlAreaGeneratingUnit] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ControlAreaGeneratingUnit.ControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The generating unit specifications for the control area.
    '''
    
    ControlAreaPowerElectronicsUnit: list[ControlAreaPowerElectronicsUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ControlAreaPowerElectronicsUnit.ControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The parent control area for the power electronics unit specifications.
    '''
    
    EnergyArea: Optional[EnergyArea] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergyArea.ControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The energy area that is forecast from this control area specification.
    '''
    
    PowerFrequencyController: Optional[PowerFrequencyController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerFrequencyController.ControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power frequency controller for this control area.
    '''
    
    TieFlow: list[TieFlow] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TieFlow.ControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tie flows associated with the control area.
    '''
    
    netInterchange: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The specified positive net interchange into the control area, i.e.
    positive sign means flow into the area.
    '''
    
    pTolerance: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power net interchange tolerance. The attribute shall be a positive
    value or zero.
    '''
    
    type: Optional[ ControlAreaTypeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The primary type of control area definition used to determine if this
    is used for automatic generation control, for planning interchange
    control, or other purposes. A control area specified with primary type
    of automatic generation control could still be forecast and used as
    an interchange area in power flow analysis.
    '''
    
    AreaInterchangeController: Optional[AreaInterchangeController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AreaInterchangeController.ControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Area interchange controller for this control area.
    '''
    
    EnergyArea: Optional[EnergyArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergyArea.ControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The energy area that is forecast from this control area specification.
    '''
    
    OutageCoordinationRegion: Optional[OutageCoordinationRegion] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OutageCoordinationRegion.ControlArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The outage coordination region that has this control area.
    '''
    
    PowerFrequencyController: Optional[PowerFrequencyController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerFrequencyController.ControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power frequency controller for this control area.
    '''
    
    SystemOperator: Optional[SystemOperator] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SystemOperator.ControlArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The system operator that operates this control area.
    '''
    
@dataclass(repr=False)
class DCBiPole(PowerSystemResource):
    '''
    DC system bipole (IEC 60633), which is part of an DC system consisting
    of two independently operable DC system poles, which during normal operation,
    exhibit opposite direct voltage polarities with respect to earth.
    '''

    BipolarDCSystem: Optional[BipolarDCSystem] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BipolarDCSystem.DCBiPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bipolar DC system that has this DC bipole.
    '''
    
    DCPole: list[DCPole] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCPole.DCBiPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole part of the DC system bipole.
    '''
    
    BipolarDCSystem: Optional[BipolarDCSystem] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BipolarDCSystem.DCBiPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bipolar DC system that has this DC bipole.
    '''
    
@dataclass(repr=False)
class DCPole(PowerSystemResource):
    '''
    The direct current (DC) system pole (IEC 60633) is part of a DC system
    consisting of all the equipment in the DC substations and the interconnecting
    transmission lines, if any, which during normal operation exhibit a common
    direct voltage polarity with respect to earth.
    '''

    DCConverterUnit: list[DCConverterUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCConverterUnit.DCPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC converter unit that relates to this DC pole.
    '''
    
    DCLine: Optional[DCLine] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCLine.DCPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC line that is related to this DC pole.
    '''
    
    DirectCurrentPoleController: Optional[DirectCurrentPoleController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentPoleController.DCPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole controller that controls this DC pole.
    '''
    
    AsymmetricMonopolarDCSystem: Optional[MonopolarDCSystem] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MonopolarDCSystem.DCPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asymmetric monopolar DC system that has this DC pole.
    '''
    
    normalParticipationFactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal participation factor describing the entity part of the active
    power provided by a collection of entities (e.g. an active power forecast
    to a collection of entities is divided to each of the member entity
    according to the participation factor). Must be a positive value.
    In the case of a sharing strategy, the distribution is following entities
    value (V) equals aggregated value (T) divided by sum of participation
    factors (PF), i.e. V=T/sum(PF).
    In the case of priority strategy, the item with the lowest number gets
    allocated energy first.
    '''
    
    participationFactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Participation factor describing the entity part of the active power
    provided by a collection of entities (e.g. an active power forecast
    to a collection of entities is divided to each of the member entity
    according to the participation factor). Must be a positive value.
    In the case of a sharing strategy, the distribution is following entities
    value (V) equals aggregated value (T) divided by sum of participation
    factors (PF), i.e. V=T/sum(PF).
    In the case of priority strategy, the item with the lowest number gets
    allocated energy first.
    '''
    
    maxEconomicP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum high economic active power limit, that should not exceed the
    maximum operating active power limit.
    '''
    
    minEconomicP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Low economic active power limit that shall be greater than or equal
    to the minimum operating active power limit.
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    '''
    
    AsymmetricMonopolarDCSystem: Optional[MonopolarDCSystem] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MonopolarDCSystem.DCPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asymmetric monopolar DC system that has this DC pole.
    '''
    
    DCBiPole: Optional[DCBiPole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCBiPole.DCPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC system bipole that has two independently operatable DC system poles.
    '''
    
    DCLine: Optional[DCLine] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCLine.DCPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC line that is related to this DC pole.
    '''
    
    DCTieCorridor: Optional[DCTieCorridor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTieCorridor.DCPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DCTieCorridor that has this DC pole.
    '''
    
    DirectCurrentPoleController: Optional[DirectCurrentPoleController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentPoleController.DCPole',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole controller that controls this DC pole.
    '''
    
@dataclass(repr=False)
class DCSystem(PowerSystemResource):
    '''
    Electrical power system which transfers energy in the form of direct current
    between two or more AC buses (defined in IEC 60633).
    '''

    directionKind: Optional[ DCSystemDirectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direction kind of the DC system.
    '''
    
    transmissionKind: Optional[ DCSystemTransmissionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transmission kind of the DC system.
    '''
    
@dataclass(repr=False)
class BipolarDCSystem(DCSystem):
    '''
    Bipolar DC system (IEC 60633) consists of two poles of opposite polarity
    with respect to earth. The overhead lines, if any, of the two poles may
    be carried on common or separate towers.
    '''

    DCBiPole: Optional[DCBiPole] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCBiPole.BipolarDCSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC bipole that belongs to a bipolar DC system.
    '''
    
    isRigid: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, the bipolar DC system is a rigid DC current bipolar system
    (IEC 60633). It is a bipolar DC system without neutral connection between
    both converter stations. Since only two (pole) conductors exist, no
    unbalance current between both poles is possible. In case of interruption
    of power transfer of one converter pole, the current of the other pole
    has to be interrupted as well (at least for a limited time to allow
    reconfiguration of the DC circuit).
    '''
    
    DCBiPole: Optional[DCBiPole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCBiPole.BipolarDCSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC bipole that belongs to a bipolar DC system.
    '''
    
@dataclass(repr=False)
class MonopolarDCSystem(DCSystem):
    '''
    Monopolar DC system (IEC 60633) is a DC system with only one pole.
    '''

    DCPole: Optional[DCPole] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPole.AsymmetricMonopolarDCSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole part of the asymmetric DC system.
    '''
    
    isSymmetrical: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    if true, the monopolar DC system is symmetrical monopolar DC system
    (IEC 60633). It is a DC system with only one symmetrical monopole.
    A symmetrical monopole is part of an DC system consisting of all the
    equipment in the DC substations and the interconnecting transmission
    lines, if any, which during normal operation exhibits equal and opposite
    direct voltage polarities with respect to earth but without series
    connection of converters in each converter station. The term "symmetrical
    monopole" is used even though there are two polarities with DC voltages,
    because with only one converter it is not possible to provide the redundancy
    which is normally associated with the term "bipole".
    '''
    
    DCPole: Optional[DCPole] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCPole.AsymmetricMonopolarDCSystem',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC pole part of the asymmetric DC system.
    '''
    
@dataclass(repr=False)
class EnergyConsumerPhase(PowerSystemResource):
    '''
    A single phase of an energy consumer.
    '''

    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power of the load. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''
    
    pfixed: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power of the load that is a fixed quantity. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    '''
    
    pfixedPct: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fixed active power as per cent of load group fixed active power. Load
    sign convention is used, i.e. positive sign means flow out from a node.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase of this energy consumer component. If the energy consumer is
    wye connected, the connection is from the indicated phase to the central
    ground or neutral point. If the energy consumer is delta connected,
    the phase indicates an energy consumer connected from the indicated
    phase to the next logical non-neutral phase.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power of the load. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''
    
    qfixed: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power of the load that is a fixed quantity. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    '''
    
    qfixedPct: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fixed reactive power as per cent of load group fixed reactive power.
    Load sign convention is used, i.e. positive sign means flow out from
    a node.
    '''
    
    EnergyConsumer: Optional[EnergyConsumer] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergyConsumer.EnergyConsumerPhase',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The energy consumer to which this phase belongs.
    '''
    
@dataclass(repr=False)
class EnergySourcePhase(PowerSystemResource):
    '''
    Represents the single phase information of an unbalanced energy source.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase of this energy source component. If the energy source wye connected,
    the connection is from the indicated phase to the central ground or
    neutral point. If the energy source is delta connected, the phase indicates
    an energy source connected from the indicated phase to the next logical
    non-neutral phase.
    '''
    
    EnergySource: Optional[EnergySource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergySource.EnergySourcePhase',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The energy sourceto which the phase belongs.
    '''
    
@dataclass(repr=False)
class Equipment(PowerSystemResource):
    '''
    The parts of a power system that are physical devices, electronic or mechanical.
    '''

    ContingencyEquipment: list[ContingencyEquipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContingencyEquipment.Equipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The contingency equipments in which this equipment participates.
    '''
    
    Faults: list[Fault] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Fault.FaultyEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All faults on this equipment.
    '''
    
    OperationalLimitSet: list[OperationalLimitSet] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimitSet.Equipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit sets associated with this equipment.
    '''
    
    PinEquipment: list[PinEquipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinEquipment.Equipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pin that uses this input.
    '''
    
    PinEquipmentTripping: list[PinEquipmentTripping] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinEquipmentTripping.Equipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pin equipment that is used as gate input.
    '''
    
    aggregate: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The aggregate flag provides an alternative way of representing an aggregated
    (equivalent) element. It is applicable in cases when the dedicated
    classes for equivalent equipment do not have all of the attributes
    necessary to represent the required level of detail. In case the flag
    is set to "true" the single instance of equipment represents multiple
    pieces of equipment that have been modelled together as an aggregate
    equivalent obtained by a network reduction procedure. Examples would
    be power transformers or synchronous machines operating in parallel
    modelled as a single aggregate power transformer or aggregate synchronous
    machine.
    The attribute is not used for EquivalentBranch, EquivalentShunt, EquivalentInjection
    and ExternalNetworkInjection.
    '''
    
    inService: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the availability of the equipment. True means the equipment
    is available for topology processing, which determines if the equipment
    is energized or not. False means that the equipment is treated by network
    applications as if it is not in the model.
    '''
    
    networkAnalysisEnabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The equipment is enabled to participate in network analysis. If unspecified,
    the value is assumed to be true.
    '''
    
    normallyInService: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the availability of the equipment under normal operating
    conditions. True means the equipment is available for topology processing,
    which determines if the equipment is energized or not. False means
    that the equipment is treated by network applications as if it is not
    in the model.
    '''
    
    EquipmentContainer: Optional[EquipmentContainer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EquipmentContainer.Equipments',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Container of this equipment.
    '''
    
    SubSchedulingArea: Optional[SubSchedulingArea] = field(
        default=None,
        metadata={
        'type': 'OfAggregate NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubSchedulingArea.ContainedEquipment',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    '''
    
@dataclass(repr=False)
class AuxiliaryEquipment(Equipment):
    '''
    AuxiliaryEquipment describe equipment that is not performing any primary
    functions but support for the equipment performing the primary function.
    AuxiliaryEquipment is attached to primary equipment via an association
    with Terminal.
    This class is for AC equipment only.
    '''

    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.AuxiliaryEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Terminal at the equipment where the AuxiliaryEquipment is attached.
    '''
    
@dataclass(repr=False)
class FaultIndicator(AuxiliaryEquipment):
    '''
    A FaultIndicator is typically only an indicator (which may or may not be
    remotely monitored), and not a piece of equipment that actually initiates
    a protection event. It is used for FLISR (Fault Location, Isolation and
    Restoration) purposes, assisting with the dispatch of crews to "most likely"
    part of the network (i.e. assists with determining circuit section where
    the fault most likely happened).
    '''

@dataclass(repr=False)
class Riser(AuxiliaryEquipment):
    '''
    Short section of rigid or flexible conductor connecting a ConductingEquipment
    to buswork or another ConductingEquipment
    '''

@dataclass(repr=False)
class Sensor(AuxiliaryEquipment):
    '''
    This class describe devices that transform a measured quantity into signals
    that can be presented at displays, used in control or be recorded.
    '''

@dataclass(repr=False)
class CurrentTransformer(Sensor):
    '''
    Instrument transformer used to measure electrical qualities of the circuit
    that is being protected and/or monitored. Typically used as current transducer
    for the purpose of metering or protection. A typical secondary current
    rating would be 5A.
    '''

    usage: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Intended usage of the CT; i.e. metering, protection.
    '''
    
    accuracyLimit: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percent of rated current for which the CT remains accurate within specified
    limits.
    '''
    
    coreBurden: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power burden of the CT core.
    '''
    
@dataclass(repr=False)
class PostLineSensor(Sensor):
    '''
    A sensor used mainly in overhead distribution networks as the source of
    both current and voltage measurements.
    '''

@dataclass(repr=False)
class PotentialTransformer(Sensor):
    '''
    Instrument transformer (also known as Voltage Transformer) used to measure
    electrical qualities of the circuit that is being protected and/or monitored.
    Typically used as voltage transducer for the purpose of metering, protection,
    or sometimes auxiliary substation supply. A typical secondary voltage rating
    would be 120V.
    '''

    nominalRatio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Nominal ratio between the primary and secondary voltage.
    '''
    
    type: Optional[ PotentialTransformerKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Potential transformer construction type.
    '''
    
@dataclass(repr=False)
class SurgeArrester(AuxiliaryEquipment):
    '''
    Shunt device, installed on the network, usually in the proximity of electrical
    equipment in order to protect the said equipment against transient voltage
    transients caused by lightning or switching activity.
    '''

@dataclass(repr=False)
class WaveTrap(AuxiliaryEquipment):
    '''
    Wave traps are devices that impede high frequency power line carrier signals
    yet present a negligible impedance at the main power frequency.
    '''

@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class CompositeSwitch(Equipment):
    '''
    A model of a set of individual Switches normally enclosed within the same
    cabinet and possibly with interlocks that restrict the combination of switch
    positions. These are typically found in medium voltage distribution networks.
    A CompositeSwitch could represent a Ring-Main-Unit (RMU), or pad-mounted
    switchgear, with primitive internal devices such as an internal bus-bar
    plus 3 or 4 internal switches each of which may individually be open or
    closed. A CompositeSwitch and a set of contained Switches can also be used
    to represent a multi-position switch e.g. a switch that can connect a circuit
    to Ground, Open or Busbar.
    '''

    Switches: list[Switch] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Switch.CompositeSwitch',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Switches contained in this Composite switch.
    '''
    
    compositeSwitchType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An alphanumeric code that can be used as a reference to extra information
    such as the description of the interlocking scheme if any.
    '''
    
@dataclass(repr=False)
class ConductingEquipment(Equipment):
    '''
    The parts of the AC power system that are designed to carry current or
    that are conductively connected through terminals.
    '''

    SvStatus: list[SvStatus] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SvStatus.ConductingEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The status state variable associated with this conducting equipment.
    '''
    
    Terminals: list[Terminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Terminal.ConductingEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conducting equipment have terminals that may be connected to other
    conducting equipment terminals via connectivity nodes or topological
    nodes.
    '''
    
    BaseVoltage: Optional[BaseVoltage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BaseVoltage.ConductingEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Base voltage of this conducting equipment. Use only when there is no
    voltage level container used and only one base voltage applies. For
    example, not used for transformers.
    '''
    
    GroundingAction: Optional[GroundAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GroundAction.GroundedEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Action involving grounding operation on this conducting equipment.
    '''
    
    JumpingAction: Optional[JumperAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'JumperAction.JumpedEquipments',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Jumper action involving jumping operation on this conducting equipment.
    '''
    
    Outage: Optional[Outage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Outage.OutageIsolationEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ACDCConverter(ConductingEquipment):
    '''
    A unit with valves for three phases, together with unit control equipment,
    essential protective and switching devices, DC storage capacitors, phase
    reactors and auxiliaries, if any, used for conversion.
    '''

    ACDCConverterController: Optional[ACDCConverterController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACDCConverterController.ACDCConverter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direct current controller which controls the ACDC converter.
    '''
    
    DCTerminals: list[ACDCConverterDCTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACDCConverterDCTerminal.DCConductingEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A DC converter have DC converter terminals. A converter has two DC
    converter terminals.
    '''
    
    numberOfValves: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of valves in the converter. Used in loss calculations.
    '''
    
    baseS: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Base apparent power of the converter pole. The attribute shall be a
    positive value.
    '''
    
    idc: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Converter DC current, also called Id. It is converter's state variable,
    result from power flow.
    '''
    
    idleLoss: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power loss in pole at no power transfer. It is the converter's
    configuration data used in power flow. The attribute shall be a positive
    value.
    '''
    
    maxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum active power limit. The value is overwritten by values of VsCapabilityCurve,
    if present.
    '''
    
    maxUdc: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum voltage on the DC side at which the converter should operate.
    It is the converter's configuration data used in power flow. The attribute
    shall be a positive value.
    '''
    
    minP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum active power limit. The value is overwritten by values of VsCapabilityCurve,
    if present.
    '''
    
    minUdc: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum voltage on the DC side at which the converter should operate.
    It is the converter's configuration data used in power flow. The attribute
    shall be a positive value.
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power at the point of common coupling. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    Starting value for a steady state solution in the case a simplified
    power flow model is used.
    '''
    
    poleLossP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power loss at a DC Pole
    = idleLoss + switchingLoss*|Idc| + resitiveLoss*Idc^2.
    For lossless operation Pdc=Pac.
    For rectifier operation with losses Pdc=Pac-lossP.
    For inverter operation with losses Pdc=Pac+lossP.
    It is converter's state variable used in power flow. The attribute
    shall be a positive value.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power at the point of common coupling. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    Starting value for a steady state solution in the case a simplified
    power flow model is used.
    '''
    
    ratedUdc: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated converter DC voltage, also called UdN. The attribute shall be
    a positive value. It is the converter's configuration data used in
    power flow. For instance a bipolar DC link with value 200 kV has a
    400kV difference between the dc lines.
    '''
    
    resistiveLoss: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    It is the converter's configuration data used in power flow. Refer
    to poleLossP. The attribute shall be a positive value.
    '''
    
    switchingLoss: Optional[ float | ActivePowerPerCurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Switching losses, relative to the base apparent power 'baseS'. Refer
    to poleLossP. The attribute shall be a positive value.
    '''
    
    targetPpcc: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Real power injection target in AC grid, at point of common coupling.
    Load sign convention is used, i.e. positive sign means flow out from
    a node.
    '''
    
    targetUdc: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target value for DC voltage magnitude. The attribute shall be a positive
    value.
    '''
    
    uc: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Line-to-line converter voltage, the voltage at the AC side of the valve.
    It is converter's state variable, result from power flow. The attribute
    shall be a positive value.
    '''
    
    udc: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Converter voltage at the DC side, also called Ud. It is converter's
    state variable, result from power flow. The attribute shall be a positive
    value.
    '''
    
    valveU0: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Valve threshold voltage, also called Uvalve. Forward voltage drop when
    the valve is conducting. Used in loss calculations, i.e. the switchLoss
    depend on numberOfValves*valveU0.
    '''
    
    ACDCConverterController: Optional[ACDCConverterController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACDCConverterController.ACDCConverter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direct current controller which controls the ACDC converter.
    '''
    
    PccTerminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.ConverterDCSides',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Point of common coupling terminal for this converter DC side. It is
    typically the terminal on the power transformer (or switch) closest
    to the AC network.
    '''
    
@dataclass(repr=False)
class CsConverter(ACDCConverter):
    '''
    DC side of the current source converter (CSC).
    The firing angle controls the dc voltage at the converter, both for rectifier
    and inverter. The difference between the dc voltages of the rectifier and
    inverter determines the dc current. The extinction angle is used to limit
    the dc voltage at the inverter, if needed, and is not used in active power
    control. The firing angle, transformer tap position and number of connected
    filters are the primary means to control a current source dc line. Higher
    level controls are built on top, e.g. DC voltage, dc current and active
    power. From a steady state perspective it is sufficient to specify the
    desired active power transfer (ACDCConverter.targetPpcc) and the control
    functions will set the dc voltage, dc current, firing angle, transformer
    tap position and number of connected filters to meet this. Therefore attributes
    targetAlpha and targetGamma are not applicable in this case.
    Attributes targetAlpha and targetGamma are mutually exclusive therefore
    only one of them can be defined to describe an operating target.
    The reactive power consumed by the converter is a function of the firing
    angle, transformer tap position and number of connected filter, which can
    be approximated with half of the active power. The losses are a function
    of the dc voltage and dc current.
    The attributes minAlpha and maxAlpha define the range of firing angles
    for rectifier operation between which no discrete tap changer action takes
    place. The range is typically 10 to 18 degrees.
    The attributes minGamma and maxGamma define the range of extinction angles
    for inverter operation between which no discrete tap changer action takes
    place. The range is typically 17 to 20 degrees.
    '''

    alpha: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Firing angle that determines the DC voltage at the converter DC terminal.
    Typical value between 10 degrees and 18 degrees for a rectifier. It
    is converter's state variable, result from power flow. The attribute
    shall be a positive value.
    '''
    
    gamma: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Extinction angle. It is used to limit the DC voltage at the inverter
    if needed. Typical value between 17 degrees and 20 degrees for an inverter.
    It is converter's state variable, result from power flow. The attribute
    shall be a positive value.
    '''
    
    maxAlpha: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum firing angle. It is the converter's configuration data used
    in power flow. The attribute shall be a positive value.
    '''
    
    maxGamma: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum extinction angle. It is the converter's configuration data
    used in power flow. The attribute shall be a positive value.
    '''
    
    maxIdc: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum direct current (Id) on the DC side at which the converter
    should operate. It is the converter's configuration data use in power
    flow. The attribute shall be a positive value.
    '''
    
    minAlpha: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum firing angle. It is the converter's configuration data used
    in power flow. The attribute shall be a positive value.
    '''
    
    minGamma: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum extinction angle. It is the converter's configuration data
    used in power flow. The attribute shall be a positive value.
    '''
    
    minIdc: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum direct current (Id) on the DC side at which the converter
    should operate. It is the converter's configuration data used in power
    flow. The attribute shall be a positive value.
    '''
    
    operatingMode: Optional[ CsOperatingModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates whether the DC pole is operating as an inverter or as a rectifier.
    It is converter's control variable used in power flow.
    '''
    
    pPccControl: Optional[ CsPpccControlKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of active power control.
    '''
    
    ratedIdc: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated converter DC current, also called IdN. The attribute shall be
    a positive value. It is the converter's configuration data used in
    power flow.
    '''
    
    targetAlpha: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target firing angle. It is converter's control variable used in power
    flow. It is only applicable for rectifier control. Allowed values are
    within the range minAlpha&lt;=targetAlpha&lt;=maxAlpha. The attribute
    shall be a positive value.
    '''
    
    targetGamma: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Target extinction angle. It is converter's control variable used in
    power flow. It is only applicable for inverter control. Allowed values
    are within the range minGamma&lt;=targetGamma&lt;=maxGamma. The attribute
    shall be a positive value.
    '''
    
    targetIdc: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DC current target value. It is converter's control variable used in
    power flow. The attribute shall be a positive value.
    '''
    
    CSCDynamics: Optional[CSCDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CSCDynamics.CSConverter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current source converter dynamics model used to describe dynamic behaviour
    of this converter.
    '''
    
@dataclass(repr=False)
class VsConverter(ACDCConverter):
    '''
    DC side of the voltage source converter (VSC).
    '''

    CapabilityCurve: list[VsCapabilityCurve] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'VsCapabilityCurve.VsConverter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Capability curve of this converter.
    '''
    
    maxModulationIndex: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum quotient between the AC converter voltage (Uc) and DC voltage
    (Ud). A factor typically less than 1. It is converter's configuration
    data used in power flow.
    '''
    
    targetPowerFactorPcc: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power factor target at the AC side, at point of common coupling. The
    attribute shall be a positive value.
    '''
    
    targetPWMfactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Magnitude of pulse-modulation factor. The attribute shall be a positive
    value.
    '''
    
    delta: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Angle between VsConverter.uv and ACDCConverter.uc. It is converter's
    state variable used in power flow. The attribute shall be a positive
    value or zero.
    '''
    
    droop: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Droop constant. The pu value is obtained as D [kV/MW] * Sb / Ubdc.
    The attribute shall be a positive value.
    '''
    
    droopCompensation: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Compensation constant. Used to compensate for voltage drop when controlling
    voltage at a distant bus. The attribute shall be a positive value.
    '''
    
    maxValveCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum current through a valve. It is converter's configuration
    data.
    '''
    
    pPccControl: Optional[ VsPpccControlKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of control of real power and/or DC voltage.
    '''
    
    qPccControl: Optional[ VsQpccControlKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of reactive power control.
    '''
    
    qShare: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power sharing factor among parallel converters on Uac control.
    The attribute shall be a positive value or zero.
    '''
    
    targetPhasePcc: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase target at AC side, at point of common coupling. The attribute
    shall be a positive value.
    '''
    
    targetQpcc: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power injection target in AC grid, at point of common coupling.
    Load sign convention is used, i.e. positive sign means flow out from
    a node.
    '''
    
    targetUpcc: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage target in AC grid, at point of common coupling. The attribute
    shall be a positive value.
    '''
    
    uv: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Line-to-line voltage on the valve side of the converter transformer.
    It is converter's state variable, result from power flow. The attribute
    shall be a positive value.
    '''
    
    VSCDynamics: Optional[VSCDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'VSCDynamics.VsConverter',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage source converter dynamics model used to describe dynamic behaviour
    of this converter.
    '''
    
@dataclass(repr=False)
class Clamp(ConductingEquipment):
    '''
    A Clamp is a galvanic connection at a line segment where other equipment
    is connected. A Clamp does not cut the line segment.
    A Clamp is ConductingEquipment and has one Terminal with an associated
    ConnectivityNode. Any other ConductingEquipment can be connected to the
    Clamp ConnectivityNode.
    '''

    lengthFromTerminal1: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The length to the place where the clamp is located starting from side
    one of the line segment, i.e. the line segment terminal with sequence
    number equal to 1.
    '''
    
    ACLineSegment: Optional[ACLineSegment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACLineSegment.Clamp',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line segment to which the clamp is connected.
    '''
    
    ClampAction: Optional[ClampAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ClampAction.Clamp',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    JumperAction: Optional[JumperAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'JumperAction.Clamp',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Conductor(ConductingEquipment):
    '''
    Combination of conducting material with consistent electrical characteristics,
    building a single electrical system, used to carry current between points
    in the power system.
    '''

    length: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Segment length for calculating line segment capabilities.
    '''
    
    DamageCurve: Optional[ConductorCharacteristicCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConductorCharacteristicCurve.Conductor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Damage curve associated to a conductor.
    '''
    
@dataclass(repr=False)
class ACLineSegment(Conductor):
    '''
    A line segment is a conductor or combination of conductors, with consistent
    electrical characteristics along its length, building a single electrical
    system that carries alternating current between two points in the power
    system.
    The BaseVoltage at the two ends of a line segment shall have the same BaseVoltage.nominalVoltage.
    However, boundary lines may have slightly different BaseVoltage.nominalVoltages
    and variation is allowed. Larger voltage difference in general requires
    use of an equivalent branch.
    Line segment impedances can be either directly described in electrical
    terms or physical line detail can be provided from which impedances can
    be calculated.
    <b>Directly described impedances</b>
    For symmetrical, transposed three phase line segments, it is sufficient
    to use attributes of the line segment, which describe impedances and admittances
    for the entire length of the line segment. Additionally, line segment impedances
    can be computed by using line segment length and associated per length
    impedances.
    Unbalanced modeling of impedances is supported by the per length phase
    impedance matrix (PerLengthPhaseImpedance) in conjunction with phase-to-sequence
    number mapping supplied by either ACLineSegmentPhase or WirePosition. The
    sequence numbers are referenced by the row and column attributes of the
    per length phase impedance matrix. This method enables single-phase and
    two-phase line segments, and transpositions of phases, to be described
    using the same per length phase impedance matrix. The length of the line
    segment is used in the computation of total impedance values for the line
    segment.
    <b>Line detail characteristics</b>
    There are three approaches to providing line detail and all use WireAssembly
    to supply line positions:
    <ul>
    <li>Option 1 - WireAssembly supplies only line positions. ACLineSegmentPhase
    points to wire type and intraphase spacing and supplies the phase-to-sequence
    number mapping.</li>
    <li>Option 2 - WireAssembly supplies line position and, for each position,
    also supplies wire type and intraphase spacing. ACLineSegmentPhase supplies
    the phase-to-sequence number mapping.</li>
    <li>Option 3 - WireAssembly supplies line position and, for each position,
    also supplies wire type and intraphase spacing and phase. WireAssembly
    therefore supplies the phase-to-sequence number mapping and ACLineSegmentPhase
    is not needed.</li>
    </ul>
    '''

    ACLineSegmentPhases: list[ACLineSegmentPhase] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACLineSegmentPhase.ACLineSegment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line segment phases which belong to the line segment.
    '''
    
    Clamp: list[Clamp] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Clamp.ACLineSegment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The clamps connected to the line segment.
    '''
    
    Cut: list[Cut] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Cut.ACLineSegment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cuts applied to the line segment.
    '''
    
    LineFaults: list[LineFault] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'LineFault.ACLineSegment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line faults of the line segment.
    '''
    
    LineSegmentCoupling: Optional[LineSegmentCoupling] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LineSegmentCoupling.ACLineSegment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The description of this line's coupling with other lines in a coupled
    group.
    '''
    
    b0ch: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence shunt (charging) susceptance, uniformly distributed,
    of the entire line segment.
    '''
    
    bch: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence shunt (charging) susceptance, uniformly distributed,
    of the entire line segment. This value represents the full charging
    over the full length of the line segment.
    '''
    
    g0ch: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence shunt (charging) conductance, uniformly distributed,
    of the entire line segment.
    '''
    
    gch: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence shunt (charging) conductance, uniformly distributed,
    of the entire line segment.
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series resistance of the entire line segment.
    '''
    
    r0: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series resistance of the entire line segment.
    '''
    
    shortCircuitEndTemperature: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum permitted temperature at the end of SC for the calculation
    of minimum short-circuit currents. Used for short circuit data exchange
    according to IEC 60909.
    '''
    
    x: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series reactance of the entire line segment.
    '''
    
    x0: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series reactance of the entire line segment.
    '''
    
    LineGroundingAction: Optional[GroundAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GroundAction.AlongACLineSegment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ground action involving clamp usage (for the case when the ground is
    applied along the line segment instead of at its terminals).
    '''
    
    LineJumpingAction: Optional[JumperAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'JumperAction.ACLineSegments',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Jumper action involving clamp usage (for the case when the jumper is
    applied along the line segment instead of at its terminals).
    '''
    
    LineSegmentCoupling: Optional[LineSegmentCoupling] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LineSegmentCoupling.ACLineSegment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The description of this line's coupling with other lines in a coupled
    group.
    '''
    
    PerLengthImpedance: Optional[PerLengthImpedance] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PerLengthImpedance.ACLineSegments',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per-length impedance of this line segment.
    '''
    
    WireSpacingInfo: Optional[WireSpacingInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IntraphaseSpacing.ACLineSegment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class BusSegment(Conductor):
    '''
    A two terminal and power conducting device of negligible impedance and
    length represented as zero impedance device that can be used to represent
    the conductor between connection points to substation conducting equipment
    on a substation bus.
    '''

    Retain: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if retain
    '''
    
    retained: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bus segment is retained in the topological solution. The flow through
    retained bus sections will normally be calculated in power flow.
    '''
    
@dataclass(repr=False)
class WireSegment(Conductor):
    '''
    A two terminal and power conducting device of negligible impedance and
    length represented as zero impedance device that can be used to connect
    auxiliary equipment to its terminals.
    '''

    WireSegmentPhases: list[WireSegmentPhase] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'WireSegmentPhase.WireSegment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The wire segment phases which belong to the wire segment.
    '''
    
@dataclass(repr=False)
class Connector(ConductingEquipment):
    '''
    A conductor, or group of conductors, with negligible impedance, that serve
    to connect other conducting equipment within a single substation and are
    modelled with a single logical terminal.
    '''

@dataclass(repr=False)
class BusbarSection(Connector):
    '''
    A conductor, or group of conductors, with negligible impedance, that serve
    to connect other conducting equipment within a single substation. The BusbarSection
    class is intended to represent physical parts of bus bars no matter how
    that bus bar is constructed.
    Voltage measurements are typically obtained from voltage transformers that
    are connected to busbar sections. A bus bar section may have many physical
    terminals but for analysis is modelled with exactly one logical terminal.
    '''

    VoltageControlZone: Optional[VoltageControlZone] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'VoltageControlZone.BusbarSection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A VoltageControlZone is controlled by a designated BusbarSection.
    '''
    
    ipMax: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum allowable peak short-circuit current of busbar (Ipmax in IEC
    60909-0).
    Mechanical limit of the busbar in the substation itself. Used for short
    circuit data exchange according to IEC 60909.
    '''
    
    VoltageControlZone: Optional[VoltageControlZone] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'VoltageControlZone.BusbarSection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A VoltageControlZone is controlled by a designated BusbarSection.
    '''
    
@dataclass(repr=False)
class Junction(Connector):
    '''
    A point where one or more conducting equipments are connected with zero
    resistance.
    The Junction class is intended to provide a place to associate additional
    information to a connectivity node which connects two or more equipment
    terminals. Examples include a tee-point or the connection point between
    two switches.
    The Junction class is intended to provide a method to associate additional
    information, for instance Location, to a ConnectivityNode. Examples include
    a T-point or the connection point between two switches. Typically, BusbarSection
    objects and Junction objects are represented by different symbols on diagrams.
    '''

@dataclass(repr=False)
class EarthFaultCompensator(ConductingEquipment):
    '''
    A conducting equipment used to represent a connection to ground which is
    typically used to compensate earth faults. An earth fault compensator device
    modelled with a single terminal implies a second terminal solidly connected
    to ground. If two terminals are modelled, the ground is not assumed and
    normal connection rules apply.
    '''

    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Nominal resistance of device.
    '''
    
@dataclass(repr=False)
class GroundingImpedance(EarthFaultCompensator):
    '''
    A fixed impedance device used for grounding.
    '''

    x: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactance of device.
    '''
    
@dataclass(repr=False)
class PetersenCoil(EarthFaultCompensator):
    '''
    A variable impedance device normally used to offset line charging during
    single line faults in an ungrounded section of network.
    '''

    mode: Optional[ PetersenCoilModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The mode of operation of the Petersen coil.
    '''
    
    nominalU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The nominal voltage for which the coil is designed.
    '''
    
    offsetCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The offset current that the Petersen coil controller is operating from
    the resonant point. This is normally a fixed amount for which the controller
    is configured and could be positive or negative. Typically 0 to 60
    A depending on voltage and resonance conditions.
    '''
    
    positionCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The control current used to control the Petersen coil also known as
    the position current. Typically in the range of 20 mA to 200 mA.
    '''
    
    xGroundMax: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum reactance.
    '''
    
    xGroundMin: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum reactance.
    '''
    
    xGroundNominal: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The nominal reactance. This is the operating point (normally over compensation)
    that is defined based on the resonance point in the healthy network
    condition. The impedance is calculated based on nominal voltage divided
    by position current.
    '''
    
@dataclass(repr=False)
class EnergyConnection(ConductingEquipment):
    '''
    A connection of energy generation or consumption on the power system model.
    '''

@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class EnergyConsumer(EnergyConnection):
    '''
    Generic user of energy - a point of consumption on the power system model.
    EnergyConsumer.pfixed, .qfixed, .pfixedPct and .qfixedPct have meaning
    only if there is no LoadResponseCharacteristic associated with EnergyConsumer
    or if LoadResponseCharacteristic.exponentModel is set to False.
    '''

    EnergyConsumerPhase: list[EnergyConsumerPhase] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EnergyConsumerPhase.EnergyConsumer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The individual phase models for this energy consumer.
    '''
    
    customerCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of individual customers represented by this demand.
    '''
    
    grounded: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Required for Yn and I connections (as represented by EnergyConsumer.phaseConnection).
    True if the neutral is solidly grounded.
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power of the load. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''
    
    pfixed: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power of the load that is a fixed quantity and does not vary
    as load group value varies. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    '''
    
    pfixedPct: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fixed active power as a percentage of load group fixed active power.
    Used to represent the time-varying components. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    '''
    
    phaseConnection: Optional[ PhaseShuntConnectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of phase connection, such as wye or delta.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power of the load. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''
    
    qfixed: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power of the load that is a fixed quantity and does not vary
    as load group value varies. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    '''
    
    qfixedPct: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fixed reactive power as a percentage of load group fixed reactive power.
    Used to represent the time-varying components. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    '''
    
    AreaDispatchableUnit: Optional[AreaDispatchableUnit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AreaDispatchableUnit.EnergyConsumer',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Area dispatchable unit that has this energy consumer.
    '''
    
    EnergyConsumerAction: Optional[EnergyConsumerAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergyConsumerAction.EnergyConsumer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    LoadDynamics: Optional[LoadDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LoadDynamics.EnergyConsumer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Load dynamics model used to describe dynamic behaviour of this energy
    consumer.
    '''
    
    LoadResponse: Optional[LoadResponseCharacteristic] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LoadResponseCharacteristic.EnergyConsumer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The load response characteristic of this load. If missing, this load
    is assumed to be constant power.
    '''
    
    PowerCutZone: Optional[PowerCutZone] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerCutZone.EnergyConsumers',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The energy consumer is assigned to this power cut zone.
    '''
    
@dataclass(repr=False)
class ConformLoad(EnergyConsumer):
    '''
    ConformLoad represents loads that follow a daily load change pattern where
    the pattern can be used to scale the load with a system load.
    '''

    LoadGroup: Optional[ConformLoadGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConformLoadGroup.EnergyConsumers',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Group of this ConformLoad.
    '''
    
@dataclass(repr=False)
class NonConformLoad(EnergyConsumer):
    '''
    NonConformLoad represents loads that do not follow a daily load change
    pattern and whose changes are not correlated with the daily load change
    pattern.
    '''

    LoadGroup: Optional[NonConformLoadGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'NonConformLoadGroup.EnergyConsumers',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Group of this ConformLoad.
    '''
    
@dataclass(repr=False)
class StationSupply(EnergyConsumer):
    '''
    Station supply with load derived from the station output.
    '''

@dataclass(repr=False)
class EnergySource(EnergyConnection):
    '''
    A generic equivalent for an energy supplier on a transmission or distribution
    voltage level.
    '''

    EnergySourcePhase: list[EnergySourcePhase] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EnergySourcePhase.EnergySource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The individual phase information of the energy source.
    '''
    
    activePower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High voltage source active injection. Load sign convention is used,
    i.e. positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    
    nominalVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase-to-phase nominal voltage.
    '''
    
    pMax: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the maximum active power that can be produced by the source.
    Load sign convention is used, i.e. positive sign means flow out from
    a TopologicalNode (bus) into the conducting equipment.
    '''
    
    pMin: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the minimum active power that can be produced by the source.
    Load sign convention is used, i.e. positive sign means flow out from
    a TopologicalNode (bus) into the conducting equipment.
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence Thevenin resistance.
    '''
    
    r0: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence Thevenin resistance.
    '''
    
    r2: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence Thevenin resistance.
    '''
    
    reactivePower: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High voltage source reactive injection. Load sign convention is used,
    i.e. positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    
    voltageAngle: Optional[ float | AngleRadians ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase angle of a-phase open circuit used when voltage characteristics
    need to be imposed at the node associated with the terminal of the
    energy source, such as when voltages and angles from the transmission
    level are used as input to the distribution network. The attribute
    shall be a positive value or zero.
    '''
    
    voltageMagnitude: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase-to-phase open circuit voltage magnitude used when voltage characteristics
    need to be imposed at the node associated with the terminal of the
    energy source, such as when voltages and angles from the transmission
    level are used as input to the distribution network. The attribute
    shall be a positive value or zero.
    '''
    
    x: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence Thevenin reactance.
    '''
    
    x0: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence Thevenin reactance.
    '''
    
    x2: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence Thevenin reactance.
    '''
    
    EnergySchedulingType: Optional[EnergySchedulingType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergySchedulingType.EnergySource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Energy Scheduling Type of an Energy Source.
    '''
    
    EnergySourceAction: Optional[EnergySourceModification] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergySourceModification.EnergySource',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The energy source action applied to an EnergySource.
    '''
    
@dataclass(repr=False)
class RegulatingCondEq(EnergyConnection):
    '''
    A type of conducting equipment that can regulate a quantity (i.e. voltage
    or flow) at a specific point in the network.
    '''

    controlEnabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the regulation status of the equipment. True is regulating,
    false is not regulating.
    '''
    
    EquipmentController: Optional[EquipmentController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EquipmentController.RegulatingCondEq',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The equipment controller for this regulating conducting equipment.
    '''
    
    RegulatingControl: Optional[RegulatingControl] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegulatingControl.RegulatingCondEq',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The regulating control scheme in which this equipment participates.
    '''
    
@dataclass(repr=False)
class ExternalNetworkInjection(RegulatingCondEq):
    '''
    This class represents the external network for use in power flow and short-circuit
    calculations.
    In the power flow domain the external network is modelled as a power injection
    with power limits and a power-frequency bias. For short-circuit calculations
    the external network is modelled as the �network feeders� element defined
    in section 6.2 of IEC60909-0:2016. Boolean flag ikSecond allows short-circuit
    calculations using the superposition method to detect that the maximum
    and minimum initial symmetrical short-circuit currents have to be corrected
    for the fact that they were calculated according the IEC60909-0 method.
    '''

    ikSecond: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates whether the maximum and minimum initial symmetrical short-circuit
    currents (Ik� max and Ik� min) have been calculated according to the
    IEC 60909-0 method. Is only used in short-circuit calculations done
    according to the superposition method.
    '''
    
    maxR0ToX0Ratio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum ratio of zero sequence resistance to zero sequence reactance
    (R(0)/X(0) max). R0 and X0 are the real and imaginary parts of the
    zero sequence short-circuit impedance Z0 defined in clause 3.19.3 of
    IEC 60909-0:2016.
    '''
    
    maxR1ToX1Ratio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum ratio of positive sequence resistance to positive sequence
    reactance (R(1)/X(1) max). R1 and X1 are the real and imaginary parts
    of the positive sequence short-circuit impedance Z1 defined in clause
    3.19.1 of IEC 60909-0:2016.
    '''
    
    maxZ0ToZ1Ratio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum ratio of zero sequence impedance to its positive sequence impedance
    (Z(0)/Z(1) max). Z0 is the zero sequence short-circuit impedance defined
    in clause 3.19.3 of IEC 60909-0:2016. Z1 is the positive sequence short-circuit
    impedance defined in clause 3.19.1 of IEC 60909-0:2016.
    '''
    
    minR0ToX0Ratio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum ratio of zero sequence resistance to zero sequence reactance
    (R(0)/X(0) min). R0 and X0 are the real and imaginary parts of the
    zero sequence short-circuit impedance Z0 defined in clause 3.19.3 of
    IEC 60909-0:2016.
    '''
    
    minR1ToX1Ratio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum ratio of positive sequence resistance to positive sequence
    reactance (R(1)/X(1) min). R1 and X1 are the real and imaginary parts
    of the positive sequence short-circuit impedance Z1 defined in clause
    3.19.1 of IEC 60909-0:2016.
    '''
    
    minZ0ToZ1Ratio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum ratio of zero sequence impedance to its positive sequence impedance
    (Z(0)/Z(1) min). Z0 is the zero sequence short-circuit impedance defined
    in clause 3.19.3 of IEC 60909-0:2016. Z1 is the positive sequence short-circuit
    impedance defined in clause 3.19.1 of IEC 60909-0:2016.
    '''
    
    referencePriority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority of unit for use as powerflow voltage phase angle reference
    bus selection. 0 = don t care (default) 1 = highest priority. 2 is
    less than 1 and so on.
    '''
    
    governorSCD: Optional[ float | ActivePowerPerFrequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power Frequency Bias. This is the change in power injection divided
    by the change in frequency and negated. A positive value of the power
    frequency bias provides additional power injection upon a drop in frequency.
    '''
    
    maxInitialSymShCCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum initial symmetrical short-circuit current (Ik" max) in A. Ik�
    is defined in clause 3.5 of IEC 60909-0:2016.
    '''
    
    maxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum active power of the injection.
    '''
    
    maxQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum reactive power of the injection. Used for modelling of infeed
    for load flow exchange. Not used for short-circuit modelling.
    '''
    
    minInitialSymShCCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum initial symmetrical short-circuit current (Ik" min) in A. Ik�
    is defined in clause 3.5 of IEC 60909-0:2016.
    '''
    
    minP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum active power of the injection.
    '''
    
    minQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum reactive power of the injection. Used for modelling of infeed
    for load flow exchange. Not used for short-circuit modelling.
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    
    voltageFactor: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage factor (c) in pu which has been used to calculate the maximum
    and minimum initial symmetrical short-circuit currents (Ik� max and
    Ik� min). Is only used in short-circuit calculations done according
    to the superposition method. The voltage factor is defined in clause
    3.15 of IEC 60909-0:2016.
    '''
    
@dataclass(repr=False)
class FACTSEquipment(RegulatingCondEq):
    '''
    Flexible Alternating Current Transmission System regulating equipment.
    '''

    LossCurve: list[LossCurve] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'LossCurve.FACTSEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The loss curve for the FACTS equipment.
    '''
    
    maxC: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Capacitive reactance at maximum reactive power. Shall always be positive.
    '''
    
    maxL: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inductive rating at maximum inductive reactive power. Shall always
    be negative.
    '''
    
    minC: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Capacitive reactance at minimum reactive power. Shall always be positive.
    '''
    
    minL: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inductive rating at minimum inductive reactive power. Shall always
    be negative.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for a steady state solution.
    '''
    
    ratedC: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Capacitive reactance at maximum reactive power. Shall always be positive.
    '''
    
    ratedI: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated current of the FACTS equipment.
    '''
    
    ratedL: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inductive rating at maximum inductive reactive power. Shall always
    be negative.
    '''
    
    ratedU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated voltage of the FACTS equipment.
    '''
    
    slope: Optional[ float | VoltagePerReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The characteristics slope which defines how the reactive power output
    changes in proportion to the difference between the regulated bus voltage
    and the voltage setpoint.
    The attribute shall be a positive value or zero.
    '''
    
@dataclass(repr=False)
class ModularStaticSynchronousSeriesCompensator(FACTSEquipment):
    '''
    Modular static synchronous series compensator (MSSSC) is a type of flexible
    AC transmission system regulating equipment which consists of solid-state
    voltage source inverter connected in series with a transmission line. This
    is similar to static synchronous series compensator (SSSC), but without
    injection transformer. This enables the MSSSC to be truly modular with
    the ability to simply install a number of equipment in series to provide
    a desired maximum level of impedance. MSSSC can be dispersed into multiple
    location in a circuit working collectively under the same controller scheme.
    '''

@dataclass(repr=False)
class StaticSynchronousCompensator(FACTSEquipment):
    '''
    Static synchronous compensator (STATCOM), also known as a static synchronous
    condenser (STATCON), is a type of flexible AC transmission system regulating
    equipment used on alternating current electricity transmission networks.
    It is based on a power electronics voltage-source converter and can act
    as either a source or sink of reactive AC power to an electricity network.
    If connected to a source of power it can also provide active AC power.
    '''

@dataclass(repr=False)
class StaticSynchronousSeriesCompensator(FACTSEquipment):
    '''
    Static synchronous series compensator (SSSC) is a type of flexible AC transmission
    system which consists of a solid-state voltage source inverter coupled
    with a transformer that is connected in series with a transmission line.
    This device can inject an almost sinusoidal voltage in series with the
    line. This injected voltage could be considered as an inductive or capacitive
    reactance, which is connected in series with the transmission line. This
    feature can provide controllable voltage compensation. In addition, SSSC
    is able to reverse the power flow by injecting a sufficiently large series
    reactive compensating voltage. Moreover it can inject a voltage proportional
    to the difference between the line current and the pre-configured current
    threshold.<font color="#636671"> </font>It shall have two Terminal-s associated
    with it.
    '''

@dataclass(repr=False)
class StaticVarCompensator(FACTSEquipment):
    '''
    A facility for providing variable and controllable shunt reactive power.
    The SVC typically consists of a stepdown transformer, filter, thyristor-controlled
    reactor, and thyristor-switched capacitor arms.
    The SVC may operate in fixed MVar output mode or in voltage control mode.
    When in voltage control mode, the output of the SVC will be proportional
    to the deviation of voltage at the controlled bus from the voltage setpoint.
    The SVC characteristic slope defines the proportion. If the voltage at
    the controlled bus is equal to the voltage setpoint, the SVC MVar output
    is zero.
    '''

    capacitiveRating: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Capacitive reactance at maximum capacitive reactive power. Shall always
    be positive.
    '''
    
    inductiveRating: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inductive reactance at maximum inductive reactive power. Shall always
    be negative.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for a steady state solution.
    '''
    
    slope: Optional[ float | VoltagePerReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The characteristics slope of an SVC defines how the reactive power
    output changes in proportion to the difference between the regulated
    bus voltage and the voltage setpoint.
    The attribute shall be a positive value or zero.
    '''
    
    sVCControlMode: Optional[ SVCControlMode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    SVC control mode.
    '''
    
    voltageSetPoint: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactive power output of the SVC is proportional to the difference
    between the voltage at the regulated bus and the voltage setpoint.
    When the regulated bus voltage is equal to the voltage setpoint, the
    reactive power output is zero.
    '''
    
    StaticVarCompensatorDynamics: Optional[StaticVarCompensatorDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StaticVarCompensatorDynamics.StaticVarCompensator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Static Var Compensator dynamics model used to describe dynamic behaviour
    of this Static Var Compensator.
    '''
    
@dataclass(repr=False)
class StatCom(StaticVarCompensator):
    '''
    StatCom - Static Synchronous Compensator High speed continuous reactor
    and capacitor.
    '''

    maxNegativePower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If an active power source is available in the STATCOM, the Maximum
    MW that the STATCOM can absorb from the grid.
    '''
    
    maxPositivePower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If an active power source is available in the STATCOM, the Maximum
    MW that the STATCOM can provide to the grid
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for a steady state solution.
    '''
    
@dataclass(repr=False)
class ThyristorControlledSeriesCompensator(FACTSEquipment):
    '''
    Thyristor-controlled series capacitors (TCSC) is a type of flexible AC
    transmission system regulating equipment that is configured with controlled
    reactors in parallel with sections of a capacitor bank. This combination
    allows smooth control of the fundamental frequency capacitive reactance
    over a wide range. The thyristor valve contains a string of series connected
    high power thyristors. TCSC can control power flows in order to achieve
    eliminating of line overloads, reducing loop flows and minimising system
    losses.
    '''

    TCSCCompensationPoint: list[TCSCCompensationPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TCSCCompensationPoint.ThyristorControlledSeriesCompensator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Compensation point for this TCSC.
    '''
    
    compensationZ: Optional[ float | Impedance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The actual compensation impedance provided by the compensator. The
    attribute value shall be positive if compensation is in the capacitive
    range. The attribute value shall be negative if compensation is in
    the inductive rating.
    '''
    
    flexibleCapacitiveZ: Optional[ float | Impedance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flexible impedance that can be controlled by the compensator when operating
    in the capacitive range. Shall always be positive.
    '''
    
    flexibleInductiveZ: Optional[ float | Impedance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flexible impedance that can be controlled by the compensator when operating
    in the inductive range. Shall always be negative.
    '''
    
    minI: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum current below which the device bypassed.
    '''
    
    reconnectionI: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The current for which the TCSC returns back to operation after bypass.
    '''
    
@dataclass(repr=False)
class FrequencyConverter(RegulatingCondEq):
    '''
    A device to convert from one frequency to another (e.g., frequency F1 to
    F2) comprises a pair of FrequencyConverter instances. One converts from
    F1 to DC, the other converts the DC to F2.
    '''

    frequency: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Frequency on the AC side.
    '''
    
    maxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum active power on the DC side at which the frequency converter
    should operate.
    '''
    
    maxU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum voltage on the DC side at which the frequency converter
    should operate.
    '''
    
    minP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum active power on the DC side at which the frequency converter
    should operate.
    '''
    
    minU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum voltage on the DC side at which the frequency converter
    should operate.
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.gmdm)
@dataclass(repr=False)
class PowerElectronicsConnection(RegulatingCondEq):
    '''
    A connection to the AC network for energy production or consumption that
    uses power electronics rather than rotating machines.
    '''

    PowerElectronicsConnectionPhase: list[PowerElectronicsConnectionPhase] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsConnectionPhase.PowerElectronicsConnection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The individual phases models for the power electronics connection.
    '''
    
    PowerElectronicsUnit: list[PowerElectronicsUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsUnit.PowerElectronicsConnection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An AC network connection may have several power electronics units connecting
    through it.
    '''
    
    controlMode: Optional[ ConverterControlModeKind ] = field(
        default=None,
        metadata={
        'type': 'gmdm enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    Inverter control mode indicating whether reactive power output is based
    on constant PF or constant Q
    '''
    
    maxIFault: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum fault current this device will contribute, in per-unit of rated
    current, before the converter protection will trip or bypass.
    '''
    
    maxQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum reactive power limit. This is the maximum (nameplate) limit
    for the unit.
    '''
    
    minQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum reactive power limit for the unit. This is the minimum (nameplate)
    limit for the unit.
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for a steady state solution.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for a steady state solution.
    '''
    
    ratedS: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Nameplate apparent power rating for the unit.
    The attribute shall have a positive value.
    '''
    
    ratedU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated voltage (nameplate data, Ur in IEC 60909-0). It is primarily
    used for short circuit data exchange according to IEC 60909.
    The attribute shall be a positive value.
    '''
    
    DERDynamics: Optional[DERDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DERDynamics.PowerElectronicsConnection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DER dynamics model associated with this power electronics connection
    model.
    '''
    
    StatcomDynamics: Optional[StatcomDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StatcomDynamics.PowerElectronicsConnection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The statcom dynamics model associated with this power electronics connection.
    '''
    
    WindTurbineType3or4Dynamics: Optional[WindTurbineType3or4Dynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WindTurbineType3or4Dynamics.PowerElectronicsConnection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The wind turbine type 3 or type 4 dynamics model associated with this
    power electronics connection.
    '''
    
@dataclass(repr=False)
class RotatingMachine(RegulatingCondEq):
    '''
    A rotating machine which may be used as a generator or motor.
    '''

    HydroPump: Optional[HydroPump] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroPump.RotatingMachine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The synchronous machine drives the turbine which moves the water from
    a low elevation to a higher elevation. The direction of machine rotation
    for pumping may or may not be the same as for generating.
    '''
    
    ratedPowerFactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power factor (nameplate data). It is primarily used for short circuit
    data exchange according to IEC 60909. The attribute cannot be a negative
    value.
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for a steady state solution.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for a steady state solution.
    '''
    
    ratedS: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Nameplate apparent power rating for the unit.
    The attribute shall have a positive value.
    '''
    
    ratedU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated voltage (nameplate data, Ur in IEC 60909-0). It is primarily
    used for short circuit data exchange according to IEC 60909.
    The attribute shall be a positive value.
    '''
    
    GeneratingUnit: Optional[GeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GeneratingUnit.RotatingMachine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A synchronous machine may operate as a generator and as such becomes
    a member of a generating unit.
    '''
    
    HydroPump: Optional[HydroPump] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroPump.RotatingMachine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The synchronous machine drives the turbine which moves the water from
    a low elevation to a higher elevation. The direction of machine rotation
    for pumping may or may not be the same as for generating.
    '''
    
@dataclass(repr=False)
class AsynchronousMachine(RotatingMachine):
    '''
    A rotating machine whose shaft rotates asynchronously with the electrical
    field. Also known as an induction machine with no external connection to
    the rotor windings, e.g. squirrel-cage induction machine.
    '''

    converterFedDrive: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates whether the machine is a converter fed drive. Used for short
    circuit data exchange according to IEC 60909.
    '''
    
    iaIrRatio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ratio of locked-rotor current to the rated current of the motor (Ia/Ir).
    Used for short circuit data exchange according to IEC 60909.
    '''
    
    polePairNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of pole pairs of stator. Used for short circuit data exchange
    according to IEC 60909.
    '''
    
    reversible: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates for converter drive motors if the power can be reversible.
    Used for short circuit data exchange according to IEC 60909.
    '''
    
    rxLockedRotorRatio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Locked rotor ratio (R/X). Used for short circuit data exchange according
    to IEC 60909.
    '''
    
    asynchronousMachineType: Optional[ AsynchronousMachineKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the type of Asynchronous Machine (motor or generator).
    '''
    
    efficiency: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Efficiency of the asynchronous machine at nominal operation as a percentage.
    Indicator for converter drive motors. Used for short circuit data exchange
    according to IEC 60909.
    '''
    
    nominalFrequency: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Nameplate data indicates if the machine is 50 Hz or 60 Hz.
    '''
    
    nominalSpeed: Optional[ float | RotationSpeed ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Nameplate data. Depends on the slip and number of pole pairs.
    '''
    
    ratedMechanicalPower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated mechanical power (Pr in IEC 60909-0). Used for short circuit
    data exchange according to IEC 60909.
    '''
    
    rr1: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Damper 1 winding resistance.
    '''
    
    rr2: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Damper 2 winding resistance.
    '''
    
    tpo: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transient rotor time constant (greater than tppo).
    '''
    
    tppo: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Sub-transient rotor time constant (greater than 0).
    '''
    
    xlr1: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Damper 1 winding leakage reactance.
    '''
    
    xlr2: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Damper 2 winding leakage reactance.
    '''
    
    xm: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Magnetizing reactance.
    '''
    
    xp: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transient reactance (unsaturated) (greater than or equal to xpp).
    '''
    
    xpp: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Sub-transient reactance (unsaturated).
    '''
    
    xs: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Synchronous reactance (greater than xp).
    '''
    
    AsynchronousMachineDynamics: Optional[AsynchronousMachineDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AsynchronousMachineDynamics.AsynchronousMachine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asynchronous machine dynamics model used to describe dynamic behaviour
    of this asynchronous machine.
    '''
    
    DERDynamics: Optional[DERDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DERDynamics.AsynchronousMachine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DER dynamics model associated with this asynchronous machine model.
    '''
    
@dataclass(repr=False)
class SynchronousMachine(RotatingMachine):
    '''
    An electromechanical device that operates with shaft rotating synchronously
    with the network. It is a single machine operating either as a generator
    or synchronous condenser or pump.
    '''

    ReactiveCapabilityCurve: list[ReactiveCapabilityCurve] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ReactiveCapabilityCurve.SynchronousMachine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactive capability curve for this synchronous machine.
    '''
    
    coolantCondition: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Temperature or pressure of coolant medium.
    '''
    
    earthing: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates whether or not the generator is earthed. Used for short circuit
    data exchange according to IEC 60909.
    '''
    
    mu: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Factor to calculate the breaking current (4.5.2.1 in IEC 60909-0).
    Used only for single fed short circuit on a generator (4.3.4.2. in
    IEC 60909-0).
    '''
    
    referencePriority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority of unit for use as powerflow voltage phase angle reference
    bus selection. 0 = don t care (default) 1 = highest priority. 2 is
    less than 1 and so on.
    '''
    
    aVRToManualLag: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time delay required when switching from Automatic Voltage Regulation
    (AVR) to Manual for a lagging MVAr violation.
    '''
    
    aVRToManualLead: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time delay required when switching from Automatic Voltage Regulation
    (AVR) to Manual for a leading MVAr violation.
    '''
    
    baseQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Default base reactive power value. This value represents the initial
    reactive power that can be used by any application function.
    '''
    
    condenserP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power consumed when in condenser mode operation.
    '''
    
    coolantType: Optional[ CoolantType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Method of cooling the machine.
    '''
    
    earthingStarPointR: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generator star point earthing resistance (Re). Used for short circuit
    data exchange according to IEC 60909.
    '''
    
    earthingStarPointX: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generator star point earthing reactance (Xe). Used for short circuit
    data exchange according to IEC 60909.
    '''
    
    ikk: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Steady-state short-circuit current (in A for the profile) of generator
    with compound excitation during 3-phase short circuit.
    - Ikk=0: Generator with no compound excitation.
    - Ikk&lt;&gt;0: Generator with compound excitation.
    Ikk is used to calculate the minimum steady-state short-circuit current
    for generators with compound excitation.
    (4.6.1.2 in IEC 60909-0:2001).
    Used only for single fed short circuit on a generator. (4.3.4.2. in
    IEC 60909-0:2001).
    '''
    
    manualToAVR: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time delay required when switching from Manual to Automatic Voltage
    Regulation. This value is used in the accelerating power reference
    frame for powerflow solutions.
    '''
    
    maxQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum reactive power limit. This is the maximum (nameplate) limit
    for the unit.
    '''
    
    maxU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum voltage limit for the unit.
    '''
    
    minQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum reactive power limit for the unit.
    '''
    
    minU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum voltage limit for the unit.
    '''
    
    operatingMode: Optional[ SynchronousMachineOperatingMode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current mode of operation.
    '''
    
    qPercent: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Part of the coordinated reactive control that comes from this machine.
    The attribute is used as a participation factor not necessarily summing
    up to 100 % for the participating devices in the control.
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Equivalent resistance (RG) of generator. RG is considered for the calculation
    of all currents, except for the calculation of the peak current ip.
    Used for short circuit data exchange according to IEC 60909.
    '''
    
    r0: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence resistance of the synchronous machine.
    '''
    
    r2: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence resistance.
    '''
    
    satDirectSubtransX: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direct-axis subtransient reactance saturated, also known as Xd"sat.
    '''
    
    satDirectSyncX: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direct-axes saturated synchronous reactance (xdsat); reciprocal of
    short-circuit ration. Used for short circuit data exchange, only for
    single fed short circuit on a generator. (4.3.4.2. in IEC 60909-0:2001).
    '''
    
    satDirectTransX: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Saturated Direct-axis transient reactance. The attribute is primarily
    used for short circuit calculations according to ANSI.
    '''
    
    shortCircuitRotorType: Optional[ ShortCircuitRotorKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of rotor, used by short circuit applications, only for single
    fed short circuit according to IEC 60909.
    '''
    
    type: Optional[ SynchronousMachineKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Modes that this synchronous machine can operate in.
    '''
    
    voltageRegulationRange: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Range of generator voltage regulation (PG in IEC 60909-0) used for
    calculation of the impedance correction factor KG defined in IEC 60909-0.
    This attribute is used to describe the operating voltage of the generating
    unit.
    '''
    
    x0: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence reactance of the synchronous machine.
    '''
    
    x2: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence reactance.
    '''
    
    DERDynamics: Optional[DERDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DERDynamics.SynchronousMachine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DER dynamics model associated with this synchronous machine model.
    '''
    
    InitialReactiveCapabilityCurve: Optional[ReactiveCapabilityCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The default reactive capability curve for use by a synchronous machine.
    The reference voltage (exchanged by ReactiveCapabilityCurve.referenceVoltage)
    for this ReactiveCapabilityCurve shall be equal to the BaseVoltage.nominalVoltage
    of the ConnectivityNode to which the Equipment is connected to. The
    information is obtained via the containment of the Equipment or the
    ConnectivityNode.
    '''
    
    SynchronousMachineDynamics: Optional[SynchronousMachineDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SynchronousMachineDynamics.SynchronousMachine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Synchronous machine dynamics model used to describe dynamic behaviour
    of this synchronous machine.
    '''
    
@dataclass(repr=False)
class ShuntCompensator(RegulatingCondEq):
    '''
    A shunt capacitor or reactor or switchable bank of shunt capacitors or
    reactors. A section of a shunt compensator is an individual capacitor or
    reactor. A negative value for bPerSection indicates that the compensator
    is a reactor. ShuntCompensator is a single terminal device. Ground is implied.
    '''

    ShuntCompensatorPhase: list[ShuntCompensatorPhase] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ShuntCompensatorPhase.ShuntCompensator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The individual phases models for the shunt compensator.
    '''
    
    SvShuntCompensatorSections: list[SvShuntCompensatorSections] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SvShuntCompensatorSections.ShuntCompensator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The state for the number of shunt compensator sections in service.
    '''
    
    grounded: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Required for Yn and I connections (as represented by ShuntCompensator.phaseConnection).
    True if the neutral is solidly grounded.
    '''
    
    maximumSections: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum number of sections that may be switched in.
    '''
    
    normalSections: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal number of sections switched in. The value shall be between
    zero and ShuntCompensator.maximumSections.
    '''
    
    sections: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Shunt compensator sections in use. Starting value for steady state
    solution. The attribute shall be a positive value or zero. Non integer
    values are allowed to support continuous variables. The reasons for
    continuous value are to support study cases where no discrete shunt
    compensators has yet been designed, a solutions where a narrow voltage
    band force the sections to oscillate or accommodate for a continuous
    solution as input.
    For LinearShuntConpensator the value shall be between zero and ShuntCompensator.maximumSections.
    At value zero the shunt compensator conductance and admittance is zero.
    Linear interpolation of conductance and admittance between the previous
    and next integer section is applied in case of non-integer values.
    For NonlinearShuntCompensator(-s) shall only be set to one of the NonlinearShuntCompenstorPoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPoint(-s).
    '''
    
    aVRDelay: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An automatic voltage regulation delay (AVRDelay) which is the time
    delay from a change in voltage to when the capacitor is allowed to
    change state. This filters out temporary changes in voltage.
    '''
    
    nomU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage at which the nominal reactive power may be calculated.
    This should normally be within 10% of the voltage at which the capacitor
    is connected to the network.
    '''
    
    phaseConnection: Optional[ PhaseShuntConnectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of phase connection, such as wye or delta.
    '''
    
    voltageSensitivity: Optional[ float | VoltagePerReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage sensitivity required for the device to regulate the bus voltage,
    in voltage/reactive power.
    '''
    
    ShuntCompensatorAction: Optional[ShuntCompensatorModification] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShuntCompensatorModification.ShuntCompensator',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The action that is applied to a ShuntCompensator.
    '''
    
    ShuntCompensatorDynamics: Optional[ShuntCompensatorDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShuntCompensatorDynamics.ShuntCompensator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Shunt compensator dynamics model used to describe dynamic behaviour
    of this shunt compensator.
    '''
    
    StaticVarCompensatorSystemDynamics: Optional[StaticVarCompensatorSystemDynamics] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StaticVarCompensatorSystemDynamics.ShuntCompensator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Static Var Compensator system dynamics model used to describe dynamic
    behaviour of this Static Var Compensator system.
    '''
    
@dataclass(repr=False)
class LinearShuntCompensator(ShuntCompensator):
    '''
    A linear shunt compensator has banks or sections with equal admittance
    values.
    '''

    b0PerSection: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence shunt (charging) susceptance per section.
    '''
    
    bPerSection: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence shunt (charging) susceptance per section.
    '''
    
    g0PerSection: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence shunt (charging) conductance per section.
    '''
    
    gPerSection: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence shunt (charging) conductance per section.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class NonlinearShuntCompensator(ShuntCompensator):
    '''
    A non linear shunt compensator has bank or section admittance values that
    differ. The attributes gTotal, bTotal, g0Total and b0Total of the associated
    NonlinearShuntCompensatorPoint describe the total conductance and admittance
    of a NonlinearShuntCompensatorPoint at a section number specified by NonlinearShuntCompensatorPoint.sectionNumber.
    '''

    NonlinearShuntCompensatorPoints: list[NonlinearShuntCompensatorPoint] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'NonlinearShuntCompensatorPoint.NonlinearShuntCompensator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All points of the non-linear shunt compensator.
    '''
    
@dataclass(repr=False)
class VariableShuntCompensator(NonlinearShuntCompensator):
    '''
    A variable shunt compensator (VSR) is an oil-filled reactor with discrete
    on-line regulation of reactive power. The regulation range typically varies
    between 30% and 100% of the rated reactive power. When energized VSR cannot
    have a reactive output of 0 Mvar, so minimal valid section number is 1
    with reactive power output at either 100% or at minimal reactive power
    output. Note that reactive power can increase or decrease with increasing
    of the section number (NonlinearShuntCompensatorPoint.sectionNumber).
    '''

@dataclass(repr=False)
class EquivalentEquipment(ConductingEquipment):
    '''
    The class represents equivalent objects that are the result of a network
    reduction. The class is the base for equivalent objects of different types.
    '''

    EquivalentNetwork: Optional[EquivalentNetwork] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EquivalentNetwork.EquivalentEquipments',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The equivalent where the reduced model belongs.
    '''
    
@dataclass(repr=False)
class EquivalentBranch(EquivalentEquipment):
    '''
    The class represents equivalent branches. In cases where a transformer
    phase shift is modelled and the EquivalentBranch is spanning the same nodes,
    the impedance quantities for the EquivalentBranch shall consider the needed
    phase shift.
    '''

    negativeR12: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence series resistance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data
    exchange.
    '''
    
    negativeR21: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence series resistance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data
    exchange.
    '''
    
    negativeX12: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence series reactance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''
    
    negativeX21: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence series reactance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    Usage: EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''
    
    positiveR12: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series resistance from terminal sequence 1 to terminal
    sequence 2 . Used for short circuit data exchange according to IEC
    60909.
    EquivalentBranch is a result of network reduction prior to the data
    exchange.
    '''
    
    positiveR21: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series resistance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data
    exchange.
    '''
    
    positiveX12: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series reactance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''
    
    positiveX21: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series reactance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series resistance of the reduced branch.
    '''
    
    r21: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance from terminal sequence 2 to terminal sequence 1 .Used for
    steady state power flow. This attribute is optional and represent unbalanced
    network such as off-nominal phase shifter. If only EquivalentBranch.r
    is given, then EquivalentBranch.r21 is assumed equal to EquivalentBranch.r.
    Usage rule : EquivalentBranch is a result of network reduction prior
    to the data exchange.
    '''
    
    x: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series reactance of the reduced branch.
    '''
    
    x21: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactance from terminal sequence 2 to terminal sequence 1. Used for
    steady state power flow. This attribute is optional and represents
    an unbalanced network such as off-nominal phase shifter. If only EquivalentBranch.x
    is given, then EquivalentBranch.x21 is assumed equal to EquivalentBranch.x.
    Usage rule: EquivalentBranch is a result of network reduction prior
    to the data exchange.
    '''
    
    zeroR12: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series resistance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data
    exchange.
    '''
    
    zeroR21: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series resistance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''
    
    zeroX12: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series reactance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''
    
    zeroX21: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series reactance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''
    
@dataclass(repr=False)
class EquivalentInjection(EquivalentEquipment):
    '''
    This class represents networks that have been equivalized using either
    the Ward or extended Ward method. A Ward equivalent is a combination of
    an impedance load and a PQ load. An extended Ward equivalent is a combination
    of an impedance load, a PQ load and as voltage source with an internal
    impedance.
    '''

    maxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum active power of the injection.
    '''
    
    maxQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum reactive power of the injection. Used for modelling of infeed
    for load flow exchange. Not used for short-circuit modelling. If maxQ
    and minQ are not used ReactiveCapabilityCurve can be used.
    '''
    
    minP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum active power of the injection.
    '''
    
    minQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum reactive power of the injection. Used for modelling of infeed
    for load flow exchange. Not used for short-circuit modelling. If maxQ
    and minQ are not used ReactiveCapabilityCurve can be used.
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Equivalent active power injection. Load sign convention is used, i.e.
    positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Equivalent reactive power injection. Load sign convention is used,
    i.e. positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    
    InjectionController: Optional[InjectionController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InjectionController.EquivalentInjection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Injection controller which controls the equivalent injection.
    '''
    
@dataclass(repr=False)
class ExtendedWardEquivalent(EquivalentInjection):
    '''
    An extended ward equivalent is a combination of an impedance load, a PQ
    load and as voltage source with an internal impedance.
    '''

    ReactiveCapabilityCurve: list[ReactiveCapabilityCurve] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ReactiveCapabilityCurve.ExtendedWardEquivalent',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactive capability curve used by this extended ward equivalent.
    '''
    
    regulationStatus: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the regulation status of the ExtendedWardEquivalent. True
    is regulating. False is not regulating.
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence resistance. Used to represent (extended) Ward equivalent.
    '''
    
    r0: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence resistance. Used to represent (extended) Ward equivalent.
    '''
    
    r2: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence resistance. Used to represent (extended) Ward equivalent.
    '''
    
    regulationTarget: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The target voltage for voltage regulation. The attribute shall be a
    positive value.
    '''
    
    x: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence reactance. Used to represent (extended) Ward equivalent.
    '''
    
    x0: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence reactance. Used to represent (extended) Ward equivalent.
    '''
    
    x2: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Negative sequence reactance. Used to represent (extended) Ward equivalent.
    '''
    
@dataclass(repr=False)
class WardEquivalent(EquivalentInjection):
    '''
    A ward equivalent is a combination of an impedance load and a PQ load.
    '''

@dataclass(repr=False)
class EquivalentShunt(EquivalentEquipment):
    '''
    The class represents equivalent shunts.
    '''

    b: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence shunt susceptance.
    '''
    
    g: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence shunt conductance.
    '''
    
@dataclass(repr=False)
class Ground(ConductingEquipment):
    '''
    A point where the system is grounded used for connecting conducting equipment
    to ground. The power system model can have any number of grounds.
    '''

    GroundAction: Optional[GroundAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GroundAction.Ground',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Action taken with this ground.
    '''
    
@dataclass(repr=False)
class MktConductingEquipment(ConductingEquipment):
    '''
    Subclass of IEC 61970:Core:ConductingEquipment.
    '''

@dataclass(repr=False)
class PowerTransformer(ConductingEquipment):
    '''
    An electrical device consisting of two or more coupled windings, with or
    without a magnetic core, for introducing mutual coupling between electric
    circuits. Transformers can be used to control voltage and phase shift (active
    power flow).
    A power transformer may be composed of separate transformer tanks that
    need not be identical.
    A power transformer can be modelled with or without tanks and is intended
    for use in both balanced and unbalanced representations. A power transformer
    typically has two terminals, but may have one (grounding), three or more
    terminals.
    The inherited association ConductingEquipment.BaseVoltage should not be
    used. The association from TransformerEnd to BaseVoltage should be used
    instead.
    '''

    PowerTransformerEnd: list[PowerTransformerEnd] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerTransformerEnd.PowerTransformer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ends of this power transformer.
    '''
    
    TransformerTanks: list[TransformerTank] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerTank.PowerTransformer',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All transformers that belong to this bank.
    '''
    
    isPartOfGeneratorUnit: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates whether the machine is part of a power station unit. Used
    for short circuit data exchange according to IEC 60909. It has an impact
    on how the correction factors are calculated for transformers, since
    the transformer is not necessarily part of a synchronous machine and
    generating unit. It is not always possible to derive this information
    from the model. This is why the attribute is necessary.
    '''
    
    operationalValuesConsidered: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    It is used to define if the data (other attributes related to short
    circuit data exchange) defines long term operational conditions or
    not. Used for short circuit data exchange according to IEC 60909.
    '''
    
    vectorGroup: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Vector group of the transformer for protective relaying, e.g., Dyn1.
    For unbalanced transformers, this may not be simply determined from
    the constituent winding connections and phase angle displacements.
    The vectorGroup string consists of the following components in the
    order listed: high voltage winding connection, mid voltage winding
    connection (for three winding transformers), phase displacement clock
    number from 0 to 11, low voltage winding connection
    phase displacement clock number from 0 to 11. The winding connections
    are D (delta), Y (wye), YN (wye with neutral), Z (zigzag), ZN (zigzag
    with neutral), A (auto transformer). Upper case means the high voltage,
    lower case mid or low. The high voltage winding always has clock position
    0 and is not included in the vector group string. Some examples: YNy0
    (two winding wye to wye with no phase displacement), YNd11 (two winding
    wye to delta with 330 degrees phase displacement), YNyn0d5 (three winding
    transformer wye with neutral high voltage, wye with neutral mid voltage
    and no phase displacement, delta low voltage with 150 degrees displacement).
    Phase displacement is defined as the angular difference between the
    phasors representing the voltages between the neutral point (real or
    imaginary) and the corresponding terminals of two windings, a positive
    sequence voltage system being applied to the high-voltage terminals,
    following each other in alphabetical sequence if they are lettered,
    or in numerical sequence if they are numbered: the phasors are assumed
    to rotate in a counter-clockwise sense.
    '''
    
    beforeShCircuitHighestOperatingCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The highest operating current (Ib in IEC 60909-0) before short circuit
    (depends on network configuration and relevant reliability philosophy).
    It is used for calculation of the impedance correction factor KT defined
    in IEC 60909-0.
    '''
    
    beforeShCircuitHighestOperatingVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The highest operating voltage (Ub in IEC 60909-0) before short circuit.
    It is used for calculation of the impedance correction factor KT defined
    in IEC 60909-0. This is worst case voltage on the low side winding
    (3.7.1 of IEC 60909:2001). Used to define operating conditions.
    '''
    
    beforeShortCircuitAnglePf: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The angle of power factor before short circuit (phib in IEC 60909-0).
    It is used for calculation of the impedance correction factor KT defined
    in IEC 60909-0. This is the worst case power factor. Used to define
    operating conditions.
    '''
    
    highSideMinOperatingU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum operating voltage (uQmin in IEC 60909-0) at the high voltage
    side (Q side) of the unit transformer of the power station unit. A
    value well established from long-term operating experience of the system.
    It is used for calculation of the impedance correction factor KG defined
    in IEC 60909-0.
    '''
    
@dataclass(repr=False)
class SeriesCompensator(ConductingEquipment):
    '''
    A Series Compensator is a series capacitor or reactor or an AC transmission
    line without charging susceptance. It is a two terminal device.
    '''

    varistorPresent: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Describe if a metal oxide varistor (mov) for over voltage protection
    is configured in parallel with the series compensator. It is used for
    short circuit calculations.
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence resistance.
    '''
    
    r0: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence resistance.
    '''
    
    varistorRatedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum current the varistor is designed to handle at specified
    duration. It is used for short circuit calculations and exchanged only
    if SeriesCompensator.varistorPresent is true.
    The attribute shall be a positive value.
    '''
    
    varistorVoltageThreshold: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC voltage at which the varistor starts conducting. It is used
    for short circuit calculations and exchanged only if SeriesCompensator.varistorPresent
    is true.
    '''
    
    x: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence reactance.
    '''
    
    x0: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence reactance.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class Switch(ConductingEquipment):
    '''
    A generic device designed to close, or open, or both, one or more electric
    circuits. All switches are two terminal devices including grounding switches.
    The ACDCTerminal.connected at the two sides of the switch shall not be
    considered for assessing switch connectivity, i.e. only Switch.open, .normalOpen
    and .locked are relevant.
    '''

    SvSwitch: list[SvSwitch] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SvSwitch.Switch',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The switch state associated with the switch.
    '''
    
    SwitchPhase: list[SwitchPhase] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SwitchPhase.Switch',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The individual switch phases for the switch.
    '''
    
    SwitchSchedules: list[SwitchSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SwitchSchedule.Switch',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A Switch can be associated with SwitchSchedules.
    '''
    
    locked: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, the switch is locked. The resulting switch state is a combination
    of locked and Switch.open attributes as follows:
    <ul>
    <li>locked=true and Switch.open=true. The resulting state is open and
    locked;</li>
    <li>locked=false and Switch.open=true. The resulting state is open;</li>
    <li>locked=false and Switch.open=false. The resulting state is closed.</li>
    </ul>
    '''
    
    normalOpen: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The attribute is used in cases when no Measurement for the status value
    is present. If the Switch has a status measurement the Discrete.normalValue
    is expected to match with the Switch.normalOpen.
    '''
    
    open: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The attribute tells if the switch is considered open when used as input
    to topology processing.
    '''
    
    retained: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Branch is retained in the topological solution. The flow through retained
    switches will normally be calculated in power flow.
    '''
    
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum continuous current carrying capacity in amps governed by
    the device material and construction.
    The attribute shall be a positive value.
    '''
    
    CompositeSwitch: Optional[CompositeSwitch] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CompositeSwitch.Switches',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Composite switch to which this Switch belongs.
    '''
    
    SwitchAction: Optional[SwitchAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SwitchAction.OperatedSwitch',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Action changing status of this switch.
    '''
    
@dataclass(repr=False)
class Cut(Switch):
    '''
    A cut separates a line segment into two parts. The cut appears as a switch
    inserted between these two parts and connects them together. As the cut
    is normally open there is no galvanic connection between the two line segment
    parts. But it is possible to close the cut to get galvanic connection.
    The cut terminals are oriented towards the line segment terminals with
    the same sequence number. Hence the cut terminal with sequence number equal
    to 1 is oriented to the line segment's terminal with sequence number equal
    to 1.
    The cut terminals also act as connection points for jumpers and other equipment,
    e.g. a mobile generator. To enable this, connectivity nodes are placed
    at the cut terminals. Once the connectivity nodes are in place any conducting
    equipment can be connected at them.
    '''

    lengthFromTerminal1: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The length to the place where the cut is located starting from side
    one of the cut line segment, i.e. the line segment Terminal with sequenceNumber
    equal to 1.
    '''
    
    ACLineSegment: Optional[ACLineSegment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACLineSegment.Cut',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line segment to which the cut is applied.
    '''
    
    CutAction: Optional[CutAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CutAction.Cut',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Action taken with this cut.
    '''
    
@dataclass(repr=False)
class Disconnector(Switch):
    '''
    A mechanical switching device which provides, in the open position, an
    isolating distance in accordance with specified requirements.
    A disconnector is capable of opening and closing a circuit when either
    negligible current is broken or made, or when no significant change in
    the voltage across the terminals of each of the poles of the disconnector
    occurs. It is also capable of carrying currents under normal circuit conditions
    and carrying for a specified time currents under abnormal conditions such
    as those of short circuit.
    '''

@dataclass(repr=False)
class EarthingSwitch(Switch):
    '''
    A mechanical switching device for earthing parts of a circuit, capable
    of withstanding for a specified time currents under abnormal conditions
    such as those of short circuit, but not required to carry current under
    normal conditions of the circuit.
    An earthing switch may have a short-circuit making capacity.
    '''

@dataclass(repr=False)
class Fuse(Switch):
    '''
    An overcurrent protective device with a circuit opening fusible part that
    is heated and severed by the passage of overcurrent through it. A fuse
    is considered a switching device because it breaks current.
    '''

    MiinimumMeltCurve: Optional[FuseCharacteristicCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseCharacteristicCurve.FuseMinimumMelt',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Curves that define the time-current operation of this fuse (Minimum
    Melt)
    '''
    
    TotalClearingTimeCurve: Optional[FuseCharacteristicCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseCharacteristicCurve.FuseTotalClearing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Curves that define the time-current operation of this fuse (Total Clearing
    Time Curves)
    '''
    
    MiinimumMeltCurve: Optional[FuseCharacteristicCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseCharacteristicCurve.FuseMinimumMelt',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Curves that define the time-current operation of this fuse (Minimum
    Melt)
    '''
    
    TotalClearingTimeCurve: Optional[FuseCharacteristicCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuseCharacteristicCurve.FuseTotalClearing',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Curves that define the time-current operation of this fuse (Total Clearing
    Time Curves)
    '''
    
@dataclass(repr=False)
class GroundDisconnector(Switch):
    '''
    A manually operated or motor operated mechanical switching device used
    for isolating a circuit or equipment from ground.
    '''

@dataclass(repr=False)
class Jumper(Switch):
    '''
    A short section of conductor with negligible impedance which can be manually
    removed and replaced if the circuit is de-energized. Note that zero-impedance
    branches can potentially be modelled by other equipment types.
    '''

    JumperAction: Optional[JumperAction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'JumperAction.Jumper',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Action taken with this jumper.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@stereotype(CIMStereotype.GB)
@dataclass(repr=False)
class ProtectedSwitch(Switch):
    '''
    A ProtectedSwitch is a switching device that can be operated by ProtectionEquipment.
    '''

    RecloseSequences: list[RecloseSequence] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RecloseSequence.ProtectedSwitch',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A breaker may have zero or more automatic reclosures after a trip occurs.
    '''
    
    breakingCapacity: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum fault current a breaking device can break safely under
    prescribed conditions of use.
    '''
    
@stereotype(CIMStereotype.GB)
@dataclass(repr=False)
class Breaker(ProtectedSwitch):
    '''
    A mechanical switching device capable of making, carrying, and breaking
    currents under normal circuit conditions and also making, carrying for
    a specified time, and breaking currents under specified abnormal circuit
    conditions e.g. those of short circuit.
    '''

    inTransitTime: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The transition time from open to close.
    '''
    
@dataclass(repr=False)
class DisconnectingCircuitBreaker(Breaker):
    '''
    A circuit breaking device including disconnecting function, eliminating
    the need for separate disconnectors.
    '''

@stereotype(CIMStereotype.GB)
@dataclass(repr=False)
class LoadBreakSwitch(ProtectedSwitch):
    '''
    A mechanical switching device capable of making, carrying, and breaking
    currents under normal operating conditions.
    '''

@stereotype(CIMStereotype.GB)
@dataclass(repr=False)
class Recloser(ProtectedSwitch):
    '''
    Pole-mounted fault interrupter with built-in phase and ground relays, current
    transformer (CT), and supplemental controls.
    '''

@dataclass(repr=False)
class Sectionaliser(Switch):
    '''
    Automatic switch that will lock open to isolate a faulted section. It may,
    or may not, have load breaking capability. Its primary purpose is to provide
    fault sectionalising at locations where the fault current is either too
    high, or too low, for proper coordination of fuses.
    '''

@dataclass(repr=False)
class DCConductingEquipment(Equipment):
    '''
    The parts of the DC power system that are designed to carry current or
    that are conductively connected through DC terminals.
    '''

    DCTerminals: list[DCTerminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCTerminal.DCConductingEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A DC conducting equipment has DC terminals.
    '''
    
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum continuous current carrying capacity in amps governed by
    the device material and construction.
    The attribute shall be a positive value.
    '''
    
    ratedUdc: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated DC device voltage. The attribute shall be a positive value. It
    is configuration data used in power flow.
    '''
    
@dataclass(repr=False)
class DCBusbar(DCConductingEquipment):
    '''
    A busbar within a DC system.
    '''

@dataclass(repr=False)
class DCChopper(DCConductingEquipment):
    '''
    Low resistance equipment used in the internal DC circuit to balance voltages.
    It has typically positive and negative pole terminals and a ground.
    '''

@dataclass(repr=False)
class DCGround(DCConductingEquipment):
    '''
    A ground within a DC system.
    '''

    inductance: Optional[ float | Inductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inductance to ground.
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance to ground.
    '''
    
@dataclass(repr=False)
class DCLineSegment(DCConductingEquipment):
    '''
    A wire or combination of wires not insulated from one another, with consistent
    electrical characteristics, used to carry direct current between points
    in the DC region of the power system.
    '''

    capacitance: Optional[ float | Capacitance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Capacitance of the DC line segment. Significant for cables only.
    '''
    
    inductance: Optional[ float | Inductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inductance of the DC line segment. Negligible compared with DCSeriesDevice
    used for smoothing.
    '''
    
    length: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Segment length for calculating line section capabilities.
    '''
    
    resistance: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance of the DC line segment.
    '''
    
    PerLengthParameter: Optional[PerLengthDCLineParameter] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PerLengthDCLineParameter.DCLineSegments',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Set of per-length parameters for this line segment.
    '''
    
@dataclass(repr=False)
class DCSeriesDevice(DCConductingEquipment):
    '''
    A series device within the DC system, typically a reactor used for filtering
    or smoothing. Needed for transient and short circuit studies.
    '''

    inductance: Optional[ float | Inductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inductance of the device.
    '''
    
    resistance: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance of the DC device.
    '''
    
@dataclass(repr=False)
class DCHarmonicFilter(DCSeriesDevice):
    '''
    DC harmonic filter (IEC 60633) is a filter which, in conjunction with the
    DC reactor(s) and with the DC surge capacitor(s), if any, serves the primary
    function of reducing (current or voltage) ripple on the DC transmission
    line and/or earth electrode line.
    '''

@dataclass(repr=False)
class DCSmoothingReactor(DCSeriesDevice):
    '''
    Reactor (IEC 60633) connected in series with a converter unit or converter
    units on the DC side for the primary purpose of smoothing the direct current
    and reducing current transients.
    '''

@dataclass(repr=False)
class DCSmoothingReactorArrester(DCSeriesDevice):
    '''
    Arrester (IEC 60633) connected between the terminals of a smoothing reactor.
    '''

@dataclass(repr=False)
class DCShunt(DCConductingEquipment):
    '''
    A shunt device within the DC system, typically used for filtering. Needed
    for transient and short circuit studies.
    '''

    capacitance: Optional[ float | Capacitance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Capacitance of the DC shunt.
    '''
    
    resistance: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance of the DC device.
    '''
    
@dataclass(repr=False)
class DCSwitch(DCConductingEquipment):
    '''
    A switch within the DC system.
    '''

    locked: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, the switch is locked. The resulting switch state is a combination
    of locked and DCSwitch.open attributes as follows:
    <ul>
    <li>locked=true and DCSwitch.open=true. The resulting state is open
    and locked;</li>
    <li>locked=false and DCSwitch.open=true. The resulting state is open;</li>
    <li>locked=false and DCSwitch.open=false. The resulting state is closed.</li>
    </ul>
    '''
    
    normalOpen: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The attribute is used in cases when no Measurement for the status value
    is present. If the DCSwitch has a status measurement the Discrete.normalValue
    is expected to match with the DCSwitch.normalOpen.
    '''
    
    open: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The attribute tells if the switch is considered open when used as input
    to topology processing.
    '''
    
    retained: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Branch is retained in the topological solution. The flow through retained
    switches will normally be calculated in power flow.
    '''
    
@dataclass(repr=False)
class DCBreaker(DCSwitch):
    '''
    A breaker within a DC system.
    '''

@dataclass(repr=False)
class DCDisconnector(DCSwitch):
    '''
    A disconnector within a DC system.
    '''

@dataclass(repr=False)
class DCHighSpeedSwitch(DCSwitch):
    '''
    High-speed DC switch (IEC 60633) is a type of switchgear used on a DC scheme,
    required to open or close rapidly (&lt; 1 s), including in some cases the
    need to commutate load current into a parallel conducting path, but with
    no requirement to interrupt fault or load current. DC switchgear is usually
    based on a single-phase unit of an AC circuit-breaker, appropriately modified
    for their DC applications. Their capabilities to perform faster opening
    and closing than disconnect switches are used but the function of breaking
    short-circuit currents is not required.
    '''

@dataclass(repr=False)
class DCBypassSwitch(DCHighSpeedSwitch):
    '''
    By-pass switch (IEC 60633) is a high-speed DC switch connected across each
    converter valve group in DC schemes using more than one independent converter
    per pole, designed to close rapidly to bypass a converter group that is
    being taken out of service and commutate the current back into a valve
    group that is being taken back in service. A by-pass switch may also be
    used for prolonged shunting of the bridge(s).
    '''

@dataclass(repr=False)
class DCCommutationSwitch(DCHighSpeedSwitch):
    '''
    DC commutation switch (IEC 60633) is a type of high-speed DC switch specifically
    designed to commutate load current into an alternative parallel current
    path.
    '''

@dataclass(repr=False)
class DCEarthReturnTransferSwitch(DCCommutationSwitch):
    '''
    Earth return transfer switch (IEC 60633) DC commutation switch used to
    transfer DC current from a metallic return path to an earth return path.
    In some applications, this function is performed by a by-pass switch. Although
    the term "earth return transfer breaker" has been widely used in the industry
    for many years, it is misleading since such switches have no ability to
    interrupt fault current.
    '''

@dataclass(repr=False)
class DCLineParallelingSwitch(DCCommutationSwitch):
    '''
    Line paralleling switch (IEC 60633) DC commutation switch placed in series
    with one or more high-voltage pole conductors, allowing two or more lines
    to be connected in parallel or to revert to single-line operation while
    conducting load current.
    '''

@dataclass(repr=False)
class DCMetalicReturnSwitch(DCCommutationSwitch):
    '''
    Metallic return transfer switch (IEC 60633) is a DC commutation switch
    used to transfer DC current from an earth return path to a metallic return
    path. Although the term "metallic return transfer breaker" has been widely
    used in the industry for many years, it is misleading since such switches
    have no ability to interrupt fault current.
    '''

@dataclass(repr=False)
class DCNeutralBusGroundingSwitch(DCCommutationSwitch):
    '''
    Neutral bus grounding switch (IEC 60633) or a neutral bus earthing switch
    is a DC commutation switch connected from the neutral bus to the station
    earth mat on a bipolar DC scheme, designed to provide a temporary earth
    connection in the event of an open circuit fault on the electrode line
    until the imbalance of current between the two poles can be reduced to
    a safe minimum level or the electrode line connection can be restored.
    '''

@dataclass(repr=False)
class DCNeutralBusSwitch(DCCommutationSwitch):
    '''
    Neutral bus switch (IEC 60633) is a DC commutation switch connected in
    series with the neutral bus on a bipolar DC scheme, designed to commutate
    current out of the pole conductor or neutral bus and into the electrode
    line or dedicated metallic return conductor or earth in response to a fault
    in a converter or neutral bus.
    '''

@dataclass(repr=False)
class DCConverterParallelingSwitch(DCHighSpeedSwitch):
    '''
    Converter paralleling switch (IEC 60633) is a high-speed DC switch connected
    in series with each converter at the DC terminal in DC schemes where two
    or more converters are connected in parallel onto a common pole conductor,
    designed to allow additional converter(s) to be connected in parallel or
    disconnected without affecting the load current in the other converter.
    '''

@stereotype(CIMStereotype.NC)
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class GeneratingUnit(Equipment):
    '''
    A single or set of synchronous machines for converting mechanical power
    into alternating-current power. For example, individual machines within
    a set may be defined for scheduling purposes while a single control signal
    is derived for the set. In this case there would be a GeneratingUnit for
    each member of the set and an additional GeneratingUnit corresponding to
    the set.
    '''

    ControlAreaGeneratingUnit: list[ControlAreaGeneratingUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ControlAreaGeneratingUnit.GeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ControlArea specifications for this generating unit.
    '''
    
    GenUnitOpCostCurves: list[GenUnitOpCostCurve] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'GenUnitOpCostCurve.GeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A generating unit may have one or more cost curves, depending upon
    fuel mixture and fuel cost.
    '''
    
    GenUnitOpSchedule: Optional[GenUnitOpSchedule] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GenUnitOpSchedule.GeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A generating unit may have an operating schedule, indicating the planned
    operation of the unit.
    '''
    
    GrossToNetActivePowerCurves: list[GrossToNetActivePowerCurve] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'GrossToNetActivePowerCurve.GeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A generating unit may have a gross active power to net active power
    curve, describing the losses and auxiliary power requirements of the
    unit.
    '''
    
    RotatingMachine: list[RotatingMachine] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RotatingMachine.GeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A synchronous machine may operate as a generator and as such becomes
    a member of a generating unit.
    '''
    
    longPF: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generating unit long term economic participation factor.
    '''
    
    normalPF: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generating unit economic participation factor. The sum of the participation
    factors across generating units does not have to sum to one. It is
    used for representing distributed slack participation factor. The attribute
    shall be a positive value or zero.
    '''
    
    penaltyFactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Defined as: 1 / ( 1 - Incremental Transmission Loss); with the Incremental
    Transmission Loss expressed as a plus or minus value. The typical range
    of penalty factors is (0.9 to 1.1).
    '''
    
    shortPF: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generating unit short term economic participation factor.
    '''
    
    tieLinePF: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generating unit economic participation factor.
    '''
    
    allocSpinResP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The planned unused capacity (spinning reserve) which can be used to
    support emergency load.
    '''
    
    autoCntrlMarginP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The planned unused capacity which can be used to support automatic
    control overruns.
    '''
    
    baseP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    For dispatchable units, this value represents the economic active power
    basepoint, for units that are not dispatchable, this value represents
    the fixed generation value. The value shall be between the operating
    low and high limits.
    '''
    
    controlDeadband: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit control error deadband. When a unit's desired active power change
    is less than this deadband, then no control pulses will be sent to
    the unit.
    '''
    
    controlPulseHigh: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pulse high limit which is the largest control pulse that the unit can
    respond to.
    '''
    
    controlPulseLow: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pulse low limit which is the smallest control pulse that the unit can
    respond to.
    '''
    
    controlResponseRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit response rate which specifies the active power change for a control
    pulse of one second in the most responsive loading level of the unit.
    '''
    
    efficiency: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The efficiency of the unit in converting mechanical energy, from the
    prime mover, into electrical energy.
    '''
    
    genControlMode: Optional[ GeneratorControlMode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit control mode.
    '''
    
    genControlSource: Optional[ GeneratorControlSource ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The source of controls for a generating unit. Defines the control status
    of the generating unit.
    '''
    
    governorMPL: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Governor motor position limit.
    '''
    
    governorSCD: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Governor Speed Changer Droop. This is the change in generator power
    output divided by the change in frequency normalized by the nominal
    power of the generator and the nominal frequency and expressed in percent
    and negated. A positive value of speed change droop provides additional
    generator output upon a drop in frequency.
    '''
    
    highControlLimit: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High limit for secondary (AGC) control.
    '''
    
    initialP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Default initial active power which is used to store a powerflow result
    for the initial active power for this unit in this network configuration.
    '''
    
    lowControlLimit: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Low limit for secondary (AGC) control.
    '''
    
    lowerRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal maximum rate the generating unit active power output can
    be lowered by control actions.
    '''
    
    maxEconomicP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum high economic active power limit, that should not exceed the
    maximum operating active power limit.
    '''
    
    maximumAllowableSpinningReserve: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum allowable spinning reserve. Spinning reserve will never be
    considered greater than this value regardless of the current operating
    point.
    '''
    
    maxOperatingP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the maximum operating active power limit the dispatcher can
    enter for this unit.
    '''
    
    minEconomicP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Low economic active power limit that shall be greater than or equal
    to the minimum operating active power limit.
    '''
    
    minimumOffTime: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum time interval between unit shutdown and startup.
    '''
    
    minOperatingP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the minimum operating active power limit the dispatcher can
    enter for this unit.
    '''
    
    modelDetail: Optional[ int | Classification ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Detail level of the generator model data.
    '''
    
    nominalP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The nominal power of the generating unit. Used to give precise meaning
    to percentage based attributes such as the governor speed change droop
    (governorSCD attribute).
    The attribute shall be a positive value equal to or less than RotatingMachine.ratedS.
    '''
    
    raiseRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal maximum rate the generating unit active power output can
    be raised by control actions.
    '''
    
    ratedGrossMaxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's gross rated maximum capacity (book value).
    The attribute shall be a positive value.
    '''
    
    ratedGrossMinP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The gross rated minimum generation level which the unit can safely
    operate at while delivering power to the transmission grid.
    The attribute shall be a positive value.
    '''
    
    ratedNetMaxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The net rated maximum capacity determined by subtracting the auxiliary
    power used to operate the internal plant machinery from the rated gross
    maximum capacity.
    The attribute shall be a positive value.
    '''
    
    startupCost: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The initial startup cost incurred for each start of the GeneratingUnit.
    '''
    
    startupTime: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time it takes to get the unit on-line, from the time that the prime
    mover mechanical power is applied.
    '''
    
    totalEfficiency: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The efficiency of the unit in converting the fuel into electrical energy.
    '''
    
    variableCost: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The variable cost component of production per unit of ActivePower.
    '''
    
    AreaDispatchableUnit: Optional[AreaDispatchableUnit] = field(
        default=None,
        metadata={
        'type': 'NC AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AreaDispatchableUnit.GeneratingUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The area dispatchable unit for this generating unit.
    '''
    
    GenUnitOpSchedule: Optional[GenUnitOpSchedule] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GenUnitOpSchedule.GeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A generating unit may have an operating schedule, indicating the planned
    operation of the unit.
    '''
    
    ScheduleResource: Optional[ScheduleResource] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ScheduleResource.GeneratingUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The schedule resource that has this generating unit.
    '''
    
@dataclass(repr=False)
class GeothermalGeneratingUnit(GeneratingUnit):
    '''
    Generating unit that is generating electrical power from geothermal energy.
    '''

    kind: Optional[ GeothermalUnitKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of geothermal generating unit.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class HydroGeneratingUnit(GeneratingUnit):
    '''
    A generating unit whose prime mover is a hydraulic turbine (e.g. Francis,
    Pelton, Kaplan).
    '''

    HydroGeneratingEfficiencyCurves: list[HydroGeneratingEfficiencyCurve] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'HydroGeneratingEfficiencyCurve.HydroGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A hydro generating unit has an efficiency curve.
    '''
    
    PenstockLossCurve: Optional[PenstockLossCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PenstockLossCurve.HydroGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A hydro generating unit has a penstock loss curve.
    '''
    
    TailbayLossCurve: list[TailbayLossCurve] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TailbayLossCurve.HydroGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A hydro generating unit has a tailbay loss curve.
    '''
    
    dropHeight: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The height water drops from the reservoir mid-point to the turbine.
    '''
    
    energyConversionCapability: Optional[ HydroEnergyConversionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Energy conversion capability for generating.
    '''
    
    hydroUnitWaterCost: Optional[ float | CostPerVolume ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The equivalent cost of water that drives the hydro turbine.
    '''
    
    turbineType: Optional[ HydroTurbineKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of turbine.
    '''
    
    HydroPowerPlant: Optional[HydroPowerPlant] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroPowerPlant.HydroGeneratingUnits',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro generating unit belongs to a hydro power plant.
    '''
    
    PenstockLossCurve: Optional[PenstockLossCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PenstockLossCurve.HydroGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A hydro generating unit has a penstock loss curve.
    '''
    
@dataclass(repr=False)
class MktGeneratingUnit(GeneratingUnit):
    '''
    Subclass of IEC61970:Production:GeneratingUnit.
    '''

@dataclass(repr=False)
class NuclearGeneratingUnit(GeneratingUnit):
    '''
    A nuclear generating unit.
    '''

    reactorKind: Optional[ NuclearReactorKind ] = field(
        default=None,
        metadata={
        'type': 'NC enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Kind of nuclear reactor.
    '''
    
@dataclass(repr=False)
class SolarGeneratingUnit(GeneratingUnit):
    '''
    A solar thermal generating unit, connected to the grid by means of a rotating
    machine. This class does not represent photovoltaic (PV) generation.
    '''

    SolarPowerPlant: Optional[SolarPowerPlant] = field(
        default=None,
        metadata={
        'type': 'European',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SolarPowerPlant.SolarGeneratingUnits',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    A solar power plant may have solar generating units.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class ThermalGeneratingUnit(GeneratingUnit):
    '''
    A generating unit whose prime mover could be a steam turbine, combustion
    turbine, or diesel engine.
    '''

    CAESPlant: Optional[CAESPlant] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CAESPlant.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may be a member of a compressed air energy
    storage plant.
    '''
    
    EmmissionAccounts: list[EmissionAccount] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EmissionAccount.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have one or more emission allowance accounts.
    '''
    
    EmissionCurves: list[EmissionCurve] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EmissionCurve.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have one or more emission curves.
    '''
    
    FossilFuels: list[FossilFuel] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FossilFuel.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have one or more fossil fuels.
    '''
    
    FuelAllocationSchedules: list[FuelAllocationSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FuelAllocationSchedule.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have one or more fuel allocation schedules.
    '''
    
    HeatInputCurve: Optional[HeatInputCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HeatInputCurve.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a heat input curve.
    '''
    
    HeatRateCurve: Optional[HeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HeatRateCurve.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a heat rate curve.
    '''
    
    IncrementalHeatRateCurve: Optional[IncrementalHeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IncrementalHeatRateCurve.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have an incremental heat rate curve.
    '''
    
    ShutdownCurve: Optional[ShutdownCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShutdownCurve.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a shutdown curve.
    '''
    
    StartupModel: Optional[StartupModel] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartupModel.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a startup model.
    '''
    
    oMCost: Optional[ float | CostPerHeatUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Operating and maintenance cost for the thermal unit.
    '''
    
    CAESPlant: Optional[CAESPlant] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CAESPlant.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may be a member of a compressed air energy
    storage plant.
    '''
    
    CogenerationPlant: Optional[CogenerationPlant] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CogenerationPlant.ThermalGeneratingUnits',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may be a member of a cogeneration plant.
    '''
    
    CombinedCyclePlant: Optional[CombinedCyclePlant] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CombinedCyclePlant.ThermalGeneratingUnits',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may be a member of a combined cycle plant.
    '''
    
    HeatInputCurve: Optional[HeatInputCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HeatInputCurve.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a heat input curve.
    '''
    
    HeatRateCurve: Optional[HeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HeatRateCurve.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a heat rate curve.
    '''
    
    IncrementalHeatRateCurve: Optional[IncrementalHeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IncrementalHeatRateCurve.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have an incremental heat rate curve.
    '''
    
    ShutdownCurve: Optional[ShutdownCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShutdownCurve.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a shutdown curve.
    '''
    
    StartupModel: Optional[StartupModel] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartupModel.ThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a startup model.
    '''
    
@dataclass(repr=False)
class MktThermalGeneratingUnit(ThermalGeneratingUnit):
    '''
    Subclass of ThermalGeneratingUnit from Production Package in IEC 61970.
    '''

    CombinedCycleConfigurationMember: list[CombinedCycleConfigurationMember] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CombinedCycleConfigurationMember.MktThermalGeneratingUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class WindGeneratingUnit(GeneratingUnit):
    '''
    A wind driven generating unit, connected to the grid by means of a rotating
    machine. May be used to represent a single turbine or an aggregation.
    '''

    windGenUnitType: Optional[ WindGenUnitKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of wind generating unit.
    '''
    
    WindPowerPlant: Optional[WindPowerPlant] = field(
        default=None,
        metadata={
        'type': 'European',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WindPowerPlant.WindGeneratingUnits',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    A wind power plant may have wind generating units.
    '''
    
@stereotype(CIMStereotype.NC)
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class HydroPump(Equipment):
    '''
    A synchronous motor-driven pump, typically associated with a pumped storage
    plant.
    '''

    HydroPumpOpSchedule: Optional[HydroPumpOpSchedule] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroPumpOpSchedule.HydroPump',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro pump has a pumping schedule over time, indicating when pumping
    is to occur.
    '''
    
    RotatingMachine: Optional[RotatingMachine] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RotatingMachine.HydroPump',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The synchronous machine drives the turbine which moves the water from
    a low elevation to a higher elevation. The direction of machine rotation
    for pumping may or may not be the same as for generating.
    '''
    
    pumpDischAtMaxHead: Optional[ float | VolumeFlowRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pumping discharge under maximum head conditions, usually at full
    gate.
    '''
    
    pumpDischAtMinHead: Optional[ float | VolumeFlowRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pumping discharge under minimum head conditions, usually at full
    gate.
    '''
    
    pumpPowerAtMaxHead: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pumping power under maximum head conditions, usually at full gate.
    '''
    
    pumpPowerAtMinHead: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The pumping power under minimum head conditions, usually at full gate.
    '''
    
    AreaDispatchableUnit: Optional[AreaDispatchableUnit] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AreaDispatchableUnit.HydroPump',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Area dispatchable unit associated with a Hydro Pump.
    '''
    
    HydroPowerPlant: Optional[HydroPowerPlant] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroPowerPlant.HydroPumps',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro pump may be a member of a pumped storage plant or a pump
    for distributing water.
    '''
    
    HydroPumpOpSchedule: Optional[HydroPumpOpSchedule] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HydroPumpOpSchedule.HydroPump',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro pump has a pumping schedule over time, indicating when pumping
    is to occur.
    '''
    
    RotatingMachine: Optional[RotatingMachine] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RotatingMachine.HydroPump',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The synchronous machine drives the turbine which moves the water from
    a low elevation to a higher elevation. The direction of machine rotation
    for pumping may or may not be the same as for generating.
    '''
    
    ScheduleResource: Optional[ScheduleResource] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ScheduleResource.HydroPump',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The schedule resource that has this hydro pump.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class PowerElectronicsUnit(Equipment):
    '''
    A generating unit or battery or aggregation that connects to the AC network
    using power electronics rather than rotating machines.
    '''

    ControlAreaPowerElectronicsUnit: list[ControlAreaPowerElectronicsUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ControlAreaPowerElectronicsUnit.PowerElectronicsUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ControlArea specifications for this power electronics unit.
    '''
    
    maxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum active power limit. This is the maximum (nameplate) limit for
    the unit.
    '''
    
    minP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum active power limit. This is the minimum (nameplate) limit for
    the unit.
    '''
    
    AreaDispatchableUnit: Optional[AreaDispatchableUnit] = field(
        default=None,
        metadata={
        'type': 'NC AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AreaDispatchableUnit.PowerElectronicsUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The area dispatchable unit for this power electronics unit.
    '''
    
    PowerElectronicsConnection: Optional[PowerElectronicsConnection] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsConnection.PowerElectronicsUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A power electronics unit has a connection to the AC network.
    '''
    
    PowerElectronicsUnitController: Optional[PowerElectronicsUnitController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsUnitController.PowerElectronicsUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power electronics unit controller for this power electronics unit.
    '''
    
    PowerShiftKeyDistribution: Optional[PowerShiftKeyDistribution] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerShiftKeyDistribution.PowerElectronicsUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Distribution for a given bid.
    '''
    
    ScheduleResource: Optional[ScheduleResource] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ScheduleResource.PowerElectronicsUnit',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The schedule resource that has this power electronics unit.
    '''
    
@dataclass(repr=False)
class BatteryUnit(PowerElectronicsUnit):
    '''
    An electrochemical energy storage device.
    '''

    batteryState: Optional[ BatteryStateKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The current state of the battery (charging, full, etc.).
    '''
    
    ratedE: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Full energy storage capacity of the battery. The attribute shall be
    a positive value.
    '''
    
    storedE: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Amount of energy currently stored. The attribute shall be a positive
    value or zero and lower than BatteryUnit.ratedE.
    '''
    
@dataclass(repr=False)
class ChargingUnit(PowerElectronicsUnit):
    '''
    A unit that supplies electrical power for charging electrical non-stationary
    entities, e.g. electrical vehicle, trucks, buses, ferries, boats and airplanes.
    The characteristic is that the energy consumption is highly schedule dependent.
    '''

@dataclass(repr=False)
class FlexibleEnergyUnit(PowerElectronicsUnit):
    '''
    Flexible consumer or embedded producer of energy. The unit cannot be a
    net producer.
    '''

    buffer: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power, that has the flexibility to operate as production
    and/or consumption. The buffer is bound. Example are heat pump, cooling
    system, embedded batteries including electric vehicle. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    '''
    
    timeShift: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power, that can be shifted from one pricing interval (market
    time unit) to another. It is expected to be a limited on the length
    of the shift. Example from household could be washing machine or dishwasher.
    Example from industry is the possible to shut down a machine for the
    relevant period. Load sign convention is used, i.e. positive sign means
    flow out from a node.
    '''
    
    unconstrained: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power, that has the flexibility to operate as production
    without any bound by a buffer. Example are alternative heating (wood,
    gas, diesel etc) or power generators. Load sign convention is used,
    i.e. positive sign means flow out from a node.
    '''
    
    uncontrollable: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power, that forms the base consumption for the unit. This
    is measured and expected consumption. Load sign convention is used,
    i.e. positive sign means flow out from a node.
    '''
    
@dataclass(repr=False)
class PhotoVoltaicUnit(PowerElectronicsUnit):
    '''
    A photovoltaic device or an aggregation of such devices.
    '''

@dataclass(repr=False)
class PowerElectricalChemicalUnit(PowerElectronicsUnit):
    '''
    A unit capable of either generating electrical energy from chemical reactions
    or using electrical energy to cause chemical reactions.
    '''

    kind: Optional[ PowerElectricalChemicalUnitKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of power electrical chemical unit.
    '''
    
@dataclass(repr=False)
class PowerElectronicsMarineUnit(PowerElectronicsUnit):
    '''
    A unit that capture energy from marine sources, e.g. waves, for generating
    electrical power.
    '''

    kind: Optional[ MarineUnitKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of marine unit.
    '''
    
@dataclass(repr=False)
class PowerElectronicsThermalUnit(PowerElectronicsUnit):
    '''
    A thermal unit that is connected via an inverter such as through a back-to-back
    converter
    '''

    FossilFuels: Optional[FossilFuel] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FossilFuel.PowerElectronicsThermalUnit',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
@dataclass(repr=False)
class PowerElectronicsWindUnit(PowerElectronicsUnit):
    '''
    A wind generating unit that connects to the AC network with power electronics
    rather than rotating machines or an aggregation of such units.
    '''

@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class ProtectionEquipment(Equipment):
    '''
    An electrical device designed to respond to input conditions in a prescribed
    manner and after specified conditions are met to cause contact operation
    or similar abrupt change in associated electric control circuits, or simply
    to display the detected condition. Protection equipment is associated with
    conducting equipment and usually operate circuit breakers.
    '''

    ProtectionFunction: list[ProtectionFunction] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProtectionFunction.ProtectionEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection functions may be contained in protection equipment.
    '''
    
    ProtectionFunctionBlock: list[ProtectionFunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProtectionFunctionBlock.ProtectionEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection function blocks may be contained in protection equipment.
    '''
    
    ProtectionRelatedFunctionBlock: list[ProtectionRelatedFunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProtectionRelatedFunctionBlock.ProtectionEquipment',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection related function blocks may be contained in protection equipment.
    '''
    
    highLimit: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum allowable value.
    '''
    
    lowLimit: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum allowable value.
    '''
    
    powerDirectionFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direction same as positive active power flow value.
    '''
    
    relayDelayTime: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time delay from detection of abnormal conditions to relay operation.
    '''
    
    unitMultiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit multiplier of the value.
    '''
    
    unitSymbol: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit of measure of the value.
    '''
    
@dataclass(repr=False)
class CurrentRelay(ProtectionEquipment):
    '''
    A device that checks current flow values in any direction or designated
    direction.
    '''

    inverseTimeFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Set true if the current relay has inverse time characteristic.
    '''
    
    currentLimit1: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current limit number one 1 for inverse time pickup.
    '''
    
    currentLimit2: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current limit number 2 for inverse time pickup.
    '''
    
    currentLimit3: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current limit number 3 for inverse time pickup.
    '''
    
    timeDelay1: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inverse time delay number 1 for current limit number 1.
    '''
    
    timeDelay2: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inverse time delay number 2 for current limit number 2.
    '''
    
    timeDelay3: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Inverse time delay number 3 for current limit number 3.
    '''
    
@dataclass(repr=False)
class SynchrocheckRelay(ProtectionEquipment):
    '''
    A device that operates when two AC circuits are within the desired limits
    of frequency, phase angle, and voltage, to permit or to cause the paralleling
    of these two circuits. Used to prevent the paralleling of non-synchronous
    topological islands.
    '''

    maxAngleDiff: Optional[ float | AngleRadians ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum allowable voltage vector phase angle difference across
    the open device.
    '''
    
    maxFreqDiff: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum allowable frequency difference across the open device.
    '''
    
    maxVoltDiff: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum allowable difference voltage across the open device.
    '''
    
@dataclass(repr=False)
class TransformerTank(Equipment):
    '''
    An assembly of two or more coupled windings that transform electrical power
    between voltage levels. These windings are bound on a common core and placed
    in the same tank. Transformer tank can be used to model both single-phase
    and 3-phase transformers.
    '''

    TransformerTankEnds: list[TransformerTankEnd] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerTankEnd.TransformerTank',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All windings of this transformer.
    '''
    
    PowerTransformer: Optional[PowerTransformer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerTransformer.TransformerTanks',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Bank this transformer belongs to.
    '''
    
    TransformerTankInfo: Optional[TransformerTankInfo] = field(
        default=None,
        metadata={
        'type': 'gmdm',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerTankInfo.TransformerTanks',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Flowgate(PowerSystemResource):
    '''
    A flowgate, is single or group of transmission elements intended to model
    MW flow impact relating to transmission limitations and transmission service
    usage.
    '''

    ContractDistributionFactor: list[ContractDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContractDistributionFactor.Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FlowgateRelief: list[FlowgateRelief] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FlowgateRelief.Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FlowgateValue: list[FlowgateValue] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FlowgateValue.Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredInterTie: list[RegisteredInterTie] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegisteredInterTie.Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    InterTie: list[SchedulingPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SchedulingPoint.Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    direction: Optional[ InterTieDirection ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The direction of the flowgate, export or import
    '''
    
    exportMWRating: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Export MW rating
    '''
    
    importMWRating: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Import MW rating
    '''
    
    CongestionRevenueRight: Optional[CongestionRevenueRight] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CongestionRevenueRight.Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    From_SubControlArea: Optional[SubControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubControlArea.From_Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    GenericConstraints: Optional[GenericConstraints] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GenericConstraints.Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    HostControlArea: Optional[HostControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HostControlArea.Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SecurityConstraints: Optional[SecurityConstraints] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SecurityConstraints.Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    To_SubControlArea: Optional[SubControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SubControlArea.To_Flowgate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class FuelStorage(PowerSystemResource):
    '''
    Fuel storage. e.g. pile of coal that can be shared between multiple thermal
    generating units.
    '''

    FossilFuel: list[FossilFuel] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FossilFuel.FuelStorage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fossil fuel stored in a fuel storage.
    '''
    
    energyStorage: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Amount of energy available in the storage.
    '''
    
@dataclass(repr=False)
class HostControlArea(PowerSystemResource):
    '''
    A HostControlArea has a set of tie points and a set of generator controls
    (i.e., AGC). It also has a total load, including transmission and distribution
    losses.
    '''

    AdjacentCASet: Optional[AdjacentCASet] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AdjacentCASet.HostControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    CnodeDistributionFactor: list[CnodeDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CnodeDistributionFactor.HostControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Flowgate: list[Flowgate] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Flowgate.HostControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredResource: list[RegisteredResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegisteredResource.HostControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SubControlAreas: list[SubControlArea] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SubControlArea.HostControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The interchange area may operate as a control area
    '''
    
    frequencyBiasFactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The control area's frequency bias factor, in MW/0.1 Hz, for automatic
    generation control (AGC)
    '''
    
    areaControlMode: Optional[ AreaControlMode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The area's present control mode: (CF = constant frequency) or (CTL
    = constant tie-line) or (TLB = tie-line bias) or (OFF = off control)
    '''
    
    freqSetPoint: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The present power system frequency set point for automatic generation
    control
    '''
    
    AdjacentCASet: Optional[AdjacentCASet] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AdjacentCASet.HostControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Controls: Optional[ControlAreaOperator] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlAreaOperator.ControlledBy',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A ControlAreaCompany controls a ControlArea.
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.HostControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class HydroPowerPlant(PowerSystemResource):
    '''
    A hydro power station which can generate or pump. When generating, the
    generator turbines receive water from an upper reservoir. When pumping,
    the pumps receive their water from a lower reservoir.
    '''

    HydroGeneratingUnits: list[HydroGeneratingUnit] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'HydroGeneratingUnit.HydroPowerPlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro generating unit belongs to a hydro power plant.
    '''
    
    HydroPumps: list[HydroPump] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'HydroPump.HydroPowerPlant',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro pump may be a member of a pumped storage plant or a pump
    for distributing water.
    '''
    
    penstockType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type and configuration of hydro plant penstock(s).
    '''
    
    surgeTankCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A code describing the type (or absence) of surge tank that is associated
    with the hydro power plant.
    '''
    
    dischargeTravelDelay: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Water travel delay from tailbay to next downstream hydro power station.
    '''
    
    genRatedP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro plant's generating rating active power for rated head conditions.
    The attribute shall be a positive value.
    '''
    
    hydroPlantStorageType: Optional[ HydroPlantStorageKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of hydro power plant water storage.
    '''
    
    plantDischargeCapacity: Optional[ float | VolumeFlowRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total plant discharge capacity.
    '''
    
    plantRatedHead: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The plant's rated gross head.
    The attribute shall be a positive value.
    '''
    
    pumpRatedP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The hydro plant's pumping rating active power for rated head conditions.
    The attribute shall be a positive value.
    '''
    
    surgeTankCrestLevel: Optional[ float | WaterLevel ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The level at which the surge tank spills.
    '''
    
    GenSourcePumpDischargeReservoir: Optional[Reservoir] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Reservoir.UpstreamFromHydroPowerPlants',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generators are supplied water from or pumps discharge water to an upstream
    reservoir.
    '''
    
    Reservoir: Optional[Reservoir] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Reservoir.HydroPowerPlants',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generators discharge water to or pumps are supplied water from a downstream
    reservoir.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class LoadFrequencyControlArea(PowerSystemResource):
    '''
    A part of a synchronous area or an entire synchronous area, physically
    demarcated by points of measurement at interconnectors to other load frequency
    control (LFC) areas, operated by one or more TSOs fulfilling the obligations
    of load-frequency control.
    '''

    TieCorridor: list[TieCorridor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TieCorridor.LoadFrequencyControlArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    TieCorridor controlled by the LoadFrequencyControlArea.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class MonitoringArea(PowerSystemResource):
    '''
    A coherent part of the interconnected electrical power system, that includes
    the system operators' responsibility area and the surrounding parts of
    other system operators' responsibility area, that need to be monitored
    for security assessment.
    '''

    PowerFrequencyController: Optional[PowerFrequencyController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerFrequencyController.MonitoringArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Power frequency controller that applied to this monitoring area.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class OutageCoordinationRegion(PowerSystemResource):
    '''
    A region that has a common organisation or service responsible for outage
    planning and coordination and its impact on grid operation.
    '''

    ControlArea: list[ControlArea] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ControlArea.OutageCoordinationRegion',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The control area that is part of this outage coordination region.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class PowerCutZone(PowerSystemResource):
    '''
    An area or zone of the power system which is used for load shedding purposes.
    '''

    EnergyConsumers: list[EnergyConsumer] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EnergyConsumer.PowerCutZone',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Energy consumer is assigned to the power cut zone.
    '''
    
    cutLevel1: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    First level (amount) of load to cut as a percentage of total zone load.
    '''
    
    cutLevel2: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Second level (amount) of load to cut as a percentage of total zone
    load.
    '''
    
@dataclass(repr=False)
class PowerElectronicsConnectionPhase(PowerSystemResource):
    '''
    A single phase of a power electronics connection.
    '''

    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive
    sign means flow into the equipment from the network.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase of this energy producer component. If the energy producer is
    wye connected, the connection is from the indicated phase to the central
    ground or neutral point. If the energy producer is delta connected,
    the phase indicates an energy producer connected from the indicated
    phase to the next logical non-neutral phase.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive
    sign means flow into the equipment from the network.
    '''
    
    PowerElectronicsConnection: Optional[PowerElectronicsConnection] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsConnection.PowerElectronicsConnectionPhase',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Power electronics connection of this power electronics connection phase.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class PowerTransferCorridor(PowerSystemResource):
    '''
    A power transfer corridor is defined as a set of circuits (transmission
    lines or transformers) separating two portions of the power system, or
    a subset of circuits exposed to a substantial portion of the transmission
    exchange between two parts of the system.
    '''

    OperationalLimitSet: list[OperationalLimitSet] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimitSet.PowerTransferCorridor',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The operational limit set relevant for this power transfer corridor.
    '''
    
    PTCActivePowerSupport: list[PTCActivePowerSupport] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PTCActivePowerSupport.PowerTransferCorridor',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The active power capability associated with this PowerTransferCorridor.
    '''
    
    PinPowerTransferCorridor: list[PinPowerTransferCorridor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinPowerTransferCorridor.PowerTransferCorridor',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The pin that uses this input.
    '''
    
@dataclass(repr=False)
class PrimeMover(PowerSystemResource):
    '''
    The machine used to develop mechanical energy used to drive a generator.
    '''

    primeMoverRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rating of prime mover.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class CombustionTurbine(PrimeMover):
    '''
    A prime mover that is typically fuelled by gas or light oil.
    '''

    AirCompressor: Optional[AirCompressor] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AirCompressor.CombustionTurbine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A CAES air compressor is driven by combustion turbine.
    '''
    
    CTTempActivePowerCurve: Optional[CTTempActivePowerCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CTTempActivePowerCurve.CombustionTurbine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A combustion turbine may have an active power versus ambient temperature
    relationship.
    '''
    
    heatRecoveryFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag that is set to true if the combustion turbine is associated with
    a heat recovery boiler.
    '''
    
    ambientTemp: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Default ambient temperature to be used in modelling applications.
    '''
    
    auxPowerVersusFrequency: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Off-nominal frequency effect on turbine auxiliaries. Per unit reduction
    in auxiliary active power consumption versus per unit reduction in
    frequency (from rated frequency).
    '''
    
    auxPowerVersusVoltage: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Off-nominal voltage effect on turbine auxiliaries. Per unit reduction
    in auxiliary active power consumption versus per unit reduction in
    auxiliary bus voltage (from a specified voltage level).
    '''
    
    capabilityVersusFrequency: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Off-nominal frequency effect on turbine capability. Per unit reduction
    in unit active power capability versus per unit reduction in frequency
    (from rated frequency).
    '''
    
    powerVariationByTemp: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Per unit change in power per (versus) unit change in ambient temperature.
    '''
    
    referenceTemp: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reference temperature at which the output of the turbine was defined.
    '''
    
    timeConstant: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time constant for the turbine.
    '''
    
    AirCompressor: Optional[AirCompressor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AirCompressor.CombustionTurbine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A CAES air compressor is driven by combustion turbine.
    '''
    
    CTTempActivePowerCurve: Optional[CTTempActivePowerCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CTTempActivePowerCurve.CombustionTurbine',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A combustion turbine may have an active power versus ambient temperature
    relationship.
    '''
    
    HeatRecoveryBoiler: Optional[HeatRecoveryBoiler] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HeatRecoveryBoiler.CombustionTurbines',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A combustion turbine may have a heat recovery boiler for making steam.
    '''
    
@dataclass(repr=False)
class HydroTurbine(PrimeMover):
    '''
    A water driven prime mover. Typical turbine types are: Francis, Kaplan,
    and Pelton.
    '''

    gateRateLimit: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Gate rate limit.
    '''
    
    gateUpperLimit: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Gate upper limit.
    '''
    
    maxHeadMaxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum efficiency active power at maximum head conditions.
    '''
    
    minHeadMaxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum efficiency active power at minimum head conditions.
    '''
    
    speedRating: Optional[ float | RotationSpeed ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated speed in number of revolutions. The attribute shall be a positive
    value.
    '''
    
    speedRegulation: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Speed regulation.
    '''
    
    transientDroopTime: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transient droop time constant.
    '''
    
    transientRegulation: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transient regulation.
    '''
    
    turbineRating: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated turbine active power. The attribute shall be a positive value.
    '''
    
    turbineType: Optional[ HydroTurbineKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of turbine.
    '''
    
    waterStartingTime: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Water starting time.
    '''
    
@dataclass(repr=False)
class SteamTurbine(PrimeMover):
    '''
    Steam turbine.
    '''

    shaft1PowerHP: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fraction of power from shaft 1 high pressure turbine output.
    '''
    
    shaft1PowerIP: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fraction of power from shaft 1 intermediate pressure turbine output.
    '''
    
    shaft1PowerLP1: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fraction of power from shaft 1 first low pressure turbine output.
    '''
    
    shaft1PowerLP2: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fraction of power from shaft 1 second low pressure turbine output.
    '''
    
    shaft2PowerHP: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fraction of power from shaft 2 high pressure turbine output.
    '''
    
    shaft2PowerIP: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fraction of power from shaft 2 intermediate pressure turbine output.
    '''
    
    shaft2PowerLP1: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fraction of power from shaft 2 first low pressure turbine output.
    '''
    
    shaft2PowerLP2: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fraction of power from shaft 2 second low pressure turbine output.
    '''
    
    crossoverTC: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Crossover time constant.
    '''
    
    reheater1TC: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    First reheater time constant.
    '''
    
    reheater2TC: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Second reheater time constant.
    '''
    
    steamChestTC: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Steam chest time constant.
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class RegisteredResource(PowerSystemResource):
    '''
    A resource that is registered through the market participant registration
    system. Examples include generating unit, load, and non-physical generator
    or load.
    '''

    ContractDistributionFactor: list[ContractDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContractDistributionFactor.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FormerReference: list[FormerReference] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FormerReference.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    OrgResOwnership: list[OrgResOwnership] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OrgResOwnership.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ResourceCertification: list[ResourceCertification] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ResourceCertification.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    RegisteredResources are qualified for resource ancillary service types
    (which include market product types as well as other types such as
    BlackStart) by the association to the class ResourceAncillaryServiceQualification.
    '''
    
    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceVerifiableCosts.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    SubstitutionResourceList: list[SubstitutionResourceList] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SubstitutionResourceList.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    commercialOpDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resource Commercial Operation Date.
    '''
    
    dispatchable: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Dispatchable: indicates whether the resource is dispatchable. This
    implies that the resource intends to submit Energy bids/offers or Ancillary
    Services bids/offers, or self-provided schedules.
    '''
    
    lastModified: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication of the last time this item was modified/versioned.
    '''
    
    maxBaseSelfSchedQty: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum base self schedule quantity.
    '''
    
    maxOnTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum on time after start up.
    '''
    
    minOffTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum off time after shut down.
    '''
    
    minOnTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum on time after start up.
    '''
    
    ACAFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that this resource is associated with an Adjacent Control
    Area.
    '''
    
    ASSPOptimizationFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that the resource participates in the optimization process
    by default.
    '''
    
    contingencyAvailFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Contingent operating reserve availiability (Yes/No). Resource is availiable
    to participate with capacity in contingency dispatch.
    '''
    
    ECAFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that this resource is associated with an Embedded Control
    area.
    '''
    
    flexibleOfferFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flexible offer flag (Y/N).
    '''
    
    hourlyPredispatch: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates need to dispatch before the start of the operating hour.
    Only relevant in Real-Time Market. Applies to generation, intertie
    and participating load resource. Value (Y/N).
    '''
    
    isAggregatedRes: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A flag to indicate if a resource is an aggregated resource.
    '''
    
    LMPMFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    LMPM flag: indicates whether the resource is subject to the LMPM test
    (Yes/No).
    '''
    
    marketParticipationFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Market Participation flag: indicates whether the resource participate
    in the market.
    '''
    
    minDispatchTime: Optional[ float | Hours ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum number of consecutive hours a resource shall be dispatched
    if bid is accepted.
    '''
    
    mustOfferFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Must offer flag: indicates whether the unit is subject to the must
    offer provisions (Y/N).
    '''
    
    nonMarket: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicate that the Resource is not participating in the Market
    Operations.
    '''
    
    pointOfDeliveryFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that the registered resource is a Point of Delivery (YES)
    resource which implies there is a POD Loss Factor.
    '''
    
    priceSetFlagDA: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Price setting flag: indicates whether a resource is capable of setting
    the Market Clearing Price (Y) for the DA market, and if not, indicates
    whether the resource shall submit bids for energy at $ 0 (S) or not
    (N).
    Initially in the RegisteredGenerator class. It was moved to the RegisteredResource
    class for the participating load dispatch purpose.
    '''
    
    priceSetFlagRT: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Price setting flag: indicates whether a resource is capable of setting
    the Market Clearing Price (Y) for the RT market, and if not, indicates
    whether the resource shall submit bids for energy at $ 0 (S) or not
    (N).
    Initially in the RegisteredGenerator class. It was moved to the RegisteredResource
    class for the participating load dispatch purpose.
    '''
    
    registrationStatus: Optional[ ResourceRegistrationStatus ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current state of the resource registration which describes the lifecycle
    from initial design through to eventual decommissioning.
    '''
    
    resourceAdequacyFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that this resource participates in the resource adequacy
    function.
    '''
    
    SMPMFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    SMPM flag: indicates whether the resource is subject to the SMPM test
    (Yes/No).
    '''
    
    AdjacentCASet: Optional[AdjacentCASet] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AdjacentCASet.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    AggregateNode: Optional[AggregateNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AggregateNode.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An AggregateNode may be associated with up to many RegisteredResources.
    '''
    
    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    DefaultBid: Optional[DefaultBid] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DefaultBid.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    HostControlArea: Optional[HostControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HostControlArea.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MarketParticipant: Optional[MarketParticipant] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MarketParticipant.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Pnode: Optional[Pnode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Pnode.RegisteredResources',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A registered resource injects power at one or more connectivity nodes
    related to a pnode
    '''
    
    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceVerifiableCosts.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RegisteredDistributedResource(RegisteredResource):
    '''
    A registered resource that represents a distributed energy resource, such
    as a micro-generator, fuel cell, photo-voltaic energy source, etc.
    '''

    ResponseMethods: list[ResponseMethod] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ResponseMethod.RegisteredResource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    distributedResourceType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of resource. Examples include: fuel cell, flywheel, photovoltaic,
    micro-turbine, CHP (combined heat power), V2G (vehicle to grid), DES
    (distributed energy storage), and others.
    '''
    
    energyDownRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Response rate in Watts per second for reducing the resource's energy
    production or increasing the resource's energy consumption.
    '''
    
    energyUpRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Response rate in Watts per second for increasing the resource's energy
    production or decreasing the resource's energy consumption.
    '''
    
    loadCriticality: Optional[ PriorityKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Load criticality allows for the prioritization of loads associated
    with distributed resources.
    '''
    
    maximumResponseTime: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time by which the instruction can be reliably executed by the resource.
    Typically, this must be lower than the minimum response time for the
    service.
    '''
    
@dataclass(repr=False)
class RegisteredGenerator(RegisteredResource):
    '''
    Model of a generator that is registered to participate in the market.
    '''

    FuelCostCurve: Optional[FuelCostCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuelCostCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MktHeatRateCurve: Optional[MktHeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktHeatRateCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRHeatRateCurve: Optional[RMRHeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRHeatRateCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRStartUpCostCurve: Optional[RMRStartUpCostCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRStartUpCostCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRStartUpEnergyCurve: Optional[RMRStartUpEnergyCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRStartUpEnergyCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRStartUpFuelCurve: Optional[RMRStartUpFuelCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRStartUpFuelCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRStartUpTimeCurve: Optional[RMRStartUpTimeCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRStartUpTimeCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegulatingLimit: Optional[RegulatingLimit] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegulatingLimit.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    StartUpEnergyCurve: Optional[StartUpEnergyCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartUpEnergyCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    StartUpFuelCurve: Optional[StartUpFuelCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartUpFuelCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    coldStartTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cold start time.
    '''
    
    combinedCycleOperatingMode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Combined Cycle operating mode.
    '''
    
    commericialOperationDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    hotIntTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Hot-to-intermediate time (Seasonal)
    '''
    
    hotStartTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Hot start time.
    '''
    
    intColdTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Intermediate-to-cold time (Seasonal)
    '''
    
    intStartTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Intermediate start time.
    '''
    
    maxShutdownTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum time this device can be shut down.
    '''
    
    maxStartUpsPerDay: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    maximum start ups per day
    '''
    
    maxWeeklyEnergy: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum weekly Energy (Seasonal)
    '''
    
    maxWeeklyStarts: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum weekly starts (seasonal parameter)
    '''
    
    pumpingFactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pumping factor for pump storage units, conversion factor between generating
    and pumping.
    '''
    
    pumpMinDownTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum down time for the pump in a pump storage unit.
    '''
    
    pumpMinUpTime: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum up time aspect for the pump in a pump storage unit
    '''
    
    pumpShutdownCost: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The cost to shutdown a pump during the pump aspect of a pump storage
    unit.
    '''
    
    pumpShutdownTime: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The shutdown time (minutes) of the pump aspect of a pump storage unit.
    '''
    
    resourceSubType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit sub type used by Settlements or scheduling application. Application
    use of the unit sub type may define the necessary types as applicable.
    '''
    
    riverSystem: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    River System the Resource is tied to.
    '''
    
    capacityFactor: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ratio of actual energy produced by resource divided by the maximum
    potential energy if the resource is fully utilized. As an example,
    wind farms.
    '''
    
    constrainedOutputFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Constrained Output Generator (COG) Indicator (Yes/No), per Generating
    Resource
    '''
    
    energyDownRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Response rate in MW per minute for ramping energy down.
    '''
    
    energyUpRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Response rate in MW per minute for ramping energy up.
    '''
    
    extremeLongStart: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Some long-start up time units may need to receive start up instruction
    before DA market results are available. Long-Start resources may be
    either physical resources within the control with start-up times greater
    than 18 hours or the long-start contractual inter-tie commitment that
    shall be completed by 6 am one-day ahead. Therefore, there is a need
    for a process to determine the commitment of such resources before
    the DA market.
    '''
    
    fuelSource: Optional[ FuelSource ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Values: Natural Gas Based Resource, Non Natural Gas Based Resource
    "NG" - Natural-Gas-Based Resource - a Resource that is powered by Natural
    Gas
    "NNG" - Non-Natural-Gas-Based Resource - a Resouce that is powered
    by some other fuel than Natural Gas
    '''
    
    highControlLimit: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High limit for secondary (AGC) control
    '''
    
    loadFollowingDownMSS: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Certifies resources for use in MSS Load Following Down
    '''
    
    loadFollowingUpMSS: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Certifies resources for use in MSS Load Following Up
    '''
    
    lowControlLImit: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Low limit for secondary (AGC) control
    '''
    
    maxDependableCap: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum Dependable Capacity (MNDC). Maximun Net Dependable Capacity
    is used in association with an RMR contract.
    '''
    
    maximumAllowableSpinningReserve: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum allowable spinning reserve. Spinning reserve will never be
    considered greater than this value regardless of the current operating
    point.
    '''
    
    maximumOperatingLimit: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the maximum operating MW limit the dispatcher can enter for
    this unit
    '''
    
    maxMinLoadCost: Optional[ float | CostRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The registered maximum Minimum Load Cost of a Generating Resource registered
    with a Cost Basis of "Bid Cost".
    '''
    
    maxPumpingLevel: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    max pumping level of a hydro pump unit
    '''
    
    minimumLoadCostBasis: Optional[ CostBasis ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The cost basis for minimum load.
    '''
    
    minimumLoadFuelCost: Optional[ float | CostPerHeatUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The cost for the fuel required to get a Generating Resource to operate
    at the minimum load level
    '''
    
    minimumOperatingLimit: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the minimum operating MW limit the dispatcher can enter for
    this unit.
    '''
    
    minLoadCost: Optional[ float | CostRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    minimum load cost. Value is (currency/hr)
    '''
    
    mustOfferRA: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicate that this unit is a resource adequacy resource and
    must offer.
    '''
    
    nameplateCapacity: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    MW value stated on the nameplate of the Generator -- the value it potentially
    could provide.
    '''
    
    operatingMaintenanceCost: Optional[ float | CostPerEnergyUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The portion of the Operating Cost of a Generating Resource that is
    not related to fuel cost.
    '''
    
    pumpingCost: Optional[ float | CostRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    quickStartFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Quick start flag (Yes/No). Identifies the registered generator as a
    quick start unit. A quick start unit is a unit that has the ability
    to be available for load within a 30 minute period.
    '''
    
    rampCurveType: Optional[ RampCurveType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ramp curve type. Identifies the type of curve which may be a fixed,
    static or dynamic.
    '''
    
    regulationDownRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Regulation down response rate in MW per minute
    '''
    
    regulationFlag: Optional[ UnitRegulationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies if the unit is regulating or not regulating or expected to
    be regulating but is not.
    '''
    
    regulationUpRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Regulation up response rate in MW per minute.
    '''
    
    RMNRFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reliability must not run (RMNR) flag: indicated whether the RMR unit
    is set as an RMNR in the current market
    '''
    
    RMRFlag: Optional[ FlagTypeRMR ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reliability must run (RMR) flag: indicates whether the unit is RMR;
    Indicates whether the unit is RMR:
    N' - not an RMR unit
    '1' - RMR Condition 1 unit
    '2' - RMR Condition 2 unit
    '''
    
    RMRManualIndicator: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the RMR Manual pre-determination status [Y/N]
    '''
    
    RMTFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reliability must take (RMT) flag (Yes/No): indicates whether the unit
    is RMT
    '''
    
    spinRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Response rate in MW per minute for spinning reserve.
    '''
    
    startUpCostBasis: Optional[ CostBasis ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The cost basis for start up.
    '''
    
    syncCondCapable: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is the Resource Synchronous Condenser capable Resource?
    '''
    
    unitType: Optional[ UnitType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generating unit type: Combined Cycle, Gas Turbine, Hydro Turbine, Other,
    Photovoltaic, Hydro Pump-Turbine, Reciprocating Engine, Steam Turbine,
    Synchronous Condenser, Wind Turbine
    '''
    
    useLimitFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Use limit flag: indicates if the use-limited resource is fully scheduled
    (or has some slack for real-time dispatch) (Y/N)
    '''
    
    variableEnergyResource: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Provides an indication that this resource is intending to participate
    in an intermittent resource program.
    '''
    
    EnergyPriceIndex: Optional[EnergyPriceIndex] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergyPriceIndex.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FuelCostCurve: Optional[FuelCostCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuelCostCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FuelRegion: Optional[FuelRegion] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuelRegion.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    LocalReliabilityArea: Optional[LocalReliabilityArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LocalReliabilityArea.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MktHeatRateCurve: Optional[MktHeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktHeatRateCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegulatingLimit: Optional[RegulatingLimit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegulatingLimit.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRHeatRateCurve: Optional[RMRHeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRHeatRateCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRStartUpCostCurve: Optional[RMRStartUpCostCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRStartUpCostCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRStartUpEnergyCurve: Optional[RMRStartUpEnergyCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRStartUpEnergyCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRStartUpFuelCurve: Optional[RMRStartUpFuelCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRStartUpFuelCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RMRStartUpTimeCurve: Optional[RMRStartUpTimeCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RMRStartUpTimeCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    StartUpEnergyCurve: Optional[StartUpEnergyCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartUpEnergyCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    StartUpFuelCurve: Optional[StartUpFuelCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartUpFuelCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    StartUpTimeCurve: Optional[StartUpTimeCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartUpTimeCurve.RegisteredGenerator',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CombinedCycleConfiguration(RegisteredGenerator):
    '''
    Configuration options for combined cycle units.
    For example, a Combined Cycle with (CT1, CT2, ST1) will have (CT1, ST1)
    and (CT2, ST1) configurations as part of(1CT + 1STlogicalconfiguration).
    '''

    CombinedCycleConfigurationMember: list[CombinedCycleConfigurationMember] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CombinedCycleConfigurationMember.CombinedCycleConfiguration',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    FromTransitionState: list[CombinedCycleTransitionState] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CombinedCycleTransitionState.FromConfiguration',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ToTransitionState: list[CombinedCycleTransitionState] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CombinedCycleTransitionState.ToConfiguration',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    primaryConfiguration: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Whether this CombinedCycleConfiguration is the primary configuration
    in the associated Logical configuration?
    '''
    
    ShutdownFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Whether Combined Cycle Plant can be shut-down in this Configuration?
    '''
    
    StartupFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Whether Combined Cycle Plant can be started in this Logical Configuration?
    '''
    
    CombinedCycleLogicalConfiguration: Optional[CombinedCycleLogicalConfiguration] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CombinedCycleLogicalConfiguration.CombinedCycleConfiguration',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RegisteredInterTie(RegisteredResource):
    '''
    This class represents the inter tie resource.
    '''

    minHourlyBlockLimit: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The registered upper bound of minimum hourly block for an Inter-Tie
    Resource.
    '''
    
    direction: Optional[ InterTieDirection ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the direction (export/import) of an InterTie resource.
    '''
    
    energyProductType: Optional[ EnergyProductType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Under each major product type, the commodity type can be applied to
    further specify the type.
    '''
    
    isDCTie: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicated whether this Inter-tie is a DC Tie.
    '''
    
    isDynamicInterchange: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies whether the inter-tie resource is registered for the dynamic
    interchange.
    '''
    
    Flowgate: Optional[Flowgate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Flowgate.RegisteredInterTie',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    InterTieBid: Optional[InterTieBid] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InterTieBid.RegisteredInterTie',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RegisteredLoad(RegisteredResource):
    '''
    Model of a load that is registered to participate in the market.
    RegisteredLoad is used to model any load that is served by the wholesale
    market directly. RegisteredLoads may be dispatchable or non-dispatchable
    and may or may not have bid curves. Examples of RegisteredLoads would include:
    distribution company load, energy retailer load, large bulk power system
    connected facility load.
    Loads that are served indirectly, for example - through an energy retailer
    or a vertical utility, should be modeled as RegisteredDistributedResources.
    Examples of RegisteredDistributedResources would include: distribution
    level storage, distribution level generation and distribution level demand
    response.
    '''

    blockLoadTransfer: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Emergency operating procedure - Flag to indicate that the Resource
    is Block Load pseudo resource.
    '''
    
    dynamicallyScheduledLoadResource: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to indicate that a Load Resource is part of a DSR Load
    '''
    
    dynamicallyScheduledQualification: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Qualification status (used for DSR qualification).
    '''
    
@dataclass(repr=False)
class RegulatingControl(PowerSystemResource):
    '''
    Specifies a set of equipment that works together to control a power system
    quantity such as voltage or flow.
    Remote bus voltage control is possible by specifying the controlled terminal
    located at some place remote from the controlling equipment.
    The specified terminal shall be associated with the connectivity node of
    the controlled point. The most specific subtype of RegulatingControl shall
    be used in case such equipment participate in the control, e.g. TapChangerControl
    for tap changers.
    For flow control, load sign convention is used, i.e. positive sign means
    flow out from a TopologicalNode (bus) into the conducting equipment.
    The attribute minAllowedTargetValue and maxAllowedTargetValue are required
    in the following cases:
    - For a power generating module operated in power factor control mode to
    specify maximum and minimum power factor values;
    - Whenever it is necessary to have an off center target voltage for the
    tap changer regulator. For instance, due to long cables to off shore wind
    farms and the need to have a simpler setup at the off shore transformer
    platform, the voltage is controlled from the land at the connection point
    for the off shore wind farm. Since there usually is a voltage rise along
    the cable, there is typical and overvoltage of up 3 to 4 kV compared to
    the on shore station. Thus in normal operation the tap changer on the on
    shore station is operated with a target set point, which is in the lower
    parts of the dead band.
    The attributes minAllowedTargetValue and maxAllowedTargetValue are not
    related to the attribute targetDeadband and thus they are not treated as
    an alternative of the targetDeadband. They are needed due to limitations
    in the local substation controller. The attribute targetDeadband is used
    to prevent the power flow from moving the tap position in circles (hunting)
    that is to be used regardless of the attributes minAllowedTargetValue and
    maxAllowedTargetValue.
    '''

    RegulatingCondEq: list[RegulatingCondEq] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegulatingCondEq.RegulatingControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The equipment that participates in this regulating control scheme.
    '''
    
    RegulationSchedule: list[RegulationSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RegulationSchedule.RegulatingControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Schedule for this regulating control.
    '''
    
    discrete: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, indicates that regulation is performed in the simulation in
    a discrete mode. If false, indicates that non-discrete regulation is
    used in the simulation. This applies to equipment with discrete controls,
    e.g. tap changers and shunt compensators.
    '''
    
    enabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The flag tells if regulation is enabled.
    '''
    
    maxAllowedTargetValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum allowed target value. See also RegulatingControl description.
    '''
    
    minAllowedTargetValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum allowed target value. See also RegulatingControl description.
    '''
    
    targetDeadband: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This is the deadband set on the controller. It is used with discrete
    control to avoid excessive tap changes in tap changers and state changes
    in shunt compensator banks while regulating. The units in which deadband
    is expressed are based on RegulatingControl.mode. The attribute shall
    be a positive value or zero. If RegulatingControl.discrete is set to
    "false", the RegulatingControl.targetDeadband is to be ignored in simulations.
    If TapChanger.ctRatio or TapChanger.ptRatio are populated, deadband
    shall be expressed in secondary units.
    Note that for instance, if the targetValue is 100 kV and the targetDeadband
    is 2 kV the range is from 99 to 101 kV.
    '''
    
    targetValue: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The target value set on the controller. It is the starting value for
    a steady state solution. This value can be used for the target value
    without the use of schedules. The value has the units appropriate to
    the mode attribute.
    If used for a TapChangerControl and if TapChanger.ctRatio or TapChanger.ptRatio
    are populated, the target value shall be expressed in secondary units.
    As an example, with PT ratio of 60 on a 12.47 KV distribution system,
    a phase to ground PT has a ratio of 7200 volts primary to 120 volts
    secondary. If the required primary target is 7128 volts for a single
    phase tap changer then the value of targetValue would equal 118.8 volts
    secondary (7128/60).
    '''
    
    mode: Optional[ RegulatingControlModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The regulating control mode presently available. This specification
    allows for determining the kind of regulation without need for obtaining
    the units from a schedule.
    '''
    
    monitoredPhase: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase voltage controlling this regulator, measured at regulator location.
    '''
    
    targetValueUnitMultiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the multiplier used for the targetValue, targetDeadband,
    .maxAllowedTargetValue, .minAllowedTargetValue as well as TapChangerControl.maxLimitVoltage
    and TapChangerControl.minLimitVoltage.
    '''
    
    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.RegulatingControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal associated with this regulating control. The terminal
    is associated instead of a node, since the terminal could connect into
    either a topological node or a connectivity node. Sometimes it is useful
    to model regulation at a terminal of a bus bar object.
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class ShuntCompensatorControl(RegulatingControl):
    '''
    Distribution capacitor bank control settings.
    '''

    ShuntCompensatorInfo: Optional[ShuntCompensatorInfo] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShuntCompensatorInfo.ShuntCompensatorControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class TapChangerControl(RegulatingControl):
    '''
    Describes behaviour specific to tap changers, e.g. how the voltage at the
    end of a line varies with the load level and compensation of the voltage
    drop by tap adjustment. When TapChanger.ctRatio and .ptRatio are present,
    RegulatingControl.targetVoltage RegulatingControl.targetDeadband, RegulatingControl.maxAllowedTargetValue,
    RegulatingControl.minAllowedTargetValue as well as TapChangerControl.maxLimitVoltage
    and TapChangerControl.minLimitVoltage shall be expressed in terms of secondary
    CT currents and PT voltages.
    '''

    TapChanger: list[TapChanger] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TapChanger.TapChangerControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap changers that participates in this regulating tap control scheme.
    '''
    
    lineDropCompensation: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, the line drop compensation is to be applied.
    '''
    
    reverseToNeutral: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    reversible: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    lineDropR: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Line drop compensator resistance setting for normal (forward) power
    flow.
    '''
    
    lineDropX: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Line drop compensator reactance setting for normal (forward) power
    flow.
    '''
    
    maxLimitVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum allowed regulated voltage on the PT secondary. This is the
    locally measured secondary voltage, including the effect of any line
    drop compensation. Typically used for distribution circuit voltage
    regulator. Sometimes referred to as first-house protection. If utilized,
    then TapChanger.ptRatio must be supplied.
    '''
    
    minLimitVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum allowed regulated voltage on the PT secondary. This is the
    locally measured secondary voltage, including the effect of any line
    drop compensation. Typically used for distribution circuit voltage
    regulator. Sometimes referred to as last-house protection. If utilized,
    then TapChanger.ptRatio must be supplied.
    '''
    
    reverseLineDropR: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Line drop compensator resistance setting for reverse power flow.
    '''
    
    reverseLineDropX: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Line drop compensator reactance setting for reverse power flow.
    '''
    
    reverseTargetDeadband: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    reverseTargetValue: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    reversingDelay: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    reversingPowerThreshold: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class RemedialActionScheme(PowerSystemResource):
    '''
    Remedial Action Scheme (RAS), Special Protection Schemes (SPS), System
    Protection Schemes (SPS) or System Integrity Protection Schemes (SIPS).
    A Remedial Action Scheme consists of one or more stages that can trigger
    and execute a protection action.
    '''

    PTCActivePowerSupport: list[PTCActivePowerSupport] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PTCActivePowerSupport.RemedialActionScheme',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power support of the PowerTransferCorridor related to this
    RemedialActionScheme.
    '''
    
    Stage: list[Stage] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Stage.RemedialActionScheme',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The stage for this remedial action scheme.
    '''
    
    TriggerCondition: list[TriggerCondition] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TriggerCondition.RemedialActionScheme',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The triggering condition of this Remedial Action Scheme.
    '''
    
    armed: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Defines the arming status of the remedial action scheme. It is set
    by operation or by signal.
    '''
    
    inService: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the availability of the Remedial Action Scheme (RAS). If
    true, the RAS is available for contingency processing. If false, the
    RAS is treated by contingency processing as if it is not in the model.
    '''
    
    normalArmed: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Defines the normal arming status of the remedial action scheme.
    '''
    
    kind: Optional[ RemedialActionSchemeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of Remedial Action Scheme.
    '''
    
    GateArmed: Optional[Gate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Gate.RemedialActionScheme',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Gate that through a gate logic and input pin defines arming of a Remedial
    Action Scheme.
    '''
    
    SchemeRemedialAction: Optional[SchemeRemedialAction] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SchemeRemedialAction.RemedialActionScheme',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Scheme remedial action that belongs to the remedial action scheme.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class RemoteUnit(PowerSystemResource):
    '''
    A remote unit can be an RTU, IED, substation control system, control centre,
    etc. The communication with the remote unit can be through various standard
    protocols (e.g. IEC 61870, IEC 61850) or non standard protocols (e.g. DNP,
    RP570, etc.). A remote unit contains remote data points that might be telemetered,
    collected or calculated. The RemoteUnit class inherits PowerSystemResource.
    The intention is to allow RemoteUnits to have Measurements. These Measurements
    can be used to model unit status as operational, out of service, unit failure,
    etc.
    '''

    RemotePoints: list[RemotePoint] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RemotePoint.RemoteUnit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Remote points this Remote unit contains.
    '''
    
    remoteUnitType: Optional[ RemoteUnitType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of remote unit.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class Reservoir(PowerSystemResource):
    '''
    A water storage facility within a hydro system, including: ponds, lakes,
    lagoons, and rivers. The storage is usually behind some type of dam.
    '''

    UpstreamFromHydroPowerPlants: list[HydroPowerPlant] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'HydroPowerPlant.GenSourcePumpDischargeReservoir',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generators are supplied water from or pumps discharge water to an upstream
    reservoir.
    '''
    
    HydroPowerPlants: list[HydroPowerPlant] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'HydroPowerPlant.Reservoir',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Generators discharge water to or pumps are supplied water from a downstream
    reservoir.
    '''
    
    InflowForecasts: list[InflowForecast] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'InflowForecast.Reservoir',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may have a "natural" inflow forecast.
    '''
    
    LevelVsVolumeCurves: list[LevelVsVolumeCurve] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'LevelVsVolumeCurve.Reservoir',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may have a level versus volume relationship.
    '''
    
    SpillsIntoReservoirs: list[Reservoir] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Reservoir.SpillsFromReservoir',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may spill into a downstream reservoir.
    '''
    
    TargetLevelSchedule: Optional[TargetLevelSchedule] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TargetLevelSchedule.Reservoir',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may have a water level target schedule.
    '''
    
    energyStorageRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reservoir's energy storage rating in energy for given head conditions.
    '''
    
    riverOutletWorks: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    River outlet works for riparian right releases or other purposes.
    '''
    
    spillwayCapacity: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The flow capacity of the spillway in cubic meters per second.
    '''
    
    spillWayGateType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of spillway gate, including parameters.
    '''
    
    activeStorageCapacity: Optional[ float | Volume ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Storage volume between the full supply level and the normal minimum
    operating level.
    '''
    
    energyStorage: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'NC Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Amount of energy available in the storage.
    '''
    
    fullSupplyLevel: Optional[ float | WaterLevel ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Full supply level, above which water will spill. This can be the spillway
    crest level or the top of closed gates.
    '''
    
    grossCapacity: Optional[ float | Volume ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total capacity of reservoir.
    '''
    
    normalMinOperateLevel: Optional[ float | WaterLevel ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal minimum operating level below which the penstocks will draw
    air.
    '''
    
    spillTravelDelay: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The spillway water travel delay to the next downstream reservoir.
    '''
    
    spillwayCrestLength: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The length of the spillway crest.
    '''
    
    spillwayCrestLevel: Optional[ float | WaterLevel ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Spillway crest level above which water will spill.
    '''
    
    SpillsFromReservoir: Optional[Reservoir] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Reservoir.SpillsIntoReservoirs',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may spill into a downstream reservoir.
    '''
    
    TargetLevelSchedule: Optional[TargetLevelSchedule] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TargetLevelSchedule.Reservoir',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A reservoir may have a water level target schedule.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class ScheduleResource(PowerSystemResource):
    '''
    A schedule resource is a market-based method for handling participation
    of small units, particularly located on the lower voltage level that is
    controlled by a Distributed System Operator (DSO). It is a collection of
    units that can operate in the market by providing bids, offers and a resulting
    committed operational schedule for the collection.
    '''

    GeneratingUnit: list[GeneratingUnit] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'GeneratingUnit.ScheduleResource',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The generating unit that relates to this schedule resource.
    '''
    
    HydroPump: list[HydroPump] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'HydroPump.ScheduleResource',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The hydro pump that relates to this schedule resource.
    '''
    
    PowerElectronicsUnit: list[PowerElectronicsUnit] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsUnit.ScheduleResource',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The power electronics unit that relates to this schedule resource.
    '''
    
    ScheduleResourceController: Optional[ScheduleResourceController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ScheduleResourceController.ScheduleResource',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Schedule resource controller for this schedule resource.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class SchedulingArea(PowerSystemResource):
    '''
    An area where production and/or consumption of energy can be forecasted,
    scheduled and measured. The area is operated by only one system operator,
    typically a Transmission System Operator (TSO). The area can consist of
    a sub area, which has the same definition as the main area, but it can
    be operated by another system operator (typically Distributed System Operator
    (DSO) or a Closed Distributed System Operator (CDSO)). This includes microgrid
    concept. A substation is the smallest grouping that can be included in
    the area. The area size should be considered in terms of the possibility
    of accumulated reading (settlement metering) and the capability of operating
    as an island.
    '''

    DCTieCorridor: Optional[DCTieCorridor] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTieCorridor.SchedulingArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The DC tie corridor that is part of this scheduling area.
    '''
    
    Line: list[Line] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Line.SchedulingArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The line that is part of this scheduling area.
    '''
    
    Substation: list[Substation] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Substation.SchedulingArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The substation that is part of this scheduling area.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class SubSchedulingArea(SchedulingArea):
    '''
    An area that is a part of another scheduling area. Typically part of a
    Transmission System Operator (TSO) scheduling area operated by a Distributed
    System Operator (DSO) or a Close Distributed System Operator (CDSO). This
    includes microgrid concept. A sub scheduling area can contain other sub
    areas. A sub scheduling area leaf will form the smallest entity of any
    given energy area.
    '''

    ContainedEquipment: list[Equipment] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Equipment.SubSchedulingArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    '''
    
    Feeder: list[Feeder] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Feeder.SubSchedulingArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The feeder that is part of this subscheduling area.
    '''
    
    BoundaryTerminals: list[Terminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Terminal.BoundedSchedulingArea',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ShuntCompensatorPhase(PowerSystemResource):
    '''
    Single phase of a multi-phase shunt compensator when its attributes might
    be different per phase.
    '''

    maximumSections: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum number of sections that may be switched in for this phase.
    '''
    
    normalSections: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    For the capacitor phase, the normal number of sections switched in.
    The value shall be between zero and ShuntCompensatorPhase.maximumSections.
    '''
    
    sections: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Shunt compensator sections in use. Starting value for steady state
    solution. The attribute shall be a positive value or zero. Non integer
    values are allowed to support continuous variables. The reasons for
    continuous value are to support study cases where no discrete shunt
    compensators has yet been designed, a solutions where a narrow voltage
    band force the sections to oscillate or accommodate for a continuous
    solution as input.
    For LinearShuntConpensator the value shall be between zero and ShuntCompensatorPhase.maximumSections.
    At value zero the shunt compensator conductance and admittance is zero.
    Linear interpolation of conductance and admittance between the previous
    and next integer section is applied in case of non-integer values.
    For NonlinearShuntCompensator-s shall only be set to one of the NonlinearShuntCompenstorPhasePoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPhasePoint-s.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase of this shunt compensator component. If the shunt compensator
    is wye connected, the connection is from the indicated phase to the
    central ground or neutral point. If the shunt compensator is delta
    connected, the phase indicates a shunt compensator connected from the
    indicated phase to the next logical non-neutral phase.
    '''
    
    ShuntCompensator: Optional[ShuntCompensator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShuntCompensator.ShuntCompensatorPhase',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Shunt compensator of this shunt compensator phase.
    '''
    
@dataclass(repr=False)
class LinearShuntCompensatorPhase(ShuntCompensatorPhase):
    '''
    A per phase linear shunt compensator has banks or sections with equal admittance
    values.
    '''

    bPerSection: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Susceptance per section of the phase if shunt compensator is wye connected.
    Susceptance per section phase to phase if shunt compensator is delta
    connected.
    '''
    
    gPerSection: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conductance per section for this phase if shunt compensator is wye
    connected. Conductance per section phase to phase if shunt compensator
    is delta connected.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class NonlinearShuntCompensatorPhase(ShuntCompensatorPhase):
    '''
    A per phase non linear shunt compensator has bank or section admittance
    values that differ. The attributes gTotal and bTotal of the associated
    NonlinearShuntCompensatorPhasePoint describe the total conductance and
    admittance of a NonlinearShuntCompensatorPhasePoint at a section number
    specified by NonlinearShuntCompensatorPhasePoint.sectionNumber.
    '''

    NonlinearShuntCompensatorPhasePoints: list[NonlinearShuntCompensatorPhasePoint] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'NonlinearShuntCompensatorPhasePoint.NonlinearShuntCompensatorPhase',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All points of the non-linear shunt compensator phase.
    '''
    
@stereotype(CIMStereotype.European)
@dataclass(repr=False)
class SolarPowerPlant(PowerSystemResource):
    '''
    Solar power plant.
    '''

    SolarGeneratingUnits: list[SolarGeneratingUnit] = field(
        default_factory=list,
        metadata={
        'type': 'European',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SolarGeneratingUnit.SolarPowerPlant',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    A solar generating unit or units may be a member of a solar power plant.
    '''
    
@dataclass(repr=False)
class StageTrigger(PowerSystemResource):
    '''
    Stage that is triggered either by TriggerCondition or by gate condition
    within a stage.
    '''

    armed: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The status of the class set by operation or by signal. Optional field
    that will override other status fields.
    '''
    
    inService: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates if the stage trigger is in service.
    '''
    
    normalArmed: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The default/normal value used when other active signal/values are missing.
    '''
    
    priority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority of trigger. 0 = don t care (default) 1 = highest priority.
    2 is less than 1 and so on. A trigger with the highest priority will
    trigger first.
    '''
    
    GateArmed: Optional[Gate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Gate.StageTriggerArmed',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The gate that is the input pin which defines arming of the StageTrigger.
    '''
    
    GateComCondition: Optional[Gate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Gate.StageTriggerCom',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The gate that is the input pin which defines a communication condition.
    '''
    
    GateTrigger: Optional[Gate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Gate.StageTrigger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The gate that is the input pin which triggers the protective reactions.
    '''
    
    Stage: Optional[Stage] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Stage.StageTrigger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The stage that has this stage trigger.
    '''
    
@dataclass(repr=False)
class SteamSupply(PowerSystemResource):
    '''
    Steam supply for steam turbine.
    '''

    steamSupplyRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rating of steam supply.
    '''
    
@dataclass(repr=False)
class BWRSteamSupply(SteamSupply):
    '''
    Boiling water reactor used as a steam supply to a steam turbine.
    '''

    integralGain: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Integral gain.
    '''
    
    pressureSetpointGA: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure setpoint gain adjuster.
    '''
    
    proportionalGain: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Proportional gain.
    '''
    
    rodPatternConstant: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Constant associated with rod pattern.
    '''
    
    highPowerLimit: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High power limit.
    '''
    
    inCoreThermalTC: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    In-core thermal time constant.
    '''
    
    lowerLimit: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Initial lower limit.
    '''
    
    lowPowerLimit: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Low power limit.
    '''
    
    pressureLimit: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure limit.
    '''
    
    pressureSetpointTC1: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure setpoint time constant.
    '''
    
    pressureSetpointTC2: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure setpoint time constant.
    '''
    
    rfAux1: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    
    rfAux2: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    
    rfAux3: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    
    rfAux4: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    
    rfAux5: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    
    rfAux6: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    
    rfAux7: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    
    rfAux8: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    
    rodPattern: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rod pattern.
    '''
    
    upperLimit: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Initial upper limit.
    '''
    
@dataclass(repr=False)
class FossilSteamSupply(SteamSupply):
    '''
    Fossil fuelled boiler (e.g., coal, oil, gas).
    '''

    controlErrorBiasP: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power error bias ratio.
    '''
    
    controlIC: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Integral constant.
    '''
    
    controlPC: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Proportional constant.
    '''
    
    controlPEB: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure error bias ratio.
    '''
    
    controlTC: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time constant.
    '''
    
    feedWaterIG: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Feedwater integral gain ratio.
    '''
    
    feedWaterPG: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Feedwater proportional gain ratio.
    '''
    
    maxErrorRateP: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power maximum error rate limit.
    '''
    
    minErrorRateP: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power minimum error rate limit.
    '''
    
    pressureCtrlDG: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure control derivative gain ratio.
    '''
    
    pressureCtrlIG: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure control integral gain ratio.
    '''
    
    pressureCtrlPG: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure control proportional gain ratio.
    '''
    
    pressureFeedback: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure feedback indicator.
    '''
    
    superHeater1Capacity: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Drum/primary superheater capacity.
    '''
    
    superHeater2Capacity: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Secondary superheater capacity.
    '''
    
    superHeaterPipePD: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Superheater pipe pressure drop constant.
    '''
    
    auxPowerVersusFrequency: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Off nominal frequency effect on auxiliary real power. Per unit active
    power variation versus per unit frequency variation.
    '''
    
    auxPowerVersusVoltage: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Off nominal voltage effect on auxiliary real power. Per unit active
    power variation versus per unit voltage variation.
    '''
    
    boilerControlMode: Optional[ BoilerControlMode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The control mode of the boiler.
    '''
    
    controlPED: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure error deadband.
    '''
    
    feedWaterTC: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Feedwater time constant ratio.
    '''
    
    fuelDemandLimit: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fuel demand limit.
    '''
    
    fuelSupplyDelay: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fuel delay.
    '''
    
    fuelSupplyTC: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fuel supply time constant.
    '''
    
    mechPowerSensorLag: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Mechanical power sensor lag.
    '''
    
    throttlePressureSP: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Throttle pressure setpoint.
    '''
    
@dataclass(repr=False)
class DrumBoiler(FossilSteamSupply):
    '''
    Drum boiler.
    '''

    drumBoilerRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rating of drum boiler in steam units.
    '''
    
@dataclass(repr=False)
class HeatRecoveryBoiler(FossilSteamSupply):
    '''
    The heat recovery system associated with combustion turbines in order to
    produce steam for combined cycle plants.
    '''

    CombustionTurbines: list[CombustionTurbine] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CombustionTurbine.HeatRecoveryBoiler',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A combustion turbine may have a heat recovery boiler for making steam.
    '''
    
    steamSupplyRating2: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The steam supply rating in kilopounds per hour, if dual pressure boiler.
    '''
    
@dataclass(repr=False)
class Subcritical(FossilSteamSupply):
    '''
    Once-through subcritical boiler.
    '''

@dataclass(repr=False)
class Supercritical(FossilSteamSupply):
    '''
    Once-through supercritical boiler.
    '''

@dataclass(repr=False)
class PWRSteamSupply(SteamSupply):
    '''
    Pressurized water reactor used as a steam supply to a steam turbine.
    '''

    coldLegFBLagTC: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cold leg feedback lag time constant.
    '''
    
    coldLegFBLeadTC1: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cold leg feedback lead time constant.
    '''
    
    coldLegFBLeadTC2: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cold leg feedback lead time constant.
    '''
    
    coldLegFG1: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cold leg feedback gain 1.
    '''
    
    coldLegFG2: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cold leg feedback gain 2.
    '''
    
    coldLegLagTC: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cold leg lag time constant.
    '''
    
    coreHTLagTC1: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Core heat transfer lag time constant.
    '''
    
    coreHTLagTC2: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Core heat transfer lag time constant.
    '''
    
    coreNeutronicsEffTC: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Core neutronics effective time constant.
    '''
    
    coreNeutronicsHT: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Core neutronics and heat transfer.
    '''
    
    feedbackFactor: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Feedback factor.
    '''
    
    hotLegLagTC: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Hot leg lag time constant.
    '''
    
    hotLegSteamGain: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Hot leg steam gain.
    '''
    
    hotLegToColdLegGain: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Hot leg to cold leg gain.
    '''
    
    pressureCG: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pressure control gain.
    '''
    
    steamFlowFG: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Steam flow feedback gain.
    '''
    
    steamPressureDropLagTC: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Steam pressure drop lag time constant.
    '''
    
    steamPressureFG: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Steam pressure feedback gain.
    '''
    
    throttlePressureFactor: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Throttle pressure factor.
    '''
    
    throttlePressureSP: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Throttle pressure setpoint.
    '''
    
@dataclass(repr=False)
class SubControlArea(PowerSystemResource):
    '''
    An area defined for the purpose of tracking interchange with surrounding
    areas via tie points; may or may not serve as a control area.
    '''

    CnodeDistributionFactor: list[CnodeDistributionFactor] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CnodeDistributionFactor.SubControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    From_Flowgate: list[Flowgate] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Flowgate.From_SubControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    To_Flowgate: list[Flowgate] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Flowgate.To_SubControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Pnode: list[Pnode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Pnode.SubControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    areaShortName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Market area short name, which is the regulation zone. It references
    AGC regulation zone name.
    '''
    
    constantCoefficient: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Loss estimate constant coefficient
    '''
    
    linearCoefficient: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Loss estimate linear coefficient
    '''
    
    maxSelfSchedMW: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum amount of self schedule MWs allowed for an embedded control
    area.
    '''
    
    minSelfSchedMW: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum amount of self schedule MW allowed for an embedded control
    area.
    '''
    
    quadraticCoefficient: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Loss estimate quadratic coefficient
    '''
    
    embeddedControlArea: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used in conjunction with the InternalCA flag. If the InternalCA flag
    is YES, this flag does not apply. If the InternaCA flag is NO, this
    flag provides an indication of AdjacentCA (NO) or Embedded CA (YES).
    '''
    
    internalCA: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A Yes/No indication that this control area is contained internal to
    the system.
    '''
    
    localCA: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that this control area is the local control area.
    '''
    
    AdjacentCASet: Optional[AdjacentCASet] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AdjacentCASet.SubControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    AreaReserveSpecification: Optional[AreaReserveSpec] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AreaReserveSpec.SubControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    HostControlArea: Optional[HostControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'HostControlArea.SubControlAreas',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The interchange area may operate as a control area
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.SubControlArea',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class SwitchPhase(PowerSystemResource):
    '''
    Single phase of a multi-phase switch when its attributes might be different
    per phase.
    '''

    closed: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The attribute tells if the switch is considered closed when used as
    input to topology processing.
    '''
    
    normalOpen: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used in cases when no Measurement for the status value is present.
    If the SwitchPhase has a status measurement the Discrete.normalValue
    is expected to match with this value.
    '''
    
    phaseSide1: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase of this SwitchPhase on the side with terminal sequence number
    equal to 1. Should be a phase contained in that terminal's phases attribute.
    '''
    
    phaseSide2: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase of this SwitchPhase on the side with terminal sequence number
    equal to 2. Should be a phase contained in that terminal's Terminal.phases
    attribute.
    '''
    
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum continuous current carrying capacity in amps governed by
    the device material and construction.
    The attribute shall be a positive value.
    '''
    
    Switch: Optional[Switch] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Switch.SwitchPhase',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The switch of the switch phase.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class TapChanger(PowerSystemResource):
    '''
    Mechanism for changing transformer winding tap positions.
    '''

    StepOperationalLimitTable: list[StepOperationalLimitTable] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StepOperationalLimitTable.TapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The step operational limit table for this tap changer.
    '''
    
    SvTapStep: Optional[SvTapStep] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SvTapStep.TapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap step state associated with the tap changer.
    '''
    
    TapSchedule: list[TapSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TapSchedule.TapChanger',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Tap schedule associated with a tap changer.
    '''
    
    controlEnabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the regulation status of the equipment. True is regulating,
    false is not regulating.
    '''
    
    ctRating: Optional[float] = field(
        default=None,
        metadata={
        'type': 'gmdm Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    ctRatio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Built-in current transformer ratio. If a value is specified, then RegulatingControl.targetValue
    (and RegulatingControl.targetDeadband, RegulatingControl.maxAllowedTargetValue
    and RegulatingControl.minAllowedTargetValue) are expressed in secondary
    units.
    '''
    
    highStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Highest possible tap step position, advance from neutral.
    The attribute shall be greater than lowStep.
    '''
    
    lowStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Lowest possible tap step position, retard from neutral.
    '''
    
    ltcFlag: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies whether or not a TapChanger has load tap changing capabilities.
    '''
    
    neutralStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The neutral tap step position for this winding.
    The attribute shall be equal to or greater than lowStep and equal or
    less than highStep.
    It is the step position where the voltage is neutralU when the other
    terminals of the transformer are at the ratedU. If there are other
    tap changers on the transformer those taps are kept constant at their
    neutralStep.
    '''
    
    normalStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap step position used in "normal" network operation for this winding.
    For a "Fixed" tap changer indicates the current physical tap setting.
    The attribute shall be equal to or greater than lowStep and equal to
    or less than highStep.
    '''
    
    ptRatio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Built-in potential (voltage) transformer ratio. If a value is specified,
    then RegulatingControl.targetValue (and RegulatingControl.targetDeadband,
    RegulatingControl.maxAllowedTargetValue, RegulatingControl.minAllowedTargetValue
    as well as TapChangerControl.maxLimitVoltage and TapChangerControl.minLimitVoltage)
    are expressed in secondary units.
    '''
    
    step: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tap changer position.
    Starting step for a steady state solution. Non integer values are allowed
    to support continuous tap variables. The reasons for continuous value
    are to support study cases where no discrete tap changer has yet been
    designed, a solution where a narrow voltage band forces the tap step
    to oscillate or to accommodate for a continuous solution as input.
    The attribute shall be equal to or greater than lowStep and equal to
    or less than highStep.
    '''
    
    initialDelay: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    For an LTC, the delay for initial tap changer operation (first step
    change).
    '''
    
    neutralU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage at which the winding operates at the neutral tap setting. It
    is the voltage at the terminal of the PowerTransformerEnd associated
    with the tap changer when all tap changers on the transformer are at
    their neutralStep position. Normally neutralU of the tap changer is
    the same as ratedU of the PowerTransformerEnd, but it can differ in
    special cases such as when the tapping mechanism is separate from the
    winding more common on lower voltage transformers.
    This attribute is not relevant for PhaseTapChangerAsymmetrical, PhaseTapChangerSymmetrical
    and PhaseTapChangerLinear.
    '''
    
    subsequentDelay: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    For an LTC, the delay for subsequent tap changer operation (second
    and later step changes).
    '''
    
    SvTapStep: Optional[SvTapStep] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SvTapStep.TapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap step state associated with the tap changer.
    '''
    
    TapChangeController: Optional[TapChangerController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TapChangerController.TapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap changer controller that controls this TapChanger.
    '''
    
    TapChangerControl: Optional[TapChangerControl] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TapChangerControl.TapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The regulating control scheme in which this tap changer participates.
    '''
    
@dataclass(repr=False)
class ImpedanceTapChangerTabular(TapChanger):
    '''
    Describes a tap changer with a table defining the relation between the
    tap step and the impedance difference across the windings of a three winding
    transformer.
    '''

    ImpedanceTapChangerTable: Optional[ImpedanceTapChangerTable] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ImpedanceTapChangerTable.ImpedanceTapChangerTabular',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The impedance tap changer table for this impedance tap changer.
    '''
    
@dataclass(repr=False)
class PhaseTapChanger(TapChanger):
    '''
    A transformer phase shifting tap model that controls the phase angle difference
    across the power transformer and potentially the active power flow through
    the power transformer. This phase tap model may also impact the voltage
    magnitude.
    '''

    TransformerEnd: Optional[TransformerEnd] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEnd.PhaseTapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end to which this phase tap changer belongs.
    '''
    
    TransformerEnd: Optional[TransformerEnd] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEnd.PhaseTapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end to which this phase tap changer belongs.
    '''
    
@dataclass(repr=False)
class PhaseTapChangerLinear(PhaseTapChanger):
    '''
    Describes a tap changer with a linear relation between the tap step and
    the phase angle difference across the transformer. This is a mathematical
    model that is an approximation of a real phase tap changer.
    The phase angle is computed as stepPhaseShiftIncrement times the tap position.
    The voltage magnitude of both sides is the same.
    '''

    stepPhaseShiftIncrement: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase shift per step position. A positive value indicates a positive
    angle variation from the Terminal at the PowerTransformerEnd, where
    the TapChanger is located, into the transformer.
    The actual phase shift increment might be more accurately computed
    from the symmetrical or asymmetrical models or a tap step table lookup
    if those are available.
    '''
    
    xMax: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactance depends on the tap position according to a "u" shaped
    curve. The maximum reactance (xMax) appears at the low and high tap
    positions. Depending on the "u" curve the attribute can be either higher
    or lower than PowerTransformerEnd.x.
    '''
    
@dataclass(repr=False)
class PhaseTapChangerNonLinear(PhaseTapChanger):
    '''
    The non-linear phase tap changer describes the non-linear behaviour of
    a phase tap changer. This is a base class for the symmetrical and asymmetrical
    phase tap changer models. The details of these models can be found in IEC
    61970-301.
    '''

    voltageStepIncrement: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage step increment on the out of phase winding (the PowerTransformerEnd
    where the TapChanger is located) specified in percent of rated voltage
    of the PowerTransformerEnd. A positive value means a positive voltage
    variation from the Terminal at the PowerTransformerEnd, where the TapChanger
    is located, into the transformer.
    When the increment is negative, the voltage decreases when the tap
    step increases.
    '''
    
    xMax: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactance depends on the tap position according to a "u" shaped
    curve. The maximum reactance (xMax) appears at the low and high tap
    positions. Depending on the "u" curve the attribute can be either higher
    or lower than PowerTransformerEnd.x.
    '''
    
@dataclass(repr=False)
class ConnectionAngleTapChanger(PhaseTapChangerNonLinear):
    '''
    Describes the tap model for an asymmetrical phase shifting transformer
    in which the difference voltage vector adds to the in-phase winding. The
    out-of-phase winding is the transformer end where the tap changer is located.
    The angle between the in-phase and out-of-phase windings is named the winding
    connection angle. The phase shift depends on both the difference voltage
    magnitude and the winding connection angle. The winding connection angle
    can be changed for different operating conditions while energized.
    The following options are supported:
    <ol>
    <li>Modelling of tap changer using ConnectionAngleTapChanger without ConnectionAngleTapChangerTable.
    Equations for asymmetrical transformer defined in IEC 61970-301 are used.
    The supported winding connection angle range is defined by the maximum
    winding connection angle and the minimum winding connection angle. The
    connection angle step size is used to define the allowed winding connection
    angles for the tap changer.</li>
    <li>Modelling of tap changer using ConnectionAngleTapChanger with ConnectionAngleTapChangerTable.
    There shall be different tables that relate to different winding connection
    angles that are supported by the tap changer. There is no need to provide
    information on winding connection angle range and connection angle step
    size as the allowed winding connection angles are defined by the table.
    The usage of the table is recommended in cases where the equations for
    asymmetrical transformer defined in IEC 61970-301 cannot fully describe
    the tap changer or in cases where it is exchange the data for different
    tap steps in an explicit way as a table.</li>
    </ol>
    '''

    ConnectionAngleTapChangerTable: list[ConnectionAngleTapChangerTable] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConnectionAngleTapChangerTable.ConnectionAngleTapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The connection angle tap changer table that is applied to this connection
    angle tap changer.
    '''
    
    connectionAngleStepSize: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The supported winding connection angle range is defined by the maximum
    winding connection angle and the minimum winding connection angle.
    The connection angle step size is used to define the allowed winding
    connection angles for the tap changer. The attribute shall be a positive
    value and can only be multiples of 30 degrees. For example, if the
    tap changer has maximum winding connection angle equal to 60 degrees,
    minimum winding connection angle equal to -60 degrees and the connection
    angle step size is equal to 60, the allowed winding connection angle
    that can be used for this tap changer are -60 degrees, 0 degrees and
    -60 degrees. When using connection angle tap changer table there is
    no need to provide information on winding connection angle range and
    connection angle step size as the allowed winding connection angles
    are defined by the table.
    '''
    
    maxWindingConnectionAngle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum phase angle between the in-phase winding and the out-of
    -phase winding used for creating phase shift. The attribute can be
    positive, negative or zero and can only be multiples of 30 degrees.
    When 0 degree is used the asymmetrical phase tap changer acts as ratio
    tap changer controlling voltage. The maximum winding connection angle
    shall be greater than the minimum winding connection angle. When using
    connection angle tap changer table there is no need to provide information
    on winding connection angle range and connection angle step size as
    the allowed winding connection angles are defined by the table.
    '''
    
    minWindingConnectionAngle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum phase angle between the in-phase winding and the out-of
    -phase winding used for creating phase shift. The attribute can be
    positive, negative or zero and can only be multiples of 30 degrees.
    When 0 degree is used the asymmetrical phase tap changer acts as ratio
    tap changer controlling voltage. When using connection angle tap changer
    table there is no need to provide information on winding connection
    angle range and connection angle step size as the allowed winding connection
    angles are defined by the table.
    '''
    
    normalWindingConnectionAngle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The normal phase angle between the in-phase winding and the out-of
    -phase winding used for creating phase shift. The out-of-phase winding
    produces what is known as the difference voltage. Setting this angle
    to 90 degrees is not the same as a symmetrical transformer. In this
    scenario you will still treat the 90-degree angle as a phase shifting
    transformer. The attribute can only be multiples of 30 degrees. When
    0 degree is used the asymmetrical phase tap changer acts as ratio tap
    changer controlling voltage.
    '''
    
    windingConnectionAngle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operating phase angle between the in-phase winding and the out-of
    -phase winding used for creating phase shift. The out-of-phase winding
    produces what is known as the difference voltage. Setting this angle
    to 90 degrees is not the same as a symmetrical transformer. In this
    scenario you will still treat the 90-degree angle as a phase shifting
    transformer. The attribute can only be multiples of 30 degrees. When
    0 degree is used the asymmetrical phase tap changer acts as ratio tap
    changer controlling voltage.
    '''
    
@dataclass(repr=False)
class PhaseTapChangerAsymmetrical(PhaseTapChangerNonLinear):
    '''
    Describes the tap model for an asymmetrical phase shifting transformer
    in which the difference voltage vector adds to the in-phase winding. The
    out-of-phase winding is the transformer end where the tap changer is located.
    The angle between the in-phase and out-of-phase windings is named the winding
    connection angle. The phase shift depends on both the difference voltage
    magnitude and the winding connection angle.
    '''

    windingConnectionAngle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The phase angle between the in-phase winding and the out-of -phase
    winding used for creating phase shift. The out-of-phase winding produces
    what is known as the difference voltage. Setting this angle to 90 degrees
    is not the same as a symmetrical transformer. The attribute can only
    be multiples of 30 degrees. The allowed range is -150 degrees to 150
    degrees excluding 0.
    '''
    
@dataclass(repr=False)
class PhaseTapChangerSymmetrical(PhaseTapChangerNonLinear):
    '''
    Describes a symmetrical phase shifting transformer tap model in which the
    voltage magnitude of both sides is the same. The difference voltage magnitude
    is the base in an equal-sided triangle where the sides corresponds to the
    primary and secondary voltages. The phase angle difference corresponds
    to the top angle and can be expressed as twice the arctangent of half the
    total difference voltage.
    '''

@dataclass(repr=False)
class PhaseTapChangerTabular(PhaseTapChanger):
    '''
    Describes a tap changer with a table defining the relation between the
    tap step and the phase angle difference across the transformer.
    '''

    PhaseTapChangerTable: Optional[PhaseTapChangerTable] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PhaseTapChangerTable.PhaseTapChangerTabular',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The phase tap changer table for this phase tap changer.
    '''
    
@dataclass(repr=False)
class RatioTapChanger(TapChanger):
    '''
    A tap changer that changes the voltage ratio impacting the voltage magnitude
    but not the phase angle across the transformer.
    Angle sign convention (general): Positive value indicates a positive phase
    shift from the winding where the tap is located to the other winding (for
    a two-winding transformer).
    '''

    TransformerEnd: Optional[TransformerEnd] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEnd.AdditionalRatioTapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end to which this ratio tap changer belongs.
    '''
    
    TransformerEnd: Optional[TransformerEnd] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEnd.RatioTapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end to which this ratio tap changer belongs.
    '''
    
    stepVoltageIncrement: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tap step increment, in per cent of rated voltage of the power transformer
    end, per step position.
    When the increment is negative, the voltage decreases when the tap
    step increases.
    '''
    
    RatioTapChangerTable: Optional[RatioTapChangerTable] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RatioTapChangerTable.RatioTapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap ratio table for this ratio tap changer.
    '''
    
    TransformerEnd: Optional[TransformerEnd] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEnd.RatioTapChanger',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end to which this ratio tap changer belongs.
    '''
    
@dataclass(repr=False)
class TieCorridor(PowerSystemResource):
    '''
    A collection of one or more tie-lines or direct current poles that connect
    two different control areas.
    '''

    TieFlow: list[TieFlow] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TieFlow.TieCorridor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tie flow which belongs to the tie corridor.
    '''
    
    maxRegulatingReserveRamp: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum authorized ramp for regulating reserve.
    '''
    
    delayRegulatingReserve: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A positive number that is a multiple of Automatic Generation Control
    (AGC) run cycles that describes the delay in adapting imbalance of
    the tie corridor.
    '''
    
    thresholdRegulatingReserve: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Regulating reserve threshold.
    '''
    
    BiddingZoneBorder: Optional[BiddingZoneBorder] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BiddingZoneBorder.TieCorridor',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Bidding zone border in which the tie corridor is located.
    '''
    
    LoadFrequencyControlArea: Optional[LoadFrequencyControlArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LoadFrequencyControlArea.TieCorridor',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    LoadFrequencyControlArea controlling the TieCorridor.
    '''
    
@dataclass(repr=False)
class ACTieCorridor(TieCorridor):
    '''
    A collection of one or more AC tie lines that connect two different control
    areas.
    '''

    Line: list[Line] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Line.ACTieCorridor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Line that is part of the ACTieCorridor.
    '''
    
@dataclass(repr=False)
class DCTieCorridor(TieCorridor):
    '''
    A collection of one or more direct current poles that connect two different
    control areas.
    '''

    DCPole: list[DCPole] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCPole.DCTieCorridor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DCPole which is part of the DC corridor.
    '''
    
    DirectCurrentMasterController: Optional[DirectCurrentMasterController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentMasterController.DCTieCorridor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direct current master controller for this DCTieCorridor.
    '''
    
    maxRegulatingReserve: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum regulating reserve.
    '''
    
    minRegulatingReserve: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum regulating reserve.
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power at the point of common coupling. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    Starting value for a steady state solution in the case a simplified
    power flow model is used.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactive power at the point of common coupling. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    Starting value for a steady state solution in the case a simplified
    power flow model is used.
    '''
    
    rampingKind: Optional[ RampingPrincipleKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ramping principle is used to define a transition from one scheduled
    value to next one.
    '''
    
    DirectCurrentMasterController: Optional[DirectCurrentMasterController] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DirectCurrentMasterController.DCTieCorridor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Direct current master controller for this DCTieCorridor.
    '''
    
    SchedulingArea: Optional[SchedulingArea] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SchedulingArea.DCTieCorridor',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The scheduling area that has this DC tie corridor.
    '''
    
@stereotype(CIMStereotype.deprecated)
@dataclass(repr=False)
class VoltageControlZone(PowerSystemResource):
    '''
    An area of the power system network which is defined for secondary voltage
    control purposes. A voltage control zone consists of a collection of substations
    with a designated bus bar section whose voltage will be controlled.
    '''

    BusbarSection: Optional[BusbarSection] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BusbarSection.VoltageControlZone',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A VoltageControlZone is controlled by a designated BusbarSection.
    '''
    
    BusbarSection: Optional[BusbarSection] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BusbarSection.VoltageControlZone',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A VoltageControlZone is controlled by a designated BusbarSection.
    '''
    
    RegulationSchedule: Optional[RegulationSchedule] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegulationSchedule.VoltageControlZones',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A VoltageControlZone may have a voltage regulation schedule.
    '''
    
@stereotype(CIMStereotype.European)
@dataclass(repr=False)
class WindPowerPlant(PowerSystemResource):
    '''
    Wind power plant.
    '''

    WindGeneratingUnits: list[WindGeneratingUnit] = field(
        default_factory=list,
        metadata={
        'type': 'European',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'WindGeneratingUnit.WindPowerPlant',
        'namespace': 'http://iec.ch/TC57/CIM100-European#',
        })
    '''
    A wind generating unit or units may be a member of a wind power plant.
    '''
    
@dataclass(repr=False)
class WireSegmentPhase(PowerSystemResource):
    '''
    Represents a single wire of an alternating current wire segment.
    '''

    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number designation for this wire segment phase. Each wire segment phase
    within a wire segment should have a unique sequence number.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The phase connection of the wire at both ends.
    '''
    
    WireSegment: Optional[WireSegment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WireSegment.WireSegmentPhases',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The wire segment to which the phase belongs.
    '''
    
@dataclass(repr=False)
class Process(IdentifiedObject):
    '''
    The formal specification of a set of business transactions having the same
    business goal.
    '''

    classificationType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The classification mechanism used to group a set of objects together
    within a business process. The grouping may be of a detailed or a summary
    nature.
    '''
    
    processType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The kind of business process.
    '''
    
@dataclass(repr=False)
class ProductAssetModel(IdentifiedObject):
    '''
    Asset model by a specific manufacturer.
    '''

    Asset: list[Asset] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Asset.ProductAssetModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An asset of this model.
    '''
    
    AssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.ProductAssetModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset information (nameplate) for this product asset model.
    '''
    
    Dimension: list[Dimension] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Dimension.ProductAssetModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    catalogueNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Catalogue number for asset model.
    '''
    
    drawingNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Drawing number for asset model.
    '''
    
    instructionManual: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reference manual or instruction book for this asset model.
    '''
    
    modelNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Manufacturer's model number.
    '''
    
    modelVersion: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Version number for product model, which indicates vintage of the product.
    '''
    
    styleNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Style number of asset model.
    '''
    
    corporateStandardKind: Optional[ CorporateStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of corporate standard for this asset model.
    '''
    
    overallLength: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Overall length of this asset model.
    '''
    
    usageKind: Optional[ AssetModelUsageKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Intended usage for this asset model.
    '''
    
    AssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.ProductAssetModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset information (nameplate) for this product asset model.
    '''
    
    CatalogAssetType: Optional[CatalogAssetType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CatalogAssetType.ProductAssetModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Catalog asset type to which this product asset model conforms.
    '''
    
    Manufacturer: Optional[Manufacturer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Manufacturer.ProductAssetModels',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Manufacturer of this asset model.
    '''
    
@dataclass(repr=False)
class ProprietarySettingValue(IdentifiedObject):
    '''
    This class is the base class to represet a setting value of various applications.
    '''

    ProtectionFunctionBlock: Optional[ProtectionFunctionBlock] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionFunctionBlock.ProprietarySettingValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection function block may have application-specific setting values.
    '''
    
    ProtectionRelatedFunctionBlock: Optional[ProtectionRelatedFunctionBlock] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionRelatedFunctionBlock.ProprietarySettingValue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection-related function block may have application-specific setting
    values.
    '''
    
@dataclass(repr=False)
class ProprietaryThresholdvalue(ProprietarySettingValue):
    '''
    This class represents a setting value about threshold.
    '''

@dataclass(repr=False)
class ProprietaryTimerValue(ProprietarySettingValue):
    '''
    This class represents a setting value about time.
    '''

@dataclass(repr=False)
class ProtectionSettingsGroup(IdentifiedObject):
    '''
    This class represents a group of standardized setting values which are
    typically used in certain grid situations.
    '''

    ProtectionFunctionBlock: list[ProtectionFunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProtectionFunctionBlock.ProtectionSettingsGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiple instances of ProtectionFunctionBlock may be grouped together
    by a ProtectionSettingGroup to manage their setting values as a single
    group.
    '''
    
    ProtectionRelatedFunctionBlock: list[ProtectionRelatedFunctionBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProtectionRelatedFunctionBlock.ProtectionSettingsGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiple instances of ProtectionRelatedFunctionBlock may be grouped
    together by a ProtectionSettingGroup to manage their setting values
    as a single group.
    '''
    
    normallyEnabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True, if the protection settings group is normally enabled (active).
    Otherwise false.
    '''
    
    ProtectionFunction: Optional[ProtectionFunction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionFunction.ProtectionSettingsGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Protection Function related to the protection-setting groups.
    '''
    
@dataclass(repr=False)
class ProvidedBilateralPoint(IdentifiedObject):
    '''
    Allows declaration of ICCP points to be provided through a Bilateral Table
    agreement.
    '''

    BilateralExchangeActor: Optional[BilateralExchangeActor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BilateralExchangeActor.ProvidedBilateralIOPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Remote peer that will receive ICCP information in a Bilateral table.
    '''
    
    IOPoint: Optional[IOPoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IOPoint.BilateralToIOPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement or control for the bilateral ICCP point.
    '''
    
@dataclass(repr=False)
class ICCPProvidedPoint(ProvidedBilateralPoint):
    '''
    The IdentifiedObject.name attribute must have a value. The name attribute
    shall be used as the DataValue name used for the exchange.
    '''

    accessPriviledge: Optional[ ICCPAccessPrivilegeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Provides information regarding the access privileges allowed to the
    ICCP Point.
    '''
    
    pointQuality: Optional[ ICCPQualityKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the type of ICCP quality that will be conveyed as part of
    the ICCP Point.
    '''
    
    pointType: Optional[ ICCPPointKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the ICCP Point type that is to be conveyed.
    A CIM AccumlatorValue shall be mapped to an ICCP real.
    A CIM AnalogValue shall be mapped to an ICCP real.
    A CIM DiscreteValue shall be mapped to either an ICCP real, state,
    stateSupplemental, or either protection event type.
    A CIM StringMeasurementValue does not have a standardized mapping.
    '''
    
    scope: Optional[ ICCPScopeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates if the Point is global scoped (e.g. VCC) or accessible only
    to the Bilateral table peer (e.g. ICC).
    '''
    
@dataclass(repr=False)
class RatioTapChangerTable(IdentifiedObject):
    '''
    Describes a curve for how the voltage magnitude and impedance varies with
    the tap step.
    '''

    RatioTapChanger: list[RatioTapChanger] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RatioTapChanger.RatioTapChangerTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ratio tap changer of this tap ratio table.
    '''
    
    RatioTapChangerTablePoint: list[RatioTapChangerTablePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RatioTapChangerTablePoint.RatioTapChangerTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Points of this table.
    '''
    
@dataclass(repr=False)
class ReadingQualityType(IdentifiedObject):
    '''
    Detailed description for a quality of a reading value, produced by an end
    device or a system. Values in attributes allow for creation of the recommended
    codes to be used for identifying reading value quality codes as follows:
    <systemId>.<category>.<subCategory>.
    '''

    ReadingQualities: list[ReadingQuality] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ReadingQuality.ReadingQualityType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All reading qualities of this type.
    '''
    
    category: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    High-level nature of the reading value quality.
    '''
    
    subCategory: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    More specific nature of the reading value quality, as a further sub-categorisation
    of 'category'.
    '''
    
    systemId: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identification of the system which has declared the issue with the
    data or provided commentary on the data.
    '''
    
@dataclass(repr=False)
class ReadingType(IdentifiedObject):
    '''
    Detailed description for a type of a reading value. Values in attributes
    allow for the creation of recommended codes to be used for identifying
    reading value types as follows: <macroPeriod>.<aggregate>.<measuringPeriod>.<accumulation>.<flowDirection>.<commodity>.<measurementKind>.<interharmonic.numerator>.<interharmonic.denominator>.<argument.numerator>.<argument.denominator>.<tou>.<cpp>.<consumptionTier>.<phases>.<multiplier>.<unit>.<currency>.
    '''

    Channel: Optional[Channel] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Channel.ReadingType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Channel reporting/collecting register values with this type information.
    '''
    
    IntervalBlocks: list[IntervalBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IntervalBlock.ReadingType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All blocks containing interval reading values with this type information.
    '''
    
    PendingCalculation: Optional[PendingCalculation] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PendingCalculation.ReadingType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pending calculation that produced this reading type.
    '''
    
    Readings: list[Reading] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Reading.ReadingType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All reading values with this type information.
    '''
    
    consumptionTier: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    In case of common flat-rate pricing for power, in which all purchases
    are at a given rate, 'consumptionTier'=0. Otherwise, the value indicates
    the consumption tier, which can be used in conjunction with TOU or
    CPP pricing.
    Consumption tier pricing refers to the method of billing in which a
    certain "block" of energy is purchased/sold at one price, after which
    the next block of energy is purchased at another price, and so on,
    all throughout a defined period. At the start of the defined period,
    consumption is initially zero, and any usage is measured against the
    first consumption tier ('consumptionTier'=1). If this block of energy
    is consumed before the end of the period, energy consumption moves
    to be reconed against the second consumption tier ('consumptionTier'=2),
    and so on. At the end of the defined period, the consumption accumulator
    is reset, and usage within the 'consumptionTier'=1 restarts.
    '''
    
    cpp: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Critical peak period (CPP) bucket the reading value is attributed to.
    Value 0 means not applicable. Even though CPP is usually considered
    a specialised form of time of use 'tou', this attribute is defined
    explicitly for flexibility.
    '''
    
    tou: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time of use (TOU) bucket the reading value is attributed to. Value
    0 means not applicable.
    '''
    
    accumulation: Optional[ AccumulationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Accumulation behaviour of a reading over time, usually 'measuringPeriod',
    to be used with individual endpoints (as opposed to 'macroPeriod' and
    'aggregate' that are used to describe aggregations of data from individual
    endpoints).
    '''
    
    aggregate: Optional[ AggregateKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Salient attribute of the reading data aggregated from individual endpoints.
    This is mainly used to define a mathematical operation carried out
    over 'macroPeriod', but may also be used to describe an attribute of
    the data when the 'macroPeriod' is not defined.
    '''
    
    commodity: Optional[ CommodityKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Commodity being measured.
    '''
    
    currency: Optional[ Currency ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Metering-specific currency.
    '''
    
    flowDirection: Optional[ FlowDirectionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flow direction for a reading where the direction of flow of the commodity
    is important (for electricity measurements this includes current, energy,
    power, and demand).
    '''
    
    macroPeriod: Optional[ MacroPeriodKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time period of interest that reflects how the reading is viewed or
    captured over a long period of time.
    '''
    
    measurementKind: Optional[ MeasurementKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifies "what" is being measured, as refinement of 'commodity'.
    When combined with 'unit', it provides detail to the unit of measure.
    For example, 'energy' with a unit of measure of 'kWh' indicates to
    the user that active energy is being measured, while with 'kVAh' or
    'kVArh', it indicates apparent energy and reactive energy, respectively.
    'power' can be combined in a similar way with various power units of
    measure: Distortion power ('distortionVoltAmperes') with 'kVA' is different
    from 'power' with 'kVA'.
    '''
    
    measuringPeriod: Optional[ MeasuringPeriodKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time attribute inherent or fundamental to the reading value (as opposed
    to 'macroPeriod' that supplies an "adjective" to describe aspects of
    a time period with regard to the measurement). It refers to the way
    the value was originally measured and not to the frequency at which
    it is reported or presented. For example, an hourly interval of consumption
    data would have value 'hourly' as an attribute. However in the case
    of an hourly sampled voltage value, the meterReadings schema would
    carry the 'hourly' interval size information.
    It is common for meters to report demand in a form that is measured
    over the course of a portion of an hour, while enterprise applications
    however commonly assume the demand (in kW or kVAr) normalised to 1
    hour. The system that receives readings directly from the meter therefore
    shall perform this transformation before publishing readings for use
    by the other enterprise systems. The scalar used is chosen based on
    the block size (not any sub-interval size).
    '''
    
    multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Metering-specific multiplier.
    '''
    
    phases: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Metering-specific phase code.
    '''
    
    unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Metering-specific unit.
    '''
    
    Channel: Optional[Channel] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Channel.ReadingType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Channel reporting/collecting register values with this type information.
    '''
    
    PendingCalculation: Optional[PendingCalculation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PendingCalculation.ReadingType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pending calculation that produced this reading type.
    '''
    
@dataclass(repr=False)
class RecloseSequence(IdentifiedObject):
    '''
    A reclose sequence (open and close) is defined for each possible reclosure
    of a breaker.
    '''

    recloseStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the ordinal position of the reclose step relative to other
    steps in the sequence.
    '''
    
    recloseDelay: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates the time lapse before the reclose step will execute a reclose.
    '''
    
    AutoreclosingFunctionBlock: Optional[AutoreclosingFunctionBlock] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AutoreclosingFunctionBlock.RecloseSequences',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Autoreclose function defining a series of reclose sequences
    '''
    
    ProtectedSwitch: Optional[ProtectedSwitch] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectedSwitch.RecloseSequences',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A breaker may have zero or more automatic reclosures after a trip occurs.
    '''
    
@dataclass(repr=False)
class Register(IdentifiedObject):
    '''
    A device that indicates or records units of the commodity or other quantity
    measured.
    '''

    Channels: list[Channel] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Channel.Register',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All channels that collect/report values from this register.
    '''
    
    isVirtual: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, the data it produces is calculated or measured by a device
    other than a physical end device/meter. Otherwise, any data streams
    it produces are measured by the hardware of the end device/meter itself.
    '''
    
    leftDigitCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of digits (dials on a mechanical meter) to the left of the decimal
    place; default is normally 5.
    '''
    
    rightDigitCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of digits (dials on a mechanical meter) to the right of the
    decimal place.
    '''
    
    touTierName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name used for the time of use tier (also known as bin or bucket). For
    example, "peak", "off-peak", "TOU Category A", etc.
    '''
    
    EndDeviceFunction: Optional[EndDeviceFunction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EndDeviceFunction.Registers',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End device function metering quantities displayed by this register.
    '''
    
    UsagePoint: Optional[UsagePoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UsagePoint.Register',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RegulatingLimit(IdentifiedObject):
    '''
    This class represents the physical characteristic of a generator regarding
    the regulating limit.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RegulatingLimit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    highLimit: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    lowLimit: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredGenerator.RegulatingLimit',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class RelayDynamics(IdentifiedObject):
    '''
    Relay whose behaviour is described by reference to a standard model <font
    color="#0f0f0f">or by definition of a user-defined model.</font>
    '''

    ProtectionFunction: Optional[ProtectionFunction] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ProtectionFunction.RelayDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The protection function is associated to its detail logic represented
    by the RelayDynamics.
    '''
    
@dataclass(repr=False)
class RemotePoint(IdentifiedObject):
    '''
    For an RTU, remote points correspond to telemetered values or control outputs.
    Other units (e.g. control centres) usually also contain calculated values.
    '''

    RemoteUnit: Optional[RemoteUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RemoteUnit.RemotePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Remote unit this point belongs to.
    '''
    
@dataclass(repr=False)
class RemoteControl(RemotePoint):
    '''
    Remote controls are outputs that are sent by the remote unit to actuators
    in the process.
    '''

    Control: Optional[Control] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Control.RemoteControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Control for the RemoteControl point.
    '''
    
    actuatorMaximum: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum set point value accepted by the remote control point.
    '''
    
    actuatorMinimum: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum set point value accepted by the remote control point.
    '''
    
    remoteControlled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Set to true if the actuator is remotely controlled.
    '''
    
    Control: Optional[Control] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Control.RemoteControl',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Control for the RemoteControl point.
    '''
    
@dataclass(repr=False)
class RemoteSource(RemotePoint):
    '''
    Remote sources are state variables that are telemetered or calculated within
    the remote unit.
    '''

    MeasurementValue: Optional[MeasurementValue] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementValue.RemoteSource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Link to the physical telemetered point associated with this measurement.
    '''
    
    deadband: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The smallest change in value to be reported.
    '''
    
    sensorMaximum: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The maximum value the telemetry item can return.
    '''
    
    sensorMinimum: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum value the telemetry item can return.
    '''
    
    scanInterval: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time interval between scans.
    '''
    
    MeasurementValue: Optional[MeasurementValue] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementValue.RemoteSource',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Link to the physical telemetered point associated with this measurement.
    '''
    
@dataclass(repr=False)
class ReportingGroup(IdentifiedObject):
    '''
    A reporting group is used for various ad-hoc groupings used for reporting.
    '''

    BusNameMarker: list[BusNameMarker] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'BusNameMarker.ReportingGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The bus name markers that belong to this reporting group.
    '''
    
    TopologicalNode: list[TopologicalNode] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TopologicalNode.ReportingGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The topological nodes that belong to the reporting group.
    '''
    
    ReportingSuperGroup: Optional[ReportingSuperGroup] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReportingSuperGroup.ReportingGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reporting super group to which this reporting group belongs.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class ReportingSuperGroup(IdentifiedObject):
    '''
    A reporting super group, groups reporting groups for a higher level report.
    '''

    ReportingGroup: list[ReportingGroup] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ReportingGroup.ReportingSuperGroup',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reporting groups that are grouped under this super group.
    '''
    
@dataclass(repr=False)
class ResponseMethod(IdentifiedObject):
    '''
    Specifies a category of energy usage that the demand response applies for;
    e.g. energy from lighting, HVAC, other.
    '''

    activePower: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power value for the demand adjustment type. This supports
    requests to be made to a resource for some amount of active power provided
    by a particular response method, as specified by the method attribute
    (e.g. lighting, HVAC, wall mounted air conditioners, etc.).
    '''
    
    activePowerUOM: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit of measure of active power, e.g. kiloWatts (kW), megaWatts
    (mW), etc.
    '''
    
    method: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The response method (e.g. lighting, HVAC, wall mounted air conditioners,
    etc.).
    '''
    
    siteMultiplier: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This value provides for scaling of a response method's active power.
    For example, a response method of air conditioning could utilize a
    small amount of active power from each air conditioning unit (e.g.
    0.1 kiloWatt), but the site multiplier could be used to produce a the
    total active power adjustment by multiplying the response method active
    power by this value (e.g. a building with 100 window air conditioning
    units, so 100 * 0.1 kW = 10 kW).
    '''
    
    RegisteredResource: Optional[RegisteredDistributedResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredDistributedResource.ResponseMethods',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ScheduledEvent(IdentifiedObject):
    '''
    An event to trigger one or more activities, such as reading a meter, recalculating
    a bill, requesting work, when generating units must be scheduled for maintenance,
    when a transformer is scheduled to be refurbished, etc.
    '''

    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of scheduled event.
    '''
    
    duration: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Duration of the scheduled event, for example, the time to ramp between
    values.
    '''
    
    ScheduledEventData: Optional[ScheduledEventData] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ScheduledEventData.ScheduledEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specification for this scheduled event.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of the scheduled event.
    '''
    
@dataclass(repr=False)
class SchedulingPoint(IdentifiedObject):
    '''
    Connection to other organisations at the boundary of the ISO/RTO.
    '''

    Flowgate: Optional[Flowgate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Flowgate.InterTie',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class SchemeRemedialAction(IdentifiedObject):
    '''
    Scheme remedial action is remedial action that involves a scheme that can
    include conditional logic and stages of grid alteration. The primary remedial
    action is the arming of these schemes, that will then perform curative
    remedial action when the condition is met. System Integrity Protection
    Scheme (SIPS) and Special Protection Scheme (SPS) are example of this.
    '''

    RemedialActionScheme: Optional[RemedialActionScheme] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RemedialActionScheme.SchemeRemedialAction',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Remedial action scheme for this scheme remedial action.
    '''
    
@dataclass(repr=False)
class Seal(IdentifiedObject):
    '''
    Physically controls access to AssetContainers.
    '''

    appliedDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time this seal has been applied.
    '''
    
    sealNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (reserved word) Seal number.
    '''
    
    condition: Optional[ SealConditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Condition of seal.
    '''
    
    kind: Optional[ SealKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of seal.
    '''
    
    AssetContainer: Optional[AssetContainer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetContainer.Seals',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Asset container to which this seal is applied.
    '''
    
@dataclass(repr=False)
class Season(IdentifiedObject):
    '''
    A specified time period of the year.
    '''

    SeasonDayTypeSchedules: list[SeasonDayTypeSchedule] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SeasonDayTypeSchedule.Season',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Schedules that use this Season.
    '''
    
    endDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date season ends.
    '''
    
    startDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date season starts.
    '''
    
@dataclass(repr=False)
class SecurityConstraints(IdentifiedObject):
    '''
    Typical for regional transmission operators (RTOs), these constraints include
    transmission as well as generation group constraints identified in both
    base case and critical contingency cases.
    '''

    Flowgate: Optional[Flowgate] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Flowgate.SecurityConstraints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ServiceCategory(IdentifiedObject):
    '''
    Category of service provided to the customer.
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConfigurationEvent.ChangedServiceCategory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All configuration events created for this service category.
    '''
    
    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CustomerAgreement.ServiceCategory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All customer agreements with this service category.
    '''
    
    PricingStructures: list[PricingStructure] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PricingStructure.ServiceCategory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All pricing structures applicable to this service category.
    '''
    
    UsagePoints: list[UsagePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'UsagePoint.ServiceCategory',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All usage points that deliver this category of service.
    '''
    
    kind: Optional[ ServiceKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of service.
    '''
    
@dataclass(repr=False)
class ServiceMultiplier(IdentifiedObject):
    '''
    Multiplier applied at the usage point.
    '''

    value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Multiplier value.
    '''
    
    kind: Optional[ ServiceMultiplierKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of multiplier.
    '''
    
    UsagePoint: Optional[UsagePoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UsagePoint.ServiceMultipliers',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Usage point applying this multiplier.
    '''
    
@dataclass(repr=False)
class ShuntCompensatorDynamics(IdentifiedObject):
    '''
    Shunt compensator whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''

    ShuntCompensator: Optional[ShuntCompensator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShuntCompensator.ShuntCompensatorDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Shunt compensator to which shunt compensator dynamics model applies.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class ShuntCompensatorModification(IdentifiedObject):
    '''
    Shunt compensator action.
    '''

    ShuntCompensator: Optional[ShuntCompensator] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShuntCompensator.ShuntCompensatorAction',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The ShuntCompensator that is associated with an action.
    '''
    
@dataclass(repr=False)
class SimulationEvents(IdentifiedObject):
    '''
    A configuration or a set of events executed during a simulation.
    '''

    FaultEvent: list[Fault] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Fault.SimulationEvents',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The simulation fault event that is part of this simulation.
    '''
    
@dataclass(repr=False)
class Specimen(IdentifiedObject):
    '''
    Sample or specimen of a material (fluid or solid).
    '''

    LabTestDataSet: list[LabTestDataSet] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'LabTestDataSet.Specimen',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Results from lab testing done on specimen.
    '''
    
    specimenID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifier of specimen used in inspection or test.
    '''
    
    specimenSampleDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time sample specimen taken.
    '''
    
    specimenToLabDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time the specimen was received by the lab.
    '''
    
    ambientTemperatureAtSampling: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Operating ambient temperature (in �C).
    '''
    
    humidityAtSampling: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Operating ambient humidity (in percent).
    '''
    
    AssetTestSampleTaker: Optional[AssetTestSampleTaker] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetTestSampleTaker.Specimen',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Test sampler taker who gathered this specimen.
    '''
    
@dataclass(repr=False)
class OilSpecimen(Specimen):
    '''
    '''

    oilSampleTakenFrom: Optional[ OilSampleLocation ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Location from which oil sample taken.
    '''
    
    oilSampleTemperature: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Oil sample temperature.
    '''
    
    oilTemperatureSource: Optional[ OilTemperatureSource ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Source of oil temperature.
    '''
    
    sampleContainer: Optional[ SampleContainerType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of sample container.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class Stage(IdentifiedObject):
    '''
    Stage of a remedial action scheme.
    '''

    StageTrigger: list[StageTrigger] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StageTrigger.Stage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The state trigger that is part of this stage.
    '''
    
    priority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The priority of the stage. 0 = do not care (default) 1 = highest priority.
    2 is less than 1 and so on. A stage with higher priority needs be activated
    before a lower stage can be activated.
    '''
    
    GridStateAlterationCollection: Optional[GridStateAlterationCollection] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GridStateAlterationCollection.StageAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The GridStateAlterationCollection which belongs to the Stage.
    '''
    
    RemedialActionScheme: Optional[RemedialActionScheme] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RemedialActionScheme.Stage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The remedial action scheme that has a stage.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class StartupModel(IdentifiedObject):
    '''
    Unit start up characteristics depending on how long the unit has been off
    line.
    '''

    StartIgnFuelCurve: Optional[StartIgnFuelCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartIgnFuelCurve.StartupModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup ignition fuel curve.
    '''
    
    StartMainFuelCurve: Optional[StartMainFuelCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartMainFuelCurve.StartupModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup main fuel curve.
    '''
    
    StartRampCurve: Optional[StartRampCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartRampCurve.StartupModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup ramp curve.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.StartupModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a startup model.
    '''
    
    startupDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The date and time of the most recent generating unit startup.
    '''
    
    startupPriority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Startup priority within control area where lower numbers indicate higher
    priorities. More than one unit in an area may be assigned the same
    priority.
    '''
    
    fixedMaintCost: Optional[ float | CostRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Fixed maintenance cost.
    '''
    
    hotStandbyHeat: Optional[ float | HeatRate ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The amount of heat input per time unit required for hot standby operation.
    '''
    
    incrementalMaintCost: Optional[ float | CostPerEnergyUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Incremental maintenance cost.
    '''
    
    minimumDownTime: Optional[ float | Hours ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum number of hours the unit must be down before restart.
    '''
    
    minimumRunTime: Optional[ float | Hours ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum number of hours the unit must be operating before being
    allowed to shut down.
    '''
    
    riskFactorCost: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The opportunity cost associated with the return in monetary unit. This
    represents the restart's "share" of the unit depreciation and risk
    of an event which would damage the unit.
    '''
    
    startupCost: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total miscellaneous start up costs.
    '''
    
    stbyAuxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's auxiliary active power consumption to maintain standby mode.
    '''
    
    StartIgnFuelCurve: Optional[StartIgnFuelCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartIgnFuelCurve.StartupModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup ignition fuel curve.
    '''
    
    StartMainFuelCurve: Optional[StartMainFuelCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartMainFuelCurve.StartupModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup main fuel curve.
    '''
    
    StartRampCurve: Optional[StartRampCurve] = field(
        default=None,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StartRampCurve.StartupModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unit's startup model may have a startup ramp curve.
    '''
    
    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThermalGeneratingUnit.StartupModel',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A thermal generating unit may have a startup model.
    '''
    
@dataclass(repr=False)
class StatcomDynamics(IdentifiedObject):
    '''
    STATCOM whose behaviour is described by reference to a standard model <font
    color="#0f0f0f">or by definition of a user-defined model.</font>
    '''

    PowerElectronicsConnection: Optional[PowerElectronicsConnection] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsConnection.StatcomDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The power electronics connection associated with this statcom dynamics
    model.
    '''
    
@stereotype(CIMStereotype.GB)
@dataclass(repr=False)
class StateShortCircuitResult(IdentifiedObject):
    '''
    Short-circuit result calculated on a power system state.
    '''

    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'GB',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.StateShortCircuitResult',
        'namespace': 'http://GB/placeholder/ext#',
        })
    '''
    The terminal to which the result is exchanged.
    '''
    
    TopologicalNode: Optional[TopologicalNode] = field(
        default=None,
        metadata={
        'type': 'GB',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalNode.StateShortCircuitResult',
        'namespace': 'http://GB/placeholder/ext#',
        })
    '''
    The TopologicalNode on which the short-circuit information is reported.
    '''
    
@dataclass(repr=False)
class StaticVarCompensatorDynamics(IdentifiedObject):
    '''
    Static var compensator whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''

    StaticVarCompensator: Optional[StaticVarCompensator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StaticVarCompensator.StaticVarCompensatorDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Static Var Compensator to which Static Var Compensator dynamics model
    applies.
    '''
    
@dataclass(repr=False)
class StaticVarCompensatorSystemDynamics(StaticVarCompensatorDynamics):
    '''
    Static var compensator system whose behaviour is described by reference
    to a standard model <font color="#0f0f0f">or by definition of a user-defined
    model.</font>
    '''

    ShuntCompensator: list[ShuntCompensator] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ShuntCompensator.StaticVarCompensatorSystemDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Shunt Compensator to which Static Var Compensator system dynamics model
    applies.
    '''
    
@dataclass(repr=False)
class SVSMO4(StaticVarCompensatorSystemDynamics):
    '''
    Hybrid STATCOM type SVSMO4 static var system, which has at most only one
    TSC and one TSR. It also has voltage source converter (VSC). Note this
    model is not final hence some changes are expected in the next editions
    of the standard.
    Reference: WECC Hybrid STATCOM.
    '''

    FromTerminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.HasFromTerminalSVSMO4',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The FromTerminal for this SVSMO4 model.
    '''
    
    ToTerminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.HasToTerminalSVSMO4',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ToTerminal for this SVSMO4 model.
    '''
    
@dataclass(repr=False)
class StatisticalCalculation(IdentifiedObject):
    '''
    Description of statistical calculation performed.
    '''

    CalculationMethodOrder: list[CalculationMethodOrder] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CalculationMethodOrder.StatisicalCalculation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The order in which this statistical calculation is done.
    '''
    
    calculationMode: Optional[ CalculationModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Calculation mode.
    '''
    
    calculationTechnique: Optional[ CalculationTechniqueKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of statistical calculation, specifying how the measurement value
    is calculated.
    '''
    
@dataclass(repr=False)
class PeriodicStatisticalCalculation(StatisticalCalculation):
    '''
    Description of period for which calculation is performed.
    '''

    calculationIntervalMagnitude: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of units (of calculationIntervalUnit) in the calculation interval.
    '''
    
    calculationIntervalUnit: Optional[ CalculationIntervalUnitKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit in which calculation interval is defined.
    '''
    
@dataclass(repr=False)
class StepOperationalLimitTable(IdentifiedObject):
    '''
    Describes a tabular curve for how the operational limit varies with the
    tap step.
    '''

    OperationalLimit: list[OperationalLimit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'OperationalLimit.StepOperationalLimitTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operational limit for this table.
    '''
    
    StepLimitTablePoint: list[StepLimitTablePoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'StepLimitTablePoint.StepOperationalLimitTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The points of this table.
    '''
    
    TapChanger: Optional[TapChanger] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TapChanger.StepOperationalLimitTable',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap changer that has a step operational limit table.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class SubGeographicalRegion(IdentifiedObject):
    '''
    A subset of a geographical region of a power system network model.
    '''

    DCLines: list[DCLine] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCLine.Region',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC lines in this sub-geographical region.
    '''
    
    Lines: list[Line] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Line.Region',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The lines within the sub-geographical region.
    '''
    
    Substations: list[Substation] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Substation.Region',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The substations in this sub-geographical region.
    '''
    
    Region: Optional[GeographicalRegion] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'GeographicalRegion.Regions',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The geographical region which this sub-geographical region is within.
    '''
    
@dataclass(repr=False)
class SwitchOperationSummary(IdentifiedObject):
    '''
    Up-to-date, of-record summary of switch operation information, distilled
    from a variety of sources (real-time data or real-time data historian,
    field inspections, etc.) of use to asset health analytics.
    '''

    Breaker: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.BreakerOperation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Breaker asset to which this operation information applies.
    '''
    
    lifetimeFaultOperations: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total breaker fault operations to date.
    '''
    
    lifetimeMotorStarts: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total motor starts to date.
    '''
    
    lifetimeTotalOperations: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total breaker operations to date (including fault and non-fault).
    '''
    
    mostRecentFaultOperationDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date of most recent breaker fault operation.
    '''
    
    mostRecentMotorStartDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date of most recent motor start.
    '''
    
    mostRecentOperationDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date of most recent breaker operation (fault or non-fault).
    '''
    
    Breaker: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.BreakerOperation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Breaker asset to which this operation information applies.
    '''
    
@dataclass(repr=False)
class SwitchingAction(IdentifiedObject):
    '''
    Atomic switching action.
    '''

    Crew: list[Crew] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Crew.SwitchingAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ClampAction(SwitchingAction):
    '''
    Action on Clamp as a switching step
    '''

    Clamp: Optional[Clamp] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Clamp.ClampAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ControlAction(SwitchingAction):
    '''
    Control executed as a switching step.
    '''

    Control: Optional[Control] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Control.ControlAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class CutAction(SwitchingAction):
    '''
    Action on cut as a switching step.
    '''

    Cut: Optional[Cut] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Cut.CutAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cut on which this action is taken.
    '''
    
@dataclass(repr=False)
class EnergyConsumerAction(SwitchingAction):
    '''
    Action to connect or disconnect the Energy Consumer from its Terminal
    '''

    EnergyConsumer: Optional[EnergyConsumer] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergyConsumer.EnergyConsumerAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class EnergySourceAction(SwitchingAction):
    '''
    Action on energy source as a switching step.
    '''

@dataclass(repr=False)
class GroundAction(SwitchingAction):
    '''
    Action on ground as a switching step.
    '''

    AlongACLineSegment: Optional[ACLineSegment] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACLineSegment.LineGroundingAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line segment that this ground action will affect. This is the only
    way to access relationship to clamp in case the ground needs to be
    placed along the line segment.
    '''
    
    GroundedEquipment: Optional[ConductingEquipment] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConductingEquipment.GroundingAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Equipment being grounded with this operation. In case of placing a
    ground anywhere along a line segment, you must use the clamp (to get
    the distance from one terminal), so use the explicit relation with
    line segment. In all other cases (including placing the ground at a
    line segment terminal), reference to one or more conducting equipment
    is sufficient.
    '''
    
    Ground: Optional[Ground] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Ground.GroundAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ground on which this action is taken.
    '''
    
@dataclass(repr=False)
class JumperAction(SwitchingAction):
    '''
    Action on jumper as a switching step.
    '''

    ACLineSegments: list[ACLineSegment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ACLineSegment.LineJumpingAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The line segment that this jumper action will affect. This is the only
    way to access relationship to clamp in case the jumper needs to connect
    along the line segment.
    '''
    
    Clamp: Optional[Clamp] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Clamp.JumperAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    JumpedEquipments: list[ConductingEquipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConductingEquipment.JumpingAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conducting equipment is affected when the jumper action connects one
    or both ends of a jumper to the conducting equipment. If the jumper
    action involves placing one or both ends of a jumper anywhere along
    a line segment, you must use the clamp (to get the distance from one
    terminal), using the explicit relation with clamp. In the case of placing
    one or both ends of the jumper at a line segment terminal, reference
    to one or more line segments is sufficient.
    '''
    
    Jumper: Optional[Jumper] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Jumper.JumperAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Jumper on which this action is taken.
    '''
    
@dataclass(repr=False)
class MeasurementAction(SwitchingAction):
    '''
    Measurement taken as a switching step.
    '''

    Measurement: Optional[Measurement] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Measurement.MeasurementAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class ShuntCompensatorAction(SwitchingAction):
    '''
    '''

@dataclass(repr=False)
class SwitchAction(SwitchingAction):
    '''
    Action on switch as a switching step.
    '''

    OperatedSwitch: Optional[Switch] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Switch.SwitchAction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Switch that is the object of this switch action.
    '''
    
@dataclass(repr=False)
class SynchronousMachineDynamics(IdentifiedObject):
    '''
    Synchronous machine whose behaviour is described by reference to a standard
    model expressed in one of the following forms:
    - simplified (or classical), where a group of generators or motors is not
    modelled in detail;
    - detailed, in equivalent circuit form;
    - detailed, in time constant reactance form; or
    <font color="#0f0f0f">- by definition of a user-defined model.</font>
    <font color="#0f0f0f">It is a common practice to represent small generators
    by a negative load rather than by a dynamic generator model when performing
    dynamics simulations. In this case, a SynchronousMachine in the static
    model is not represented by anything in the dynamics model, instead it
    is treated as an ordinary load.</font>
    <font color="#0f0f0f">Parameter details:</font>
    <ol>
    <li><font color="#0f0f0f">Synchronous machine parameters such as <i>Xl,
    Xd, Xp</i> etc. are actually used as inductances in the models,</font>
    but are commonly referred to as reactances since, at nominal frequency,
    the PU values are the same. However, some references use the symbol <i>L</i>
    instead of <i>X</i>.</li>
    </ol>
    '''

    SynchronousMachine: Optional[SynchronousMachine] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SynchronousMachine.SynchronousMachineDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Synchronous machine to which synchronous machine dynamics model applies.
    '''
    
@dataclass(repr=False)
class TACArea(IdentifiedObject):
    '''
    Transmission Access Charge Area. Charges assessed, on behalf of the Participating
    Transmission Owner, to parties who require access to the controlled grid.
    '''

@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class TapSchedule(IdentifiedObject):
    '''
    Schedule for tap.
    '''

    TapChanger: Optional[TapChanger] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TapChanger.TapSchedule',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Tap changer which has tap schedules.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class TelephoneNumber(IdentifiedObject):
    '''
    Telephone number information.
    '''

    areaCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Area or region code.
    '''
    
    cityCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    City code.
    '''
    
    countryCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Country code.
    '''
    
    dialOut: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Dial out code, for instance to call outside an enterprise.
    '''
    
    extension: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Extension for this telephone number.
    '''
    
    internationalPrefix: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Prefix used when calling an international number.
    '''
    
    ituPhone: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phone number according to International Telecommunication Union (ITU)
    E.164.
    '''
    
    localNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Main (local) part of this telephone number.
    '''
    
    telephoneNumberKindOther: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description of the kind of telephone number when the enumeration is
    other.
    '''
    
    telephonyKindOther: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    kind: Optional[ TelephoneNumberKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The intended use for the telephone number.
    '''
    
@dataclass(repr=False)
class TestStandard(IdentifiedObject):
    '''
    The precise standard used in executing a lab test, including the standard,
    and standard version, test method and variant, if needed.
    '''

    AssetAnalog: list[AssetAnalog] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AssetAnalog.TestStandard',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An asset health analog related to this lab test standard.
    '''
    
    AssetDiscrete: list[AssetDiscrete] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AssetDiscrete.TestStandard',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An asset health discrete related to this lab test standard.
    '''
    
    AssetString: list[AssetStringMeasurement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AssetStringMeasurement.TestStandard',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An asset health string related to this lab test standard.
    '''
    
    testMethod: Optional[ TestMethod ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identification of test method used if multiple methods specified by
    test standard.
    '''
    
    testVariant: Optional[ TestVariantKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identification of variant of test method or standard if one is specified
    by the standard.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class TieFlow(IdentifiedObject):
    '''
    Defines the structure (in terms of location and direction) of the net interchange
    constraint for a control area. This constraint may be used by either AGC
    or power flow.
    '''

    AltTieMeas: list[AltTieMeas] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'AltTieMeas.TieFlow',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The primary and alternate tie flow measurements associated with the
    tie flow.
    '''
    
    positiveFlowIn: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies the sign of the tie flow associated with a control area.
    True if positive flow into the terminal (load convention) is also positive
    flow into the control area. See the description of ControlArea for
    further explanation of how TieFlow.positiveFlowIn is used.
    '''
    
    ControlArea: Optional[ControlArea] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ControlArea.TieFlow',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The control area of the tie flows.
    '''
    
    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.TieFlow',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal to which this tie flow belongs.
    '''
    
    TieCorridor: Optional[TieCorridor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TieCorridor.TieFlow',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tie corridor which has the tie flow.
    '''
    
@dataclass(repr=False)
class TimePoint(IdentifiedObject):
    '''
    A point in time within a sequence of points in time relative to a time
    schedule.
    '''

    dateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Absolute date and time for this time point. For calendar-based time
    point, it is typically manually entered, while for interval-based or
    sequence-based time point it is derived.
    '''
    
    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if sequence-based) Relative sequence number for this time point.
    '''
    
    relativeTimeInterval: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if interval-based) A point in time relative to scheduled start time
    in 'TimeSchedule.scheduleInterval.start'.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of this time point.
    '''
    
    TimeSchedule: Optional[TimeSchedule] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TimeSchedule.TimePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Time schedule owning this time point.
    '''
    
@dataclass(repr=False)
class TimeSeries(IdentifiedObject):
    '''
    A set of regular time-ordered measurements or values of quantitative nature
    of an individual or collective phenomenon taken at successive, in most
    cases equidistant, periods / points of time.
    '''

    businessType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The identification of the nature of the time series.
    '''
    
    cancelledTS: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An indicator stating that the TimeSeries, identified by the mRID, is
    cancelled as well as all the values sent in a previous version of the
    TimeSeries in a previous document.
    '''
    
    curveType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The coded representation of the type of curve being described.
    '''
    
    objectAggregation: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identification of the object that is the common denominator used to
    aggregate a time series.
    '''
    
    product: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of the product such as Power, energy, reactive power, transport
    capacity that is the subject of the time series.
    '''
    
    version: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Version of the time series.
    '''
    
    EnergyMarket: Optional[EnergyMarket] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergyMarket.TimeSeries',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class BidTimeSeries(TimeSeries):
    '''
    The formal specification of specific characteristics related to a bid.
    '''

    blockBid: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that the values in the period are considered as a whole.
    They cannot be changed or subdivided.
    '''
    
    direction: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The coded identification of the energy flow.
    '''
    
    divisible: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An indication whether or not each element of the bid may be partially
    accepted or not.
    '''
    
    exclusiveBidsIdentification: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unique identification associated with all linked tenders.
    The identification of a set of tenders that are linked together signifying
    that only one can be accepted.
    This identification is defined by the tenderer and must be unique for
    a given auction.
    '''
    
    inclusiveBidsIdentification: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unique identification associated with all linked bids.
    The identification of a set of bids that are linked together signifying
    that these bids must be accepted together.
    This identification is defined by the tenderer and must be unique for
    a given auction.
    '''
    
    linkedBidsIdentification: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unique identification associated with all linked bids.
    '''
    
    minimumActivationQuantity: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum quantity of energy that can be activated at a given time
    interval.
    '''
    
    multipartBidIdentification: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The unique identification associated with a hierarchy of linked tenders.
    The identification within the set of linked tenders signifies that
    all tenders within the set with a lower offer price must be accepted.
    This identification is defined by the tenderer and must be unique.
    '''
    
    priority: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The numeric local priority given to a bid. Lower numeric values will
    have higher priority.
    '''
    
    status: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The information about the status of the bid, such as "shared", "restricted",
    ...
    '''
    
    stepIncrementQuantity: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The minimum increment that can be applied for an increase in an activation
    request.
    '''
    
@dataclass(repr=False)
class Series(TimeSeries):
    '''
    A set of similar physical or conceptual objects defined for the same period
    or point of time.
    '''

    lastUpdateDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'deprecated Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The date of the last update related to this market object.
    '''
    
    methodType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'deprecated Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of method used in the business process related to this Series,
    e.g. metering method.
    '''
    
    registrationDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'deprecated Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    For a market object, the date of registration of a contract, e.g. the
    date of change of supplier for a customer.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class TopologicalIsland(IdentifiedObject):
    '''
    An electrically connected subset of the network. Topological islands can
    change as the current network state changes, e.g. due to:
    - disconnect switches or breakers changing state in a SCADA/EMS.
    - manual creation, change or deletion of topological nodes in a planning
    tool.
    Only energised TopologicalNode-s shall be part of the topological island.
    '''

    AngleRefTopologicalNode: Optional[TopologicalNode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalNode.AngleRefTopologicalIsland',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The angle reference for the island. Normally there is one TopologicalNode
    that is selected as the angle reference for each island. Other reference
    schemes exist, so the association is typically optional.
    '''
    
    TopologicalNodes: list[TopologicalNode] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TopologicalNode.TopologicalIsland',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A topological node belongs to a topological island.
    '''
    
    AngleRefTopologicalNode: Optional[TopologicalNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalNode.AngleRefTopologicalIsland',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The angle reference for the island. Normally there is one TopologicalNode
    that is selected as the angle reference for each island. Other reference
    schemes exist, so the association is typically optional.
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class TopologicalNode(IdentifiedObject):
    '''
    For a detailed substation model a topological node is a set of connectivity
    nodes that, in the current network state, are connected together through
    any type of closed switches, including jumpers. Topological nodes change
    as the current network state changes (i.e., switches, breakers, etc. change
    state).
    For a planning model, switch statuses are not used to form topological
    nodes. Instead they are manually created or deleted in a model builder
    tool. Topological nodes maintained this way are also called "busses".
    '''

    BusNameMarker: list[BusNameMarker] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'BusNameMarker.TopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    BusnameMarkers that may refer to a pre defined TopologicalNode.
    '''
    
    ConnectivityNodes: list[ConnectivityNode] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConnectivityNode.TopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The connectivity nodes combine together to form this topological node.
    May depend on the current state of switches in the network.
    '''
    
    SvInjection: list[SvInjection] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SvInjection.TopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The injection flows state variables associated with the topological
    node.
    '''
    
    SvVoltage: list[SvVoltage] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SvVoltage.TopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The state voltage associated with the topological node.
    '''
    
    Terminal: list[Terminal] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Terminal.TopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminals associated with the topological node. This can be used
    as an alternative to the connectivity node path to terminal, thus making
    it unnecessary to model connectivity nodes in some cases. Note that
    if connectivity nodes are in the model, this association would probably
    not be used as an input specification.
    '''
    
    AngleRefTopologicalIsland: Optional[TopologicalIsland] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalIsland.AngleRefTopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The island for which the node is an angle reference. Normally there
    is one angle reference node for each island.
    '''
    
    pInjection: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power injected into the bus at this location in addition
    to injections from equipment. Positive sign means injection into the
    TopologicalNode (bus).
    Starting value for a steady state solution.
    '''
    
    qInjection: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactive power injected into the bus at this location in addition
    to injections from equipment. Positive sign means injection into the
    TopologicalNode (bus).
    Starting value for a steady state solution.
    '''
    
    AngleRefTopologicalIsland: Optional[TopologicalIsland] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalIsland.AngleRefTopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The island for which the node is an angle reference. Normally there
    is one angle reference node for each island.
    '''
    
    BaseVoltage: Optional[BaseVoltage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BaseVoltage.TopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The base voltage of the topological node.
    '''
    
    ConnectivityNodeContainer: Optional[ConnectivityNodeContainer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNodeContainer.TopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The connectivity node container to which the topological node belongs.
    '''
    
    ReportingGroup: Optional[ReportingGroup] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReportingGroup.TopologicalNode',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reporting group to which the topological node belongs.
    '''
    
    StateShortCircuitResult: Optional[StateShortCircuitResult] = field(
        default=None,
        metadata={
        'type': 'GB',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StateShortCircuitResult.TopologicalNode',
        'namespace': 'http://GB/placeholder/ext#',
        })
    '''
    The short-circuit information reported for the TopologicalNode.
    '''
    
    TopologicalIsland: Optional[TopologicalIsland] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalIsland.TopologicalNodes',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A topological node belongs to a topological island.
    '''
    
@dataclass(repr=False)
class Transaction(IdentifiedObject):
    '''
    The record of details of payment for service or token sale.
    '''

    UserAttributes: list[UserAttribute] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'UserAttribute.Transaction',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All snapshots of meter parameters recorded at the time of this transaction.
    Use 'name' and 'value.value' attributes to specify name and value of
    a parameter from meter.
    '''
    
@dataclass(repr=False)
class TransformerCoreAdmittance(IdentifiedObject):
    '''
    The transformer core admittance. Used to specify the core admittance of
    a transformer in a manner that can be shared among power transformers.
    '''

    TransformerEnd: list[TransformerEnd] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerEnd.CoreAdmittance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All transformer ends having this core admittance.
    '''
    
    TransformerEndInfo: Optional[TransformerEndInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEndInfo.CoreAdmittance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end datasheet used to calculate this core admittance.
    '''
    
    b: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Magnetizing branch susceptance (B mag). The value can be positive or
    negative.
    '''
    
    b0: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence magnetizing branch susceptance.
    '''
    
    g: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Magnetizing branch conductance (G mag).
    '''
    
    g0: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence magnetizing branch conductance.
    '''
    
    TransformerEndInfo: Optional[TransformerEndInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEndInfo.CoreAdmittance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end datasheet used to calculate this core admittance.
    '''
    
@dataclass(repr=False)
class TransformerEnd(IdentifiedObject):
    '''
    A conducting connection point of a power transformer. It corresponds to
    a physical transformer winding terminal. In earlier CIM versions, the TransformerWinding
    class served a similar purpose, but this class is more flexible because
    it associates to terminal but is not a specialization of ConductingEquipment.
    '''

    PhaseTapChanger: Optional[PhaseTapChanger] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PhaseTapChanger.TransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase tap changer associated with this transformer end.
    '''
    
    RatioTapChanger: Optional[RatioTapChanger] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RatioTapChanger.TransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ratio tap changer associated with this transformer end.
    '''
    
    FromMeshImpedance: list[TransformerMeshImpedance] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerMeshImpedance.FromTransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All mesh impedances between this 'to' and other 'from' transformer
    ends.
    '''
    
    ToMeshImpedance: list[TransformerMeshImpedance] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerMeshImpedance.ToTransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All mesh impedances between this 'from' and other 'to' transformer
    ends.
    '''
    
    endNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number for this transformer end, corresponding to the end's order in
    the power transformer vector group or phase angle clock number. Highest
    voltage winding should be 1. Each end within a power transformer should
    have a unique subsequent end number. Note the transformer end number
    need not match the terminal sequence number.
    '''
    
    grounded: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used only for Yn and Zn connections indicated by PowerTransformerEnd.connectionKind.
    If true, the neutral is grounded and attributes TransformerEnd.rground
    and TransformerEnd.xground are required. If false, the attributes TransformerEnd.rground
    and TransformerEnd.xground are not considered.
    '''
    
    bmagSat: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Core shunt magnetizing susceptance in the saturation region.
    '''
    
    magBaseU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reference voltage at which the magnetizing saturation measurements
    were made.
    '''
    
    magSatFlux: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Core magnetizing saturation curve knee flux level.
    '''
    
    rground: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance part of neutral impedance. Zero indicates solidly grounded
    or grounded through a reactor.
    '''
    
    xground: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactance part of neutral impedance. Zero indicates solidly grounded
    or grounded through a reactor.
    '''
    
    AdditionalRatioTapChanger: Optional[RatioTapChanger] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RatioTapChanger.TransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An additional ratio tap changer for this transformer end.
    '''
    
    BaseVoltage: Optional[BaseVoltage] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BaseVoltage.TransformerEnds',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Base voltage of the transformer end. This is essential for PU calculation.
    '''
    
    CoreAdmittance: Optional[TransformerCoreAdmittance] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerCoreAdmittance.TransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Core admittance of this transformer end, representing magnetising current
    and core losses. The full values of the transformer should be supplied
    for one transformer end only.
    '''
    
    PhaseTapChanger: Optional[PhaseTapChanger] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PhaseTapChanger.TransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase tap changer associated with this transformer end.
    '''
    
    RatioTapChanger: Optional[RatioTapChanger] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RatioTapChanger.TransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ratio tap changer associated with this transformer end.
    '''
    
    StarImpedance: Optional[TransformerStarImpedance] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerStarImpedance.TransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (accurate for 2- or 3-winding transformers only) Pi-model impedances
    of this transformer end. By convention, for a two winding transformer,
    the full values of the transformer should be entered on the high voltage
    end (endNumber=1).
    '''
    
    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.TransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Terminal of the power transformer to which this transformer end belongs.
    '''
    
@dataclass(repr=False)
class PowerTransformerEnd(TransformerEnd):
    '''
    A PowerTransformerEnd is associated with each Terminal of a PowerTransformer.
    The impedance values r, r0, x, and x0 of a PowerTransformerEnd represents
    a star equivalent as follows.
    1) two PowerTransformerEnd-s shall be defined for a two Terminal PowerTransformer
    even if the two PowerTransformerEnd-s have the same rated voltage. The
    high voltage PowerTransformerEnd (TransformerEnd.endNumber=1) is the one
    used to exchange resistances (r, r0) and reactances (x, x0) of the PowerTransformer
    while the low voltage PowerTransformerEnd (TransformerEnd.endNumber=2)
    shall have zero impedance values.
    2) for a three Terminal PowerTransformer the three PowerTransformerEnds
    represent a star equivalent with each leg in the star represented by r,
    r0, x, and x0 values.
    3) For a three Terminal transformer each PowerTransformerEnd shall have
    g, g0, b and b0 values corresponding to the no load losses distributed
    on the three PowerTransformerEnds. The total no load loss shunt impedances
    may also be placed at one of the PowerTransformerEnds, preferably the end
    numbered 1, having the shunt values on end 1. This is the preferred way.
    4) for a PowerTransformer with more than three Terminals the PowerTransformerEnd
    impedance values cannot be used. Instead use the TransformerMeshImpedance
    or split the transformer into multiple PowerTransformers.
    Each PowerTransformerEnd must be contained by a PowerTransformer. Because
    a PowerTransformerEnd (or any other object) can not be contained by more
    than one parent, a PowerTransformerEnd can not have an association to an
    EquipmentContainer (Substation, VoltageLevel, etc).
    '''

    phaseAngleClock: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Terminal voltage phase angle displacement where 360 degrees are represented
    with clock hours. The valid values are 0 to 11. For example, for the
    secondary side end of a transformer with vector group code of 'Dyn11',
    specify the connection kind as wye with neutral and specify the phase
    angle of the clock as 11. The clock value of the transformer end number
    specified as 1, is assumed to be zero. Note the transformer end number
    is not assumed to be the same as the terminal sequence number.
    '''
    
    b: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Magnetizing branch susceptance (B mag). The value can be positive or
    negative.
    '''
    
    b0: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence magnetizing branch susceptance.
    '''
    
    connectionKind: Optional[ WindingConnection ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of connection.
    '''
    
    g: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Magnetizing branch conductance.
    '''
    
    g0: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence magnetizing branch conductance (star-model).
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance (star-model) of the transformer end.
    The attribute shall be equal to or greater than zero for non-equivalent
    transformers.
    '''
    
    r0: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series resistance (star-model) of the transformer end.
    '''
    
    ratedS: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal apparent power rating.
    The attribute shall be a positive value. For a two-winding transformer
    the values for the high and low voltage sides shall be identical.
    '''
    
    ratedU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Rated voltage: phase-phase for three-phase windings, and either phase-phase
    or phase-neutral for single-phase windings.
    A high voltage side, as given by TransformerEnd.endNumber, shall have
    a ratedU that is greater than or equal to ratedU for the lower voltage
    sides.
    The attribute shall be a positive value.
    '''
    
    x: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series reactance (star-model) of the transformer
    end.
    '''
    
    x0: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series reactance of the transformer end.
    '''
    
    PowerTransformer: Optional[PowerTransformer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerTransformer.PowerTransformerEnd',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The power transformer of this power transformer end.
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.gmdm)
@dataclass(repr=False)
class TransformerTankEnd(TransformerEnd):
    '''
    Transformer tank end represents an individual winding for unbalanced models
    or for transformer tanks connected into a bank (and bank is modelled with
    the PowerTransformer).
    '''

    orderedPhases: Optional[ OrderedPhaseCodeKind ] = field(
        default=None,
        metadata={
        'type': 'gmdm enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://epri.com/gmdm#',
        })
    '''
    '''
    
    phases: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Describes the phases carried by a conducting equipment.
    '''
    
    TransformerTank: Optional[TransformerTank] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerTank.TransformerTankEnds',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer this winding belongs to.
    '''
    
@dataclass(repr=False)
class TransformerMeshImpedance(IdentifiedObject):
    '''
    Transformer mesh impedance (Delta-model) between transformer ends.
    The typical case is that this class describes the impedance between two
    transformer ends pair-wise, i.e. the cardinalities at both transformer
    end associations are 1. However, in cases where two or more transformer
    ends are modelled the cardinalities are larger than 1.
    '''

    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance between the 'from' and the 'to' end, seen from the 'from'
    end.
    '''
    
    r0: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero-sequence resistance between the 'from' and the 'to' end, seen
    from the 'from' end.
    '''
    
    x: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactance between the 'from' and the 'to' end, seen from the 'from'
    end.
    '''
    
    x0: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero-sequence reactance between the 'from' and the 'to' end, seen from
    the 'from' end.
    '''
    
    FromTransformerEnd: Optional[TransformerEnd] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEnd.FromMeshImpedance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    From end this mesh impedance is connected to. It determines the voltage
    reference.
    '''
    
    FromTransformerEndInfo: Optional[TransformerEndInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEndInfo.FromMeshImpedances',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    'from' transformer end datasheet this mesh impedance is calculated
    from. It determines the voltage reference.
    '''
    
    ToTransformerEnd: list[TransformerEnd] = field(
        default_factory=list,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerEnd.ToMeshImpedance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All transformer ends this mesh impedance is connected to.
    '''
    
@dataclass(repr=False)
class TransformerStarImpedance(IdentifiedObject):
    '''
    Transformer star impedance (Pi-model) that accurately reflects impedance
    for transformers with 2 or 3 windings. For transformers with 4 or more
    windings, TransformerMeshImpedance class shall be used.
    For transmission networks use PowerTransformerEnd impedances (r, r0, x,
    x0, b, b0, g and g0).
    '''

    TransformerEnd: list[TransformerEnd] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerEnd.StarImpedance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All transformer ends having this star impedance.
    '''
    
    TransformerEndInfo: Optional[TransformerEndInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEndInfo.TransformerStarImpedance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end datasheet used to calculate this transformer star impedance.
    '''
    
    r: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance of the transformer end.
    '''
    
    r0: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series resistance of the transformer end.
    '''
    
    x: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Positive sequence series reactance of the transformer end.
    '''
    
    x0: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Zero sequence series reactance of the transformer end.
    '''
    
    TransformerEndInfo: Optional[TransformerEndInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEndInfo.TransformerStarImpedance',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end datasheet used to calculate this transformer star impedance.
    '''
    
@dataclass(repr=False)
class TransformerTest(IdentifiedObject):
    '''
    Test result for transformer ends, such as short-circuit, open-circuit (excitation)
    or no-load test.
    '''

    basePower: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Base power at which the tests are conducted, usually equal to the rateds
    of one of the involved transformer ends.
    '''
    
    temperature: Optional[ float | Temperature ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Temperature at which the test is conducted.
    '''
    
@dataclass(repr=False)
class NoLoadTest(TransformerTest):
    '''
    No-load test results determine core admittance parameters. They include
    exciting current and core loss measurements from applying voltage to one
    winding. The excitation may be positive sequence or zero sequence. The
    test may be repeated at different voltages to measure saturation.
    '''

    energisedEndVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage applied to the winding (end) during test.
    '''
    
    excitingCurrent: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Exciting current measured from a positive-sequence or single-phase
    excitation test.
    '''
    
    excitingCurrentZero: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Exciting current measured from a zero-sequence open-circuit excitation
    test.
    '''
    
    loss: Optional[ float | KiloActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Losses measured from a positive-sequence or single-phase excitation
    test.
    '''
    
    lossZero: Optional[ float | KiloActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Losses measured from a zero-sequence excitation test.
    '''
    
    EnergisedEnd: Optional[TransformerEndInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEndInfo.EnergisedEndNoLoadTests',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end that current is applied to in this no-load test.
    '''
    
@dataclass(repr=False)
class OpenCircuitTest(TransformerTest):
    '''
    Open-circuit test results verify winding turn ratios and phase shifts.
    They include induced voltage and phase shift measurements on open-circuit
    windings, with voltage applied to the energised end. For three-phase windings,
    the excitation can be a positive sequence (the default) or a zero sequence.
    '''

    energisedEndStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tap step number for the energised end of the test pair.
    '''
    
    openEndStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tap step number for the open end of the test pair.
    '''
    
    energisedEndVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage applied to the winding (end) during test.
    '''
    
    openEndVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage measured at the open-circuited end, with the energised end
    set to rated voltage and all other ends open.
    '''
    
    phaseShift: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase shift measured at the open end with the energised end set to
    rated voltage and all other ends open.
    '''
    
    EnergisedEnd: Optional[TransformerEndInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEndInfo.EnergisedEndOpenCircuitTests',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end that current is applied to in this open-circuit test.
    '''
    
    OpenEnd: Optional[TransformerEndInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEndInfo.OpenEndOpenCircuitTests',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end measured for induced voltage and angle in this open-circuit
    test.
    '''
    
@dataclass(repr=False)
class ShortCircuitTest(TransformerTest):
    '''
    Short-circuit test results determine mesh impedance parameters. They include
    load losses and leakage impedances. For three-phase windings, the excitation
    can be a positive sequence (the default) or a zero sequence. There shall
    be at least one grounded winding.
    '''

    energisedEndStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tap step number for the energised end of the test pair.
    '''
    
    groundedEndStep: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tap step number for the grounded end of the test pair.
    '''
    
    current: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Short circuit current..
    '''
    
    leakageImpedance: Optional[ float | Impedance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Leakage impedance measured from a positive-sequence or single-phase
    short-circuit test.
    '''
    
    leakageImpedanceZero: Optional[ float | Impedance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Leakage impedance measured from a zero-sequence short-circuit test.
    '''
    
    loss: Optional[ float | KiloActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Load losses from a positive-sequence or single-phase short-circuit
    test.
    '''
    
    lossZero: Optional[ float | KiloActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Load losses from a zero-sequence short-circuit test.
    '''
    
    power: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Short circuit apparent power.
    '''
    
    voltage: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Short circuit voltage..
    '''
    
    EnergisedEnd: Optional[TransformerEndInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TransformerEndInfo.EnergisedEndShortCircuitTests',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transformer end that voltage is applied to in this short-circuit test.
    The test voltage is chosen to induce rated current in the energised
    end.
    '''
    
    GroundedEnds: list[TransformerEndInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'TransformerEndInfo.GroundedEndShortCircuitTests',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All ends short-circuited in this short-circuit test.
    '''
    
@dataclass(repr=False)
class TransmissionRightChain(IdentifiedObject):
    '''
    Allows chaining of TransmissionContractRights. Many individual contract
    rights can be included in the definition of a TransmissionRightChain. A
    TransmissionRightChain is also defined as a TransmissionContractRight itself.
    '''

    Chain_ContractRight: Optional[ContractRight] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ContractRight.Chain_TransmissionRightChain',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Ind_ContractRight: list[ContractRight] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContractRight.Ind_TransmissionRightChain',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Chain_ContractRight: Optional[ContractRight] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ContractRight.Chain_TransmissionRightChain',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RTO: Optional[RTO] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RTO.TransmissionRightChain',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class TriggerCondition(IdentifiedObject):
    '''
    The condition that triggers a remedial action scheme.
    '''

    GateTrigger: Optional[Gate] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Gate.TriggerCondition',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The gate that is the condition for the trigger.
    '''
    
    RemedialActionScheme: Optional[RemedialActionScheme] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RemedialActionScheme.TriggerCondition',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The remedial action scheme that has the trigger condition.
    '''
    
@stereotype(CIMStereotype.informative)
@dataclass(repr=False)
class TypeAssetCatalogue(IdentifiedObject):
    '''
    Catalogue of generic types of assets (TypeAsset) that may be used for design
    purposes. It is not associated with a particular manufacturer.
    '''

    TypeAssets: list[CatalogAssetType] = field(
        default_factory=list,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'CatalogAssetType.TypeAssetCatalogue',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class UsagePoint(IdentifiedObject):
    '''
    Logical or physical point in the network to which readings or events may
    be attributed. Used at the place where a physical or virtual meter may
    be located; however, it is not required that a meter be present.
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConfigurationEvent.ChangedUsagePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All configuration events created for this usage point.
    '''
    
    EndDevices: list[EndDevice] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDevice.UsagePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All end devices at this usage point.
    '''
    
    EndDeviceEvents: list[EndDeviceEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'EndDeviceEvent.UsagePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All end device events reported for this usage point.
    '''
    
    MeterReadings: list[MeterReading] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeterReading.UsagePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All meter readings obtained from this usage point.
    '''
    
    MeterServiceWorkTasks: list[MeterWorkTask] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MeterWorkTask.UsagePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All meter service work tasks at this usage point.
    '''
    
    Register: list[Register] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Register.Usage_Point',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ServiceMultipliers: list[ServiceMultiplier] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ServiceMultiplier.UsagePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All multipliers applied at this usage point.
    '''
    
    ServiceOrder: list[ServiceOrder] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ServiceOrder.UsagePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ServiceOrder created for work on a particular UsagePoint
    '''
    
    checkBilling: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if as a result of an inspection or otherwise, there is a reason
    to suspect that a previous billing may have been performed with erroneous
    data. Value should be reset once this potential discrepancy has been
    resolved.
    '''
    
    connectionCategory: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A code used to specify the connection category, e.g., low voltage or
    low pressure, where the usage point is defined.
    '''
    
    disconnectionMethod: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is an indication of how the usage point is physically connected or
    disconnected.
    '''
    
    grounded: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if grounded.
    '''
    
    isSdp: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, this usage point is a service delivery point, i.e., a usage
    point where the ownership of the service changes hands.
    '''
    
    isVirtual: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, this usage point is virtual, i.e., no physical location exists
    in the network where a meter could be located to collect the meter
    readings. For example, one may define a virtual usage point to serve
    as an aggregation of usage for all of a company's premises distributed
    widely across the distribution territory. Otherwise, the usage point
    is physical, i.e., there is a logical point in the network where a
    meter could be located to collect meter readings.
    '''
    
    minimalUsageExpected: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If true, minimal or zero usage is expected at this usage point for
    situations such as premises vacancy, logical or physical disconnect.
    It is used for readings validation and estimation.
    '''
    
    outageRegion: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Outage region in which this usage point is located.
    '''
    
    phaseCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of potential phases the Usage Point supports, typically 0, 1
    or 3.
    '''
    
    readCycle: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cycle day on which the meter for this usage point will normally be
    read. Usually correlated with the billing cycle.
    '''
    
    readRoute: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identifier of the route to which this usage point is assigned for purposes
    of meter reading. Typically used to configure hand held meter reading
    systems prior to collection of reads.
    '''
    
    serviceDeliveryRemark: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Remarks about this usage point, for example the reason for it being
    rated with a non-nominal priority.
    '''
    
    servicePriority: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority of service for this usage point. Note that usage points at
    the same service location can have different priorities.
    '''
    
    specialNeed: Optional[str] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Special service needs for the person (contact) are described; examples
    include life support, etc.
    '''
    
    amiBillingReady: Optional[ AmiBillingReadyKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Tracks the lifecycle of the metering installation at a usage point
    with respect to readiness for billing via advanced metering infrastructure
    reads.
    '''
    
    connectionState: Optional[ UsagePointConnectedKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    State of the usage point with respect to connection to the network.
    '''
    
    estimatedLoad: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Estimated load.
    '''
    
    nominalServiceVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Nominal service voltage.
    '''
    
    phaseCode: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase code. Number of wires and specific nominal phases can be deduced
    from enumeration literal values. For example, ABCN is three-phase,
    four-wire, s12n (splitSecondary12N) is single-phase, three-wire, and
    s1n and s2n are single-phase, two-wire.
    '''
    
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current flow that this usage point is configured to deliver.
    '''
    
    ratedPower: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Active power that this usage point is configured to deliver.
    '''
    
    CustomerAgreement: Optional[CustomerAgreement] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'CustomerAgreement.UsagePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Customer agreement regulating this service delivery point.
    '''
    
    EnvironmentalMonitoringStation: Optional[EnvironmentalMonitoringStation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnvironmentalMonitoringStation.UsagePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ServiceCategory: Optional[ServiceCategory] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ServiceCategory.UsagePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Service category delivered by this usage point.
    '''
    
    ServiceLocation: Optional[ServiceLocation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ServiceLocation.UsagePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Service location where the service delivered by this usage point is
    consumed.
    '''
    
    ServiceSupplier: Optional[ServiceSupplier] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ServiceSupplier.UsagePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ServiceSupplier (utility) utilising this usage point to deliver a service.
    '''
    
    UsagePointLocation: Optional[UsagePointLocation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'UsagePointLocation.UsagePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Location of this usage point.
    '''
    
@dataclass(repr=False)
class MarketEvaluationPoint(UsagePoint):
    '''
    The identification of an entity where energy products are measured or computed.
    '''

    measurementMethod: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies how the energy volumes are established for the MarketEvaluationPoint,
    such as continuous, non-continuous, calculated, or not-metered.
    '''
    
    meteredDataCollectionMethod: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies how a Metered Data Collector collects data from the Meter
    for the MarketEvaluationPoint, such as Automatic or Manually.
    '''
    
@dataclass(repr=False)
class AccountingPoint(MarketEvaluationPoint):
    '''
    An administrative point where Energy Supplier change can take place and
    for which commercial business processes are defined.
    '''

    administrativeStatus: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies whether (or not) the AccountingPoint is active part of the
    imbalance settlement.
    Additional information: E.g., if still physically connected, but inactive
    in the market, the energy volume for the AccountingPoint will be part
    of the losses in the grid.
    '''
    
    flexibilityContract: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicates if there are contract(s) at this Accounting Point as a result
    of the demand side management or the load management for the Accounting
    Point.
    '''
    
    gridAgreementType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specification of type of grid contract, such as if the contract is
    directly between the Grid Company and the Grid Customer, or through
    the Energy Supplier.
    '''
    
    meterReadingResolution: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The length of time between the regular meter readings.
    '''
    
    settlementMethod: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Specifies how the energy volumes are treated for settlement for the
    AccountingPoint, such as profiled or non-profiled.
    '''
    
@dataclass(repr=False)
class ExchangePoint(MarketEvaluationPoint):
    '''
    An administrative point establishing energy exchange between two Domains.
    '''

@dataclass(repr=False)
class UsagePointGroup(IdentifiedObject):
    '''
    Abstraction for management of group communications within a two-way AMR
    system or the data for a group of related usage points. Commands can be
    issued to all of the usage points that belong to a usage point group using
    a defined group address and the underlying AMR communication infrastructure.
    '''

    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of this group.
    '''
    
@dataclass(repr=False)
class VSCDynamics(IdentifiedObject):
    '''
    VSC function block whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''

    VsConverter: Optional[VsConverter] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'VsConverter.VSCDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage source converter to which voltage source converter dynamics
    model applies.
    '''
    
@dataclass(repr=False)
class ValueAliasSet(IdentifiedObject):
    '''
    Describes the translation of a set of values into a name and is intendend
    to facilitate custom translations. Each ValueAliasSet has a name, description
    etc. A specific Measurement may represent a discrete state like Open, Closed,
    Intermediate etc. This requires a translation from the MeasurementValue.value
    number to a string, e.g. 0-&gt;"Invalid", 1-&gt;"Open", 2-&gt;"Closed",
    3-&gt;"Intermediate". Each ValueToAlias member in ValueAliasSet.Value describe
    a mapping for one particular value to a name.
    '''

    Commands: list[Command] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Command.ValueAliasSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Commands using the set for translation.
    '''
    
    Discretes: list[Discrete] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Discrete.ValueAliasSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Measurements using the set for translation.
    '''
    
    RaiseLowerCommands: list[RaiseLowerCommand] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'RaiseLowerCommand.ValueAliasSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Commands using the set for translation.
    '''
    
    Values: list[ValueToAlias] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ValueToAlias.ValueAliasSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ValueToAlias mappings included in the set.
    '''
    
@dataclass(repr=False)
class ValueToAlias(IdentifiedObject):
    '''
    Describes the translation of one particular value into a name, e.g. 1 as
    "Open".
    '''

    value: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The value that is mapped.
    '''
    
    ValueAliasSet: Optional[ValueAliasSet] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ValueAliasSet.Values',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The ValueAliasSet having the ValueToAlias mappings.
    '''
    
@dataclass(repr=False)
class VisibilityLayer(IdentifiedObject):
    '''
    Layers are typically used for grouping diagram objects according to themes
    and scales. Themes are used to display or hide certain information (e.g.,
    lakes, borders), while scales are used for hiding or displaying information
    depending on the current zoom level (hide text when it is too small to
    be read, or when it exceeds the screen size). This is also called de-cluttering.
    CIM based graphics exchange supports an m:n relationship between diagram
    objects and layers. The importing system shall convert an m:n case into
    an appropriate 1:n representation if the importing system does not support
    m:n.
    '''

    drawingOrder: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The drawing order for this layer. The higher the number, the later
    the layer and the objects within it are rendered.
    '''
    
@dataclass(repr=False)
class WeccREPCC(IdentifiedObject):
    '''
    WECC Plant controller model (REPC_C).
    Reference: WECC REMWG, Proposal for new features for the renewable energy
    system generic models, 2021.
    '''

    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.WeccREPCC',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Terminal where the frequency is measured.
    '''
    
@dataclass(repr=False)
class WeccWTGIBFFRA(IdentifiedObject):
    '''
    WECC WTGIBFFR_A model. Auxiliary control model representing the so-called
    inertial-based fast-frequency response (IBFFR) controls.
    Reference: WECC REMWG, Proposal for new features for the renewable energy
    system generic models, 2021.
    '''

    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.WeccWTGIBFFRA',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The Terminal where the frequency is measured.
    '''
    
@dataclass(repr=False)
class Weight(IdentifiedObject):
    '''
    As applicable, the basic linear, area, or volume dimensions of an asset,
    asset type (AssetModel) or other type of object (such as land area). Units
    and multipliers are specified per dimension.
    '''

    Asset: Optional[Asset] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Asset.Weight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    AssetSpecification: Optional[AssetRequirement] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetRequirement.Weight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class WheelingCounterParty(IdentifiedObject):
    '''
    Counter party in a wheeling transaction.
    '''

@dataclass(repr=False)
class WindPlantDynamics(IdentifiedObject):
    '''
    Parent class supporting relationships to wind turbines type 3 and type
    4 and wind plant IEC and user-defined wind plants including their control
    models.
    '''

    PointOfConnection: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.WindPlantDynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Point of connection for this wind plant.
    '''
    
@dataclass(repr=False)
class WindTurbineType3or4Dynamics(IdentifiedObject):
    '''
    Parent class supporting relationships to wind turbines type 3 and type
    4 and wind plant including their control models.
    '''

    PowerElectronicsConnection: Optional[PowerElectronicsConnection] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsConnection.WindTurbineType3or4Dynamics',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The power electronics connection associated with this wind turbine
    type 3 or type 4 dynamics model.
    '''
    
@dataclass(repr=False)
class WirePosition(IdentifiedObject):
    '''
    Identification, spacing and configuration of the wires of a conductor with
    respect to a structure.
    '''

    WirePhaseInfo: list[WirePhaseInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'WirePhaseInfo.WirePosition',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Wire phase information for this wire position.
    '''
    
    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Numbering for wires on a WireSpacingInfo. Neutrals should be numbered
    last.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute add',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The phase connection of the wire at both ends.
    '''
    
    xCoord: Optional[ float | Displacement ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Signed horizontal distance from the wire at this position to a common
    reference point.
    '''
    
    yCoord: Optional[ float | Displacement ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Signed vertical distance from the wire at this position: above ground
    (positive value) or burial depth below ground (negative value).
    '''
    
    WireSpacingInfo: Optional[WireSpacingInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WireSpacingInfo.WirePositions',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Wire spacing data this wire position belongs to.
    '''
    
@dataclass(repr=False)
class WorkCapability(IdentifiedObject):
    '''
    A capability of a crew that is required in order to perform a specified
    task.
    Examples include:
    <ul>
    <li>Hot Construction - High Voltage</li>
    <li>Hot Construction - Medium Voltage</li>
    <li>Hot Construction - Low Voltage</li>
    <li>Cold Construction</li>
    <li>Overhead Construction</li>
    <li>Underground Construction</li>
    <li>Cable Pulling</li>
    </ul>
    Examples may be broken down into lower level abilities, depending on the
    needs of the particular utility.
    '''

    Crew: list[Crew] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Crew.WorkCapability',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class WorkTaskStep(IdentifiedObject):
    '''
    Further breakdown of a work task into individual steps to be performed.
    '''

    ProcedureDataSet: list[ProcedureDataSet] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ProcedureDataSet.WorkTaskStep',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Procedure data set created by this work task step.
    '''
    
@dataclass(repr=False)
class ImpedanceTapChangerTablePoint(Identity):
    '''
    Describes each tap step in the impedance tap changer tabular curve.
    '''

    ratio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage at the tap step divided by rated voltage of the transformer
    end having the tap changer. Hence this is a value close to one. For
    example, if the ratio at step 1 is 1.01, and the rated voltage of the
    transformer end is 110kV, then the voltage obtained by setting the
    tap changer to step 1 to is 111.1kV.
    '''
    
    step: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap step.
    '''
    
    angle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The angle difference in degrees. A positive value indicates a positive
    angle variation from the Terminal at the PowerTransformerEnd, where
    the TapChanger is located, into the transformer.
    '''
    
    rEnd1: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The resistance deviation as a percentage of nominal value, r(nominal),
    for the winding with TransformerEnd.endNumber equal to 1. The actual
    reactance is calculated as follows: calculated resistance = r(nominal)
    * (1 + r(from this class)/100). This model assumes the star impedance
    (pi model) form. Note that the upper boundary is not constrained to
    100 percent.
    '''
    
    rEnd2: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The resistance deviation as a percentage of nominal value, r(nominal),
    for the winding with TransformerEnd.endNumber equal to 2. The actual
    reactance is calculated as follows: calculated resistance = r(nominal)
    * (1 + r(from this class)/100). This model assumes the star impedance
    (pi model) form. Note that the upper boundary is not constrained to
    100 percent.
    '''
    
    rEnd3: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The resistance deviation as a percentage of nominal value, r(nominal),
    for the winding with TransformerEnd.endNumber equal to 3. The actual
    reactance is calculated as follows: calculated resistance = r(nominal)
    * (1 + r(from this class)/100). This model assumes the star impedance
    (pi model) form. Note that the upper boundary is not constrained to
    100 percent.
    '''
    
    xEnd1: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The series reactance deviation as a percentage of nominal value, x(nominal),
    for the winding with TransformerEnd.endNumber equal to 1. The actual
    reactance is calculated as follows: calculated reactance = x(nominal)
    * (1 + x (from this class)/100). This model assumes the star impedance
    (pi model) form. Note that the upper boundary is not constrained to
    100 percent.
    '''
    
    xEnd2: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The series reactance deviation as a percentage of nominal value, x(nominal),
    for the winding with TransformerEnd.endNumber equal to 2. The actual
    reactance is calculated as follows: calculated reactance = x(nominal)
    * (1 + x(from this class)/100). This model assumes the star impedance
    (pi model) form. Note that the upper boundary is not constrained to
    100 percent.
    '''
    
    xEnd3: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The series reactance deviation as a percentage of nominal value, x(nominal),
    for the winding with TransformerEnd.endNumber equal to 3. The actual
    reactance is calculated as follows: calculated reactance = x(nominal)
    * (1 + x(from this class)/100). This model assumes the star impedance
    (pi model) form. Note that the upper boundary is not constrained to
    100 percent.
    '''
    
    ImpedanceTapChangerTable: Optional[ImpedanceTapChangerTable] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ImpedanceTapChangerTable.ImpedanceTapChangerTablePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The table of this point.
    '''
    
@dataclass(repr=False)
class InfeedTerminal(Identity):
    '''
    Infeed terminal defines the terminals that are linked to an infeed limit.
    '''

    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in RFC 4122, for the mRID. The use of
    UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    ACDCTerminal: Optional[ACDCTerminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ACDCTerminal.InfeedTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ACDCTerminal which is connected to an infeed terminal.
    '''
    
    InfeedConstraint: Optional[InfeedLimit] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InfeedLimit.InfeedTerminal',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Infeed constraint which belongs to an infeed terminal.
    '''
    
@dataclass(repr=False)
class InstanceSet(Identity):
    '''
    Instance of a version of a model part. This corresponds to a payload of
    instance data.
    '''

    InstanceSetMember: list[IdentifiedObject] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IdentifiedObject.InstanceSet',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Data objects contained in the dataset.
    '''
    
@dataclass(repr=False)
class IntervalBlock(Identity):
    '''
    Time sequence of readings of the same reading type. Contained interval
    readings may need conversion through the application of an offset and a
    scalar defined in associated pending.
    '''

    MeterReading: Optional[MeterReading] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeterReading.IntervalBlocks',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Meter reading containing this interval block.
    '''
    
    PendingCalculation: Optional[PendingCalculation] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PendingCalculation.IntervalBlocks',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pending calculation to apply to interval reading values contained by
    this block (after which the resulting reading type is different than
    the original because it reflects the conversion result).
    '''
    
    ReadingType: Optional[ReadingType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReadingType.IntervalBlocks',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type information for interval reading values contained in this block.
    '''
    
@dataclass(repr=False)
class InverterCapabilities(Identity):
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Supported control mode functions</i>
    Indication of support for each control mode function
    '''

    IntervalInfo: list[InverterInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'InverterInfo.InverterCapabilites',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    isModeCapableActivePowerReactivePower: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of operating in Active Power
    - Reactive Power (PQ) mode.
    '''
    
    isModeCapableConstantPowerFactor: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of operating in Constant
    Power Factor (PF) mode.
    '''
    
    isModeCapableConstantReactivePower: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of operating in Constant
    Reactive Power (Q) mode.
    '''
    
    isModeCapableFrequencyActivePower: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of Frequency Droop protection,
    also known as Frequency - Active Power (FP) mode.
    '''
    
    isModeCapableVoltageActivePower: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of operating in Voltage -
    Active Power (VP) mode.
    '''
    
    isModeCapableVoltageReactivePower: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of operating in Voltage -
    Reactive Power (VQ) mode.
    '''
    
    isProtectionCapableEnterServiceAfterTrip: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of Enter Service After Trip
    protection.
    '''
    
    isProtectionCapableFrequencyTrip: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of Frequency Trip protection.
    '''
    
    isProtectionCapableLimitActivePower: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of Limit Maximum Active Power
    protection.
    '''
    
    isProtectionCapableMomentaryCessation: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of Momentary Cessation (also
    known as Voltage Ride-Through) protection.
    '''
    
    isProtectionCapableVoltageTrip: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Flag to identify if the Device is capable of operating with Voltage
    Trip protection.
    '''
    
@dataclass(repr=False)
class IrregularTimePoint(Identity):
    '''
    TimePoints for a schedule where the time between the points varies.
    '''

    value1: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The first value at the time. The meaning of the value is defined by
    the derived type of the associated schedule.
    '''
    
    value2: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The second value at the time. The meaning of the value is defined by
    the derived type of the associated schedule.
    '''
    
    value3: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The third value at the time. The meaning of the value is defined by
    the derived type of the associated schedule.
    '''
    
    time: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time is relative to the schedule starting time.
    '''
    
    IntervalSchedule: Optional[IrregularIntervalSchedule] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IrregularIntervalSchedule.TimePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An IrregularTimePoint belongs to an IrregularIntervalSchedule.
    '''
    
@dataclass(repr=False)
class LoadDistributionFactor(Identity):
    '''
    This class models the load distribution factors. This class should be used
    in one of two ways:
    Use it along with the AggregatedPnode and the IndividualPnode to show the
    distriubtion of each individual party
    OR
    Use it with Mkt_EnergyConsumer to represent the current MW/Mvar distribution
    within it's parnet load group.
    '''

    IndividualPnode: Optional[IndividualPnode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IndividualPnode.LoadDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class LoadRatio(Identity):
    '''
    Representing the ratio of the load share for the associated SC.
    '''

    SchedulingCoordinator: Optional[SchedulingCoordinator] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SchedulingCoordinator.LoadRatio',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    intervalEndTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Interval End Time
    '''
    
    intervalStartTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Interval Start Time
    '''
    
    share: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Share in percentage of total Market load for the selected time interval.
    '''
    
    SchedulingCoordinator: Optional[SchedulingCoordinator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SchedulingCoordinator.LoadRatio',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class LocationAccess(Identity):
    '''
    Location access refers to the physical means or pathways by which a site,
    building, building space or other property can be reached from the road
    network. It typically including roads, driveways, entrances, or adjacent
    properties.
    '''

    BuildingSpace: Optional[BuildingSpace] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BuildingSpace.LocationAccess',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.LocationAccess',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    access: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    General availability and functionality of pathways, roads, or other
    means that enable entry to and exit from a site, regardless of seasonal
    or environmental conditions.
    '''
    
    accessHazard: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Problems previously encountered when visiting or performing work at
    this location. Examples include: bad dog, violent customer, verbally
    abusive occupant, obstructions, safety hazards, etc.
    '''
    
    accessMethod: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Method for the service person to access this usage point location.
    For example, a description of where to obtain a key if the facility
    is unmanned and secured.
    '''
    
    accessSummer: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Accessibility of a site specifically during the summer months, considering
    weather conditions, terrain, and maintenance schedules that may enhance
    or limit entry.
    '''
    
    accessWinter: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Accessibility of a site during the winter months, accounting for seasonal
    challenges such as snow, ice, or reduced maintenance of pathways
    '''
    
    BuildingSpace: Optional[BuildingSpace] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BuildingSpace.LocationAccess',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.LocationAccess',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MPMTestThreshold(Identity):
    '''
    Market Power Mitigation (MPM) test thresholds for resource as well as designated
    congestion areas (DCAs).
    '''

    marketType: Optional[ MarketType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Market Type (DAM, RTM)
    '''
    
    percent: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Price Threshold in %
    '''
    
    price: Optional[ float | CostPerEnergyUnit ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Price Threshold in $/MW
    '''
    
    MPMTestCategory: Optional[MPMTestCategory] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MPMTestCategory.MPMTestThreshold',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarketObjectStatus(Identity):
    '''
    The condition or position of an object with regard to its standing.
    '''

    status: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The coded condition or position of an object with regard to its standing.
    '''
    
@dataclass(repr=False)
class MarketRegionResults(Identity):
    '''
    Provides all Region Ancillary Service results for the DA and RT markets.
    The specific data is commodity type (Regulation Up, Regulation Down, Spinning
    Reserve, Non-spinning Reserve, or Total Up reserves) based for the cleared
    MW, cleared price, and total capacity required for the region.
    '''

    MarketProduct: Optional[MarketProduct] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MarketProduct.MarketRegionResults',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MarketResults(Identity):
    '''
    This class holds elements that are single values for the entire market
    time horizon. That is, for the Day Ahead market, there is 1 value for each
    element, not hourly based. Is a summary of the market run.
    '''

    EnergyMarket: Optional[EnergyMarket] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EnergyMarket.MarketResults',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class MeterInfo(Identity):
    '''
    Datasheet of a smart meter, possibly integrating other metering functions
    '''

    electricMetering: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'moved Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if electric metering function is supported.
    '''
    
    gasMetering: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'moved Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if gas metering function is supported.
    '''
    
    lastGasp: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a meter is capable of sending the notification ("last gasp")
    of voltage loss event.
    '''
    
    measurementPoll: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a meter is capable of remote checking ("poll") of its measurements.
    '''
    
    measurementUnsolicited: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a meter is capable of sending unsolicited measurement readings.
    '''
    
    outageHistory: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'moved Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if outage history function is supported.
    '''
    
    overVoltage: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a meter is capable of sending the notification of over voltage
    event.
    '''
    
    overVoltageRTN: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a meter is capable of sending a notification when an over voltage
    returns to normal.
    '''
    
    pingStatus: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a meter is capable of remote checking ("ping") of its energization
    status.
    '''
    
    powerOnNotification: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a meter is capable of sending the notification of reenergization
    event.
    '''
    
    pricingInfo: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'moved Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if pricing information is supported.
    '''
    
    registerCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The number of registers associated with a meter.
    '''
    
    reverseFlow: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'moved Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if reverse flow function is supported.
    '''
    
    underVoltage: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a meter is capable of sending the notification of under voltage
    event.
    '''
    
    underVoltageRTN: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if a meter is capable of sending a notification when an under
    voltage returns to normal.
    '''
    
    waterMetering: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'moved Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if water metering function is supported.
    '''
    
@stereotype(CIMStereotype.NC)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class Name(Identity):
    '''
    The Name class, in possible combination with a name type and a naming authority
    provides the means to define any number of names or alternative identifiers
    for an object.
    '''

    NameType: Optional[NameType] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'NameType.Name',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of this name.
    '''
    
    NamingAuthority: Optional[NamingAuthority] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'NamingAuthority.Name',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Authority responsible for managing this name.
    '''
    
    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in RFC 4122, for the mRID. The use of
    UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    language: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Shall be specified as an IETF BCP 47 language tag (e.g. en-US). Applies
    to the Name.name attribute.
    IETF language tags combine subtags from other standards such as ISO
    639, ISO 15924, ISO 3166-1, and UN M.49. The tag structure has been
    standardized by the IETF in Best Current Practice (BCP) 47; the subtags
    are maintained by the IANA Language Subtag Registry.
    '''
    
    name: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Any free text that used as a name or alternative identifier of the
    object.
    '''
    
    IdentifiedObject: Optional[IdentifiedObject] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IdentifiedObject.Name',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identified object that this name designates.
    '''
    
    NameType: Optional[NameType] = field(
        default=None,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'NameType.Name',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of this name.
    '''
    
    UniqueIdentifiedObject: Optional[IdentifiedObject] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IdentifiedObject.AlternativeIdentifier',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Identified object that this alternative identifier designates.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class NameType(Identity):
    '''
    Type of name. Possible values for attribute 'name' are implementation dependent
    but standard profiles may specify types. An enterprise may have multiple
    IT systems each having its own local name for the same object, e.g. a planning
    system may have different names from an EMS. An object may also have different
    names within the same IT system, e.g. localName as defined in CIM version
    14. The definition from CIM14 is:
    The localName is a human readable name of the object. It is a free text
    name local to a node in a naming hierarchy similar to a file directory
    structure. A power system related naming hierarchy may be: Substation,
    VoltageLevel, Equipment etc. Children of the same parent in such a hierarchy
    have names that typically are unique among them.
    '''

    Name: list[Name] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Name.NameType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All names of this type.
    '''
    
    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in RFC 4122, for the mRID. The use of
    UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    description: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description of the name type.
    '''
    
    name: list[Name] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Name.NameType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All names of this type.
    '''
    
    NamingAuthority: Optional[NamingAuthority] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'NamingAuthority.NameType',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Authority responsible for managing this name type.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class NamingAuthority(Identity):
    '''
    Authority responsible for creation and management of names of a given name
    type and/or name; typically an organization or an enterprise system.
    '''

    NameType: list[NameType] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'NameType.NamingAuthority',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All name types managed by this authority.
    '''
    
    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in RFC 4122, for the mRID. The use of
    UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    description: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Description of the naming authority.
    '''
    
    name: list[Name] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Name.NamingAuthority',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All names managed by this authority.
    '''
    
@dataclass(repr=False)
class NonlinearShuntCompensatorPhasePoint(Identity):
    '''
    A per phase non linear shunt compensator bank or section admittance value.
    The number of NonlinearShuntCompensatorPhasePoint instances associated
    with a NonlinearShuntCompensatorPhase shall be equal to ShuntCompensatorPhase.maximumSections.
    ShuntCompensator.sections shall only be set to one of the NonlinearShuntCompensatorPhasePoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompensatorPhasePoint-s.
    '''

    sectionNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The number of the section.
    '''
    
    bTotal: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total positive sequence shunt (charging) susceptance at section noted
    by sectionNumber.
    '''
    
    gTotal: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total positive sequence shunt (charging) conductance at section noted
    by sectionNumber.
    '''
    
    NonlinearShuntCompensatorPhase: Optional[NonlinearShuntCompensatorPhase] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'NonlinearShuntCompensatorPhase.NonlinearShuntCompensatorPhasePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Non-linear shunt compensator phase owning this point.
    '''
    
@dataclass(repr=False)
class NonlinearShuntCompensatorPoint(Identity):
    '''
    A non linear shunt compensator bank or section admittance value. The number
    of NonlinearShuntCompensatorPoint instances associated with a NonlinearShuntCompensator
    shall be equal to ShuntCompensator.maximumSections. ShuntCompensator.sections
    shall only be set to one of the NonlinearShuntCompensatorPoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompensatorPoint-s.
    '''

    sectionNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The number of the section.
    '''
    
    b0Total: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total zero sequence shunt (charging) susceptance at section noted by
    sectionNumber.
    '''
    
    bTotal: Optional[ float | Susceptance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total positive sequence shunt (charging) susceptance at section noted
    by sectionNumber.
    '''
    
    g0Total: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total zero sequence shunt (charging) conductance at section noted by
    sectionNumber.
    '''
    
    gTotal: Optional[ float | Conductance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Total positive sequence shunt (charging) conductance at section noted
    by sectionNumber.
    '''
    
    NonlinearShuntCompensator: Optional[NonlinearShuntCompensator] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'NonlinearShuntCompensator.NonlinearShuntCompensatorPoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Non-linear shunt compensator owning this point.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class ObjectType(Identity):
    '''
    Identifies the specialised type of an object when the instance object is
    serialised using a generalised class. It may be useful when the object
    type is not otherwise included in the exchange. For example, a Meter may
    be serialised as an EndDevice in message exchanges and need to have the
    ObjectType.type be specified as 'Meter' to provide context to the message
    receiver.
    '''

    IdentifiedObject: list[IdentifiedObject] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IdentifiedObject.ObjectType',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The IdentifiedObject whose type is identified by ObjectType.
    '''
    
@dataclass(repr=False)
class OilPrice(Identity):
    '''
    Price of oil in monetary units.
    '''

    FuelRegion: Optional[FuelRegion] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuelRegion.OilPrice',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    oilPriceIndex: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The average oil price at a defined fuel region.
    '''
    
    FuelRegion: Optional[FuelRegion] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'FuelRegion.OilPrice',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class OperatingShare(Identity):
    '''
    Specifies the operations contract relationship between a power system resource
    and a contract participant.
    '''

    percentage: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage operational ownership between the pair (power system resource
    and operating participant) associated with this share. The total percentage
    ownership for a power system resource should add to 100%.
    '''
    
    OperatingParticipant: Optional[OperatingParticipant] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'OperatingParticipant.OperatingShare',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The operating participant having this share with the associated power
    system resource.
    '''
    
    PowerSystemResource: Optional[PowerSystemResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerSystemResource.OperatingShare',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The power system resource to which the share applies.
    '''
    
@dataclass(repr=False)
class Operator(Identity):
    '''
    Control room operator.
    '''

@dataclass(repr=False)
class PTCActivePowerSupport(Identity):
    '''
    Defines the active power capability (support) of the scheme in relation
    to a PowerTransferCorridor.
    '''

    maximum: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum support that a System Integrity Protection Scheme (SIPS) can
    provide to a Power Transfer Corridor (PTC). This is normally limited
    by the maximum power system disconnect allowed.
    '''
    
    normal: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Normal support that a System Integrity Protection Scheme (SIPS) is
    expected to provide when enabled to a Power Transfer Corridor (PTC).
    '''
    
    value: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The support that a System Integrity Protection Scheme (SIPS) gives
    to a Power Transfer Corridor (PTC).
    '''
    
    PowerTransferCorridor: Optional[PowerTransferCorridor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerTransferCorridor.PTCActivePowerSupport',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The PowerTransferCorridor that has a specific active power support.
    '''
    
    RemedialActionScheme: Optional[RemedialActionScheme] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RemedialActionScheme.PTCActivePowerSupport',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The RemedialActionScheme which has active power support from the PowerTransferCorridor.
    '''
    
@dataclass(repr=False)
class PanPricingDetail(Identity):
    '''
    Detail for a single price command/action.
    '''

    alternateCostDelivered: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Alternative measure of the cost of the energy consumed. An example
    might be the emissions of CO2 for each kWh of electricity consumed
    providing a measure of the environmental cost.
    '''
    
    alternateCostUnit: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Cost unit for the alternate cost delivered field. One example is kg
    of CO2 per unit of measure.
    '''
    
    currentTimeDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current time as determined by a PAN device.
    '''
    
    generationPriceRatio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ratio of 'generationPrice' to the "normal" price chosen by the commodity
    provider.
    '''
    
    priceRatio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Ratio of 'price' to the "normal" price chosen by the commodity provider.
    '''
    
    priceTier: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pricing tier as chosen by the commodity provider.
    '''
    
    priceTierCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum number of price tiers available.
    '''
    
    priceTierLabel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Label for price tier.
    '''
    
    rateLabel: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Label of the current billing rate specified by commodity provider.
    '''
    
    registerTier: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Register tier accumulating usage information.
    '''
    
    unitOfMeasure: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Defines commodity as well as its base unit of measure.
    '''
    
    generationPrice: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Price of the commodity measured in base unit of currency per 'unitOfMeasure'.
    '''
    
    price: Optional[ Money ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Price of the commodity measured in base unit of currency per 'unitOfMeasure'.
    '''
    
    PanPricing: Optional[PanPricing] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PanPricing.PanPricingDetails',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    PAN pricing command/action issuing this price detail.
    '''
    
@dataclass(repr=False)
class PendingCalculation(Identity):
    '''
    When present, a scalar conversion that needs to be applied to every IntervalReading.value
    contained in IntervalBlock. This conversion results in a new associated
    ReadingType, reflecting the true dimensions of IntervalReading values after
    the conversion.
    '''

    IntervalBlocks: list[IntervalBlock] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'IntervalBlock.PendingCalculation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All blocks of interval reading values to which this pending conversion
    applies.
    '''
    
    ReadingType: Optional[ReadingType] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReadingType.PendingCalculation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reading type resulting from this pending conversion.
    '''
    
    multiplyBeforeAdd: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Whether scalars should be applied before adding the 'offset'.
    '''
    
    offset: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Offset to be added as well as multiplication using
    scalars.
    '''
    
    scalarDenominator: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if scalar is rational number) When 'IntervalReading.value' is multiplied
    by 'scalarNumerator' and divided by this value, it causes a unit of
    measure conversion to occur, resulting in the 'ReadingType.unit'.
    '''
    
    scalarFloat: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if scalar is floating number) When multiplied with 'IntervalReading.value',
    it causes a unit of measure conversion to occur, according to the 'ReadingType.unit'.
    '''
    
    scalarNumerator: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if scalar is integer or rational number) When the scalar is a simple
    integer, and this attribute is presented alone and multiplied with
    'IntervalReading.value', it causes a unit of measure conversion to
    occur, resulting in the 'ReadingType.unit'. It is never used in conjunction
    with 'scalarFloat', only with 'scalarDenominator'.
    '''
    
    ReadingType: Optional[ReadingType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReadingType.PendingCalculation',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reading type resulting from this pending conversion.
    '''
    
@dataclass(repr=False)
class Period(Identity):
    '''
    An identification of a time interval that may have a given resolution.
    '''

    Point: list[Point] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Point.Period',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    resolution: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The number of units of time that compose an individual step within
    a period.
    '''
    
@dataclass(repr=False)
class PhaseImpedanceData(Identity):
    '''
    Per length phase impedance matrix entry describes impedance and conductance
    matrix element values for a specific row and column of the matrix.
    The phases to which each entry applies can be determined by means of the
    row and column attributes which bind to a sequence number provided in either
    ACLineSegmentPhase or WirePosition (which also specify phase). Due to physical
    symmetry that is reflected in the matrix, only the lower triangle of the
    matrix is populated with the row and column method. That is, the column
    attribute is always less than or equal to the row attribute.
    '''

    column: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The matrix entry's column number has a range of possible values from
    1 to the conductor count of the matrix, but due to symmetry, only entries
    in the lower triangle (including diagonal) of the matrix need be defined.
    Column number binds to the sequence number in either ACLineSegmentPhase
    or WirePosition, which then identifies the phase for this entry.
    '''
    
    row: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The matrix entry's row number has a range of possible values from 1
    to the conductor count of the matrix, but due to symmetry, only entries
    in the lower triangle (including diagonal) of the matrix need be defined.
    Row number binds to the sequence number in either ACLineSegmentPhase
    or WirePosition, which then identifies the phase for this entry.
    '''
    
    b: Optional[ float | SusceptancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Susceptance matrix entry value, per length of unit.
    '''
    
    fromPhase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Refer to the class description.
    '''
    
    g: Optional[ float | ConductancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conductance matrix entry value, per length of unit.
    '''
    
    r: Optional[ float | ResistancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Resistance matrix entry value, per length of unit.
    '''
    
    toPhase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Refer to the class description.
    '''
    
    x: Optional[ float | ReactancePerLength ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactance matrix entry value, per length of unit.
    '''
    
    PhaseImpedance: Optional[PerLengthPhaseImpedance] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PerLengthPhaseImpedance.PhaseImpedanceData',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Conductor phase impedance to which this data belongs.
    '''
    
@dataclass(repr=False)
class PnodeDistributionFactor(Identity):
    '''
    This class allows SC to input different distribution factors for pricing
    node.
    '''

    factor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Used to calculate "participation" of Pnode in an AggregatePnode. For
    example, for regulation region this factor is 1 and total sum of all
    factors for a specific regulation region does not have to be 1. For
    pricing zone the total sum of all factors has to be 1.
    '''
    
    podLossFactor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Point of delivery loss factor
    '''
    
    offPeak: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that this distribution factor is to apply during off peak.
    '''
    
    onPeak: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indication that this factor is to apply during Peak periods.
    '''
    
    AggregatedPnode: Optional[AggregatedPnode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AggregatedPnode.PnodeDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    BidDistributionFactor: Optional[BidDistributionFactor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BidDistributionFactor.PnodeDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    IndividualPnode: Optional[IndividualPnode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'IndividualPnode.PnodeDistributionFactor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Point(Identity):
    '''
    An identification of a set of values beeing adressed within a specific
    interval of time.
    '''

    Price: list[Price] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Price.Point',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    position: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A sequential value representing the relative position within a given
    time interval.
    '''
    
    quality: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The quality of the information being provided. This quality may be
    estimated, not available, as provided, etc.
    '''
    
    secondaryQuantity: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Secondary quantity identified for a point.
    '''
    
    Period: Optional[Period] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Period.Point',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    quantity: list[Quantity] = field(
        default_factory=list,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Quantity.Point',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Price(Identity):
    '''
    The cost corresponding to a specific measure and expressed in a currency.
    '''

    amount: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A number of monetary units specified in a unit of currency.
    '''
    
    category: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The category of a price to be used in a price calculation. The price
    category is mutually agreed between System Operators.
    '''
    
    direction: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The direction indicates whether a System Operator pays the Market Parties
    or inverse.
    '''
    
    Point: Optional[Point] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Point.Price',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PriceDescriptor: Optional[PriceDescriptor] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PriceDescriptor.Price',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class PriceDescriptor(Identity):
    '''
    The price of a Commodity during a given time interval may change over time.
    For example, a price may be forecasted a year ahead, a month ahead, a day
    ahead, an hour ahead, and in real time; this is defined using the MarketType.
    Additionally a price may have one or more components. For example, a locational
    marginal energy price may be the arithmetic sum of the system price, the
    congestion price, and the loss price. The priceType enumeration is used
    determine if the price is the complete price (priceType="total") or one
    of potentially many constituent components.
    '''

    Price: list[Price] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Price.PriceDescriptor',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The type of price being described. In general, the priceType will either
    be "total" to signify that the price is the price paid to buy or sell
    the commodity, sometimes referred to as an "all-in" price, or one of
    potentially many components.
    '''
    
    marketType: Optional[ MarketType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The time frame for the price, using the standard conventions associated
    with the MarketType enumeration.
    '''
    
    priceType: Optional[ PriceTypeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The "kind" of price being described. In general, the priceType will
    either be "total" to signify that the price is the price paid to buy
    or sell the commodity, sometimes referred to as an "all-in" price,
    or one of potentially many components.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class Priority(Identity):
    '''
    Priority definition.
    '''

    justification: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Justification for 'rank'.
    '''
    
    rank: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Priority level; lower number means high priority inside the same 'type'.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type describing 'rank'; e.g., high, emergency, etc.
    '''
    
@dataclass(repr=False)
class ProcedureStep(Identity):
    '''
    '''

    description: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    States how a procedure step is to be performed.
    '''
    
    isFreeSequence: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ProcedureSteps must be executed in the order defined by the sequenceNumber
    attribute. However, when a group of ProcedureSteps having consecutive
    sequenceNumber attributes and with isFreeSequence attributes set to
    true is encountered, the ProcedureSteps in that group may be executed
    in any order.
    For example, assume we have a Procedure having six ProcedureSteps with
    sequenceNumber values 1 � 6. ProcedureSteps 1, 2, 5 and 6 have isFreeSequence
    values of false. ProcedureSteps 3 and 4 have isFreeSequence values
    of true. In this case, the two valid sequences of execution are 1,
    2, 3, 4, 5, 6 and 1, 2, 4, 3, 5, 6.
    '''
    
    purpose: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Describes the intent of the procedure step.
    '''
    
    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ProcedureSteps must be executed in the order defined by the sequenceNumber
    attribute. However, when a group of ProcedureSteps having consecutive
    sequenceNumber attributes and with isFreeSequence attributes set to
    true is encountered, the ProcedureSteps in that group may be executed
    in any order.
    For example, assume we have a Procedure having six ProcedureSteps with
    sequenceNumber values 1 � 6. ProcedureSteps 1, 2, 5 and 6 have isFreeSequence
    values of false. ProcedureSteps 3 and 4 have isFreeSequence values
    of true. In this case, the two valid sequences of execution are 1,
    2, 3, 4, 5, 6 and 1, 2, 4, 3, 5, 6.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class PropertyReference(Identity):
    '''
    The reference to a class and one of its properties.
    '''

    FunctionOutputVariable: list[FunctionOutputVariable] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'FunctionOutputVariable.PropertyReference',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Function output variable is the function output this property reference
    is used in.
    '''
    
    PinEquipment: list[PinEquipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PinEquipment.PropertyReference',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The pin equipment that has this property reference.
    '''
    
@dataclass(repr=False)
class PublicX509Certificate(Identity):
    '''
    Used to convey information that will allow matching in order to determine
    which certificate to use. Actual certificates are exchanged externally
    to the CIM exchange.
    '''

    issuerName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Represents the CA that issued the certificate. Defined to be per X.509.
    '''
    
    serialNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Is the serial number of the certificate per X.509 definition.
    '''
    
    ISOUpperLayer: Optional[ISOUpperLayer] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ISOUpperLayer.UpperLayerPublicX509Certificate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Application layer used with the certificate for mutual authentication.
    '''
    
    TCPAccessPoint: Optional[TCPAccessPoint] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TCPAccessPoint.PublicX509Certificate',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The association allows a certificate to be bound for use by TLS.
    '''
    
@dataclass(repr=False)
class Quality61850(Identity):
    '''
    Quality flags in this class are as defined in IEC 61850, except for estimatorReplaced,
    which has been included in this class for convenience.
    '''

    badReference: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement value may be incorrect due to a reference being out of
    calibration.
    '''
    
    estimatorReplaced: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value has been replaced by State Estimator. estimatorReplaced is not
    an IEC 61850 quality bit but has been put in this class for convenience.
    '''
    
    failure: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    This identifier indicates that a supervision function has detected
    an internal or external failure, e.g. communication failure.
    '''
    
    oldData: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement value is old and possibly invalid, as it has not been successfully
    updated during a specified time interval.
    '''
    
    operatorBlocked: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement value is blocked and hence unavailable for transmission.
    '''
    
    oscillatory: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    To prevent some overload of the communication it is sensible to detect
    and suppress oscillating (fast changing) binary inputs. If a signal
    changes in a defined time twice in the same direction (from 0 to 1
    or from 1 to 0) then oscillation is detected and the detail quality
    identifier "oscillatory" is set. If it is detected a configured numbers
    of transient changes could be passed by. In this time the validity
    status "questionable" is set. If after this defined numbers of changes
    the signal is still in the oscillating state the value shall be set
    either to the opposite state of the previous stable value or to a defined
    default value. In this case the validity status "questionable" is reset
    and "invalid" is set as long as the signal is oscillating. If it is
    configured such that no transient changes should be passed by then
    the validity status "invalid" is set immediately in addition to the
    detail quality identifier "oscillatory" (used for status information
    only).
    '''
    
    outOfRange: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement value is beyond a predefined range of value.
    '''
    
    overFlow: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement value is beyond the capability of being represented properly.
    For example, a counter value overflows from maximum count back to a
    value of zero.
    '''
    
    suspect: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A correlation function has detected that the value is not consistent
    with other values. Typically set by a network State Estimator.
    '''
    
    test: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Measurement value is transmitted for test purposes.
    '''
    
    source: Optional[ Source ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Source gives information related to the origin of a value. The value
    may be acquired from the process, defaulted or substituted.
    '''
    
    validity: Optional[ Validity ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Validity of the measurement value.
    '''
    
@stereotype(CIMStereotype.AggregateOf)
@dataclass(repr=False)
class MeasurementValueQuality(Quality61850):
    '''
    Measurement quality flags. Bits 0-10 are defined for substation automation
    in IEC 61850-7-3. Bits 11-15 are reserved for future expansion by that
    document. Bits 16-31 are reserved for EMS applications.
    '''

    MeasurementValue: Optional[MeasurementValue] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementValue.MeasurementValueQuality',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A MeasurementValue has a MeasurementValueQuality associated with it.
    '''
    
    MeasurementValue: Optional[MeasurementValue] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MeasurementValue.MeasurementValueQuality',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    A MeasurementValue has a MeasurementValueQuality associated with it.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class Quantity(Identity):
    '''
    Description of quantities needed in the data exchange.
    The type of the quantity is described either by the role of the association
    or the type attribute.
    The quality attribute provides the information about the quality of the
    quantity (measured, estimated, etc.).
    '''

    Point: list[Point] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Point.Quantity',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Detail_Quantity: list[Quantity] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Quantity.Quantity',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Additional information related to the associated quantity.
    '''
    
    quality: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The quality of the information being provided. This quality may be
    estimated, not available, as provided, etc.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The description of the type of the quantity.
    '''
    
    Quantity: Optional[Quantity] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Quantity.Detail_Quantity',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ReadingQuality(Identity):
    '''
    Quality of a specific reading value or interval reading value. Note that
    more than one quality may be applicable to a given reading. Typically not
    used unless problems or unusual conditions occur (i.e., quality for each
    reading is assumed to be good unless stated otherwise in associated reading
    quality type). It can also be used with the corresponding reading quality
    type to indicate that the validation has been performed and succeeded.
    '''

    comment: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Elaboration on the quality code.
    '''
    
    source: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    System acting as the source of the quality code.
    '''
    
    timeStamp: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time at which the quality code was assigned or ascertained.
    '''
    
    Reading: Optional[BaseReading] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BaseReading.ReadingQualities',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reading value to which this quality applies.
    '''
    
    ReadingQualityType: Optional[ReadingQualityType] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ReadingQualityType.ReadingQualities',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of this reading quality.
    '''
    
@dataclass(repr=False)
class Reason(Identity):
    '''
    The motivation of an act.
    '''

    code: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The motivation of an act in coded form.
    '''
    
    text: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The textual explanation corresponding to the reason code.
    '''
    
@dataclass(repr=False)
class RegularTimePoint(Identity):
    '''
    Time point for a schedule where the time between the consecutive points
    is constant.
    '''

    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The position of the regular time point in the sequence. Note that time
    points don't have to be sequential, i.e. time points may be omitted.
    The actual time for a RegularTimePoint is computed by multiplying the
    associated regular interval schedule's time step with the regular time
    point sequence number and adding the associated schedules start time.
    To specify values for the start time, use sequence number 0. The sequence
    number cannot be negative.
    '''
    
    value1: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The first value at the time. The meaning of the value is defined by
    the derived type of the associated schedule.
    '''
    
    value2: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The second value at the time. The meaning of the value is defined by
    the derived type of the associated schedule.
    '''
    
    value3: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The third value at the time. The meaning of the value is defined by
    the derived type of the associated schedule.
    '''
    
    IntervalSchedule: Optional[RegularIntervalSchedule] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegularIntervalSchedule.TimePoints',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Regular interval schedule containing this time point.
    '''
    
@dataclass(repr=False)
class RelativeHeight(Identity):
    '''
    Used to specify the height of a physical object relative to a specified
    reference. The X, Y, and Z positions for a given point describe the position
    of a point in space expressed in appropriate coordinate system units. In
    general, the Z-position will represent the ground-level altitude above
    sea level for the point. At times it is beneficial to know the height above
    ground level at which a particular piece of equipment is installed. For
    example, the location of a pole-mounted weather station may be specified
    as �10 meters above ground level� by specifying a vertical offset of �10
    meters� and a vertical offset reference of �Ground Level�. Alternately,
    it could be specified as �1 meter below the top of the pole� using a vertical
    offset of �-1 meter� and vertical offset reference of �Pole Top�.
    '''

    PositionPoint: list[PositionPoint] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PositionPoint.RelativeHeight',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    verticalOffsetReference: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The height from which vertical offset is measured. Examples include
    �Ground Level�, �Pole Top�, �Tower Top�, etc.
    '''
    
    verticalOffset: Optional[ float | Length ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Distance above (positive value) or below (negative value) the specified
    vertical offset reference.
    '''
    
@dataclass(repr=False)
class ResourceCapacity(Identity):
    '''
    This class model the various capacities of a resource. A resource may have
    numbers of capacities related to operating, ancillary services, energy
    trade and so forth. Capacities may be defined for active power or reactive
    power.
    '''

    defaultCapacity: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    default capacity
    '''
    
    maximumCapacity: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    maximum capacity
    '''
    
    minimumCapacity: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    minimum capacity
    '''
    
    capacityType: Optional[ ResourceCapacityType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    capacity type
    The types are but not limited to:
    Regulation Up
    Regulation Dn
    Spinning Reserve
    Non-Spinning Reserve
    FOO capacity
    MOO capacity
    '''
    
    unitMultiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit Multiplier selection for the capacity values.
    '''
    
    unitSymbol: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit selection for the capacity values.
    '''
    
@dataclass(repr=False)
class ResourceCertification(Identity):
    '''
    This class represent the resource certification for a specific product
    type. For example, a resource is certified for Non-Spinning reserve for
    RTM.
    '''

    ContractResourceCertificationAgreement: list[ContractResourceCertificationAgreement] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ContractResourceCertificationAgreement.ResourceCertification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedNonspinDAMMw: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedNonspinRTMMw: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedRegulationMw: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedSpinMw: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    isCertified: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Indicator that the resource is certified for the specified market (which
    is a kind of MarketType) and type (which is a kind of ResourceCertificationKind).
    '''
    
    certifiedDAM: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedNonspinDAM: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedNonspinRTM: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedPIRP: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedRegulation: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedReplaceAS: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedRTM: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedRUC: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    certifiedSpin: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    market: Optional[ MarketType ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    market type
    '''
    
    qualificationFlag: Optional[ YesNo ] = field(
        default=None,
        metadata={
        'type': 'enumeration deprecated Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of the qualification ('YES' = Active, 'NO' = Inactive).
    '''
    
    type: Optional[ ResourceCertificationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The resource certification type described by the ResourceCertificationKind.
    A resource can have one to many types of certifications, based on the
    capabilities of that resource. For example, a resource may be certified
    for energy and later a reserve service.
    '''
    
    RegisteredResource: Optional[RegisteredResource] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredResource.ResourceCertification',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    RegisteredResources are qualified for resource ancillary service types
    (which include market product types as well as other types such as
    BlackStart) by the association to the class ResourceAncillaryServiceQualification.
    '''
    
@dataclass(repr=False)
class ResourceStartupCost(Identity):
    '''
    To model the startup costs of a generation resource.
    '''

    fuelColdStartup: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Verifiable Cold Start Up Fuel (MMBtu per start)
    '''
    
    fuelHotStartup: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Verifiable Hot Start Up Fuel (MMBtu per start)
    '''
    
    fuelIntermediateStartup: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Verifiable Intermediate Start Up Fuel (MMBtu per start)
    '''
    
    fuelLowSustainedLimit: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minimum-Energy fuel, MMBtu/MWh
    '''
    
    gasPercentColdStartup: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Fuel Index Price (gas) for cold startup
    '''
    
    gasPercentHotStartup: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Fuel Index Price (gas) for hot startup
    '''
    
    gasPercentIntermediateStartup: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Fuel Index Price (gas) for intermediate startup
    '''
    
    gasPercentLowSustainedLimit: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of FIP (gas) for operating at LSL
    '''
    
    oilPercentColdStartup: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Fuel Oil Price (FOP) for cold startup
    '''
    
    oilPercentHotStartup: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Fuel Oil Price (FOP) for hot startup
    '''
    
    oilPercentIntermediateStartup: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Fuel Oil Price (FOP) for intermediate startup
    '''
    
    oilPercentLowSustainedLimit: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of FOP (oil) for operating at LSL
    '''
    
    solidfuelPercentColdStartup: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Solid Fuel for cold startup
    '''
    
    solidfuelPercentHotStartup: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Solid Fuel for hot startup
    '''
    
    solidfuelPercentIntermediateStartup: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Solid Fuel for intermedite startup
    '''
    
    solidfuelPercentLowSustainedLimit: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Percentage of Solid Fuel for operating at LSL
    '''
    
    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceVerifiableCosts.ResourceStartupCost',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.OfAggregate)
@dataclass(repr=False)
class ResourceVerifiableCosts(Identity):
    '''
    This class is defined to describe the verifiable costs associated with
    a generation resource.
    '''

    MktHeatRateCurve: Optional[MktHeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktHeatRateCurve.ResourceVerifiableCosts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredResource: Optional[RegisteredResource] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredResource.ResourceVerifiableCosts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ResourceOperationMaintenanceCost: Optional[ResourceOperationMaintenanceCost] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceOperationMaintenanceCost.ResourceVerifiableCosts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ResourceStartupCost: list[ResourceStartupCost] = field(
        default_factory=list,
        metadata={
        'type': 'AggregateOf',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ResourceStartupCost.ResourceVerifiableCosts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MktHeatRateCurve: Optional[MktHeatRateCurve] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktHeatRateCurve.ResourceVerifiableCosts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RegisteredResource: Optional[RegisteredResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredResource.ResourceVerifiableCosts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    ResourceOperationMaintenanceCost: Optional[ResourceOperationMaintenanceCost] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ResourceOperationMaintenanceCost.ResourceVerifiableCosts',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class SSSCSimulationSettings(Identity):
    '''
    SSSC control simulation settings used by the algorithm for power flow calculations.
    '''

    SSSCController: list[SSSCController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'SSSCController.SSSCSimulationSettings',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The controller that uses these simulation settings.
    '''
    
    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in RFC 4122, for the mRID. The use of
    UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    isEstimateDLDVSensitive: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Defines if the estimate is considering the dI/dV sensitivity (true)
    instead of the secant algorithm (false).
    '''
    
    maxIterations: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum number of iterations before claiming an open line condition.
    The algorithm uses it to assess if a line is really open by making
    sure low-currents are observed on various consecutive iterations.
    '''
    
    deltaX: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reactance delta for the solution algorithm. The solution �outer-loop�
    algorithm is based on a secant method which needs two initial points.
    The second point is calculated from the first one by either adding
    or subtracting this �delta�. The �seed� is assumed to be 0 ohms.
    '''
    
    maxCorrectionX: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum value of the reactance correction applied between Iterations
    of the power flow calculation algorithm for the purpose of achieving
    control target value.
    '''
    
    maxMismatch: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Maximum mismatch tolerance of voltage target value. If mismatch is
    lower, convergence is claimed. It is only used for voltageInjection
    and currentDroop control modes.
    '''
    
@dataclass(repr=False)
class ScheduledEventData(Identity):
    '''
    Schedule parameters for an activity that is to occur, is occurring, or
    has completed.
    '''

    ScheduledEvents: list[ScheduledEvent] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ScheduledEvent.ScheduledEventData',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    All scheduled events with this specification.
    '''
    
    InspectionDataSet: Optional[InspectionDataSet] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'InspectionDataSet.AccordingToSchedules',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of the scheduled event.
    '''
    
@dataclass(repr=False)
class SchedulingCoordinatorUser(Identity):
    '''
    Describing users of a Scheduling Coordinator.
    '''

    loginID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Login ID
    '''
    
    loginRole: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Assigned roles (these are roles with either Read or Read/Write privileges
    on different Market Systems)
    '''
    
    SchedulingCoordinator: Optional[SchedulingCoordinator] = field(
        default=None,
        metadata={
        'type': 'OfAggregate',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'SchedulingCoordinator.SchedulingCoordinatorUser',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class ShortCircuitResponse(Identity):
    '''
    In a short circuit circumstance, the device may be modeled as current source.
    The output current is a function of the voltage sensed at the terminal
    of the device, hence there can be different currents (and current angles
    relative to voltage) at different voltages.
    '''

    faultSequenceType: Optional[ PhaseCodeExtension ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of fault: PositiveSequence, ZeroSequence, or NegativeSequence
    '''
    
    outputCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Current output based on voltage measured at the device terminal. The
    response is assumed to be the same for each phase if the device is
    multi-phase.
    '''
    
    outputCurrentAngle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Angle of the current output relative to the voltage
    '''
    
    terminalVoltage: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage measured at the device terminal
    '''
    
    ConductingAssetInfo: Optional[ConductingAssetInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConductingAssetInfo.ShortCircuitRespone',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Site(Identity):
    '''
    Area of ground on which work can be executed, organisation can be hosted,
    and building (including substation and power line) can be located.
    '''

    Building: list[Building] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Building.Site',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Cadastre: list[Cadastre] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Cadastre.Site',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.Site',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PhysicalAddress: Optional[PhysicalAddress] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PhysicalAddress.Site',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.Site',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    PhysicalAddress: Optional[PhysicalAddress] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PhysicalAddress.Site',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class StateVariable(Identity):
    '''
    An abstract class for state variables.
    '''

@dataclass(repr=False)
class SvDCPowerFlow(StateVariable):
    '''
    State variable for power flow. Load convention is used for flow direction.
    This means flow out from the DCTopologicalNode into the equipment is positive.
    '''

    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power flow. Load sign convention is used, i.e. positive
    sign means flow out from a DCTopologicalNode (bus) into the conducting
    equipment.
    '''
    
    DCTerminal: Optional[DCTerminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTerminal.SvDCPowerFlow',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC terminal associated with the DC power flow state variable.
    '''
    
@dataclass(repr=False)
class SvDCVoltage(StateVariable):
    '''
    State variable for direct current voltage.
    '''

    v: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    State variable for direct current voltage.
    '''
    
    DCTopologicalNode: Optional[DCTopologicalNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'DCTopologicalNode.SvDCVoltage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The DC topological node associated with the DC voltage state.
    '''
    
@dataclass(repr=False)
class SvInjection(StateVariable):
    '''
    The SvInjection reports the calculated bus injection minus the sum of the
    terminal flows. The terminal flow is positive out from the bus (load sign
    convention) and bus injection has positive flow into the bus. SvInjection
    may have the remainder after state estimation or slack after power flow
    calculation.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal phase at which the connection is applied. If missing,
    the injection is assumed to be balanced among non-neutral phases.
    '''
    
    pInjection: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power mismatch between calculated injection and initial
    injection. Positive sign means injection into the TopologicalNode (bus).
    '''
    
    qInjection: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactive power mismatch between calculated injection and initial
    injection. Positive sign means injection into the TopologicalNode (bus).
    '''
    
    TopologicalNode: Optional[TopologicalNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalNode.SvInjection',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The topological node associated with the flow injection state variable.
    '''
    
@dataclass(repr=False)
class SvPowerFlow(StateVariable):
    '''
    State variable for power flow. Load convention is used for flow direction.
    This means flow out from the TopologicalNode into the equipment is positive.
    '''

    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The active power flow. Load sign convention is used, i.e. positive
    sign means flow out from a TopologicalNode (bus) into the conducting
    equipment.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The individual phase of the flow. If unspecified, then assumed to be
    balanced among phases.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactive power flow. Load sign convention is used, i.e. positive
    sign means flow out from a TopologicalNode (bus) into the conducting
    equipment.
    '''
    
    Terminal: Optional[Terminal] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Terminal.SvPowerFlow',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal associated with the power flow state variable.
    '''
    
@dataclass(repr=False)
class SvShuntCompensatorSections(StateVariable):
    '''
    State variable for the number of sections in service for a shunt compensator.
    '''

    sections: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The number of sections in service as a continuous variable. The attribute
    shall be a positive value or zero. To get integer value scale with
    ShuntCompensator.bPerSection.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal phase at which the connection is applied. If missing,
    the injection is assumed to be balanced among non-neutral phases.
    '''
    
    ShuntCompensator: Optional[ShuntCompensator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ShuntCompensator.SvShuntCompensatorSections',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The shunt compensator for which the state applies.
    '''
    
@dataclass(repr=False)
class SvStatus(StateVariable):
    '''
    State variable for status.
    '''

    inService: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The in service status as a result of topology processing. It indicates
    if the equipment is considered as energized by the power flow. It reflects
    if the equipment is connected within a solvable island. It does not
    necessarily reflect whether or not the island was solved by the power
    flow.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The individual phase status. If the attribute is unspecified, then
    three phase model is assumed.
    '''
    
    ConductingEquipment: Optional[ConductingEquipment] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConductingEquipment.SvStatus',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The conducting equipment associated with the status state variable.
    '''
    
@dataclass(repr=False)
class SvSwitch(StateVariable):
    '''
    State variable for switch.
    '''

    open: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The attribute tells if the computed state of the switch is considered
    open.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The terminal phase at which the connection is applied. If missing,
    the injection is assumed to be balanced among non-neutral phases.
    '''
    
    Switch: Optional[Switch] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Switch.SvSwitch',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The switch associated with the switch state.
    '''
    
@dataclass(repr=False)
class SvTapStep(StateVariable):
    '''
    State variable for transformer tap step.
    '''

    TapChanger: Optional[TapChanger] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TapChanger.SvTapStep',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap changer associated with the tap step state.
    '''
    
    position: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The floating point tap position. This is not the tap ratio, but rather
    the tap step position as defined by the related tap changer model and
    normally is constrained to be within the range of minimum and maximum
    tap positions.
    '''
    
    TapChanger: Optional[TapChanger] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TapChanger.SvTapStep',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap changer associated with the tap step state.
    '''
    
@dataclass(repr=False)
class SvVoltage(StateVariable):
    '''
    State variable for voltage.
    '''

    angle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage angle of the topological node complex voltage with respect
    to system reference.
    '''
    
    phase: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    If specified the voltage is the line to ground voltage of the individual
    phase. If unspecified, then the voltage is assumed balanced.
    '''
    
    v: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage magnitude at the topological node. The attribute shall
    be a positive value.
    '''
    
    TopologicalNode: Optional[TopologicalNode] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'TopologicalNode.SvVoltage',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The topological node associated with the voltage state.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class Status(Identity):
    '''
    Current status information relevant to an entity.
    '''

    dateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time for which status 'value' applies.
    '''
    
    reason: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Reason code or explanation for why an object went to the current status
    'value'.
    '''
    
    remark: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Pertinent information regarding the current 'value', as free form text.
    '''
    
    value: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status value at 'dateTime'; prior status changes may have been kept
    in instances of activity records associated with the object to which
    this status applies.
    '''
    
@dataclass(repr=False)
class StepLimitTablePoint(Identity):
    '''
    Describes each limit per step in the operational limit curve.
    '''

    factor: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The factor which is used to multiply the value of the operational limit
    associated with the table.
    '''
    
    step: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap step.
    '''
    
    StepOperationalLimitTable: Optional[StepOperationalLimitTable] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'StepOperationalLimitTable.StepLimitTablePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The table of this point.
    '''
    
@stereotype(CIMStereotype.deprecated)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class StreetDetail(Identity):
    '''
    Street details, in the context of address.
    '''

    addressGeneral: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    First line of a free form address or some additional address information
    (for example a mail stop).
    '''
    
    addressGeneral2: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Second line of a free form address.
    '''
    
    addressGeneral3: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Third line of a free form address.
    '''
    
    buildingName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) In certain cases the physical location of the place
    of interest does not have a direct point of entry from the street,
    but may be located inside a larger structure such as a building, complex,
    office block, apartment, etc.
    '''
    
    code: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    (if applicable) Utilities often make use of external reference systems,
    such as those of the town-planner's department or surveyor general's
    mapping system, that allocate global reference codes to streets.
    '''
    
    floorIdentification: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The identification by name or number, expressed as text, of the floor
    in the building as part of this address.
    '''
    
    name: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the street.
    '''
    
    number: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Designator of the specific location on the street.
    '''
    
    prefix: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Prefix to the street name. For example: North, South, East, West.
    '''
    
    suffix: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Suffix to the street name. For example: North, South, East, West.
    '''
    
    suiteNumber: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Number of the apartment or suite.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of street. Examples include: street, circle, boulevard, avenue,
    road, drive, etc.
    '''
    
    withinTownLimits: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if this street is within the legal geographical boundaries of
    the specified town (default).
    '''
    
@dataclass(repr=False)
class SubstitutionResourceList(Identity):
    '''
    List of resources that can be substituted for within the bounds of a Contract
    definition. This class has a precedence and a resource.
    '''

    precedence: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    An indicator of the order a resource should be substituted. The lower
    the number the higher the precedence.
    '''
    
    RegisteredResource: Optional[RegisteredResource] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RegisteredResource.SubstitutionResourceList',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    TransmissionContractRight: Optional[ContractRight] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ContractRight.SubstitutionResourceList',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class SystemOperator(Identity):
    '''
    System operator.
    '''

    Contingency: list[Contingency] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Contingency.EquipmentOperator',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    Contingency for the equipment that is operated by the system operator.
    '''
    
    ControlArea: list[ControlArea] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ControlArea.SystemOperator',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The control area that is related to this system operator.
    '''
    
    Fault: list[Fault] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Fault.SystemOperator',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The faults that have occurred in this System Operator's control area.
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class DirectCurrentSystemOperator(SystemOperator):
    '''
    System operator of the direct current pole. There are typically one or
    two system operators that are operating either the control area at one
    side or the control areas at both sides of the direct current pole. In
    some cases it is operated by an operator from the connected control areas.
    '''

    DCConverterUnit: list[DCConverterUnit] = field(
        default_factory=list,
        metadata={
        'type': 'NC',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'DCConverterUnit.DirectCurrentSystemOperator',
        'namespace': 'http://entsoe.eu/ns/nc#',
        })
    '''
    The DC converter unit operated by this direct current system operator.
    '''
    
@dataclass(repr=False)
class TCSCCompensationPoint(Identity):
    '''
    Compensation point of a TCSC compensator.
    '''

    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in RFC 4122, for the mRID. The use of
    UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    section: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The number of the section.
    '''
    
    compensationZ: Optional[ float | Impedance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The compensation impedance for this compensation point.
    '''
    
    ThyristorControlledSeriesCompensator: Optional[ThyristorControlledSeriesCompensator] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ThyristorControlledSeriesCompensator.TCSCCompensationPoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    TCSC that has different compensation points.
    '''
    
@dataclass(repr=False)
class TapChangerTablePoint(Identity):
    '''
    Describes each tap step in the tabular curve. Note that the upper boundary
    is not constrained to 100 percent.
    '''

    ratio: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The voltage at the tap step divided by rated voltage of the transformer
    end having the tap changer. Hence this is a value close to one.
    For example, if the ratio at step 1 is 1.01, and the rated voltage
    of the transformer end is 110kV, then the voltage obtained by setting
    the tap changer to step 1 to is 111.1kV.
    '''
    
    step: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The tap step.
    '''
    
    b: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The magnetizing branch susceptance deviation as a percentage of nominal
    value. The actual susceptance is calculated as follows:
    calculated magnetizing susceptance = b(nominal) * (1 + b(from this
    class)/100). The b(nominal) is defined as the static magnetizing susceptance
    on the associated power transformer end or ends. This model assumes
    the star impedance (pi model) form.
    '''
    
    g: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The magnetizing branch conductance deviation as a percentage of nominal
    value. The actual conductance is calculated as follows:
    calculated magnetizing conductance = g(nominal) * (1 + g(from this
    class)/100). The g(nominal) is defined as the static magnetizing conductance
    on the associated power transformer end or ends. This model assumes
    the star impedance (pi model) form. Note that the upper boundary is
    not constrained to 100 percent.
    '''
    
    r: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The resistance deviation as a percentage of nominal value. The actual
    reactance is calculated as follows:
    calculated resistance = r(nominal) * (1 + r(from this class)/100).
    The r(nominal) is defined as the static resistance on the associated
    power transformer end or ends. This model assumes the star impedance
    (pi model) form. Note that the upper boundary is not constrained to
    100 percent.
    '''
    
    x: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The series reactance deviation as a percentage of nominal value. The
    actual reactance is calculated as follows:
    calculated reactance = x(nominal) * (1 + x(from this class)/100). The
    x(nominal) is defined as the static series reactance on the associated
    power transformer end or ends. This model assumes the star impedance
    (pi model) form. Note that the upper boundary is not constrained to
    100 percent.
    '''
    
@dataclass(repr=False)
class PhaseTapChangerTablePoint(TapChangerTablePoint):
    '''
    Describes each tap step in the phase tap changer tabular curve.
    '''

    angle: Optional[ float | AngleDegrees ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The angle difference in degrees. A positive value indicates a positive
    angle variation from the Terminal at the PowerTransformerEnd, where
    the TapChanger is located, into the transformer.
    '''
    
    PhaseTapChangerTable: Optional[PhaseTapChangerTable] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PhaseTapChangerTable.PhaseTapChangerTablePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The table of this point.
    '''
    
@dataclass(repr=False)
class RatioTapChangerTablePoint(TapChangerTablePoint):
    '''
    Describes each tap step in the ratio tap changer tabular curve.
    '''

    RatioTapChangerTable: Optional[RatioTapChangerTable] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'RatioTapChangerTable.RatioTapChangerTablePoint',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Table of this point.
    '''
    
@stereotype(CIMStereotype.Attribute)
@stereotype(CIMStereotype.deprecated)
@dataclass(repr=False)
class TownDetail(Identity):
    '''
    Town details, in the context of address.
    '''

    code: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Town code.
    '''
    
    country: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the country.
    '''
    
    name: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Town name.
    '''
    
    section: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Town section. For example, it is common for there to be 36 sections
    per township.
    '''
    
    stateOrProvince: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of the state or province.
    '''
    
@dataclass(repr=False)
class TransferInterfaceSolution(Identity):
    '''
    TNA Interface Definitions from OPF for VSA.
    '''

    MktContingencyA: Optional[MktContingency] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktContingency.TransferInterfaceSolutionA',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    MktContingencyB: Optional[MktContingency] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'MktContingency.TransferInterfaceSolutionB',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@dataclass(repr=False)
class Unit(Identity):
    '''
    The identification of the unit name for the time series quantities.
    '''

    name: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The coded representation of the unit.
    '''
    
@dataclass(repr=False)
class UserAttribute(Identity):
    '''
    Generic name-value pair class, with optional sequence number and units
    for value; can be used to model parts of information exchange when concrete
    types are not known in advance.
    '''

    name: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Name of an attribute.
    '''
    
    sequenceNumber: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Sequence number for this attribute in a list of attributes.
    '''
    
    PropertySpecification: Optional[Specification] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Specification.AssetProperites',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    RatingSpecification: Optional[Specification] = field(
        default=None,
        metadata={
        'type': 'informative',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Specification.Ratings',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
    Transaction: Optional[Transaction] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Transaction.UserAttributes',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Transaction for which this snapshot has been recorded.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class Version(Identity):
    '''
    This is the version for a group of devices or objects. This could be used
    to track the version for any group of objects or devices over time. For
    example, for a DERGroup, the requesting system may want to get the details
    of a specific version of a DERGroup.
    '''

    date: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date of this version.
    '''
    
    major: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Major release level for this version.
    '''
    
    minor: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Minor release level for this version.
    '''
    
    revision: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Revision level for this version.
    '''
    
@dataclass(repr=False)
class WirePhaseInfo(Identity):
    '''
    Information on a wire carrying a single phase.
    '''

    phaseInfo: Optional[ SinglePhaseKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Phase information.
    '''
    
    WireAssemblyInfo: Optional[WireAssemblyInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WireAssemblyInfo.WirePhaseInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Wire assembly information using this wire phase information.
    '''
    
    WireInfo: Optional[WireInfo] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WireInfo.WirePhaseInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Wire information contributing to this wire phase information.
    '''
    
    WirePosition: Optional[WirePosition] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'WirePosition.WirePhaseInfo',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Wire position with this wire phase information.
    '''
    
@dataclass(repr=False)
class WorkIdentifiedObject(Identity):
    '''
    Shadow class for IdentifiedObject, to isolate subclassing from this package.
    If any subclass gets normative and needs inheritance, it will inherit directly
    from IdentifiedObject.
    '''

@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ASTMStandardEditionKind(Enum):
    '''
    List of editions of ASTM standards.
    '''

    _002005 = '_002005'
    '''
    00(2005) standard edition.
    '''
    
    _002005e1 = '_002005e1'
    '''
    00(2005)e1 standard edition.
    '''
    
    _002010 = '_002010'
    '''
    00(2010) standard edition.
    '''
    
    _01 = '_01'
    '''
    01 standard edition.
    '''
    
    _01a2007 = '_01a2007'
    '''
    01a(2007) standard edition.
    '''
    
    _01e1 = '_01e1'
    '''
    01e1 standard edition.
    '''
    
    _02 = '_02'
    '''
    02 standard edition.
    '''
    
    _022007 = '_022007'
    '''
    02(2007) standard edition.
    '''
    
    _022008 = '_022008'
    '''
    02(2008) standard edition.
    '''
    
    _022009 = '_022009'
    '''
    02(2009) standard edition.
    '''
    
    _022012 = '_022012'
    '''
    02(2012) standard edition.
    '''
    
    _022014 = '_022014'
    '''
    02(2014) standard edition.
    '''
    
    _02a = '_02a'
    '''
    02a standard edition.
    '''
    
    _02b = '_02b'
    '''
    02b standard edition.
    '''
    
    _02e1 = '_02e1'
    '''
    02e1 standard edition.
    '''
    
    _03 = '_03'
    '''
    03 standard edition.
    '''
    
    _032008 = '_032008'
    '''
    03(2008) standard edition.
    '''
    
    _032014 = '_032014'
    '''
    03(2014) standard edition.
    '''
    
    _03a = '_03a'
    '''
    03a standard edition.
    '''
    
    _04 = '_04'
    '''
    04 standard edition.
    '''
    
    _04a = '_04a'
    '''
    04a standard edition.
    '''
    
    _04ae1 = '_04ae1'
    '''
    04ae1 standard edition.
    '''
    
    _04e1 = '_04e1'
    '''
    04e1 standard edition.
    '''
    
    _04e2 = '_04e2'
    '''
    04e2 standard edition.
    '''
    
    _05 = '_05'
    '''
    05 standard edition.
    '''
    
    _052010 = '_052010'
    '''
    05(2010) standard edition.
    '''
    
    _05a = '_05a'
    '''
    05a standard edition.
    '''
    
    _05a2010 = '_05a2010'
    '''
    05a(2010) standard edition.
    '''
    
    _06 = '_06'
    '''
    06 standard edition.
    '''
    
    _07 = '_07'
    '''
    07 standard edition.
    '''
    
    _072013 = '_072013'
    '''
    07(2013) standard edition.
    '''
    
    _08 = '_08'
    '''
    08 standard edition.
    '''
    
    _08e1 = '_08e1'
    '''
    08e1 standard edition.
    '''
    
    _09 = '_09'
    '''
    09 standard edition.
    '''
    
    _092013 = '_092013'
    '''
    09(2013) standard edition.
    '''
    
    _10 = '_10'
    '''
    10 standard edition.
    '''
    
    _10a = '_10a'
    '''
    10a standard edition.
    '''
    
    _11 = '_11'
    '''
    11 standard edition.
    '''
    
    _11a = '_11a'
    '''
    11a standard edition.
    '''
    
    _12 = '_12'
    '''
    12 standard edition.
    '''
    
    _12a = '_12a'
    '''
    12a standard edition.
    '''
    
    _12b = '_12b'
    '''
    12b standard edition.
    '''
    
    _13 = '_13'
    '''
    13 standard edition.
    '''
    
    _13e1 = '_13e1'
    '''
    13e1 standard edition.
    '''
    
    _14 = '_14'
    '''
    14 standard edition.
    '''
    
    _14a = '_14a'
    '''
    14a standard edition.
    '''
    
    _14e1 = '_14e1'
    '''
    14e1 standard edition.
    '''
    
    _14e2 = '_14e2'
    '''
    14e2 standard edition.
    '''
    
    _15 = '_15'
    '''
    15 standard edition.
    '''
    
    _15a = '_15a'
    '''
    15a standard edition.
    '''
    
    _65 = '_65'
    '''
    65 standard edition.
    '''
    
    _71 = '_71'
    '''
    71 standard edition.
    '''
    
    _74 = '_74'
    '''
    74 standard edition.
    '''
    
    _80e1 = '_80e1'
    '''
    80e1 standard edition.
    '''
    
    _82 = '_82'
    '''
    82 standard edition.
    '''
    
    _831996e1 = '_831996e1'
    '''
    83(1996)e1 standard edition.
    '''
    
    _85 = '_85'
    '''
    85 standard edition.
    '''
    
    _851990e1 = '_851990e1'
    '''
    85(1990)e1 standard edition.
    '''
    
    _871995 = '_871995'
    '''
    87(1995) standard edition.
    '''
    
    _87e1 = '_87e1'
    '''
    87e1 standard edition.
    '''
    
    _88 = '_88'
    '''
    88 standard edition.
    '''
    
    _90e1 = '_90e1'
    '''
    90e1 standard edition.
    '''
    
    _91 = '_91'
    '''
    91 standard edition.
    '''
    
    _92 = '_92'
    '''
    92 standard edition.
    '''
    
    _94 = '_94'
    '''
    94 standard edition.
    '''
    
    _941999 = '_941999'
    '''
    94(1999) standard edition.
    '''
    
    _942004 = '_942004'
    '''
    94(2004) standard edition.
    '''
    
    _942010 = '_942010'
    '''
    94(2010) standard edition.
    '''
    
    _94e1 = '_94e1'
    '''
    94e1 standard edition.
    '''
    
    _95 = '_95'
    '''
    95 standard edition.
    '''
    
    _952000e1 = '_952000e1'
    '''
    95(2000)e1 standard edition.
    '''
    
    _96 = '_96'
    '''
    96 standard edition.
    '''
    
    _962002e1 = '_962002e1'
    '''
    96(2002)e1 standard edition.
    '''
    
    _96a = '_96a'
    '''
    96a standard edition.
    '''
    
    _96e1 = '_96e1'
    '''
    96e1 standard edition.
    '''
    
    _97 = '_97'
    '''
    97 standard edition.
    '''
    
    _972002 = '_972002'
    '''
    97(2002) standard edition.
    '''
    
    _972003 = '_972003'
    '''
    97(2003) standard edition.
    '''
    
    _972008 = '_972008'
    '''
    97(2008) standard edition.
    '''
    
    _97a = '_97a'
    '''
    97a standard edition.
    '''
    
    _97a2004 = '_97a2004'
    '''
    97a(2004) standard edition.
    '''
    
    _98 = '_98'
    '''
    98 standard edition.
    '''
    
    _98a = '_98a'
    '''
    98a standard edition.
    '''
    
    _99 = '_99'
    '''
    99 standard edition.
    '''
    
    _992004e1 = '_992004e1'
    '''
    99(2004)e1 standard edition.
    '''
    
    _992005 = '_992005'
    '''
    99(2005) standard edition.
    '''
    
    _992009 = '_992009'
    '''
    99(2009) standard edition.
    '''
    
    _99a = '_99a'
    '''
    99a standard edition.
    '''
    
    _99a2004 = '_99a2004'
    '''
    99a(2004) standard edition.
    '''
    
    _99e1 = '_99e1'
    '''
    99e1 standard edition.
    '''
    
    _99e2 = '_99e2'
    '''
    99e2 standard edition.
    '''
    
    none = 'none'
    '''
    No kind of standard.
    '''
    
    unknown = 'unknown'
    '''
    Unknown kind of standard.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ASTMStandardKind(Enum):
    '''
    List of ASTM standards.
    '''

    D1169 = 'D1169'
    '''
    Standard Test Method for Specific Resistance (Resistivity) of Electrical
    Insulating Liquids.
    '''
    
    D1275 = 'D1275'
    '''
    Standard Test Method for Corrosive Sulfur in Electrical Insulating
    Oils.
    '''
    
    D1298 = 'D1298'
    '''
    Standard Test Method for Density, Relative Density, or API Gravity
    of Crude Petroleum and Liquid Petroleum Products by Hydrometer Method
    -or-
    Standard Test Method for Density, Relative Density (Specific Gravity),
    or API Gravity of Crude Petroleum and Liquid Petroleum Products by
    Hydrometer Method.
    '''
    
    D149 = 'D149'
    '''
    Standard Test Method for Dielectric Breakdown Voltage and Dielectric
    Strength of Solid Electrical Insulating Materials at Commercial Power
    Frequencies.
    '''
    
    D1500 = 'D1500'
    '''
    Standard Test Method for ASTM Color of Petroleum Products (ASTM Color
    Scale).
    '''
    
    D1524 = 'D1524'
    '''
    Standard Test Method for Visual Examination of Used Electrical Insulating
    Oils of Petroleum Origin in the Field.
    '''
    
    D1533 = 'D1533'
    '''
    Standard Test Method for Water in Insulating Liquids by Coulometric
    Karl Fischer Titration.
    '''
    
    D1816 = 'D1816'
    '''
    Standard Test Method for Dielectric Breakdown Voltage of Insulating
    Liquids Using VDE Electrodes.
    '''
    
    D2029 = 'D2029'
    '''
    Standard Test Methods for Water Vapor Content of Electrical Insulating
    Gases by Measurement of Dew Point.
    '''
    
    D2112 = 'D2112'
    '''
    Standard Test Method for Oxidation Stability of Inhibited Mineral Insulating
    Oil by Pressure Vessel.
    '''
    
    D2129 = 'D2129'
    '''
    Standard Test Method for Color of Clear Electrical Insulating Liquids
    (Platinum-Cobalt Scale).
    '''
    
    D2140 = 'D2140'
    '''
    Standard Practice for Calculating Carbon-Type Composition of Insulating
    Oils of Petroleum Origin -or-
    Standard Test Method for Carbon-Type Composition of Insulating Oils
    of Petroleum Origin.
    '''
    
    D2144 = 'D2144'
    '''
    Standard Practices for Examination of Electrical Insulating Oils by
    Infrared Absorption -or-
    Standard Test Methods for Examination of Electrical Insulating Oils
    by Infrared Absorption.
    '''
    
    D2668 = 'D2668'
    '''
    Standard Test Method for 2,6-di-tert-Butyl- p-Cresol and 2,6-di-tert-Butyl
    Phenol in Electrical Insulating Oil by Infrared Absorption -or-
    Standard Test Method for 2,6-Ditertiary-Butyl Para Cresol and 2,6-Ditertiary-Butyl
    Phenol in Electrical Insulating Oil by Infrared Absorption.
    '''
    
    D3612 = 'D3612'
    '''
    Standard Test Method for Analysis of Gases Dissolved in Electrical
    Insulating Oil by Gas Chromatography.
    '''
    
    D4052 = 'D4052'
    '''
    Standard Test Method for Density, Relative Density, and API Gravity
    of Liquids by Digital Density Meter -or-
    Standard Test Method for Density and Relative Density of Liquids by
    Digital Density Meter.
    '''
    
    D4059 = 'D4059'
    '''
    Standard Test Method for Analysis of Polychlorinated Biphenyls in Insulating
    Liquids by Gas Chromatography.
    '''
    
    D4230 = 'D4230'
    '''
    Standard Test Method of Measuring Humidity with Cooled-Surface Condensation
    (Dew-Point) Hygrometer.
    '''
    
    D4243 = 'D4243'
    '''
    Standard Test Method for Measurement of Average Viscometric Degree
    of Polymerization of New and Aged Electrical Papers and Boards.
    '''
    
    D445 = 'D445'
    '''
    Standard Test Method for Kinematic Viscosity of Transparent and Opaque
    Liquids (and Calculation of Dynamic Viscosity) -or-
    Standard Method Of Test For Viscosity Of Transparent And Opaque Liquids
    (Kinematic And Dynamic Viscosities).
    '''
    
    D4768 = 'D4768'
    '''
    Standard Test Method for Analysis of 2,6-Ditertiary-Butyl Para-Cresol
    and 2,6-Ditertiary-Butyl Phenol in Insulating Liquids by Gas Chromatography.
    '''
    
    D5837 = 'D5837'
    '''
    Standard Test Method for Furanic Compounds in Electrical Insulating
    Liquids by High-Performance Liquid Chromatography (HPLC).
    '''
    
    D5853 = 'D5853'
    '''
    Standard Test Method for Pour Point of Crude Oils.
    '''
    
    D5949 = 'D5949'
    '''
    Standard Test Method for Pour Point of Petroleum Products (Automatic
    Pressure Pulsing Method).
    '''
    
    D5950 = 'D5950'
    '''
    Standard Test Method for Pour Point of Petroleum Products (Automatic
    Tilt Method).
    '''
    
    D5985 = 'D5985'
    '''
    Standard Test Method for Pour Point of Petroleum Products (Rotational
    Method).
    '''
    
    D6304 = 'D6304'
    '''
    Standard Test Method for Determination of Water in Petroleum Products,
    Lubricating Oils, and Additives by Coulometric Karl Fischer Titration.
    '''
    
    D6749 = 'D6749'
    '''
    Standard Test Method for Pour Point of Petroleum Products (Automatic
    Air Pressure Method).
    '''
    
    D6786 = 'D6786'
    '''
    Standard Test Method for Particle Count in Mineral Insulating Oil Using
    Automatic Optical Particle Counters.
    '''
    
    D6892 = 'D6892'
    '''
    Standard Test Method for Pour Point of Petroleum Products (Robotic
    Tilt Method).
    '''
    
    D7151 = 'D7151'
    '''
    Standard Test Method for Determination of Elements in Insulating Oils
    by Inductively Coupled Plasma Atomic Emission Spectrometry (ICP-AES).
    '''
    
    D7346 = 'D7346'
    '''
    Standard Test Method for No Flow Point and Pour Point of Petroleum
    Products and Liquid Fuels -or-
    Standard Test Method for No Flow Point and Pour Point of Petroleum
    Products -or-
    Standard Test Method for No Flow Point of Petroleum Products.
    '''
    
    D828 = 'D828'
    '''
    Standard Test Method for Tensile Properties of Paper and Paperboard
    Using Constant-Rate-of-Elongation Apparatus (Withdrawn 2009).
    '''
    
    D877 = 'D877'
    '''
    Standard Test Method for Dielectric Breakdown Voltage of Insulating
    Liquids Using Disk Electrodes.
    '''
    
    D877D877M = 'D877D877M'
    '''
    Standard Test Method for Dielectric Breakdown Voltage of Insulating
    Liquids Using Disk Electrodes.
    '''
    
    D92 = 'D92'
    '''
    Standard Test Method for Flash and Fire Points by Cleveland Open Cup
    Tester -or-
    Standard Test Method for Flash and Fire Points by Cleveland Open Cup.
    '''
    
    D924 = 'D924'
    '''
    Standard Test Method for Dissipation Factor (or Power Factor) and Relative
    Permittivity (Dielectric Constant) of Electrical Insulating Liquids.
    '''
    
    D93 = 'D93'
    '''
    Standard Test Methods for Flash Point by Pensky-Martens Closed Cup
    Tester -or-
    Standard Test Method for Flash Point by Pensky-Martens Closed Tester
    -or-
    Standard Method Of Test For Flash Point by Pensky-Martens Closed Tester.
    '''
    
    D97 = 'D97'
    '''
    Standard Test Method for Pour Point of Petroleum Products -or-
    Standard Test Method for Pour Point of Petroleum Oils.
    '''
    
    D974 = 'D974'
    '''
    Standard Test Method for Acid and Base Number by Color-Indicator Titration.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AccumulationKind(Enum):
    '''
    Kind of accumulation behaviour for read / measured values from individual
    end points.
    '''

    boundedQuantity = 'boundedQuantity'
    '''
    A time-independent cumulative quantity much like a 'bulkQuantity' or
    a 'latchingQuantity', except that the accumulation stops at the maximum
    or minimum values. When the maximum is reached, any additional positive
    accumulation is discarded, but negative accumulation may be accepted
    (thus lowering the counter.) Likewise, when the negative bound is reached,
    any additional negative accumulation is discarded, but positive accumulation
    is accepted (thus increasing the counter.)
    '''
    
    bulkQuantity = 'bulkQuantity'
    '''
    A value from a register which represents the bulk quantity of a commodity.
    This quantity is computed as the integral of the commodity usage rate.
    This value is typically used as the basis for the dial reading at the
    meter, and as a result, will roll over upon reaching a maximum dial
    value.
    Note 1: With the metering system, the roll-over behaviour typically
    implies a roll-under behavior so that the value presented is always
    a positive value (e.g. unsigned integer or positive decimal.) However,
    when communicating data between enterprise applications a negative
    value might occur in a case such as net metering.
    Note 2: A 'bulkQuantity' refers primarily to the dial reading and not
    the consumption over a specific period of time.
    '''
    
    continuousCumulative = 'continuousCumulative'
    '''
    The sum of the previous billing period values and the present period
    value.
    Note: 'continuousCumulative' is commonly used in conjunction with 'demand',
    and it would represent the cumulative sum of the previous billing period
    maximum demand values (as occurring with each demand reset) summed
    with the present period maximum demand value (which has yet to be reset.)
    '''
    
    cumulative = 'cumulative'
    '''
    The sum of the previous billing period values.
    Note: 'cumulative' is commonly used in conjunction with �demand.� Each
    demand reset causes the maximum demand value for the present billing
    period (since the last demand reset) to accumulate as an accumulative
    total of all maximum demands. So instead of 'zeroing' the demand register,
    a demand reset has the effect of adding the present maximum demand
    to this accumulating total.
    '''
    
    deltaData = 'deltaData'
    '''
    The difference between the value at the end of the prescribed interval
    and the beginning of the interval. This is used for incremental interval
    data.
    Note: One common application would be for load profile data, another
    use might be to report the number of events within an interval (such
    as the number of equipment energisations within the specified period
    of time.)
    '''
    
    indicating = 'indicating'
    '''
    As if a needle is swung out on the meter face to a value to indicate
    the current value.
    Note: An 'indicating' value is typically measured over hundreds of
    milliseconds or greater, or may imply a �pusher� mechanism to capture
    a value. Compare this to 'instantaneous' which is measured over a shorter
    period of time.
    '''
    
    instantaneous = 'instantaneous'
    '''
    Typically measured over the fastest period of time allowed by the definition
    of the metric (usually milliseconds or tens of milliseconds.)
    Note: 'instantaneous' was moved to attribute #3 in Ed.2 of IEC 61968-9,
    from attribute #1 in Ed.1 of IEC 61968-9.
    '''
    
    latchingQuantity = 'latchingQuantity'
    '''
    When this description is applied to a metered value, it implies that
    the value is a time-independent cumulative quantity much like a 'bulkQuantity',
    except that it latches upon the maximum value upon reaching that value.
    Any additional accumulation (positive or negative) is discarded until
    a reset occurs.
    Note: A 'latchingQuantity' may also occur in the downward direction
    � upon reaching a minimum value. The terms 'maximum' or 'minimum' (for
    'aggregate') will usually be included when this type of accumulation
    behaviour is present.
    When this description is applied to an encoded value (UOM= 'Code'),
    it implies that the value has one or more bits which are latching.
    The condition that caused the bit to be set may have long since evaporated.
    In either case, the timestamp that accompanies the value may not coincide
    with the moment the value was initially set.
    In both cases a system will need to perform an operation to clear the
    latched value.
    '''
    
    none = 'none'
    '''
    Not applicable, or implied by the unit of measure.
    '''
    
    summation = 'summation'
    '''
    A form of accumulation which is selective with respect to time.
    Note : 'summation' could be considered a specialisation of 'bulkQuantity'
    as it selectively accumulates pulses over a timing pattern (while 'bulkQuantity'
    accumulates pulses all of the time).
    '''
    
    timeDelay = 'timeDelay'
    '''
    A form of computation which introduces a time delay characteristic
    to the data value.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ActivePowerSourceKind(Enum):
    '''
    In cases where STATCOM provides active power compensation, the active power
    source can be defined.
    If there is no active powerSource, set to "none"
    '''

    batteryEnergyStorage = 'batteryEnergyStorage'
    '''
    (BESS) battery storage unit capable of charging the batteries and discharging
    then to the system.
    '''
    
    none = 'none'
    '''
    No active power source available
    '''
    
    other = 'other'
    '''
    (BESS) battery storage unit capable of charging the batteries and discharging
    then to the system.
    '''
    
    superconductiveMagneticStorage = 'superconductiveMagneticStorage'
    '''
    Superconductive magnetic storage
    '''
    
@stereotype(CIMStereotype.enumeration)
class AddressKind(Enum):
    '''
    Indicates the kind of the address
    '''

    billing = 'billing'
    '''
    A billing address.
    '''
    
    other = 'other'
    '''
    A kind of address not enumerated.
    '''
    
    physical = 'physical'
    '''
    A physical address.
    '''
    
    postal = 'postal'
    '''
    A postal address.
    '''
    
    street = 'street'
    '''
    A street address.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AgentRoleKind(Enum):
    '''
    The kind of agent that can play a particular role.
    '''

    Customer = 'Customer'
    '''
    The agent role is only played by a customer.
    '''
    
    Organisation = 'Organisation'
    '''
    The agent role is only played by an organisation.
    '''
    
    Person = 'Person'
    '''
    The agent role is only played by a person.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AggregateKind(Enum):
    '''
    Kind of aggregation for read / measured values from multiple end points.
    '''

    average = 'average'
    '''
    The value represents average.
    '''
    
    excess = 'excess'
    '''
    The value represents an amount over which a threshold was exceeded.
    '''
    
    fifthMaximum = 'fifthMaximum'
    '''
    The fifth highest value observed.
    '''
    
    fourthMaximum = 'fourthMaximum'
    '''
    The fourth highest value observed.
    '''
    
    highThreshold = 'highThreshold'
    '''
    The value represents a programmed high threshold.
    '''
    
    lowThreshold = 'lowThreshold'
    '''
    The value represents a programmed low threshold.
    '''
    
    maximum = 'maximum'
    '''
    The highest value observed.
    '''
    
    minimum = 'minimum'
    '''
    The smallest value observed.
    '''
    
    nominal = 'nominal'
    '''
    The nominal value.
    '''
    
    none = 'none'
    '''
    Not applicable.
    '''
    
    normal = 'normal'
    '''
    The normal value.
    '''
    
    secondMaximum = 'secondMaximum'
    '''
    The second highest value observed.
    '''
    
    secondMinimum = 'secondMinimum'
    '''
    The second smallest value observed.
    '''
    
    sum = 'sum'
    '''
    The accumulated sum.
    '''
    
    thirdMaximum = 'thirdMaximum'
    '''
    The third highest value observed.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AgreementPricingKind(Enum):
    '''
    The kinds of structures, rules, and constraints for how work or services
    are billed within a pricing agreement.
    '''

    fixedPrice = 'fixedPrice'
    '''
    A kind of pricing agreement where the total cost is predetermined and
    agreed upon in advance, regardless of the actual time or resources
    required to complete the work.
    '''
    
    notToExceed = 'notToExceed'
    '''
    A kind of pricing agreement where the total cost is capped at a specified
    maximum amount, but the actual billing is based on time and materials
    up to that limit, offering cost control with some flexibility.
    '''
    
    other = 'other'
    '''
    A kind of agreement pricing that is not enumerated.
    '''
    
    timeAndMaterials = 'timeAndMaterials'
    '''
    A kind of pricing agreement in which the client pays for the actual
    time spent (usually at an hourly or daily rate) and the materials used
    to complete the work, allowing flexibility for changes in scope or
    effort.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AmiBillingReadyKind(Enum):
    '''
    Lifecycle states of the metering installation at a usage point with respect
    to readiness for billing via advanced metering infrastructure reads.
    '''

    amiCapable = 'amiCapable'
    '''
    Usage point is equipped with an AMI capable meter that is not yet currently
    equipped with a communications module.
    '''
    
    amiDisabled = 'amiDisabled'
    '''
    Usage point is equipped with an AMI capable meter; however, the AMI
    functionality has been disabled or is not being used.
    '''
    
    billingApproved = 'billingApproved'
    '''
    Usage point is equipped with an operating AMI capable meter and accuracy
    has been certified for billing purposes.
    '''
    
    enabled = 'enabled'
    '''
    Usage point is equipped with an AMI capable meter having communications
    capability.
    '''
    
    nonAmi = 'nonAmi'
    '''
    Usage point is equipped with a non AMI capable meter.
    '''
    
    nonMetered = 'nonMetered'
    '''
    Usage point is not currently equipped with a meter.
    '''
    
    operable = 'operable'
    '''
    Usage point is equipped with an AMI capable meter that is functioning
    and communicating with the AMI network.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AnalyticKind(Enum):
    '''
    Possible kinds of analytics.
    '''

    agingAnalytic = 'agingAnalytic'
    '''
    Analytic evaluates aging.
    '''
    
    faultAnalytic = 'faultAnalytic'
    '''
    Analytic evaluates fault.
    '''
    
    healthAnalytic = 'healthAnalytic'
    '''
    Analytic evaluates asset health.
    '''
    
    other = 'other'
    '''
    Analytic evaluates other factor.
    '''
    
    replacementAnalytic = 'replacementAnalytic'
    '''
    Analytic evaluates need for replacement.
    '''
    
    riskAnalytic = 'riskAnalytic'
    '''
    Analytic evaluates risk.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AnchorKind(Enum):
    '''
    Kind of anchor.
    '''

    concrete = 'concrete'
    '''
    '''
    
    helix = 'helix'
    '''
    '''
    
    multiHelix = 'multiHelix'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    rod = 'rod'
    '''
    '''
    
    screw = 'screw'
    '''
    '''
    
    unknown = 'unknown'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AnodeType(Enum):
    '''
    Aggregated Nodes Types for example:
    <ul>
    <li>SYS - System Zone/Region; </li>
    </ul>
    <ul>
    <li>RUC - RUC Zone; </li>
    </ul>
    <ul>
    <li>LFZ - Load Forecast Zone; </li>
    </ul>
    <ul>
    <li>REG - Market Energy/Ancillary Service Region; </li>
    </ul>
    <ul>
    <li>AGR - Aggregate Generation Resource; </li>
    </ul>
    <ul>
    <li>POD - Point of Delivery; </li>
    </ul>
    <ul>
    <li>ALR - Aggregate Load Resource; </li>
    </ul>
    <ul>
    <li>LTAC - Load TransmissionAccessCharge (TAC) Group; </li>
    </ul>
    <ul>
    <li>ACA - Adjacent Control Area </li>
    </ul>
    <ul>
    <li>ASR - Aggregated System Resource </li>
    </ul>
    <ul>
    <li>ECA - Embedded Control Area </li>
    </ul>
    '''

    ACA = 'ACA'
    '''
    Adjacent Control Area
    '''
    
    AGR = 'AGR'
    '''
    Aggregate Generation Resource;
    '''
    
    ALR = 'ALR'
    '''
    Aggregate Load Resource;
    '''
    
    ASR = 'ASR'
    '''
    Aggregated System Resource
    '''
    
    DER = 'DER'
    '''
    Distributed Energy Resource.
    '''
    
    ECA = 'ECA'
    '''
    Embedded Control Area
    '''
    
    LFZ = 'LFZ'
    '''
    Load Forecast Zone
    '''
    
    LTAC = 'LTAC'
    '''
    Load TransmissionAccessCharge (TAC) Group;
    '''
    
    POD = 'POD'
    '''
    Point of Delivery;
    '''
    
    REG = 'REG'
    '''
    Market Energy/Ancillary Service Region;
    '''
    
    RUC = 'RUC'
    '''
    RUC Zone
    '''
    
    SYS = 'SYS'
    '''
    System Zone/Region;
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ApnodeType(Enum):
    '''
    Aggregate Node Types for example:
    AG - Aggregated Generation
    CPZ - Custom Price Zone
    DPZ - Default Price Zone
    LAP - Load Aggregation Point
    TH - Trading Hub
    SYS - System Zone
    CA - Control Area
    GA - generic aggregation
    EHV - 500 kV
    GH - generic hub
    ZN - zone
    INT - Interface
    BUS - Bus
    '''

    AG = 'AG'
    '''
    Aggregated Generation
    '''
    
    BUS = 'BUS'
    '''
    Bus
    '''
    
    CA = 'CA'
    '''
    Control Area
    '''
    
    CPZ = 'CPZ'
    '''
    Custom Price Zone
    '''
    
    DCA = 'DCA'
    '''
    Designated Congestion Area
    '''
    
    DPZ = 'DPZ'
    '''
    Default Price Zone
    '''
    
    EHV = 'EHV'
    '''
    500 kV - Extra High Voltage aggregate price nodes
    '''
    
    GA = 'GA'
    '''
    generic aggregation
    '''
    
    GH = 'GH'
    '''
    generic hub
    '''
    
    INT = 'INT'
    '''
    Interface
    '''
    
    SYS = 'SYS'
    '''
    System Zone
    '''
    
    TH = 'TH'
    '''
    Trading Hub
    '''
    
    ZN = 'ZN'
    '''
    Zone
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ApplicationSecurityKind(Enum):
    '''
    Specifies the expected security mechanism, per IEC 62351-4, to be utilized.
    '''

    endToEndSecure = 'endToEndSecure'
    '''
    Indicates that E2E-security shall be used in order to allow establishment
    of an MMS association.
    '''
    
    nonSecure = 'nonSecure'
    '''
    Indicates that an application security shall not be used in order to
    allow establishment of an MSS association.
    '''
    
    secure = 'secure'
    '''
    Indicates that the A-security-profile as specified in Clause 11 (or
    IEC TS 62351-4:2007) shall be used in order to allow establishment
    of an MMS association.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AreaControlMode(Enum):
    '''
    Area's present control mode.
    '''

    CF = 'CF'
    '''
    CF = Constant Frequency
    '''
    
    CTL = 'CTL'
    '''
    Constant Tie-Line
    '''
    
    OFF = 'OFF'
    '''
    Off control
    '''
    
    TLB = 'TLB'
    '''
    Tie-Line Bias
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AssetFailureClassification(Enum):
    '''
    Classifications of asset failures.
    '''

    defect = 'defect'
    '''
    Failure due to defect.
    '''
    
    major = 'major'
    '''
    Major failure.
    '''
    
    majorNeedsReplacement = 'majorNeedsReplacement'
    '''
    Major failure � asset needs to be replaced.
    '''
    
    minor = 'minor'
    '''
    Minor failure.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AssetFailureMode(Enum):
    '''
    What asset has failed to be able to do.
    Reason for breaker failure.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    failToCarryLoad = 'failToCarryLoad'
    '''
    Failure to carry load.
    '''
    
    failToClose = 'failToClose'
    '''
    Failure to close.
    '''
    
    failToInterrupt = 'failToInterrupt'
    '''
    Failure to interrupt.
    '''
    
    failToOpen = 'failToOpen'
    '''
    Failure to open.
    '''
    
    failToProvideInsulationLevel = 'failToProvideInsulationLevel'
    '''
    Failure to provide insulation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AssetGroupKind(Enum):
    '''
    Possible kinds of asset groups.
    '''

    analysisGroup = 'analysisGroup'
    '''
    Group is used for analysis purposes.
    '''
    
    complianceGroup = 'complianceGroup'
    '''
    Group is used for compliance purposes.
    '''
    
    functionalGroup = 'functionalGroup'
    '''
    Group is used for functional purposes, for example assets which are
    grouped together because they are part of a for a particular function
    - such as a group of feeders.
    '''
    
    inventoryGroup = 'inventoryGroup'
    '''
    Group is used for inventory purposes.
    '''
    
    other = 'other'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AssetHazardKind(Enum):
    '''
    Type of hazard that is posed to asset in this location.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    ambientTempAbove38 = 'ambientTempAbove38'
    '''
    Subject to ambient temperature above 38 �C.
    '''
    
    ambientTempBelowMinus12 = 'ambientTempBelowMinus12'
    '''
    Subject to ambient temperature of below -12 �C.
    '''
    
    childrenAtPlay = 'childrenAtPlay'
    '''
    Children play in area (stray kite/ball hazard).
    '''
    
    fishingArea = 'fishingArea'
    '''
    Fishing in area (fishing pole/line hazard).
    '''
    
    other = 'other'
    '''
    If other, look at type field for more information.
    '''
    
    vegetation = 'vegetation'
    '''
    Vegetation growing below asset that may cause problem.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AssetKind(Enum):
    '''
    Kinds of assets or asset components.
    '''

    breakerAirBlastBreaker = 'breakerAirBlastBreaker'
    '''
    Air blast circuit breaker.
    '''
    
    breakerBulkOilBreaker = 'breakerBulkOilBreaker'
    '''
    Bulk oil circuit breaker.
    '''
    
    breakerInsulatingStackAssembly = 'breakerInsulatingStackAssembly'
    '''
    Breaker insulating stack assembly (for live tank breaker).
    '''
    
    breakerMinimumOilBreaker = 'breakerMinimumOilBreaker'
    '''
    Minimum oil circuit breaker.
    '''
    
    breakerSF6DeadTankBreaker = 'breakerSF6DeadTankBreaker'
    '''
    SF6 dead tank breaker.
    '''
    
    breakerSF6LiveTankBreaker = 'breakerSF6LiveTankBreaker'
    '''
    SF6 live tank breaker.
    '''
    
    breakerTankAssembly = 'breakerTankAssembly'
    '''
    Breaker tank assembly.
    '''
    
    other = 'other'
    '''
    Other type of Asset. The type attribute may provide more details in
    this case.
    '''
    
    transformer = 'transformer'
    '''
    Transformer.
    '''
    
    transformerTank = 'transformerTank'
    '''
    Transformer tank.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AssetLifecycleStateKind(Enum):
    '''
    Lifecycle states an asset can be in.
    While the possible lifecycle states are standardized, the allowed transitions
    are not - they are intended to be defined by the business process requirements
    of local implementations.
    '''

    disposedOf = 'disposedOf'
    '''
    Asset disposed of.
    '''
    
    manufactured = 'manufactured'
    '''
    Asset manufactured.
    '''
    
    purchased = 'purchased'
    '''
    Asset purchased.
    '''
    
    received = 'received'
    '''
    Asset received.
    '''
    
    retired = 'retired'
    '''
    Asset retired.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AssetModelUsageKind(Enum):
    '''
    Usage for an asset model.
    '''

    customerSubstation = 'customerSubstation'
    '''
    Asset model is intended for use in customer substation.
    '''
    
    distributionOverhead = 'distributionOverhead'
    '''
    Asset model is intended for use in distribution overhead network.
    '''
    
    distributionUnderground = 'distributionUnderground'
    '''
    Asset model is intended for use in underground distribution network.
    '''
    
    other = 'other'
    '''
    Other kind of asset model usage.
    '''
    
    streetlight = 'streetlight'
    '''
    Asset model is intended for use as streetlight.
    '''
    
    substation = 'substation'
    '''
    Asset model is intended for use in substation.
    '''
    
    transmission = 'transmission'
    '''
    Asset model is intended for use in transmission network.
    '''
    
    unknown = 'unknown'
    '''
    Usage of the asset model is unknown.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AssetStringKind(Enum):
    '''
    Definition of type of string useful in asset domain.
    '''

    visualExamRemarks = 'visualExamRemarks'
    '''
    Remarks related to a visual exam.
    Could be used for remarks on oil appearance resulting from visual examination,
    including sediment, appearance, free water.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AssetTemperaturePressureAnalogKind(Enum):
    '''
    Analogs representing temperatures or pressures related to assets.
    '''

    oilPressureAtValve = 'oilPressureAtValve'
    '''
    Oil pressure at valve (in KPa).
    '''
    
    oilTemperatureAtValve = 'oilTemperatureAtValve'
    '''
    Oil temperature at valve (in �C).
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AsynchronousMachineKind(Enum):
    '''
    Kind of Asynchronous Machine.
    '''

    generator = 'generator'
    '''
    The Asynchronous Machine is a generator.
    '''
    
    motor = 'motor'
    '''
    The Asynchronous Machine is a motor.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class AutonomousAgentKind(Enum):
    '''
    The kind of autonomous agents.
    '''

    bot = 'bot'
    '''
    Autonomous program on the internet or another network that can interact
    with systems or users.
    '''
    
    other = 'other'
    '''
    A kind of autonomous agent that is not enumerated.
    '''
    
    robot = 'robot'
    '''
    Type of automated machine that can execute specific tasks with little
    or no human intervention and with speed and precision.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class BatteryStateKind(Enum):
    '''
    The state of the battery unit.
    '''

    charging = 'charging'
    '''
    Stored energy is increasing.
    '''
    
    discharging = 'discharging'
    '''
    Stored energy is decreasing.
    '''
    
    empty = 'empty'
    '''
    Unable to discharge, and not charging.
    '''
    
    full = 'full'
    '''
    Unable to charge, and not discharging.
    '''
    
    waiting = 'waiting'
    '''
    Neither charging nor discharging, but able to do so.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class BoilerControlMode(Enum):
    '''
    Boiler control mode.
    '''

    coordinated = 'coordinated'
    '''
    Coordinated.
    '''
    
    following = 'following'
    '''
    Following.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class BreakerApplicationKind(Enum):
    '''
    Classifications of network roles in which breakers can be deployed. The
    classifications are intended to reflect both criticality of breaker in
    network operations and typical usage experienced by breaker.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    busBreaker = 'busBreaker'
    '''
    Bus breaker.
    '''
    
    busTieBreaker = 'busTieBreaker'
    '''
    Bus tie breaker.
    '''
    
    capacitorOrReactorBankBreaker = 'capacitorOrReactorBankBreaker'
    '''
    Capacitor or reactor breaker.
    '''
    
    feederBreaker = 'feederBreaker'
    '''
    Feeder breaker.
    '''
    
    other = 'other'
    '''
    Other type of breaker application.
    '''
    
    spare = 'spare'
    '''
    Spare breaker.
    '''
    
    stepUpTransformerBreakerFossil = 'stepUpTransformerBreakerFossil'
    '''
    Step-up transformer breaker for fossil generator.
    '''
    
    stepUpTransformerBreakerHydro = 'stepUpTransformerBreakerHydro'
    '''
    Step-up transformer breaker for hydro generator.
    '''
    
    stepUpTransformerBreakerNuclear = 'stepUpTransformerBreakerNuclear'
    '''
    Step-up transformer breaker for nuclear generator.
    '''
    
    stepUpTransformerBreakerPumpedStorage = 'stepUpTransformerBreakerPumpedStorage'
    '''
    Step-up transformer breaker for pumped storage.
    '''
    
    substationTransformerBreaker = 'substationTransformerBreaker'
    '''
    Substation transformer breaker.
    '''
    
    transmissionFlowGateLineBreaker = 'transmissionFlowGateLineBreaker'
    '''
    Transmission flow gate line breaker.
    '''
    
    transmissionLineBreaker = 'transmissionLineBreaker'
    '''
    Transmission line breaker.
    '''
    
    transmissionTieLineBreaker = 'transmissionTieLineBreaker'
    '''
    Transmission tie line breaker.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class BreakerConfiguration(Enum):
    '''
    Switching arrangement for bay.
    '''

    breakerAndAHalf = 'breakerAndAHalf'
    '''
    Breaker and a half.
    '''
    
    doubleBreaker = 'doubleBreaker'
    '''
    Double breaker.
    '''
    
    noBreaker = 'noBreaker'
    '''
    No breaker.
    '''
    
    singleBreaker = 'singleBreaker'
    '''
    Single breaker.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class BreakerFailureReasonKind(Enum):
    '''
    Reason for breaker failure.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    SF6BlastValveFailure = 'SF6BlastValveFailure'
    '''
    SF6 blast valve failure.
    '''
    
    SF6PufferFailure = 'SF6PufferFailure'
    '''
    SF6 puffer valve failure.
    '''
    
    blastValveFailure = 'blastValveFailure'
    '''
    Blast valve failure.
    '''
    
    bushingFailure = 'bushingFailure'
    '''
    Bushing failure.
    '''
    
    closeCoilOpenShortedFailed = 'closeCoilOpenShortedFailed'
    '''
    Close coil open shorted failure.
    '''
    
    contaminatedAir = 'contaminatedAir'
    '''
    Contaminated air.
    '''
    
    contaminatedArcChutes = 'contaminatedArcChutes'
    '''
    Contaminated arc chutes.
    '''
    
    contaminatedGas = 'contaminatedGas'
    '''
    Contaminated gas.
    '''
    
    contaminatedGasAir = 'contaminatedGasAir'
    '''
    Contaminated gas or air.
    '''
    
    controlCircuitFailure = 'controlCircuitFailure'
    '''
    Control circuit failure.
    '''
    
    degradedLubrication = 'degradedLubrication'
    '''
    Degraded lubrication.
    '''
    
    externalOrInternalContamination = 'externalOrInternalContamination'
    '''
    External or internal contamination.
    '''
    
    highPressureAirPlant = 'highPressureAirPlant'
    '''
    High pressure air plant.
    '''
    
    highResistanceLoadPath = 'highResistanceLoadPath'
    '''
    High resistance load path.
    '''
    
    highResistancePath = 'highResistancePath'
    '''
    High resistance path.
    '''
    
    interrupterContactFailure = 'interrupterContactFailure'
    '''
    Interrupter contact failure.
    '''
    
    interrupterFailure = 'interrupterFailure'
    '''
    Interrupter failure.
    '''
    
    linkageFailure = 'linkageFailure'
    '''
    Linkage failure.
    '''
    
    lossOfOil = 'lossOfOil'
    '''
    Loss of oil.
    '''
    
    lossOfVacuum = 'lossOfVacuum'
    '''
    Loss of vacuum.
    '''
    
    lowGasPressure = 'lowGasPressure'
    '''
    Low gas pressure.
    '''
    
    mechanismFailure = 'mechanismFailure'
    '''
    Blast valve failure.
    '''
    
    mechanismOrLinkageFailure = 'mechanismOrLinkageFailure'
    '''
    Mechanism or linkage failure.
    '''
    
    oilRelatedFailure = 'oilRelatedFailure'
    '''
    Oil-related failure.
    '''
    
    poorOilQuality = 'poorOilQuality'
    '''
    Poor oil quality.
    '''
    
    rackingMechanismFailure = 'rackingMechanismFailure'
    '''
    Racking mechanism failure.
    '''
    
    resistorFailure = 'resistorFailure'
    '''
    Resistor failure.
    '''
    
    resistorGradingCapacitorFailure = 'resistorGradingCapacitorFailure'
    '''
    Resistor grading capacitor failure.
    '''
    
    solidDielectricFailure = 'solidDielectricFailure'
    '''
    Solid dielectric failure.
    '''
    
    storedEnergyFailure = 'storedEnergyFailure'
    '''
    Stored energy failure.
    '''
    
    tripCoilOpenShortedFailed = 'tripCoilOpenShortedFailed'
    '''
    Trip coil open shorted failure.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class BusbarConfiguration(Enum):
    '''
    Busbar layout for bay.
    '''

    doubleBus = 'doubleBus'
    '''
    Double bus.
    '''
    
    mainWithTransfer = 'mainWithTransfer'
    '''
    Main bus with transfer bus.
    '''
    
    ringBus = 'ringBus'
    '''
    Ring bus.
    '''
    
    singleBus = 'singleBus'
    '''
    Single bus.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class BushingInsulationKind(Enum):
    '''
    Insulation kind for bushings.
    '''

    compound = 'compound'
    '''
    Compound.
    '''
    
    oilImpregnatedPaper = 'oilImpregnatedPaper'
    '''
    Oil impregnated paper.
    '''
    
    other = 'other'
    '''
    Other.
    '''
    
    resinBondedPaper = 'resinBondedPaper'
    '''
    Resin bonded paper.
    '''
    
    resinImpregnatedPaper = 'resinImpregnatedPaper'
    '''
    Resin impregnated paper.
    '''
    
    solidPorcelain = 'solidPorcelain'
    '''
    Solid porcelain.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CIGREStandardEditionKind(Enum):
    '''
    List of editions for CIGRE standards.
    '''

    _2000 = '_2000'
    '''
    2000 standard edition.
    '''
    
    none = 'none'
    '''
    No standard edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown standard edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CIGREStandardKind(Enum):
    '''
    List of CIGRE standards.
    '''

    TB170 = 'TB170'
    '''
    CIGRE Technical Brochure 170 Static Electrification in Power Transformers.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CableConstructionKind(Enum):
    '''
    Kind of cable construction.
    '''

    compacted = 'compacted'
    '''
    Compacted cable.
    '''
    
    compressed = 'compressed'
    '''
    Compressed cable.
    '''
    
    other = 'other'
    '''
    Other kind of cable construction.
    '''
    
    sector = 'sector'
    '''
    Sector cable.
    '''
    
    segmental = 'segmental'
    '''
    Segmental cable.
    '''
    
    solid = 'solid'
    '''
    Solid cable.
    '''
    
    stranded = 'stranded'
    '''
    Stranded cable.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CableOuterJacketKind(Enum):
    '''
    Kind of cable outer jacket.
    '''

    insulating = 'insulating'
    '''
    Insulating cable outer jacket.
    '''
    
    linearLowDensityPolyethylene = 'linearLowDensityPolyethylene'
    '''
    Linear low density polyethylene cable outer jacket.
    '''
    
    none = 'none'
    '''
    Cable has no outer jacket.
    '''
    
    other = 'other'
    '''
    Pther kind of cable outer jacket.
    '''
    
    polyethylene = 'polyethylene'
    '''
    Polyethylene cable outer jacket.
    '''
    
    pvc = 'pvc'
    '''
    PVC cable outer jacket.
    '''
    
    semiconducting = 'semiconducting'
    '''
    Semiconducting cable outer jacket.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CableShieldMaterialKind(Enum):
    '''
    Kind of cable shield material.
    '''

    aluminum = 'aluminum'
    '''
    Aluminum cable shield.
    '''
    
    copper = 'copper'
    '''
    Copper cable shield.
    '''
    
    lead = 'lead'
    '''
    Lead cable shield.
    '''
    
    other = 'other'
    '''
    Other kind of cable shield material.
    '''
    
    steel = 'steel'
    '''
    Steel cable shield.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CalculationIntervalUnitKind(Enum):
    '''
    Units in which calculation interval period is defined.
    '''

    cycle = 'cycle'
    '''
    Period expressed in cycles.
    '''
    
    day = 'day'
    '''
    Period expressed in days.
    '''
    
    hour = 'hour'
    '''
    Period expressed in hours.
    '''
    
    milliSecond = 'milliSecond'
    '''
    Period expressed in milli-seconds.
    '''
    
    minute = 'minute'
    '''
    Period expressed in minutes.
    '''
    
    month = 'month'
    '''
    Period expressed in months.
    '''
    
    perCycle = 'perCycle'
    '''
    Period expressed in per-cycle.
    '''
    
    season = 'season'
    '''
    Period expressed in seasons.
    '''
    
    second = 'second'
    '''
    Period expressed in seconds.
    '''
    
    week = 'week'
    '''
    Period expressed in weeks.
    '''
    
    year = 'year'
    '''
    Period expressed in years.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CalculationKind(Enum):
    '''
    Kind of calculation operation that can be done to Measurement.
    '''

    division = 'division'
    '''
    Division operation on the input values (operands).
    '''
    
    multiplication = 'multiplication'
    '''
    Multiplication operation on the input values (operands).
    '''
    
    squareRoot = 'squareRoot'
    '''
    Square root operator - only one input value (operands).
    '''
    
    summation = 'summation'
    '''
    Summation operation on the input values (operands).
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CalculationModeKind(Enum):
    '''
    The mode of the calculation (total, periodic, sliding).
    '''

    period = 'period'
    '''
    Calcuation is for fixed period.
    '''
    
    sliding = 'sliding'
    '''
    Calculation is for sliding period.
    '''
    
    total = 'total'
    '''
    Calculation is for total period.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CalculationTechniqueKind(Enum):
    '''
    Possible calculation techniques.
    '''

    average = 'average'
    '''
    Result is average value for period.
    '''
    
    maximum = 'maximum'
    '''
    Result is maximum value for period.
    '''
    
    minimum = 'minimum'
    '''
    Result is minimum value for period.
    '''
    
    trueRMS = 'trueRMS'
    '''
    Result is RMS value for period.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CapabilityRequirementKind(Enum):
    '''
    The kinds of necessary qualifications, credentials, and competencies an
    agent must possess to effectively perform a specific function, role, or
    task. Each kind establishes the essential prerequisites to ensure compliance
    with industry standards, regulatory mandates, and professional expectations.
    '''

    certifcate = 'certifcate'
    '''
    Certification is credential or designation granted by a professional
    organisation, industry body, or educational institution to individuals
    who have demonstrated a specific level of knowledge, skills, or competency
    in a particular field or area of expertise.
    '''
    
    license = 'license'
    '''
    License issued by a governmental or regulatory authority. It is a formal
    document that grants the holder the legal right to perform certain
    actions or access certain privileges within the framework of applicable
    laws and regulations.
    '''
    
    other = 'other'
    '''
    A kind of required capability that is not enumerated.
    '''
    
    professional = 'professional'
    '''
    Professional refers to an individual who possesses the necessary knowledge,
    skills, and qualifications to perform work in that specific field at
    a high level of competence and with a level of expertise recognized
    by peers and industry standards.
    '''
    
    training = 'training'
    '''
    Formal training in for acquiring knowledge, skills, and practical experience
    to develop or enhance one's abilities in that specific domain. It involves
    structured learning activities designed to impart the necessary knowledge
    and skills required to perform tasks effectively and proficiently.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CapacitorCanFusingKind(Enum):
    '''
    Kind of capacitor can fusing
    '''

    external = 'external'
    '''
    External
    '''
    
    internal = 'internal'
    '''
    Internal
    '''
    
    none = 'none'
    '''
    None
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CapacitorRackKind(Enum):
    '''
    '''

    enclosedRack = 'enclosedRack'
    '''
    '''
    
    openRack = 'openRack'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    poletopRack = 'poletopRack'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CirculationAndCoolingKind(Enum):
    '''
    '''

    oilForcedAirForced = 'oilForcedAirForced'
    '''
    '''
    
    oilForcedAirNatural = 'oilForcedAirNatural'
    '''
    '''
    
    oilNaturalAirForced = 'oilNaturalAirForced'
    '''
    '''
    
    oilNaturalAirNatural = 'oilNaturalAirNatural'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ComDirectionKind(Enum):
    '''
    Kind of communication direction.
    '''

    biDirectional = 'biDirectional'
    '''
    Communication with the device is bi-directional.
    '''
    
    fromDevice = 'fromDevice'
    '''
    Communication is from device.
    '''
    
    toDevice = 'toDevice'
    '''
    Communication is to device.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ComTechnologyKind(Enum):
    '''
    Kind of communication technology.
    '''

    cellular = 'cellular'
    '''
    Communicates using a public cellular radio network. A specific variant
    of 'rf'.
    '''
    
    ethernet = 'ethernet'
    '''
    Communicates using one or more of a family of frame-based computer
    networking technologies conforming to the IEEE 802.3 standard.
    '''
    
    homePlug = 'homePlug'
    '''
    Communicates using power line communication technologies conforming
    to the standards established by the HomePlug Powerline Alliance. A
    specific variant of 'plc'.
    '''
    
    pager = 'pager'
    '''
    Communicates using a public one-way or two-way radio-based paging network.
    A specific variant of 'rf'.
    '''
    
    phone = 'phone'
    '''
    Communicates using a basic, wireline telephone system.
    '''
    
    plc = 'plc'
    '''
    Communicates using power line communication technologies.
    '''
    
    rf = 'rf'
    '''
    Communicates using private or public radio-based technology.
    '''
    
    rfMesh = 'rfMesh'
    '''
    Communicates using a mesh radio technology. A specific variant of 'rf'.
    '''
    
    zigbee = 'zigbee'
    '''
    Communicates using radio communication technologies conforming to the
    standards established by the ZigBee. A specific variant of 'rf'.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CommodityKind(Enum):
    '''
    Kind of commodity being measured.
    '''

    air = 'air'
    '''
    '''
    
    carbon = 'carbon'
    '''
    '''
    
    ch4 = 'ch4'
    '''
    Methane CH4
    '''
    
    co2 = 'co2'
    '''
    Carbon Dioxide CO2
    '''
    
    communication = 'communication'
    '''
    A measurement of the communication infrastructure itself.
    '''
    
    coolingFluid = 'coolingFluid'
    '''
    The cool fluid returns warmer than when it was sent. The heat conveyed
    may be metered.
    '''
    
    electricityPrimaryMetered = 'electricityPrimaryMetered'
    '''
    It is possible for a meter to be outfitted with an external VT and/or
    CT. The meter might not be aware of these devices, and the display
    not compensate for their presence. Ultimately, when these scalars are
    applied, the value that represents the service value is called the
    �primary metered� value. The �index� in sub-category 3 mirrors those
    of sub-category 0.
    '''
    
    electricitySecondaryMetered = 'electricitySecondaryMetered'
    '''
    All types of metered quantities. This type of reading comes from the
    meter and represents a �secondary� metered value.
    '''
    
    hch = 'hch'
    '''
    Hexachlorocyclohexane HCH
    '''
    
    heatingFluid = 'heatingFluid'
    '''
    This fluid is likely in liquid form. It is not necessarily water or
    water based. The warm fluid returns cooler than when it was sent. The
    heat conveyed may be metered.
    '''
    
    insulativeGas = 'insulativeGas'
    '''
    (SF6 is found separately below.)
    '''
    
    insulativeOil = 'insulativeOil'
    '''
    '''
    
    internet = 'internet'
    '''
    Internet service
    '''
    
    naturalGas = 'naturalGas'
    '''
    '''
    
    none = 'none'
    '''
    Not Applicable
    '''
    
    nonpotableWater = 'nonpotableWater'
    '''
    Reclaimed water � possibly used for irrigation but not sufficiently
    treated to be considered safe for drinking.
    '''
    
    nox = 'nox'
    '''
    Nitrous Oxides NOX
    '''
    
    pfc = 'pfc'
    '''
    Perfluorocarbons PFC
    '''
    
    potableWater = 'potableWater'
    '''
    Drinkable water
    '''
    
    propane = 'propane'
    '''
    '''
    
    refuse = 'refuse'
    '''
    trash
    '''
    
    sf6 = 'sf6'
    '''
    Sulfurhexafluoride SF6
    '''
    
    so2 = 'so2'
    '''
    Sulfur Dioxide SO2
    '''
    
    steam = 'steam'
    '''
    Water in steam form, usually used for heating.
    '''
    
    tvLicence = 'tvLicence'
    '''
    Television
    '''
    
    wasteWater = 'wasteWater'
    '''
    (Sewerage)
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CompensatorConnectionKind(Enum):
    '''
    Kind of compensator connection
    '''

    delta = 'delta'
    '''
    Delta connection
    '''
    
    other = 'other'
    '''
    Other connection
    '''
    
    wye = 'wye'
    '''
    WYE connection
    '''
    
    wyeGround = 'wyeGround'
    '''
    WYE ground connection
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CompensatorControlModeKind(Enum):
    '''
    Kind of compensator controller mode.
    '''

    reactivePower = 'reactivePower'
    '''
    Reactive power control.
    '''
    
    voltage = 'voltage'
    '''
    Voltage control.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CompositeSwitchKind(Enum):
    '''
    Kind of composite switch.
    '''

    escoThrowOver = 'escoThrowOver'
    '''
    '''
    
    gral = 'gral'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    ral = 'ral'
    '''
    '''
    
    regulatorBypass = 'regulatorBypass'
    '''
    '''
    
    throwOver = 'throwOver'
    '''
    '''
    
    ugMultiSwitch = 'ugMultiSwitch'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ContactMethodKind(Enum):
    '''
    The kinds of contact methods for an agent.
    '''

    DoNotContact = 'DoNotContact'
    '''
    The Agent is not to be contacted.
    '''
    
    Email = 'Email'
    '''
    An email is a method of contact for the Agent.
    '''
    
    PostalMail = 'PostalMail'
    '''
    Information sent via postal mail a method of contact for the Agent.
    '''
    
    Telephone = 'Telephone'
    '''
    A telephone call is a method of contact for the Agent.
    '''
    
    TextMessage = 'TextMessage'
    '''
    SMS messaging is a method of contact for the Agent.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ContingencyEquipmentStatusKind(Enum):
    '''
    Indicates the state which the contingency equipment is to be in when the
    contingency is applied.
    '''

    inService = 'inService'
    '''
    The equipment is to be put into service.
    '''
    
    outOfService = 'outOfService'
    '''
    The equipment is to be taken out of service.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ContractType(Enum):
    '''
    Transmission Contract Type, For example:
    O - Other
    TE - Transmission Export
    TI - Transmission Import
    ETC - Existing Transmission Contract
    RMT - RMT Contract
    TOR - Transmission Ownership Right
    RMR - Reliability Must Run Contract
    CVR - Converted contract
    '''

    CVR = 'CVR'
    '''
    CVR - Converted contract.
    '''
    
    ETC = 'ETC'
    '''
    ETC - Existing Transmission Contract
    '''
    
    O = 'O'
    '''
    O - Other
    '''
    
    RMR = 'RMR'
    '''
    RMR - Reliability Must Run Contract
    '''
    
    RMT = 'RMT'
    '''
    RMT - RMT Contract
    '''
    
    TE = 'TE'
    '''
    TE - Transmission Export
    '''
    
    TI = 'TI'
    '''
    TI - Transmission Import
    '''
    
    TOR = 'TOR'
    '''
    TOR - Transmission Ownership Right
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ControlAreaTypeKind(Enum):
    '''
    The type of control area.
    '''

    AGC = 'AGC'
    '''
    Used for automatic generation control.
    '''
    
    Forecast = 'Forecast'
    '''
    Used for load forecast.
    '''
    
    Interchange = 'Interchange'
    '''
    Used for interchange specification or control.
    '''
    
@stereotype(CIMStereotype.gmdm)
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ConverterControlModeKind(Enum):
    '''
    '''

    constantPowerFactor = 'constantPowerFactor'
    '''
    '''
    
    constantReactivePower = 'constantReactivePower'
    '''
    '''
    
    dynamic = 'dynamic'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CoolantType(Enum):
    '''
    Method of cooling a machine.
    '''

    air = 'air'
    '''
    Air.
    '''
    
    hydrogenGas = 'hydrogenGas'
    '''
    Hydrogen gas.
    '''
    
    water = 'water'
    '''
    Water.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CorporateStandardKind(Enum):
    '''
    Kind of corporate standard.
    '''

    experimental = 'experimental'
    '''
    Asset model is used experimentally.
    '''
    
    other = 'other'
    '''
    Other kind of corporate standard for the asset model.
    '''
    
    standard = 'standard'
    '''
    Asset model is used as corporate standard.
    '''
    
    underEvaluation = 'underEvaluation'
    '''
    Asset model usage is under evaluation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CostBasis(Enum):
    '''
    For example:
    Bid Cost
    Proxy Cost
    Registered Cost
    '''

    BIDC = 'BIDC'
    '''
    '''
    
    PRXC = 'PRXC'
    '''
    '''
    
    REGC = 'REGC'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CrewStatusKind(Enum):
    '''
    Defines the current status of the crew assignment.
    '''

    arrived = 'arrived'
    '''
    The crew has arrived on site at a work location.
    '''
    
    assigned = 'assigned'
    '''
    The crew has been assigned to work on a task.
    '''
    
    awaitingCrewAssignment = 'awaitingCrewAssignment'
    '''
    Indicates that the work is awaiting one or more crews to be assigned.
    '''
    
    enroute = 'enroute'
    '''
    The crew is en route to a work location.
    '''
    
    fieldComplete = 'fieldComplete'
    '''
    The crew has completed assigned work in the field. The equipment or
    other devices may not be energized at this time.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CsOperatingModeKind(Enum):
    '''
    Operating mode for DC line operating as Current Source Converter.
    '''

    inverter = 'inverter'
    '''
    Operating as inverter, which is the power receiving end.
    '''
    
    rectifier = 'rectifier'
    '''
    Operating as rectifier, which is the power sending end.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CsPpccControlKind(Enum):
    '''
    Active power control modes for DC line operating as Current Source Converter.
    '''

    activePower = 'activePower'
    '''
    Control is active power control at AC side, at point of common coupling.
    Target is provided by ACDCConverter.targetPpcc.
    '''
    
    dcCurrent = 'dcCurrent'
    '''
    Control is DC current with target value provided by CsConverter.targetIdc.
    '''
    
    dcVoltage = 'dcVoltage'
    '''
    Control is DC voltage with target value provided by ACDCConverter.targetUdc.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class Currency(Enum):
    '''
    Monetary currencies. ISO 4217 standard including 3-character currency code.
    '''

    AED = 'AED'
    '''
    United Arab Emirates dirham.
    '''
    
    AFN = 'AFN'
    '''
    Afghan afghani.
    '''
    
    ALL = 'ALL'
    '''
    Albanian lek.
    '''
    
    AMD = 'AMD'
    '''
    Armenian dram.
    '''
    
    ANG = 'ANG'
    '''
    Netherlands Antillean guilder.
    '''
    
    AOA = 'AOA'
    '''
    Angolan kwanza.
    '''
    
    ARS = 'ARS'
    '''
    Argentine peso.
    '''
    
    AUD = 'AUD'
    '''
    Australian dollar.
    '''
    
    AWG = 'AWG'
    '''
    Aruban florin.
    '''
    
    AZN = 'AZN'
    '''
    Azerbaijani manat.
    '''
    
    BAM = 'BAM'
    '''
    Bosnia and Herzegovina convertible mark.
    '''
    
    BBD = 'BBD'
    '''
    Barbados dollar.
    '''
    
    BDT = 'BDT'
    '''
    Bangladeshi taka.
    '''
    
    BGN = 'BGN'
    '''
    Bulgarian lev.
    '''
    
    BHD = 'BHD'
    '''
    Bahraini dinar.
    '''
    
    BIF = 'BIF'
    '''
    Burundian franc.
    '''
    
    BMD = 'BMD'
    '''
    Bermudian dollar (customarily known as Bermuda dollar).
    '''
    
    BND = 'BND'
    '''
    Brunei dollar.
    '''
    
    BOB = 'BOB'
    '''
    Boliviano.
    '''
    
    BOV = 'BOV'
    '''
    Bolivian Mvdol (funds code).
    '''
    
    BRL = 'BRL'
    '''
    Brazilian real.
    '''
    
    BSD = 'BSD'
    '''
    Bahamian dollar.
    '''
    
    BTN = 'BTN'
    '''
    Bhutanese ngultrum.
    '''
    
    BWP = 'BWP'
    '''
    Botswana pula.
    '''
    
    BYR = 'BYR'
    '''
    Belarusian ruble.
    '''
    
    BZD = 'BZD'
    '''
    Belize dollar.
    '''
    
    CAD = 'CAD'
    '''
    Canadian dollar.
    '''
    
    CDF = 'CDF'
    '''
    Congolese franc.
    '''
    
    CHF = 'CHF'
    '''
    Swiss franc.
    '''
    
    CLF = 'CLF'
    '''
    Unidad de Fomento (funds code), Chile.
    '''
    
    CLP = 'CLP'
    '''
    Chilean peso.
    '''
    
    CNY = 'CNY'
    '''
    Chinese yuan.
    '''
    
    COP = 'COP'
    '''
    Colombian peso.
    '''
    
    COU = 'COU'
    '''
    Unidad de Valor Real.
    '''
    
    CRC = 'CRC'
    '''
    Costa Rican colon.
    '''
    
    CUC = 'CUC'
    '''
    Cuban convertible peso.
    '''
    
    CUP = 'CUP'
    '''
    Cuban peso.
    '''
    
    CVE = 'CVE'
    '''
    Cape Verde escudo.
    '''
    
    CZK = 'CZK'
    '''
    Czech koruna.
    '''
    
    DJF = 'DJF'
    '''
    Djiboutian franc.
    '''
    
    DKK = 'DKK'
    '''
    Danish krone.
    '''
    
    DOP = 'DOP'
    '''
    Dominican peso.
    '''
    
    DZD = 'DZD'
    '''
    Algerian dinar.
    '''
    
    EEK = 'EEK'
    '''
    Estonian kroon.
    '''
    
    EGP = 'EGP'
    '''
    Egyptian pound.
    '''
    
    ERN = 'ERN'
    '''
    Eritrean nakfa.
    '''
    
    ETB = 'ETB'
    '''
    Ethiopian birr.
    '''
    
    EUR = 'EUR'
    '''
    Euro.
    '''
    
    FJD = 'FJD'
    '''
    Fiji dollar.
    '''
    
    FKP = 'FKP'
    '''
    Falkland Islands pound.
    '''
    
    GBP = 'GBP'
    '''
    Pound sterling.
    '''
    
    GEL = 'GEL'
    '''
    Georgian lari.
    '''
    
    GHS = 'GHS'
    '''
    Ghanaian cedi.
    '''
    
    GIP = 'GIP'
    '''
    Gibraltar pound.
    '''
    
    GMD = 'GMD'
    '''
    Gambian dalasi.
    '''
    
    GNF = 'GNF'
    '''
    Guinean franc.
    '''
    
    GTQ = 'GTQ'
    '''
    Guatemalan quetzal.
    '''
    
    GYD = 'GYD'
    '''
    Guyanese dollar.
    '''
    
    HKD = 'HKD'
    '''
    Hong Kong dollar.
    '''
    
    HNL = 'HNL'
    '''
    Honduran lempira.
    '''
    
    HRK = 'HRK'
    '''
    Croatian kuna.
    '''
    
    HTG = 'HTG'
    '''
    Haitian gourde.
    '''
    
    HUF = 'HUF'
    '''
    Hungarian forint.
    '''
    
    IDR = 'IDR'
    '''
    Indonesian rupiah.
    '''
    
    ILS = 'ILS'
    '''
    Israeli new sheqel.
    '''
    
    INR = 'INR'
    '''
    Indian rupee.
    '''
    
    IQD = 'IQD'
    '''
    Iraqi dinar.
    '''
    
    IRR = 'IRR'
    '''
    Iranian rial.
    '''
    
    ISK = 'ISK'
    '''
    Icelandic krona.
    '''
    
    JMD = 'JMD'
    '''
    Jamaican dollar.
    '''
    
    JOD = 'JOD'
    '''
    Jordanian dinar.
    '''
    
    JPY = 'JPY'
    '''
    Japanese yen.
    '''
    
    KES = 'KES'
    '''
    Kenyan shilling.
    '''
    
    KGS = 'KGS'
    '''
    Kyrgyzstani som.
    '''
    
    KHR = 'KHR'
    '''
    Cambodian riel.
    '''
    
    KMF = 'KMF'
    '''
    Comoro franc.
    '''
    
    KPW = 'KPW'
    '''
    North Korean won.
    '''
    
    KRW = 'KRW'
    '''
    South Korean won.
    '''
    
    KWD = 'KWD'
    '''
    Kuwaiti dinar.
    '''
    
    KYD = 'KYD'
    '''
    Cayman Islands dollar.
    '''
    
    KZT = 'KZT'
    '''
    Kazakhstani tenge.
    '''
    
    LAK = 'LAK'
    '''
    Lao kip.
    '''
    
    LBP = 'LBP'
    '''
    Lebanese pound.
    '''
    
    LKR = 'LKR'
    '''
    Sri Lanka rupee.
    '''
    
    LRD = 'LRD'
    '''
    Liberian dollar.
    '''
    
    LSL = 'LSL'
    '''
    Lesotho loti.
    '''
    
    LTL = 'LTL'
    '''
    Lithuanian litas.
    '''
    
    LVL = 'LVL'
    '''
    Latvian lats.
    '''
    
    LYD = 'LYD'
    '''
    Libyan dinar.
    '''
    
    MAD = 'MAD'
    '''
    Moroccan dirham.
    '''
    
    MDL = 'MDL'
    '''
    Moldovan leu.
    '''
    
    MGA = 'MGA'
    '''
    Malagasy ariary.
    '''
    
    MKD = 'MKD'
    '''
    Macedonian denar.
    '''
    
    MMK = 'MMK'
    '''
    Myanma kyat.
    '''
    
    MNT = 'MNT'
    '''
    Mongolian tugrik.
    '''
    
    MOP = 'MOP'
    '''
    Macanese pataca.
    '''
    
    MRO = 'MRO'
    '''
    Mauritanian ouguiya.
    '''
    
    MUR = 'MUR'
    '''
    Mauritian rupee.
    '''
    
    MVR = 'MVR'
    '''
    Maldivian rufiyaa.
    '''
    
    MWK = 'MWK'
    '''
    Malawian kwacha.
    '''
    
    MXN = 'MXN'
    '''
    Mexican peso.
    '''
    
    MYR = 'MYR'
    '''
    Malaysian ringgit.
    '''
    
    MZN = 'MZN'
    '''
    Mozambican metical.
    '''
    
    NAD = 'NAD'
    '''
    Namibian dollar.
    '''
    
    NGN = 'NGN'
    '''
    Nigerian naira.
    '''
    
    NIO = 'NIO'
    '''
    Cordoba oro.
    '''
    
    NOK = 'NOK'
    '''
    Norwegian krone.
    '''
    
    NPR = 'NPR'
    '''
    Nepalese rupee.
    '''
    
    NZD = 'NZD'
    '''
    New Zealand dollar.
    '''
    
    OMR = 'OMR'
    '''
    Omani rial.
    '''
    
    PAB = 'PAB'
    '''
    Panamanian balboa.
    '''
    
    PEN = 'PEN'
    '''
    Peruvian nuevo sol.
    '''
    
    PGK = 'PGK'
    '''
    Papua New Guinean kina.
    '''
    
    PHP = 'PHP'
    '''
    Philippine peso.
    '''
    
    PKR = 'PKR'
    '''
    Pakistani rupee.
    '''
    
    PLN = 'PLN'
    '''
    Polish zloty.
    '''
    
    PYG = 'PYG'
    '''
    Paraguayan guarani.
    '''
    
    QAR = 'QAR'
    '''
    Qatari rial.
    '''
    
    RON = 'RON'
    '''
    Romanian new leu.
    '''
    
    RSD = 'RSD'
    '''
    Serbian dinar.
    '''
    
    RUB = 'RUB'
    '''
    Russian rouble.
    '''
    
    RWF = 'RWF'
    '''
    Rwandan franc.
    '''
    
    SAR = 'SAR'
    '''
    Saudi riyal.
    '''
    
    SBD = 'SBD'
    '''
    Solomon Islands dollar.
    '''
    
    SCR = 'SCR'
    '''
    Seychelles rupee.
    '''
    
    SDG = 'SDG'
    '''
    Sudanese pound.
    '''
    
    SEK = 'SEK'
    '''
    Swedish krona/kronor.
    '''
    
    SGD = 'SGD'
    '''
    Singapore dollar.
    '''
    
    SHP = 'SHP'
    '''
    Saint Helena pound.
    '''
    
    SLL = 'SLL'
    '''
    Sierra Leonean leone.
    '''
    
    SOS = 'SOS'
    '''
    Somali shilling.
    '''
    
    SRD = 'SRD'
    '''
    Surinamese dollar.
    '''
    
    STD = 'STD'
    '''
    Sao Tome and Principe dobra.
    '''
    
    SYP = 'SYP'
    '''
    Syrian pound.
    '''
    
    SZL = 'SZL'
    '''
    Lilangeni.
    '''
    
    THB = 'THB'
    '''
    Thai baht.
    '''
    
    TJS = 'TJS'
    '''
    Tajikistani somoni.
    '''
    
    TMT = 'TMT'
    '''
    Turkmenistani manat.
    '''
    
    TND = 'TND'
    '''
    Tunisian dinar.
    '''
    
    TOP = 'TOP'
    '''
    Tongan pa'anga.
    '''
    
    TRY = 'TRY'
    '''
    Turkish lira.
    '''
    
    TTD = 'TTD'
    '''
    Trinidad and Tobago dollar.
    '''
    
    TWD = 'TWD'
    '''
    New Taiwan dollar.
    '''
    
    TZS = 'TZS'
    '''
    Tanzanian shilling.
    '''
    
    UAH = 'UAH'
    '''
    Ukrainian hryvnia.
    '''
    
    UGX = 'UGX'
    '''
    Ugandan shilling.
    '''
    
    USD = 'USD'
    '''
    United States dollar.
    '''
    
    UYU = 'UYU'
    '''
    Uruguayan peso.
    '''
    
    UZS = 'UZS'
    '''
    Uzbekistan som.
    '''
    
    VEF = 'VEF'
    '''
    Venezuelan bolivar fuerte.
    '''
    
    VND = 'VND'
    '''
    Vietnamese Dong.
    '''
    
    VUV = 'VUV'
    '''
    Vanuatu vatu.
    '''
    
    WST = 'WST'
    '''
    Samoan tala.
    '''
    
    XAF = 'XAF'
    '''
    CFA franc BEAC.
    '''
    
    XCD = 'XCD'
    '''
    East Caribbean dollar.
    '''
    
    XOF = 'XOF'
    '''
    CFA Franc BCEAO.
    '''
    
    XPF = 'XPF'
    '''
    CFP franc.
    '''
    
    YER = 'YER'
    '''
    Yemeni rial.
    '''
    
    ZAR = 'ZAR'
    '''
    South African rand.
    '''
    
    ZMK = 'ZMK'
    '''
    Zambian kwacha.
    '''
    
    ZWL = 'ZWL'
    '''
    Zimbabwe dollar.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CurveStyle(Enum):
    '''
    Style or shape of curve.
    '''

    constantYValue = 'constantYValue'
    '''
    The Y-axis values are assumed constant until the next curve point and
    prior to the first curve point.
    '''
    
    straightLineYValues = 'straightLineYValues'
    '''
    The Y-axis values are assumed to be a straight line between values.
    Also known as linear interpolation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class CustomerKind(Enum):
    '''
    Kind of customer.
    '''

    commercialIndustrial = 'commercialIndustrial'
    '''
    Commercial industrial customer.
    '''
    
    energyServiceScheduler = 'energyServiceScheduler'
    '''
    Customer as energy service scheduler.
    '''
    
    energyServiceSupplier = 'energyServiceSupplier'
    '''
    Customer as energy service supplier.
    '''
    
    enterprise = 'enterprise'
    '''
    '''
    
    internalUse = 'internalUse'
    '''
    Internal use customer.
    '''
    
    other = 'other'
    '''
    Other kind of customer.
    '''
    
    pumpingLoad = 'pumpingLoad'
    '''
    Pumping load customer.
    '''
    
    regionalOperator = 'regionalOperator'
    '''
    '''
    
    residential = 'residential'
    '''
    Residential customer.
    '''
    
    residentialAndCommercial = 'residentialAndCommercial'
    '''
    Residential and commercial customer.
    '''
    
    residentialAndStreetlight = 'residentialAndStreetlight'
    '''
    Residential and streetlight customer.
    '''
    
    residentialFarmService = 'residentialFarmService'
    '''
    Residential farm service customer.
    '''
    
    residentialStreetlightOthers = 'residentialStreetlightOthers'
    '''
    Residential streetlight or other related customer.
    '''
    
    subsidiary = 'subsidiary'
    '''
    '''
    
    windMachine = 'windMachine'
    '''
    Wind machine customer.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DCControlModeKind(Enum):
    '''
    Kind of DC control mode.
    '''

    acEmulation = 'acEmulation'
    '''
    An AC emulation control aims to reproduce the behaviour of an AC line
    by means of a function of the difference between angles in both converter
    stations in DC links embedded within a single synchronous AC grid.
    For changes in the phase angle on either station, the response of this
    control is to �emulate the behaviour of an AC line� in both steady
    and transient states.
    The AC emulation control needs measurement signals for the angles at
    both ends of the DC system (at the AC points of common coupling of
    the DC system). In practice, the angle difference is measured by built-in
    devices in the converters and the synchronization of angle measurements
    on both stations is done by means of GPS.
    ACEmulationControlFunction is used by this control. The control can
    only be applied by a controller that have access to the two AC points
    of common coupling of the DC system. Therefore it cannot be applied
    for a ACDCConverterController.
    '''
    
    acVoltage = 'acVoltage'
    '''
    AC voltage control mode (IEC 60633) is a control of the AC voltage
    of the AC network connected to a DC substation.
    '''
    
    activePower = 'activePower'
    '''
    Control is active power control at AC side, at point of common coupling.
    According to IEC 60633 the active power control mode is control of
    the active power flow exchanged between a DC substation and the connected
    AC network.
    '''
    
    damping = 'damping'
    '''
    Damping control mode (IEC 60633) is supplementary control mode providing
    the damping of power oscillations in one or more connected AC networks.
    '''
    
    dcCurrent = 'dcCurrent'
    '''
    Control is DC current in a DC system (IEC 60633).
    '''
    
    dcVoltage = 'dcVoltage'
    '''
    Control is DC voltage in a DC substation (IEC 60633).
    '''
    
    frequency = 'frequency'
    '''
    Frequency control mode (IEC 60633) is a control of the frequency of
    the connected AC network by varying the active power exchanged between
    a DC substation and the connected AC network.
    '''
    
    islanded = 'islanded'
    '''
    Islanded network operation mode (IEC 60633) is a control mode in which
    the DC substation is connected to an islanded AC network.
    '''
    
    pPccAndUdcDroop = 'pPccAndUdcDroop'
    '''
    Control is active power at point of common coupling and local DC voltage,
    with the droop.
    '''
    
    pPccAndUdcDroopPilot = 'pPccAndUdcDroopPilot'
    '''
    Control is active power at point of common coupling and the pilot DC
    voltage, with the droop. The mode is used for Multi Terminal High Voltage
    DC (MTDC) systems where multiple DC Substations are connected to the
    DC transmission lines. The pilot voltage is then used to coordinate
    the control the DC voltage across the DC substations.
    '''
    
    pPccAndUdcDroopWithCompensation = 'pPccAndUdcDroopWithCompensation'
    '''
    Control is active power at point of common coupling and compensated
    DC voltage, with the droop. Compensation factor is the resistance,
    as an approximation of the DC voltage of a common (real or virtual)
    node in the DC network.
    '''
    
    phasePcc = 'phasePcc'
    '''
    Control is phase at point of common coupling.
    '''
    
    powerFactorPcc = 'powerFactorPcc'
    '''
    Control is power factor at point of common coupling.
    '''
    
    pulseWidthModulation = 'pulseWidthModulation'
    '''
    No explicit control. Pulse-modulation factor is directly set in magnitude
    and phase.
    '''
    
    reactivePower = 'reactivePower'
    '''
    Control is reactive power control at AC side, at point of common coupling.
    According to IEC 60633 reactive power control mode is a control of
    the reactive power exchanged between a converter unit, or DC substation
    and the connected AC network.
    '''
    
    sstiDamping = 'sstiDamping'
    '''
    Sub-synchronous torsional interaction (SSTI) damping control mode (IEC
    60633) is a supplementary control mode providing the damping of critical
    frequencies of an (electrical) nearby generator.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DCConverterOperatingModeKind(Enum):
    '''
    The operating mode of an DC bipole.
    '''

    bipolar = 'bipolar'
    '''
    Bipolar operation.
    '''
    
    monopolarGroundReturn = 'monopolarGroundReturn'
    '''
    Monopolar operation with ground return.
    '''
    
    monopolarMetallicReturn = 'monopolarMetallicReturn'
    '''
    Monopolar operation with metallic return.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DCPolarityKind(Enum):
    '''
    Polarity for DC circuits.
    '''

    middle = 'middle'
    '''
    Middle pole. The converter terminal is the midpoint in a bipolar or
    symmetric monopole configuration. The midpoint can be grounded and/or
    have a metallic return.
    '''
    
    negative = 'negative'
    '''
    Negative pole. The converter terminal is intended to operate at a negative
    voltage relative the midpoint or positive terminal.
    '''
    
    positive = 'positive'
    '''
    Positive pole. The converter terminal is intended to operate at a positive
    voltage relative the midpoint or negative terminal.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DCSystemDirectionKind(Enum):
    '''
    Direction kinds of the DC system.
    '''

    bidirectional = 'bidirectional'
    '''
    Bidirectional DC system used for the transfer of energy in either direction.
    According to IEC 60633 a multiterminal DC system is bidirectional if
    one or more substations are bidirectional.
    '''
    
    unidirectional = 'unidirectional'
    '''
    Unidirectional DC system used for the transfer of energy in only one
    direction. According to IEC 60633, most DC systems are inherently bidirectional.
    However, some systems may be optimized to transmit power in only one
    preferred direction. Such systems may still be considered as "bidirectional".
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DCSystemTransmissionKind(Enum):
    '''
    DC system transmission kind.
    '''

    backToBack = 'backToBack'
    '''
    DC back-to-back system (IEC 60633) is a DC system which transfers energy
    between AC buses at the same location.
    '''
    
    multiTerminal = 'multiTerminal'
    '''
    Multiterminal DC transmission system (IEC 60633) consisting of more
    than two separated DC substations and the interconnecting DC transmission
    lines.
    '''
    
    twoTerminal = 'twoTerminal'
    '''
    Two-terminal DC transmission system (IEC 60633), consisting of two
    DC substations and the connecting DC transmission line(s).
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DCTerminalPolarityKind(Enum):
    '''
    Polarity for DC terminal. Used in DC system configurations that have explicit
    polarity of the terminals, e.g., voltage source converter (VSC) technology.
    '''

    negative = 'negative'
    '''
    Negative terminal.
    '''
    
    positive = 'positive'
    '''
    Positive terminal.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DERParameterKind(Enum):
    '''
    '''

    activePower = 'activePower'
    '''
    '''
    
    apparentPower = 'apparentPower'
    '''
    '''
    
    decreasingRampRate = 'decreasingRampRate'
    '''
    '''
    
    highFilterBiDirectionalRegulation = 'highFilterBiDirectionalRegulation'
    '''
    '''
    
    highFilterDownRegulation = 'highFilterDownRegulation'
    '''
    '''
    
    highFilterUpRegulation = 'highFilterUpRegulation'
    '''
    '''
    
    increasingRampRate = 'increasingRampRate'
    '''
    '''
    
    lowFilterBiDirectionalRegulation = 'lowFilterBiDirectionalRegulation'
    '''
    '''
    
    lowFilterDownRegulation = 'lowFilterDownRegulation'
    '''
    '''
    
    lowFilterUpRegulation = 'lowFilterUpRegulation'
    '''
    '''
    
    reactivePower = 'reactivePower'
    '''
    '''
    
    voltage = 'voltage'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DERUnitSymbol(Enum):
    '''
    The units defined for usage in the CIM.
    '''

    A = 'A'
    '''
    Current in Ampere.
    '''
    
    Ah = 'Ah'
    '''
    Ampere-hours, Ampere-hours.
    '''
    
    As = 'As'
    '''
    Ampere seconds (A�s).
    '''
    
    Btu = 'Btu'
    '''
    Energy, British Thermal Unit.
    '''
    
    Hz = 'Hz'
    '''
    Frequency in Hertz (1/s).
    '''
    
    Q = 'Q'
    '''
    Quantity power, Q.
    '''
    
    Qh = 'Qh'
    '''
    Quantity energy, Qh.
    '''
    
    V = 'V'
    '''
    Electric potential in Volt (W/A).
    '''
    
    VA = 'VA'
    '''
    Apparent power in Volt Ampere (See also real power and reactive power.)
    '''
    
    VAh = 'VAh'
    '''
    Apparent energy in Volt Ampere hours.
    '''
    
    VAr = 'VAr'
    '''
    Reactive power in Volt Ampere reactive. The �reactive� or �imaginary�
    component of electrical power (VIsin(phi)). (See also real power and
    apparent power).
    Note: Different meter designs use different methods to arrive at their
    results. Some meters may compute reactive power as an arithmetic value,
    while others compute the value vectorially. The data consumer should
    determine the method in use and the suitability of the measurement
    for the intended purpose.
    '''
    
    VArh = 'VArh'
    '''
    Reactive energy in Volt Ampere reactive hours.
    '''
    
    VPerVA = 'VPerVA'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between
    IEC meters and EEI (ANSI) meters. It is assumed that the data consumers
    understand the type of meter being used and agree on the sign convention
    in use at any given utility.
    '''
    
    VPerVAr = 'VPerVAr'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between
    IEC meters and EEI (ANSI) meters. It is assumed that the data consumers
    understand the type of meter being used and agree on the sign convention
    in use at any given utility.
    '''
    
    Vh = 'Vh'
    '''
    Volt-hour, Volt hours.
    '''
    
    Vs = 'Vs'
    '''
    Volt second (Ws/A).
    '''
    
    W = 'W'
    '''
    Real power in Watt (J/s). Electrical power may have real and reactive
    components. The real portion of electrical power (I�R or VIcos(phi)),
    is expressed in Watts. (See also apparent power and reactive power.)
    '''
    
    WPerA = 'WPerA'
    '''
    Active power per current flow, watt per Ampere.
    '''
    
    WPers = 'WPers'
    '''
    Ramp rate in Watt per second.
    '''
    
    Wh = 'Wh'
    '''
    Real energy in Watt hours.
    '''
    
    deg = 'deg'
    '''
    Plane angle in degrees.
    '''
    
    degC = 'degC'
    '''
    Relative temperature in degrees Celsius.
    In the SI unit system the symbol is �C. Electric charge is measured
    in coulomb that has the unit symbol C. To distinguish degree Celsius
    form coulomb the symbol used in the UML is degC. Reason for not using
    �C is the special character � is difficult to manage in software.
    '''
    
    h = 'h'
    '''
    Time, hour = 60 min = 3600 s.
    '''
    
    min = 'min'
    '''
    Time, minute = 60 s.
    '''
    
    ohm = 'ohm'
    '''
    Electric resistance in ohm (V/A).
    '''
    
    ohmPerm = 'ohmPerm'
    '''
    Electric resistance per length in ohm per metre ((V/A)/m).
    '''
    
    ohmm = 'ohmm'
    '''
    resistivity, Ohm metre, (rho).
    '''
    
    onePerHz = 'onePerHz'
    '''
    Reciprocal of frequency (1/Hz).
    '''
    
    s = 's'
    '''
    Time in seconds.
    '''
    
    therm = 'therm'
    '''
    Energy, Therm.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DINStandardEditionKind(Enum):
    '''
    List of editions for DIN standards.
    '''

    _1985 = '_1985'
    '''
    1985 standard edition.
    '''
    
    none = 'none'
    '''
    No standard edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown standard edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DINStandardKind(Enum):
    '''
    List of DIN standards.
    '''

    _51353 = '_51353'
    '''
    Testing of insulating oils; detection of corrosive sulfur; silver strip
    test.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DayOfWeek(Enum):
    '''
    The day of the week.
    '''

    friday = 'friday'
    '''
    Day of the week between Thursday and Saturday.
    '''
    
    monday = 'monday'
    '''
    Day of the week between Sunday and Tuesday.
    '''
    
    publicHolidays = 'publicHolidays'
    '''
    This stands for any day that is a public holiday; it is a placeholder
    for all official public holidays in some particular location.
    '''
    
    saturday = 'saturday'
    '''
    Day of the week between Friday and Sunday.
    '''
    
    sunday = 'sunday'
    '''
    Day of the week between Saturday and Monday.
    '''
    
    thursday = 'thursday'
    '''
    Day of the week between Wednesday and Friday.
    '''
    
    tuesday = 'tuesday'
    '''
    Day of the week between Monday and Wednesday.
    '''
    
    wednesday = 'wednesday'
    '''
    Day of the week between Tuesday and Thursday.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DeploymentStateKind(Enum):
    '''
    Possible states of asset deployment.
    '''

    inService = 'inService'
    '''
    Asset in service in deployment location.
    '''
    
    installed = 'installed'
    '''
    Asset installed in deployment location.
    '''
    
    notYetInstalled = 'notYetInstalled'
    '''
    Asset not yet installed in deployment location.
    '''
    
    outOfService = 'outOfService'
    '''
    Asset out of service, but in deployment location.
    '''
    
    removed = 'removed'
    '''
    Asset removed from deployment location.
    '''
    
@stereotype(CIMStereotype.enumeration)
class DirectionKind(Enum):
    '''
    '''

    forward = 'forward'
    '''
    '''
    
    reverse = 'reverse'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DischargeResistorKind(Enum):
    '''
    '''

    external = 'external'
    '''
    '''
    
    internal = 'internal'
    '''
    '''
    
    none = 'none'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DobleStandardEditionKind(Enum):
    '''
    List of editions for Doble standards.
    '''

    none = 'none'
    '''
    No edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class DobleStandardKind(Enum):
    '''
    List of Doble standards.
    '''

    methanol = 'methanol'
    '''
    Doble test for methanol.
    '''
    
@stereotype(CIMStereotype.enumeration)
class DocumentKind(Enum):
    '''
    The kinds of documents.
    '''

    agreement = 'agreement'
    '''
    A formal document outlining the terms and conditions between two or
    more parties.
    '''
    
    application = 'application'
    '''
    A document submitted to request approval, access, or participation
    in a process or service.
    '''
    
    billOfMaterials = 'billOfMaterials'
    '''
    A detailed list of raw materials, components, and assemblies required
    to manufacture a product.
    '''
    
    blueprint = 'blueprint'
    '''
    A technical drawing or plan that provides detailed specifications for
    construction or manufacturing.
    '''
    
    drawing = 'drawing'
    '''
    A graphical representation used to illustrate design, layout, or technical
    details.
    '''
    
    inspectionReport = 'inspectionReport'
    '''
    A document summarizing the findings of an evaluation or assessment
    of an asset, process, or facility.
    '''
    
    instruction = 'instruction'
    '''
    A document providing step-by-step guidance on how to perform a task
    or operate a system.
    '''
    
    invoice = 'invoice'
    '''
    A billing document itemizing goods or services provided along with
    costs and payment terms.
    '''
    
    log = 'log'
    '''
    A recorded list of events, actions, or observations maintained for
    reference or tracking.
    '''
    
    map = 'map'
    '''
    A visual representation of geographical or spatial information for
    navigation or planning.
    '''
    
    other = 'other'
    '''
    A kind of document that is not enumerated.
    '''
    
    partslist = 'partslist'
    '''
    A document listing all components and materials required for assembly
    or maintenance.
    '''
    
    permit = 'permit'
    '''
    An official document granting authorization to perform a specific activity
    under regulated conditions.
    '''
    
    photograph = 'photograph'
    '''
    A captured visual image used for documentation, identification, or
    analysis.
    '''
    
    procedure = 'procedure'
    '''
    A formalized set of instructions outlining steps to complete a process
    systematically.
    '''
    
    specification = 'specification'
    '''
    A document defining the detailed requirements and standards for a product
    or system.
    '''
    
    video = 'video'
    '''
    A recorded visual and audio medium used for documentation, training,
    or communication.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class EPAStandardEditionKind(Enum):
    '''
    List of editions for EPA standards.
    '''

    A = 'A'
    '''
    Standard edition A.
    '''
    
    none = 'none'
    '''
    No standard edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown standard edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class EPAStandardKind(Enum):
    '''
    List of EPA standards.
    '''

    _8082 = '_8082'
    '''
    Polychlorinated Biphenyls (PCBs) by Gas Chromatography.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class EmissionType(Enum):
    '''
    The type of emission.
    '''

    carbonDioxide = 'carbonDioxide'
    '''
    Carbon dioxide.
    '''
    
    carbonDisulfide = 'carbonDisulfide'
    '''
    Carbon disulfide.
    '''
    
    chlorine = 'chlorine'
    '''
    Chlorine.
    '''
    
    hydrogenSulfide = 'hydrogenSulfide'
    '''
    Hydrogen sulfide.
    '''
    
    nitrogenOxide = 'nitrogenOxide'
    '''
    Nitrogen oxide.
    '''
    
    sulfurDioxide = 'sulfurDioxide'
    '''
    Sulfur dioxide.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class EmissionValueSource(Enum):
    '''
    The source of the emission value.
    '''

    calculated = 'calculated'
    '''
    Calculated.
    '''
    
    measured = 'measured'
    '''
    Measured.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class EndDeviceFunctionKind(Enum):
    '''
    Kind of end device function.
    '''

    autonomousDst = 'autonomousDst'
    '''
    Autonomous application of daylight saving time (DST).
    '''
    
    demandResponse = 'demandResponse'
    '''
    Demand response functions.
    '''
    
    electricMetering = 'electricMetering'
    '''
    Electricity metering.
    '''
    
    gasMetering = 'gasMetering'
    '''
    Gas metering.
    '''
    
    metrology = 'metrology'
    '''
    Presentation of metered values to a user or another system (always
    a function of a meter, but might not be supported by a load control
    unit).
    '''
    
    onRequestRead = 'onRequestRead'
    '''
    On-request reads.
    '''
    
    outageHistory = 'outageHistory'
    '''
    Reporting historical power interruption data.
    '''
    
    relaysProgramming = 'relaysProgramming'
    '''
    Support for one or more relays that may be programmable in the meter
    (and tied to TOU, time pulse, load control or other functions).
    '''
    
    reverseFlow = 'reverseFlow'
    '''
    Detection and monitoring of reverse flow.
    '''
    
    waterMetering = 'waterMetering'
    '''
    Water metering.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class EnergyProductType(Enum):
    '''
    Energy product type.
    '''

    DYN = 'DYN'
    '''
    Dynamic
    '''
    
    FIRM = 'FIRM'
    '''
    Firm
    '''
    
    NFRM = 'NFRM'
    '''
    Non Firm
    '''
    
    WHL = 'WHL'
    '''
    Wheeling
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class FACTSDeviceKind(Enum):
    '''
    Kind of FACTS device.
    '''

    statcom = 'statcom'
    '''
    Static synchronous compensator.
    '''
    
    svc = 'svc'
    '''
    Static VAr compensator.
    '''
    
    tcpar = 'tcpar'
    '''
    Thyristor-controlled phase-angle regulator.
    '''
    
    tcsc = 'tcsc'
    '''
    Thyristor-controlled series capacitor.
    '''
    
    tcvl = 'tcvl'
    '''
    Thyristor-controlled voltage limiter.
    '''
    
    tsbr = 'tsbr'
    '''
    Thyristor-switched braking resistor.
    '''
    
    tssc = 'tssc'
    '''
    Thyristor-switched series capacitor.
    '''
    
    upfc = 'upfc'
    '''
    Unified power flow controller.
    '''
    
@stereotype(CIMStereotype.enumeration)
class FacilityKind(Enum):
    '''
    Types of facilities at which an asset can be deployed.
    '''

    distributionPoleTop = 'distributionPoleTop'
    '''
    Distribution pole top.
    '''
    
    other = 'other'
    '''
    The "other" enumeration should be used when the facility kind is not
    one of the other enumerations listed in the FacilityKind enumeration
    class.
    '''
    
    substationDistribution = 'substationDistribution'
    '''
    Distribution substation.
    '''
    
    substationFossilPlant = 'substationFossilPlant'
    '''
    Fossil plant substation.
    '''
    
    substationHydroPlant = 'substationHydroPlant'
    '''
    Hydro plant substation.
    '''
    
    substationNuclearPlant = 'substationNuclearPlant'
    '''
    Nuclear plant substation.
    '''
    
    substationSubTransmission = 'substationSubTransmission'
    '''
    Subtransmission substation.
    '''
    
    substationTransmission = 'substationTransmission'
    '''
    Transmission substation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class FailureIsolationMethodKind(Enum):
    '''
    How the failure has been isolated.
    '''

    breakerOperation = 'breakerOperation'
    '''
    Isolated via breaker operation.
    '''
    
    burnedInTheClear = 'burnedInTheClear'
    '''
    Isolated by equipment burning in the clear.
    '''
    
    fuse = 'fuse'
    '''
    Isolated by fuse.
    '''
    
    manuallyIsolated = 'manuallyIsolated'
    '''
    Isolated by manual operation.
    '''
    
    other = 'other'
    '''
    Isolated by other action.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class FlagTypeRMR(Enum):
    '''
    Indicates whether the unit is RMR and it's condition type, for example:
    N' - not an RMR unit
    '1' - RMR Condition 1 unit
    '2' - RMR Condition 2 unit
    '''

    _1 = '_1'
    '''
    '1' - RMR Condition 1 unit
    '''
    
    _2 = '_2'
    '''
    '2' - RMR Condition 2 unit
    '''
    
    N = 'N'
    '''
    'N' - not an RMR unit
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class FlowDirectionKind(Enum):
    '''
    Kind of flow direction for reading/measured values proper to some commodities
    such as, for example, energy, power, demand.
    '''

    forward = 'forward'
    '''
    "Delivered," or "Imported" as defined 61968-2.
    Forward Active Energy is a positive kWh value as one would naturally
    expect to find as energy is supplied by the utility and consumed at
    the service.
    Forward Reactive Energy is a positive VArh value as one would naturally
    expect to find in the presence of inductive loading.
    In polyphase metering, the forward energy register is incremented when
    the sum of the phase energies is greater than zero:
    <img src="HTS_1.PNG" width="209" height="16" border="0" alt="graphic"/>
    '''
    
    lagging = 'lagging'
    '''
    Typically used to describe that a power factor is lagging the reference
    value.
    Note 1: When used to describe VA, �lagging� describes a form of measurement
    where reactive power is considered in all four quadrants, but real
    power is considered only in quadrants I and IV.
    Note 2: When used to describe power factor, the term �Lagging� implies
    that the PF is negative. The term �lagging� in this case takes the
    place of the negative sign. If a signed PF value is to be passed by
    the data producer, then the direction of flow enumeration zero (none)
    should be used in order to avoid the possibility of creating an expression
    that employs a double negative. The data consumer should be able to
    tell from the sign of the data if the PF is leading or lagging. This
    principle is analogous to the concept that �Reverse� energy is an implied
    negative value, and to publish a negative reverse value would be ambiguous.
    Note 3: Lagging power factors typically indicate inductive loading.
    '''
    
    leading = 'leading'
    '''
    Typically used to describe that a power factor is leading the reference
    value.
    Note: Leading power factors typically indicate capacitive loading.
    '''
    
    net = 'net'
    '''
    |Forward| - |Reverse|, See 61968-2.
    Note: In some systems, the value passed as a �net� value could become
    negative. In other systems the value passed as a �net� value is always
    a positive number, and rolls-over and rolls-under as needed.
    '''
    
    none = 'none'
    '''
    Not Applicable (N/A)
    '''
    
    q1minusQ4 = 'q1minusQ4'
    '''
    Q1 minus Q4
    '''
    
    q1plusQ2 = 'q1plusQ2'
    '''
    Reactive positive quadrants. (The term �lagging� is preferred.)
    '''
    
    q1plusQ3 = 'q1plusQ3'
    '''
    Quadrants 1 and 3
    '''
    
    q1plusQ4 = 'q1plusQ4'
    '''
    Quadrants 1 and 4 usually represent forward active energy
    '''
    
    q2minusQ3 = 'q2minusQ3'
    '''
    Q2 minus Q3
    '''
    
    q2plusQ3 = 'q2plusQ3'
    '''
    Quadrants 2 and 3 usually represent reverse active energy
    '''
    
    q2plusQ4 = 'q2plusQ4'
    '''
    Quadrants 2 and 4
    '''
    
    q3minusQ2 = 'q3minusQ2'
    '''
    Q3 minus Q2
    '''
    
    q3plusQ4 = 'q3plusQ4'
    '''
    Reactive negative quadrants. (The term �leading� is preferred.)
    '''
    
    quadrant1 = 'quadrant1'
    '''
    Q1 only
    '''
    
    quadrant2 = 'quadrant2'
    '''
    Q2 only
    '''
    
    quadrant3 = 'quadrant3'
    '''
    Q3 only
    '''
    
    quadrant4 = 'quadrant4'
    '''
    Q4 only
    '''
    
    reverse = 'reverse'
    '''
    Reverse Active Energy is equivalent to "Received," or "Exported" as
    defined in 61968-2.
    Reverse Active Energy is a positive kWh value as one would expect to
    find when energy is backfed by the service onto the utility network.
    Reverse Reactive Energy is a positive VArh value as one would expect
    to find in the presence of capacitive loading and a leading Power Factor.
    In polyphase metering, the reverse energy register is incremented when
    the sum of the phase energies is less than zero:
    <img src="HTS_1.PNG" width="209" height="16" border="0" alt="graphic"/>
    Note: The value passed as a reverse value is always a positive value.
    It is understood by the label �reverse� that it represents negative
    flow.
    '''
    
    total = 'total'
    '''
    |Forward| + |Reverse|, See 61968-2.
    The sum of the commodity in all quadrants Q1+Q2+Q3+Q4.
    In polyphase metering, the total energy register is incremented when
    the absolute value of the sum of the phase energies is greater than
    zero:
    <img src="HTS_1.PNG" width="217" height="16" border="0" alt="graphic"/>
    '''
    
    totalByPhase = 'totalByPhase'
    '''
    In polyphase metering, the total by phase energy register is incremented
    when the sum of the absolute values of the phase energies is greater
    than zero:
    <img src="HTS_1.PNG" width="234" height="16" border="0" alt="graphic"/>
    In single phase metering, the formulas for �Total� and �Total by phase�
    collapse to the same expression. For communication purposes however,
    the �Total� enumeration should be used with single phase meter data.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class FlowDirectionType(Enum):
    '''
    Specifies the direction of energy flow in the flowgate.
    '''

    Forward = 'Forward'
    '''
    Forward direction.
    '''
    
    Reverse = 'Reverse'
    '''
    Reverse direction.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class FuelSource(Enum):
    '''
    For example:
    Bio Gas (Landfill, Sewage, Digester, etc.)
    Biomass
    Coal
    DIST
    Natural Gas
    Geothermal
    HRCV
    None
    Nuclear
    Oil
    Other
    Solar
    Waste to Energy
    Water
    Wind
    '''

    BGAS = 'BGAS'
    '''
    Bio Gas (Landfill, Sewage, Digester, etc.)
    '''
    
    BIOM = 'BIOM'
    '''
    Biomass
    '''
    
    COAL = 'COAL'
    '''
    Coal
    '''
    
    DIST = 'DIST'
    '''
    Distributed generation which could be a hybrid of multiple fuel sources.
    '''
    
    GAS = 'GAS'
    '''
    '''
    
    GEOT = 'GEOT'
    '''
    GeoThermal
    '''
    
    HRCV = 'HRCV'
    '''
    Heat Recovery.
    '''
    
    NG = 'NG'
    '''
    Natural Gas
    '''
    
    NNG = 'NNG'
    '''
    Non-Natural Gas
    '''
    
    NONE = 'NONE'
    '''
    '''
    
    NUCL = 'NUCL'
    '''
    Nuclear
    '''
    
    OIL = 'OIL'
    '''
    '''
    
    OTHR = 'OTHR'
    '''
    Other
    '''
    
    SOLR = 'SOLR'
    '''
    Solar
    '''
    
    WAST = 'WAST'
    '''
    Waste to Energy
    '''
    
    WATR = 'WATR'
    '''
    Water
    '''
    
    WIND = 'WIND'
    '''
    Wind
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.gmdm)
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class FuelType(Enum):
    '''
    Type of fuel.
    '''

    brownCoalLignite = 'brownCoalLignite'
    '''
    Brown coal lignite.
    '''
    
    coal = 'coal'
    '''
    Generic coal, not including lignite type.
    '''
    
    coalDerivedGas = 'coalDerivedGas'
    '''
    Coal derived gas.
    '''
    
    diesel = 'diesel'
    '''
    '''
    
    gas = 'gas'
    '''
    Natural gas.
    '''
    
    hardCoal = 'hardCoal'
    '''
    Hard coal.
    '''
    
    lignite = 'lignite'
    '''
    The fuel is lignite coal. Note that this is a special type of coal,
    so the other enum of coal is reserved for hard coal types or if the
    exact type of coal is not known.
    '''
    
    oil = 'oil'
    '''
    Oil.
    '''
    
    oilShale = 'oilShale'
    '''
    Oil Shale.
    '''
    
    other = 'other'
    '''
    Any fuel type not included in the rest of the enumerated value.
    '''
    
    peat = 'peat'
    '''
    Peat.
    '''
    
@stereotype(CIMStereotype.enumeration)
class FuseCurveKind(Enum):
    '''
    This enumeration class expresses types of fuse characteristic curves.
    '''

    minimumMeltCurve = 'minimumMeltCurve'
    '''
    The curve for minimum melting curve.
    '''
    
    totalClearingTimeCurve = 'totalClearingTimeCurve'
    '''
    The curve for total clearing time.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class GateLogicKind(Enum):
    '''
    Define the different logical operations.
    '''

    _and = '_and'
    '''
    A logical AND operation. True when all inputs are true.
    '''
    
    nand = 'nand'
    '''
    A logical NAND operation. False when all inputs are true.
    '''
    
    nor = 'nor'
    '''
    A logical NOR operation. False when one or more inputs are true.
    '''
    
    _not = '_not'
    '''
    A logical NOT operation. Only one input and true input will give false
    out and false in will give true out. An inverter.
    '''
    
    _or = '_or'
    '''
    A logical OR operation. True when one or more inputs are true.
    '''
    
    xnor = 'xnor'
    '''
    A logical XNOR operation. The function is the inverse of the exclusive
    OR (XOR) gate. All input false or true will give true. Otherwise false.
    '''
    
    xor = 'xor'
    '''
    A logical XOR operation. All input false or true will give false. Otherwise
    true.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class GenerationalSuffixKind(Enum):
    '''
    A list of valid generational suffixes. A generational suffix is added to
    a person's name to indicate their generational position within a family,
    distinguishing individuals who share the same name across different generations.
    '''

    I = 'I'
    '''
    A suffix sometimes used retroactively to distinguish the original bearer
    of a name when a "II" or subsequent generational suffix is later assigned
    to a descendant.
    '''
    
    II = 'II'
    '''
    A suffix used when a child is named after someone other than their
    father, such as a grandfather or other relative.
    '''
    
    III = 'III'
    '''
    A suffix used when a person is the third in a line to carry the same
    exact name.
    '''
    
    IV = 'IV'
    '''
    A suffix used when a person is the fourth in a line to carry the same
    exact name.
    '''
    
    IX = 'IX'
    '''
    A suffix used when a person is the ninth in a line to carry the same
    exact name.
    '''
    
    Jr = 'Jr'
    '''
    A suffix used to indicate a son who shares the exact name as his father.
    '''
    
    Sr = 'Sr'
    '''
    A suffix used to distinguish a father from his son when they share
    the same name.
    '''
    
    V = 'V'
    '''
    A suffix used when a person is the fifth in a line to carry the same
    exact name.
    '''
    
    VI = 'VI'
    '''
    A suffix used when a person is the sixth in a line to carry the same
    exact name.
    '''
    
    VII = 'VII'
    '''
    A suffix used when a person is the seventh in a line to carry the same
    exact name.
    '''
    
    VIII = 'VIII'
    '''
    A suffix used when a person is the eighth in a line to carry the same
    exact name.
    '''
    
    X = 'X'
    '''
    A suffix used when a person is the tenth in a line to carry the same
    exact name.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class GeneratorControlMode(Enum):
    '''
    Unit control modes.
    '''

    pulse = 'pulse'
    '''
    Pulse control mode.
    '''
    
    setpoint = 'setpoint'
    '''
    Setpoint control mode.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class GeneratorControlSource(Enum):
    '''
    The source of controls for a generating unit.
    '''

    offAGC = 'offAGC'
    '''
    Off of automatic generation control (AGC).
    '''
    
    onAGC = 'onAGC'
    '''
    On automatic generation control (AGC).
    '''
    
    plantControl = 'plantControl'
    '''
    Plant is controlling.
    '''
    
    unavailable = 'unavailable'
    '''
    Not available.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class GeothermalUnitKind(Enum):
    '''
    Kind of geothermal.
    '''

    binaryCycle = 'binaryCycle'
    '''
    The moderately hot geothermal water is passed by a secondary fluid
    with a much lower boiling point than water.
    '''
    
    drySteam = 'drySteam'
    '''
    Uses geothermal steam of 150 degree Celsius or greater to turn turbines.
    '''
    
    flashSteam = 'flashSteam'
    '''
    Pull deep, high-pressure hot water into lower-pressure tanks and use
    the resulting flashed steam to drive turbines.
    '''
    
    other = 'other'
    '''
    Other type of geothermal generating unit.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class HydroEnergyConversionKind(Enum):
    '''
    Specifies the capability of the hydro generating unit to convert energy
    as a generator or pump.
    '''

    generator = 'generator'
    '''
    Able to generate power, but not able to pump water for energy storage.
    '''
    
    pumpAndGenerator = 'pumpAndGenerator'
    '''
    Able to both generate power and pump water for energy storage.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class HydroPlantStorageKind(Enum):
    '''
    The type of hydro power plant.
    '''

    pumpedStorage = 'pumpedStorage'
    '''
    Pumped storage.
    '''
    
    runOfRiver = 'runOfRiver'
    '''
    Run of river.
    '''
    
    storage = 'storage'
    '''
    Storage.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class HydroTurbineKind(Enum):
    '''
    Type of turbine.
    '''

    francis = 'francis'
    '''
    Francis.
    '''
    
    kaplan = 'kaplan'
    '''
    Kaplan.
    '''
    
    pelton = 'pelton'
    '''
    Pelton.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ICCPAccessPrivilegeKind(Enum):
    '''
    Provides access privilege information regarding an ICCP point.
    '''

    readOnly = 'readOnly'
    '''
    Indicates that the remote is not allowed to change the value of the
    ICCPPoint.
    '''
    
    readWrite = 'readWrite'
    '''
    Indicates that the remote can not only get the value, but may also
    change the value of the ICCP Point.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ICCPPointKind(Enum):
    '''
    The kind of ICCP point that is to be conveyed.
    '''

    discrete = 'discrete'
    '''
    Indicates that an ICCP discrete type is to be conveyed.
    '''
    
    packedProtectionEvent = 'packedProtectionEvent'
    '''
    Indicates that an ICCP packed Protection Event is to be conveyed.
    '''
    
    real = 'real'
    '''
    Indicates that an ICCP real type is to be conveyed.
    '''
    
    singleProtectionEvent = 'singleProtectionEvent'
    '''
    Indicates that an ICCP single Protection Event type is to be conveyed.
    '''
    
    state = 'state'
    '''
    Indicates that an ICCP state type is to be conveyed.
    '''
    
    stateSupplemental = 'stateSupplemental'
    '''
    Indicates that an ICCP state supplemental type is to be conveyed.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ICCPQualityKind(Enum):
    '''
    Indicates the type of quality information that is to be exchanged. For
    protection events the value shall be "none".
    '''

    extended = 'extended'
    '''
    Indicates that only extended information is to be provided.
    '''
    
    extendedwithQualityTime = 'extendedwithQualityTime'
    '''
    Provides quality, timestamp, and extended information.
    '''
    
    none = 'none'
    '''
    Indicates that no quality is conveyed with the ICCP point.
    '''
    
    qualityAndTime = 'qualityAndTime'
    '''
    Indicates that quality and a timestamp are to be provided.
    '''
    
    qualityOnly = 'qualityOnly'
    '''
    Indicates that only quality is to be provided.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ICCPScopeKind(Enum):
    '''
    Specifies the control centre scope.
    '''

    iCC = 'iCC'
    '''
    Inter-Control Centre scope � available for exchange between the control
    centres in the bilateral table.
    '''
    
    vCC = 'vCC'
    '''
    Virtual Control Centre Scope � globally available.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class IECStandardEditionKind(Enum):
    '''
    List of editions for IEC standards.
    '''

    _1963 = '_1963'
    '''
    1963 edition.
    '''
    
    _1967 = '_1967'
    '''
    1967 edition.
    '''
    
    _1973 = '_1973'
    '''
    1973 edition.
    '''
    
    _1974 = '_1974'
    '''
    1974 edition.
    '''
    
    _1977 = '_1977'
    '''
    1977 edition.
    '''
    
    _1978 = '_1978'
    '''
    1978 edition.
    '''
    
    _1979 = '_1979'
    '''
    1979 edition.
    '''
    
    _1985 = '_1985'
    '''
    1985 edition.
    '''
    
    _1989 = '_1989'
    '''
    1989 edition.
    '''
    
    _1992 = '_1992'
    '''
    1992 edition.
    '''
    
    _1992AMD12004 = '_1992AMD12004'
    '''
    1992/AMD1:2004 edition.
    '''
    
    _1992COR11992 = '_1992COR11992'
    '''
    1992/COR1:1992 edition.
    '''
    
    _1993 = '_1993'
    '''
    1993 edition.
    '''
    
    _1995 = '_1995'
    '''
    1995 edition.
    '''
    
    _1997 = '_1997'
    '''
    1997 edition.
    '''
    
    _1998 = '_1998'
    '''
    1998 edition.
    '''
    
    _2004 = '_2004'
    '''
    2004 edition.
    '''
    
    _2004AMD12007 = '_2004AMD12007'
    '''
    2004/AMD1:2007 edition.
    '''
    
    _2004AMD12007CSV = '_2004AMD12007CSV'
    '''
    2004/AMD1:2007CSV edition.
    '''
    
    _2005 = '_2005'
    '''
    2005 edition.
    '''
    
    _2007 = '_2007'
    '''
    2007 edition.
    '''
    
    _2008 = '_2008'
    '''
    2008 edition.
    '''
    
    _2010 = '_2010'
    '''
    2010 edition.
    '''
    
    _2011 = '_2011'
    '''
    2011 edition.
    '''
    
    _2012 = '_2012'
    '''
    2012 edition.
    '''
    
    _2013 = '_2013'
    '''
    2013 edition.
    '''
    
    _2013COR2013 = '_2013COR2013'
    '''
    2013/COR:2013 edition.
    '''
    
    none = 'none'
    '''
    No edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class IECStandardKind(Enum):
    '''
    List of IEC standards.
    '''

    _60156 = '_60156'
    '''
    Insulating liquids - Determination of the breakdown voltage at power
    frequency - Test method.
    '''
    
    _602431 = '_602431'
    '''
    Electric strength of insulating materials - Test methods - Part 1:
    Tests at power frequencies.
    '''
    
    _602432 = '_602432'
    '''
    Electric strength of insulating materials - Test methods - Part 2:
    Additional requirements for tests using direct voltage.
    '''
    
    _602433 = '_602433'
    '''
    Electric strength of insulating materials - Test methods - Part 3:
    Additional requirements for 1,2/50 �s impulse tests.
    '''
    
    _60247 = '_60247'
    '''
    Insulating liquids - Measurement of relative permittivity, dielectric
    dissipation factor (tan d) and d.c. resistivity -or-
    Measurement of relative permittivity, dielectric dissipation factor
    and d.c. resistivity of insulating liquids -or-
    Recommended test cells for measuring the resistivity of insulating
    liquids and methods of cleaning the cells.
    '''
    
    _60422 = '_60422'
    '''
    Mineral insulating oils in electrical equipment - Supervision and maintenance
    guidance.
    '''
    
    _60450 = '_60450'
    '''
    Measurement of the average viscometric degree of polymerization of
    new and aged cellulosic electrically insulating materials.
    '''
    
    _60567 = '_60567'
    '''
    Oil-filled electrical equipment - Sampling of gases and analysis of
    free and dissolved gasses - Guidance -or-
    Oil-filled electrical equipment - Sampling of gases and of oil for
    analysis of free and dissolved gases - Guidance -or-
    Guide for the sampling of gases and of oil form oil-filled electrical
    equipment and for the analysis of free and dissolved gases.
    '''
    
    _60666 = '_60666'
    '''
    Detection and determination of specified additives in mineral insulating
    oils -or-
    Detection and determination of specified anti-oxidant additives in
    insulating oils.
    '''
    
    _60814 = '_60814'
    '''
    Insulating liquids - Oil-impregnated paper and pressboard - Determination
    of water by automatic coulometric Karl Fischer titration.
    '''
    
    _60970 = '_60970'
    '''
    Insulating liquids - Methods for counting and sizing particles -or-
    Methods for counting and sizing particles in insulating liquids.
    '''
    
    _60997 = '_60997'
    '''
    Determination of polychlorinated biphenyls (PCBs) in mineral insulating
    oils by packed column gas chromatography (GC).
    Withdrawn.
    '''
    
    _61125 = '_61125'
    '''
    Unused hydrocarbon based insulating liquids - Test methods for evaluating
    the oxidation stability.
    '''
    
    _61198 = '_61198'
    '''
    Mineral insulating oils - Methods for the determination of 2-furfural
    and related compounds.
    '''
    
    _61619 = '_61619'
    '''
    Insulating liquids - Contamination by polychlorinated biphenyls (PCBs)
    - Method of determination by capillary column gas chromatography.
    '''
    
    _61868 = '_61868'
    '''
    Mineral insulating oils � Determination of kinematic viscosity at very
    low temperatures.
    '''
    
    _62535 = '_62535'
    '''
    Insulating liquids � Test method for detection of potentially corrosive
    sulphur in used and unused insulating oil.
    '''
    
    _626971 = '_626971'
    '''
    Test methods for quantitative determination of corrosive sulfur compounds
    in unused and used insulating liquids - Part 1: Test method for quantitative
    determination of dibenzyldisulfide (DBDS).
    '''
    
    _62770 = '_62770'
    '''
    Fluids for electrotechnical applications � Unused natural esters for
    transformers and similar electrical equipment.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class IEEEStandardEditionKind(Enum):
    '''
    List of editions for IEEE standards.
    '''

    _1978 = '_1978'
    '''
    1978 standard edition.
    '''
    
    _1995 = '_1995'
    '''
    1995 standard edition.
    '''
    
    none = 'none'
    '''
    No standard edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown standard edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class IEEEStandardKind(Enum):
    '''
    List of IEEE standards.
    '''

    _62 = '_62'
    '''
    IEEE Guide for Diagnostic Field Testing of Electric Power Apparatus
    - Part 1: Oil Filled Power Transformers, Regulators, and Reactors -or-
    IEEE Guide for Field Testing Power Apparatus Insulation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class IPAddressKind(Enum):
    '''
    Indicates if the addressing of the IPAccessPoint, gateway, and subnet are
    per IPv4 or IPv6.
    '''

    iPv4 = 'iPv4'
    '''
    Indicates that IPv4 dotted decimal notation is in use.
    '''
    
    iPv6 = 'iPv6'
    '''
    Indicates that an IPv6 dotted decimal is in use.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ISOStandardEditionKind(Enum):
    '''
    List of editions for ISO standards.
    '''

    _1973 = '_1973'
    '''
    1973 standard edition.
    '''
    
    _1974 = '_1974'
    '''
    1974 standard edition.
    '''
    
    _1976 = '_1976'
    '''
    1976 standard edition.
    '''
    
    _1983 = '_1983'
    '''
    1983 standard edition.
    '''
    
    _1985 = '_1985'
    '''
    1985 standard edition.
    '''
    
    _1988 = '_1988'
    '''
    1988 standard edition.
    '''
    
    _1992 = '_1992'
    '''
    1992 standard edition.
    '''
    
    _1993 = '_1993'
    '''
    1993 standard edition.
    '''
    
    _1994 = '_1994'
    '''
    1994 standard edition.
    '''
    
    _1994Cor11997 = '_1994Cor11997'
    '''
    1994/Cor1:1997 standard edition.
    '''
    
    _1998 = '_1998'
    '''
    1998 standard edition.
    '''
    
    _2000 = '_2000'
    '''
    2000 standard edition.
    '''
    
    _2002 = '_2002'
    '''
    2002 standard edition.
    '''
    
    _2005 = '_2005'
    '''
    2005 standard edition.
    '''
    
    _2008 = '_2008'
    '''
    2008 standard edition.
    '''
    
    none = 'none'
    '''
    No standard edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown standard edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ISOStandardKind(Enum):
    '''
    List of ISO standards.
    '''

    _1924 = '_1924'
    '''
    Paper and board -- Determination of tensile strength.
    '''
    
    _19241 = '_19241'
    '''
    Paper and board -- Determination of tensile properties -- Part 1: Constant
    rate of loading method.
    '''
    
    _19242 = '_19242'
    '''
    Paper and board -- Determination of tensile properties -- Part 2: Constant
    rate of elongation method (20 mm/min) -or-
    Paper and board -- Determination of tensile properties -- Part 2: Constant
    rate of elongation method.
    '''
    
    _19243 = '_19243'
    '''
    Paper and board -- Determination of tensile properties -- Part 3: Constant
    rate of elongation method (100 mm/min).
    '''
    
    _2592 = '_2592'
    '''
    Determination of flash and fire points -- Cleveland open cup method
    (copied directly from ASTM D92).
    '''
    
    _2719 = '_2719'
    '''
    Determination of flash point -- Pensky-Martens closed cup method (copied
    directly from ASTM D93) -or-
    Petroleum products and lubricants -- Determination of flash point --
    Pensky-Martens closed cup method (copied directly from ASTM D93) -or-
    Petroleum products -- Determination of flash point -- Pensky-Martens
    closed cup method (copied directly from ASTM D93).
    '''
    
    _3016 = '_3016'
    '''
    Petroleum products -- Determination of pour point -or-
    Petroleum oils -- Determination of pour point.
    '''
    
    _3104 = '_3104'
    '''
    Petroleum products -- Transparent and opaque liquids -- Determination
    of kinematic viscosity and calculation of dynamic viscosity.
    '''
    
    _3675 = '_3675'
    '''
    Crude petroleum and liquid petroleum products -- Laboratory determination
    of density -- Hydrometer method -or-
    Crude petroleum and liquid petroleum products -- Laboratory determination
    of density or relative density -- Hydrometer method.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class InUseStateKind(Enum):
    '''
    Possible 'in use' states that an asset can be in.
    '''

    inUse = 'inUse'
    '''
    Asset is deployed (in use) or is being put into use.
    '''
    
    notReadyForUse = 'notReadyForUse'
    '''
    Asset is not ready to be put into use.
    '''
    
    readyForUse = 'readyForUse'
    '''
    Asset is ready to be put into use.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class InjectionControlModeKind(Enum):
    '''
    Kind of injection controller mode.
    '''

    activePower = 'activePower'
    '''
    Active power is specified.
    '''
    
    powerFactor = 'powerFactor'
    '''
    Power factor is specified.
    '''
    
    reactivePower = 'reactivePower'
    '''
    Reactive power control.
    '''
    
    voltage = 'voltage'
    '''
    Voltage control.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class InspectionAnalogKind(Enum):
    '''
    Analogs typically recorded during a field inspection.
    '''

    airPressureHPSystemReading = 'airPressureHPSystemReading'
    '''
    Analog value represents High Pressure system air pressure.
    '''
    
    airPressureLPSystemReading = 'airPressureLPSystemReading'
    '''
    Analog value represents Low Pressure system air pressure.
    '''
    
    airPressureReading = 'airPressureReading'
    '''
    Analog value represents air pressure.
    '''
    
    compressorHourMeterReading = 'compressorHourMeterReading'
    '''
    Analog value represents reading from compressor hour meter.
    '''
    
    sF6PressureReading = 'sF6PressureReading'
    '''
    Analog value represents SF6 gas pressure.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class InspectionDiscreteKind(Enum):
    '''
    Discretes representing breaker inspection result.
    '''

    bushingOilLevelsOK = 'bushingOilLevelsOK'
    '''
    Are bushing oil levels OK?
    '''
    
    checkOilLevelOK = 'checkOilLevelOK'
    '''
    Check oil level OK?
    '''
    
    controlCabinetHeaterOn = 'controlCabinetHeaterOn'
    '''
    Is the control cabinet heater on?
    '''
    
    gasIndicatorNormal = 'gasIndicatorNormal'
    '''
    Is the circuit switcher gas indicator normal?
    '''
    
    hydraulicFluidLevelOK = 'hydraulicFluidLevelOK'
    '''
    Hydraulic fluid level OK?
    '''
    
    hydraulicOilLevelOK = 'hydraulicOilLevelOK'
    '''
    Is the hydraulic oil level OK? Can apply to any individual pole.
    '''
    
    lowToHighPressureCount = 'lowToHighPressureCount'
    '''
    Count of ??.
    '''
    
    motorOperationsCount = 'motorOperationsCount'
    '''
    Count of motor operations.
    '''
    
    oilTankLevelsOK = 'oilTankLevelsOK'
    '''
    Are the oil tank levels OK?
    '''
    
    operationCount = 'operationCount'
    '''
    Count of operations.
    '''
    
    pumpMotorOperationCount = 'pumpMotorOperationCount'
    '''
    Count of pump motor operations.
    '''
    
    springPressureReadingOK = 'springPressureReadingOK'
    '''
    Is the spring pressure reading OK? Can apply to whole breaker or any
    individual pole.
    '''
    
    visibleDamageOrLeaks = 'visibleDamageOrLeaks'
    '''
    Any visible damage and/or oil/air/SF6 leaks?.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class InterTieDirection(Enum):
    '''
    Direction of an intertie.
    '''

    E = 'E'
    '''
    Export.
    '''
    
    I = 'I'
    '''
    Import.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class InterruptingMediumKind(Enum):
    '''
    Kinds of interrupting mediums.
    '''

    airBlast = 'airBlast'
    '''
    Air blast.
    '''
    
    airMagnetic = 'airMagnetic'
    '''
    Air magnetic.
    '''
    
    bulkOil = 'bulkOil'
    '''
    Bulk oil.
    '''
    
    gasSinglePressure = 'gasSinglePressure'
    '''
    Gas single pressure.
    '''
    
    gasTwoPressure = 'gasTwoPressure'
    '''
    Gas two pressure.
    '''
    
    minimumOil = 'minimumOil'
    '''
    Minimum oil.
    '''
    
    vacuum = 'vacuum'
    '''
    Vacuum.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class JointConfigurationKind(Enum):
    '''
    Kind of configuration for joints.
    '''

    other = 'other'
    '''
    '''
    
    wires1to1 = 'wires1to1'
    '''
    '''
    
    wires2to1 = 'wires2to1'
    '''
    '''
    
    wires3to1 = 'wires3to1'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class JointFillKind(Enum):
    '''
    Kind of fill for Joint.
    '''

    airNoFilling = 'airNoFilling'
    '''
    '''
    
    asphaltic = 'asphaltic'
    '''
    '''
    
    bluefill254 = 'bluefill254'
    '''
    '''
    
    epoxy = 'epoxy'
    '''
    '''
    
    insoluseal = 'insoluseal'
    '''
    '''
    
    noFillPrefab = 'noFillPrefab'
    '''
    '''
    
    noVoid = 'noVoid'
    '''
    '''
    
    oil = 'oil'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    petrolatum = 'petrolatum'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class LaborelecStandardEditionKind(Enum):
    '''
    List of editions for Laborelec standards.
    '''

    none = 'none'
    '''
    No standard edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown standard edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class LaborelecStandardKind(Enum):
    '''
    List of Laborelec standards.
    '''

    methanol = 'methanol'
    '''
    Laborelec test for methanol.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class LegalEntityKind(Enum):
    '''
    The kinds of legal entities an organisation
    '''

    corporation = 'corporation'
    '''
    An organization formed with state governmental approval to act as an
    artificial person to conduct business, which can sue or be sued, and
    (unless it is non-profit) can issue shares of stock to raise funds
    with which to start a business or increase its capital.
    '''
    
    generalPartnership = 'generalPartnership'
    '''
    An arrangement between two or more persons or legal entities to engage
    in business and agree to share in all assets, profits, and liabilities
    of the business.
    '''
    
    governmentOwnedEnterprise = 'governmentOwnedEnterprise'
    '''
    A legal entity that is created by a government in order to partake
    in commercial activities on the government's behalf.
    '''
    
    limitedLiabilityCompany = 'limitedLiabilityCompany'
    '''
    A business structure in the U.S. that protects its owners from personal
    responsibility for its debts or liabilities. Limited liability companies
    are hybrid entities that combine the characteristics of a corporation
    with those of a partnership or sole proprietorship.
    '''
    
    limitedPartnership = 'limitedPartnership'
    '''
    A business structure consisting of at least one general partner, who
    manages the business and is personally liable for its debts, and one
    or more limited partners, who contribute capital but have limited liability
    and no active role in management.
    Limited partners are only liable up to the amount of their investment,
    while general partners assume full legal and financial responsibility.
    '''
    
    nonProfit = 'nonProfit'
    '''
    An organization established for purposes other than generating profit,
    such as charitable, educational, religious, or social missions. It
    reinvests any surplus revenue into its operations or cause and is typically
    exempt from certain taxes under applicable laws.
    '''
    
    soleProprietorship = 'soleProprietorship'
    '''
    An unincorporated business owned and operated by a single individual,
    where there is no legal distinction between the owner and the business.
    The owner assumes full responsibility for all debts, liabilities, and
    obligations.
    '''
    
    statutoryCompany = 'statutoryCompany'
    '''
    A legal entity created through a specific act of legislation or statute
    passed by a governmental body. Its powers, functions, and governance
    are defined and regulated by that statute, often for public service,
    regulatory, or special-purpose functions.
    '''
    
@stereotype(CIMStereotype.European)
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class LimitKind(Enum):
    '''
    Limit kinds.
    '''

    alarmVoltage = 'alarmVoltage'
    '''
    Voltage alarm.
    '''
    
    highVoltage = 'highVoltage'
    '''
    Referring to the rating of the equipments, a voltage too high can lead
    to accelerated ageing or the destruction of the equipment.
    This limit type may or may not have duration.
    '''
    
    lowVoltage = 'lowVoltage'
    '''
    A too low voltage can disturb the normal operation of some protections
    and transformer equipped with on-load tap changers, electronic power
    devices or can affect the behaviour of the auxiliaries of generation
    units.
    This limit type may or may not have duration.
    '''
    
    operationalVoltageLimit = 'operationalVoltageLimit'
    '''
    Operational voltage limit.
    '''
    
    patl = 'patl'
    '''
    The Permanent Admissible Transmission Loading (PATL) is the loading
    in amperes, MVA or MW that can be accepted by a network branch for
    an unlimited duration without any risk for the material.
    The OperationnalLimitType.isInfiniteDuration is set to true. There
    shall be only one OperationalLimitType of kind PATL per OperationalLimitSet
    if the PATL is ApparentPowerLimit, ActivePowerLimit, or CurrentLimit
    for a given Terminal or Equipment.
    '''
    
    patlt = 'patlt'
    '''
    Permanent Admissible Transmission Loading Threshold (PATLT) is a value
    in engineering units defined for PATL and calculated using a percentage
    less than 100 % of the PATL type intended to alert operators of an
    arising condition. The percentage should be given in the name of the
    OperationalLimitSet. The aceptableDuration is another way to express
    the severity of the limit.
    '''
    
    stability = 'stability'
    '''
    Stability.
    '''
    
    tatl = 'tatl'
    '''
    Temporarily Admissible Transmission Loading (TATL) which is the loading
    in amperes, MVA or MW that can be accepted by a branch for a certain
    limited duration.
    The TATL can be defined in different ways:
    <ul>
    <li>as a fixed percentage of the PATL for a given time (for example,
    115% of the PATL that can be accepted during 15 minutes),</li>
    </ul>
    <ul>
    <li>pairs of TATL type and Duration calculated for each line taking
    into account its particular configuration and conditions of functioning
    (for example, it can define a TATL acceptable during 20 minutes and
    another one acceptable during 10 minutes).</li>
    </ul>
    Such a definition of TATL can depend on the initial operating conditions
    of the network element (sag situation of a line).
    The duration attribute can be used to define several TATL limit types.
    Hence multiple TATL limit values may exist having different durations.
    '''
    
    tc = 'tc'
    '''
    Tripping Current (TC) is the ultimate intensity without any delay.
    It is defined as the threshold the line will trip without any possible
    remedial actions.
    The tripping of the network element is ordered by protections against
    short circuits or by overload protections, but in any case, the activation
    delay of these protections is not compatible with the reaction delay
    of an operator (less than one minute).
    The duration is always zero if the OperationalLimitType.acceptableDuration
    is exchanged. Only one limit value exists for the TC type.
    '''
    
    tct = 'tct'
    '''
    Tripping Current Threshold (TCT) is a value in engineering units defined
    for TC and calculated using a percentage less than 100 % of the TC
    type intended to alert operators of an arising condition. The percentage
    should be given in the name of the OperationalLimitSet. The aceptableDuration
    is another way to express the severity of the limit.
    '''
    
    warningVoltage = 'warningVoltage'
    '''
    Voltage warning.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class LogicalOperatorsKind(Enum):
    '''
    Kinds of logical operators for comparison.
    '''

    equals = 'equals'
    '''
    Equals (like) comparison operation.
    '''
    
    greaterThan = 'greaterThan'
    '''
    Greater than comparison operation.
    '''
    
    greaterThanOrEquals = 'greaterThanOrEquals'
    '''
    Greater than or equals comparison operation.
    '''
    
    lessThan = 'lessThan'
    '''
    Less than comparison operation.
    '''
    
    lessThanOrEquals = 'lessThanOrEquals'
    '''
    Less than or equals comparison operation.
    '''
    
    notEqual = 'notEqual'
    '''
    Not equal (unlike) comparison operation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MPMTestIdentifierType(Enum):
    '''
    Market power mitigation test identifier type, for example:
    1 - Global Price Test
    2 - Global Conduct Test
    3 - Global Impact Test
    4 - Local Price Test
    5 - Local Conduct Test
    6 - Local Impact Test
    '''

    _1 = '_1'
    '''
    1 - Global Price Test.
    '''
    
    _2 = '_2'
    '''
    2 - Global Conduct Test.
    '''
    
    _3 = '_3'
    '''
    3 - Global Impact Test.
    '''
    
    _4 = '_4'
    '''
    4 - Local Price Test.
    '''
    
    _5 = '_5'
    '''
    5 - Local Conduct Test.
    '''
    
    _6 = '_6'
    '''
    6 - Local Impact Test.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MPMTestMethodType(Enum):
    '''
    Market power mitigation test method type.
    Tests with the normal (default) thresholds or tests with the alternate
    thresholds.
    '''

    ALTERNATE = 'ALTERNATE'
    '''
    Alternate.
    '''
    
    NORMAL = 'NORMAL'
    '''
    Normal.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MacroPeriodKind(Enum):
    '''
    Kind of macro period for calculations on read / measured values.
    '''

    billingPeriod = 'billingPeriod'
    '''
    Captured during the billing period starting at midnight of the first
    day of the billing period (as defined by the billing cycle day). If
    during the current billing period, it specifies a period from the start
    of the current billing period until "now".
    '''
    
    daily = 'daily'
    '''
    Daily period starting at midnight. If for the current day, this specifies
    the time from midnight to "now".
    '''
    
    monthly = 'monthly'
    '''
    Monthly period starting at midnight on the first day of the month.
    If within the current month, this specifies the period from the start
    of the month until "now."
    '''
    
    none = 'none'
    '''
    Not applicable.
    '''
    
    seasonal = 'seasonal'
    '''
    A season of time spanning multiple months. E.g. "Summer," "Spring,"
    "Fall," and "Winter" based cycle. If within the current season, it
    specifies the period from the start of the current season until "now."
    '''
    
    specifiedPeriod = 'specifiedPeriod'
    '''
    For the period defined by the start and end of the TimePeriod element
    in the message.
    '''
    
    weekly = 'weekly'
    '''
    Weekly period starting at midnight on the first day of the week and
    ending the instant before midnight the last day of the week. If within
    the current week, it specifies the period from the start of the week
    until "now."
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MarineStructureKind(Enum):
    '''
    Kind of marine structure.
    '''

    floating = 'floating'
    '''
    Submarine structure that ensure asset is floating.
    '''
    
    other = 'other'
    '''
    Submarine structure that include tunnel.
    '''
    
    seabed = 'seabed'
    '''
    Submarine structure that ensure asset is located on the seabed or sea
    floor.
    '''
    
    seabedTrench = 'seabedTrench'
    '''
    Submarine structure as trench on the seabed or sea floor.
    '''
    
    tunnel = 'tunnel'
    '''
    Submarine structure that include tunnel.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MarineUnitKind(Enum):
    '''
    Kind of marine energy capture.
    '''

    currents = 'currents'
    '''
    Capture energy from ocean current which are caused by forces like breaking
    waves, wind, coriolis effect etc.
    '''
    
    other = 'other'
    '''
    Other way of capture energy from marine elements.
    '''
    
    pressure = 'pressure'
    '''
    Capture energy from pressure.
    '''
    
    tidal = 'tidal'
    '''
    Capture energy from tidal power, which captures the energy of the current
    caused by the gravitational pull of the Sun and Moon.
    '''
    
    wave = 'wave'
    '''
    Capture energy from wind waves.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MarketProductType(Enum):
    '''
    For example:
    Energy, Reg Up, Reg Down, Spin Reserve, Nonspin Reserve, RUC, Load Folloing
    Up, and Load Following Down.
    '''

    CO2e = 'CO2e'
    '''
    A carbon dioxide equivalent is a metric measure used to compare the
    emissions from various greenhouse gases on the basis of their global-warming
    potential (GWP), by converting amounts of other gases to the equivalent
    amount of carbon dioxide with the same global warming potential.
    '''
    
    EN = 'EN'
    '''
    Energy generally priced per kWh or MWh.
    '''
    
    LFD = 'LFD'
    '''
    Load following down (power withdrawal) generally priced per kW or MW.
    '''
    
    LFU = 'LFU'
    '''
    Load following up (power injection) generally priced per kW or MW.
    '''
    
    NR = 'NR'
    '''
    Non-spinning Reserve or Replacement Reserve generally priced per kWh
    or MWh.
    '''
    
    RC = 'RC'
    '''
    Resources with available capacity for a forward market such as Day
    Ahead that are awarded due to their need for resource adequacy (i.e.
    reliability) purposes. RC represents the process for reliability unit
    commitment.
    '''
    
    RD = 'RD'
    '''
    Frequency Regulation Service (energy withdrawal).
    '''
    
    REG = 'REG'
    '''
    Frequency Regulation Service (injection and/or withdrawal).
    '''
    
    RMD = 'RMD'
    '''
    Regulation Mileage Down.
    '''
    
    RMU = 'RMU'
    '''
    Regulation Mileage Up.
    '''
    
    RPD = 'RPD'
    '''
    RampDown: Power withdrawal generally priced per kW or MW.
    '''
    
    RPU = 'RPU'
    '''
    RampUp: Power injection generally priced per kW or MW.
    '''
    
    RU = 'RU'
    '''
    Frequency Regulation Service (energy injection).
    '''
    
    SR = 'SR'
    '''
    Spinning Reserve or Contingency Reserve generally priced per kWh or
    MWh.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MarketType(Enum):
    '''
    Market type.
    '''

    DAM = 'DAM'
    '''
    Day ahead market.
    '''
    
    HAM = 'HAM'
    '''
    Hour Ahead Market.
    '''
    
    RTM = 'RTM'
    '''
    Real time market.
    '''
    
    RUC = 'RUC'
    '''
    Residual Unit Commitment.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MeasurementKind(Enum):
    '''
    Kind of read / measured value.
    '''

    alarm = 'alarm'
    '''
    '''
    
    apTitle = 'apTitle'
    '''
    '''
    
    apparentPowerFactor = 'apparentPowerFactor'
    '''
    '''
    
    applicationContext = 'applicationContext'
    '''
    '''
    
    assetNumber = 'assetNumber'
    '''
    '''
    
    audibleVolume = 'audibleVolume'
    '''
    Sound
    '''
    
    bandwidth = 'bandwidth'
    '''
    '''
    
    batteryCarryover = 'batteryCarryover'
    '''
    '''
    
    batteryVoltage = 'batteryVoltage'
    '''
    '''
    
    billCarryover = 'billCarryover'
    '''
    Customer�s bill for the (Currency)
    '''
    
    billLastPeriod = 'billLastPeriod'
    '''
    Customer�s bill for the previous billing period (Currency)
    '''
    
    billToDate = 'billToDate'
    '''
    Customer�s bill, as known thus far within the present billing period
    (Currency)
    '''
    
    broadcastAddress = 'broadcastAddress'
    '''
    '''
    
    connectionFee = 'connectionFee'
    '''
    Monthly fee for connection to commodity.
    '''
    
    currency = 'currency'
    '''
    funds
    '''
    
    current = 'current'
    '''
    '''
    
    currentAngle = 'currentAngle'
    '''
    '''
    
    currentImbalance = 'currentImbalance'
    '''
    '''
    
    dataOverflowAlarm = 'dataOverflowAlarm'
    '''
    '''
    
    date = 'date'
    '''
    '''
    
    demand = 'demand'
    '''
    '''
    
    demandLimit = 'demandLimit'
    '''
    '''
    
    demandReset = 'demandReset'
    '''
    Usually expressed as a count as part of a billing cycle
    '''
    
    deviceAddressType1 = 'deviceAddressType1'
    '''
    '''
    
    deviceAddressType2 = 'deviceAddressType2'
    '''
    '''
    
    deviceAddressType3 = 'deviceAddressType3'
    '''
    '''
    
    deviceAddressType4 = 'deviceAddressType4'
    '''
    '''
    
    deviceClass = 'deviceClass'
    '''
    '''
    
    diagnostic = 'diagnostic'
    '''
    '''
    
    distance = 'distance'
    '''
    '''
    
    distortionPowerFactor = 'distortionPowerFactor'
    '''
    '''
    
    distortionVoltAmp = 'distortionVoltAmp'
    '''
    '''
    
    electronicSerialNumber = 'electronicSerialNumber'
    '''
    '''
    
    emergencyLimit = 'emergencyLimit'
    '''
    '''
    
    encoderTamper = 'encoderTamper'
    '''
    '''
    
    endDeviceID = 'endDeviceID'
    '''
    '''
    
    energization = 'energization'
    '''
    '''
    
    energizationLoadSide = 'energizationLoadSide'
    '''
    '''
    
    energy = 'energy'
    '''
    '''
    
    fan = 'fan'
    '''
    '''
    
    frequency = 'frequency'
    '''
    '''
    
    frequencyExcursion = 'frequencyExcursion'
    '''
    Usually expressed as a �count�
    '''
    
    fund = 'fund'
    '''
    Dup with �currency�
    '''
    
    groupAddressType1 = 'groupAddressType1'
    '''
    '''
    
    groupAddressType2 = 'groupAddressType2'
    '''
    '''
    
    groupAddressType3 = 'groupAddressType3'
    '''
    '''
    
    groupAddressType4 = 'groupAddressType4'
    '''
    '''
    
    ieee1366ASAI = 'ieee1366ASAI'
    '''
    '''
    
    ieee1366ASIDI = 'ieee1366ASIDI'
    '''
    '''
    
    ieee1366ASIFI = 'ieee1366ASIFI'
    '''
    '''
    
    ieee1366CAIDI = 'ieee1366CAIDI'
    '''
    '''
    
    ieee1366CAIFI = 'ieee1366CAIFI'
    '''
    '''
    
    ieee1366CEMIn = 'ieee1366CEMIn'
    '''
    '''
    
    ieee1366CEMSMIn = 'ieee1366CEMSMIn'
    '''
    '''
    
    ieee1366CTAIDI = 'ieee1366CTAIDI'
    '''
    '''
    
    ieee1366MAIFI = 'ieee1366MAIFI'
    '''
    '''
    
    ieee1366MAIFIe = 'ieee1366MAIFIe'
    '''
    '''
    
    ieee1366MomentaryInterruption = 'ieee1366MomentaryInterruption'
    '''
    '''
    
    ieee1366MomentaryInterruptionEvent = 'ieee1366MomentaryInterruptionEvent'
    '''
    '''
    
    ieee1366SAIDI = 'ieee1366SAIDI'
    '''
    '''
    
    ieee1366SAIFI = 'ieee1366SAIFI'
    '''
    '''
    
    ieee1366SustainedInterruption = 'ieee1366SustainedInterruption'
    '''
    '''
    
    interruptionBehaviour = 'interruptionBehaviour'
    '''
    '''
    
    inversionTamper = 'inversionTamper'
    '''
    '''
    
    ipAddress = 'ipAddress'
    '''
    '''
    
    lineLoss = 'lineLoss'
    '''
    '''
    
    loadInterrupt = 'loadInterrupt'
    '''
    '''
    
    loadShed = 'loadShed'
    '''
    '''
    
    loss = 'loss'
    '''
    '''
    
    macAddress = 'macAddress'
    '''
    '''
    
    maintenance = 'maintenance'
    '''
    '''
    
    mfgAssignedConfigurationID = 'mfgAssignedConfigurationID'
    '''
    '''
    
    mfgAssignedPhysicalSerialNumber = 'mfgAssignedPhysicalSerialNumber'
    '''
    '''
    
    mfgAssignedProductNumber = 'mfgAssignedProductNumber'
    '''
    '''
    
    mfgAssignedUniqueCommunicationAddress = 'mfgAssignedUniqueCommunicationAddress'
    '''
    '''
    
    multiCastAddress = 'multiCastAddress'
    '''
    '''
    
    negativeSequence = 'negativeSequence'
    '''
    '''
    
    none = 'none'
    '''
    Not Applicable
    '''
    
    oneWayAddress = 'oneWayAddress'
    '''
    '''
    
    phasorPowerFactor = 'phasorPowerFactor'
    '''
    '''
    
    phasorReactivePower = 'phasorReactivePower'
    '''
    '''
    
    physicalTamper = 'physicalTamper'
    '''
    '''
    
    positiveSequence = 'positiveSequence'
    '''
    '''
    
    power = 'power'
    '''
    '''
    
    powerFactor = 'powerFactor'
    '''
    '''
    
    powerLossTamper = 'powerLossTamper'
    '''
    '''
    
    powerOutage = 'powerOutage'
    '''
    '''
    
    powerQuality = 'powerQuality'
    '''
    '''
    
    powerRestoration = 'powerRestoration'
    '''
    '''
    
    programmed = 'programmed'
    '''
    '''
    
    pushbutton = 'pushbutton'
    '''
    '''
    
    quantityPower = 'quantityPower'
    '''
    '''
    
    relayActivation = 'relayActivation'
    '''
    '''
    
    relayCycle = 'relayCycle'
    '''
    Usually expressed as a count
    '''
    
    removalTamper = 'removalTamper'
    '''
    '''
    
    reprogrammingTamper = 'reprogrammingTamper'
    '''
    '''
    
    reverseRotationTamper = 'reverseRotationTamper'
    '''
    '''
    
    sag = 'sag'
    '''
    or Voltage Dip
    '''
    
    signalStrength = 'signalStrength'
    '''
    '''
    
    signaltoNoiseRatio = 'signaltoNoiseRatio'
    '''
    Moved here from Attribute #9 UOM
    '''
    
    swell = 'swell'
    '''
    '''
    
    switchArmed = 'switchArmed'
    '''
    '''
    
    switchDisabled = 'switchDisabled'
    '''
    '''
    
    switchPosition = 'switchPosition'
    '''
    '''
    
    tamper = 'tamper'
    '''
    '''
    
    tapPosition = 'tapPosition'
    '''
    '''
    
    tariffRate = 'tariffRate'
    '''
    '''
    
    temperature = 'temperature'
    '''
    '''
    
    totalHarmonicDistortion = 'totalHarmonicDistortion'
    '''
    '''
    
    transformerLoss = 'transformerLoss'
    '''
    '''
    
    twoWayAddress = 'twoWayAddress'
    '''
    '''
    
    unipedeVoltageDip10to15 = 'unipedeVoltageDip10to15'
    '''
    '''
    
    unipedeVoltageDip15to30 = 'unipedeVoltageDip15to30'
    '''
    '''
    
    unipedeVoltageDip30to60 = 'unipedeVoltageDip30to60'
    '''
    '''
    
    unipedeVoltageDip60to90 = 'unipedeVoltageDip60to90'
    '''
    '''
    
    unipedeVoltageDip90to100 = 'unipedeVoltageDip90to100'
    '''
    '''
    
    voltage = 'voltage'
    '''
    '''
    
    voltageAngle = 'voltageAngle'
    '''
    '''
    
    voltageExcursion = 'voltageExcursion'
    '''
    '''
    
    voltageImbalance = 'voltageImbalance'
    '''
    '''
    
    volume = 'volume'
    '''
    Clarified from Ed. 1. to indicate fluid volume
    '''
    
    volumetricFlow = 'volumetricFlow'
    '''
    '''
    
    watchdogTimeout = 'watchdogTimeout'
    '''
    '''
    
    zeroFlowDuration = 'zeroFlowDuration'
    '''
    '''
    
    zeroSequence = 'zeroSequence'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MeasuringPeriodKind(Enum):
    '''
    Kind of period for reading / measuring values.
    '''

    fifteenMinute = 'fifteenMinute'
    '''
    15-minute
    '''
    
    fiveMinute = 'fiveMinute'
    '''
    5-minute
    '''
    
    fixedBlock10Min = 'fixedBlock10Min'
    '''
    10-minute Fixed Block
    '''
    
    fixedBlock15Min = 'fixedBlock15Min'
    '''
    15-minute Fixed Block
    '''
    
    fixedBlock1Min = 'fixedBlock1Min'
    '''
    1-minute Fixed Block
    '''
    
    fixedBlock20Min = 'fixedBlock20Min'
    '''
    20-minute Fixed Block
    '''
    
    fixedBlock30Min = 'fixedBlock30Min'
    '''
    30-minute Fixed Block
    '''
    
    fixedBlock5Min = 'fixedBlock5Min'
    '''
    5-minute Fixed Block
    '''
    
    fixedBlock60Min = 'fixedBlock60Min'
    '''
    60-minute Fixed Block
    '''
    
    none = 'none'
    '''
    Not applicable.
    '''
    
    oneMinute = 'oneMinute'
    '''
    1-minute
    '''
    
    present = 'present'
    '''
    Within the present period of time
    '''
    
    previous = 'previous'
    '''
    Shifted within the previous monthly cycle and data set
    '''
    
    rollingBlock10MinIntvl1MinSubIntvl = 'rollingBlock10MinIntvl1MinSubIntvl'
    '''
    10-minute Rolling Block with 1-minute sub-intervals
    '''
    
    rollingBlock10MinIntvl2MinSubIntvl = 'rollingBlock10MinIntvl2MinSubIntvl'
    '''
    10-minute Rolling Block with 2-minute sub-intervals
    '''
    
    rollingBlock10MinIntvl5MinSubIntvl = 'rollingBlock10MinIntvl5MinSubIntvl'
    '''
    10-minute Rolling Block with 5-minute sub-intervals
    '''
    
    rollingBlock15MinIntvl1MinSubIntvl = 'rollingBlock15MinIntvl1MinSubIntvl'
    '''
    15-minute Rolling Block with 1-minute sub-intervals
    '''
    
    rollingBlock15MinIntvl3MinSubIntvl = 'rollingBlock15MinIntvl3MinSubIntvl'
    '''
    15-minute Rolling Block with 3-minute sub-intervals
    '''
    
    rollingBlock15MinIntvl5MinSubIntvl = 'rollingBlock15MinIntvl5MinSubIntvl'
    '''
    15-minute Rolling Block with 5-minute sub-intervals
    '''
    
    rollingBlock30MinIntvl10MinSubIntvl = 'rollingBlock30MinIntvl10MinSubIntvl'
    '''
    30-minute Rolling Block with 10-minute sub-intervals
    '''
    
    rollingBlock30MinIntvl15MinSubIntvl = 'rollingBlock30MinIntvl15MinSubIntvl'
    '''
    30-minute Rolling Block with 15-minute sub-intervals
    '''
    
    rollingBlock30MinIntvl2MinSubIntvl = 'rollingBlock30MinIntvl2MinSubIntvl'
    '''
    30-minute Rolling Block with 2-minute sub-intervals
    '''
    
    rollingBlock30MinIntvl3MinSubIntvl = 'rollingBlock30MinIntvl3MinSubIntvl'
    '''
    30-minute Rolling Block with 3-minute sub-intervals
    '''
    
    rollingBlock30MinIntvl5MinSubIntvl = 'rollingBlock30MinIntvl5MinSubIntvl'
    '''
    30-minute Rolling Block with 5-minute sub-intervals.
    '''
    
    rollingBlock30MinIntvl6MinSubIntvl = 'rollingBlock30MinIntvl6MinSubIntvl'
    '''
    30-minute Rolling Block with 6-minute sub-intervals
    '''
    
    rollingBlock5MinIntvl1MinSubIntvl = 'rollingBlock5MinIntvl1MinSubIntvl'
    '''
    5-minute Rolling Block with 1-minute sub-intervals
    '''
    
    rollingBlock60MinIntvl10MinSubIntvl = 'rollingBlock60MinIntvl10MinSubIntvl'
    '''
    60-minute Rolling Block with 10-minute sub-intervals
    '''
    
    rollingBlock60MinIntvl12MinSubIntvl = 'rollingBlock60MinIntvl12MinSubIntvl'
    '''
    60-minute Rolling Block with 12-minute sub-intervals
    '''
    
    rollingBlock60MinIntvl15MinSubIntvl = 'rollingBlock60MinIntvl15MinSubIntvl'
    '''
    60-minute Rolling Block with 15-minute sub-intervals
    '''
    
    rollingBlock60MinIntvl20MinSubIntvl = 'rollingBlock60MinIntvl20MinSubIntvl'
    '''
    60-minute Rolling Block with 20-minute sub-intervals
    '''
    
    rollingBlock60MinIntvl30MinSubIntvl = 'rollingBlock60MinIntvl30MinSubIntvl'
    '''
    60-minute Rolling Block with 30-minute sub-intervals
    '''
    
    rollingBlock60MinIntvl4MinSubIntvl = 'rollingBlock60MinIntvl4MinSubIntvl'
    '''
    60-minute Rolling Block with 4-minute sub-intervals
    '''
    
    rollingBlock60MinIntvl5MinSubIntvl = 'rollingBlock60MinIntvl5MinSubIntvl'
    '''
    60-minute Rolling Block with 5-minute sub-intervals
    '''
    
    rollingBlock60MinIntvl6MinSubIntvl = 'rollingBlock60MinIntvl6MinSubIntvl'
    '''
    60-minute Rolling Block with 6-minute sub-intervals
    '''
    
    sixtyMinute = 'sixtyMinute'
    '''
    60-minute
    '''
    
    tenMinute = 'tenMinute'
    '''
    10-minute
    '''
    
    thirtyMinute = 'thirtyMinute'
    '''
    30-minute
    '''
    
    threeMinute = 'threeMinute'
    '''
    3-minute
    '''
    
    twentyMinute = 'twentyMinute'
    '''
    20-minute interval
    '''
    
    twentyfourHour = 'twentyfourHour'
    '''
    24-hour
    '''
    
    twoMinute = 'twoMinute'
    '''
    2-minute
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MediumKind(Enum):
    '''
    Kind of medium.
    '''

    SF6 = 'SF6'
    '''
    Medium is SF6.
    '''
    
    SF6CF4 = 'SF6CF4'
    '''
    Medium is SF6CF4.
    '''
    
    SF6N2 = 'SF6N2'
    '''
    Medium is SF6N2.
    '''
    
    air = 'air'
    '''
    Medium is air.
    '''
    
    gas = 'gas'
    '''
    Medium is gas.
    '''
    
    liquid = 'liquid'
    '''
    Medium is liquid.
    '''
    
    mineralOil = 'mineralOil'
    '''
    Medium is mineral oil.
    '''
    
    solid = 'solid'
    '''
    Medium is solid.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class MeterMultiplierKind(Enum):
    '''
    Kind of meter multiplier.
    '''

    ctRatio = 'ctRatio'
    '''
    Current transformer ratio used to convert associated quantities to
    real measurements.
    '''
    
    kE = 'kE'
    '''
    Test constant.
    '''
    
    kH = 'kH'
    '''
    Meter kh (watthour) constant. The number of watthours that must be
    applied to the meter to cause one disk revolution for an electromechanical
    meter or the number of watthours represented by one increment pulse
    for an electronic meter.
    '''
    
    kR = 'kR'
    '''
    Register multiplier. The number to multiply the register reading by
    in order to get kWh.
    '''
    
    ptRatio = 'ptRatio'
    '''
    Potential transformer ratio used to convert associated quantities to
    real measurements.
    '''
    
    transformerRatio = 'transformerRatio'
    '''
    Product of the CT ratio and PT ratio.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class NotificationTriggerKind(Enum):
    '''
    Kind of trigger to notify customer.
    '''

    etrChange = 'etrChange'
    '''
    Notify customer if estimated restoration time changes.
    '''
    
    informDispatched = 'informDispatched'
    '''
    Notify customer that a crew has been dispatched to investigate the
    problem.
    '''
    
    initialEtr = 'initialEtr'
    '''
    Notify customer for the first time that estimated restoration time
    is available.
    '''
    
    powerOut = 'powerOut'
    '''
    Notify customer of planned outage.
    '''
    
    powerRestored = 'powerRestored'
    '''
    Notify customer when power has been restored.
    '''
    
@stereotype(CIMStereotype.NC)
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class NuclearReactorKind(Enum):
    '''
    Kind of nuclear reactor.
    '''

    breeder = 'breeder'
    '''
    Reactor whose heat source is a nuclear reactor that generates more
    fissile material than it consumes.
    '''
    
    graphite = 'graphite'
    '''
    Reactor whose heat source is a graphite-moderated reactor that is a
    nuclear reactor that uses carbon as a neutron moderator, which allows
    natural uranium to be used as nuclear fuel.
    '''
    
    heavyWater = 'heavyWater'
    '''
    Reactor whose heat source is a pressurized heavy-water reactor (PHWR)
    that uses heavy water (deuterium oxide D2O) as its coolant and neutron
    moderator.
    '''
    
    lightWater = 'lightWater'
    '''
    Reactor whose heat source is a light-water reactor (LWR) that is a
    type of thermal-neutron reactor that uses normal water, as both its
    coolant and neutron moderator � furthermore a solid form of fissile
    elements is used as fuel.
    '''
    
    liquidMetal = 'liquidMetal'
    '''
    Reactor whose liquid metal cooled nuclear reactor, liquid metal fast
    reactor or LMFR is an advanced type of nuclear reactor where the primary
    coolant is a liquid metal.
    '''
    
    other = 'other'
    '''
    Other type of nuclear reactors.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisFluidAnalogKind(Enum):
    '''
    Analogs representing oil fluid test analysis result.
    '''

    acidNumber = 'acidNumber'
    '''
    Acid neutralization number (in milligram of KOH/gram).
    '''
    
    additiveDBDS = 'additiveDBDS'
    '''
    Dibenzyl disulfide (DBDS) concentration (in ppm, specificially in milligram/kilogram).
    '''
    
    aromatics = 'aromatics'
    '''
    Concentration of aromatic compounds determined using infrared spectroscopy
    (in percent).
    '''
    
    carbonyl = 'carbonyl'
    '''
    Concentration of carbonyl compounds (aldehydes and ketones) determined
    using infrared spectroscopy (in percent).
    '''
    
    density = 'density'
    '''
    Density (in gram/millilitre).
    '''
    
    dielectricBreakdown = 'dielectricBreakdown'
    '''
    Dielectric breakdown, for electrode gap size and temperature specified
    by selected standard (in kV).
    '''
    
    dissipationFactor = 'dissipationFactor'
    '''
    Fluid dissipation factor in absolute value, not a percentage. (Multiplying
    this value by 100 would result in dissipation factor percent).
    '''
    
    dissipationFactorPercent = 'dissipationFactorPercent'
    '''
    Fluid dissipation factor (in percent). Commonly used in Asia. Dissipation
    factor is also known as loss factor or tan delta.
    '''
    
    duration61125MethodC = 'duration61125MethodC'
    '''
    Duration of oxidation stablity test performed according to IEC 61125,
    method C. This value should accompany values resulting from testing
    according to IEC 61125, method C to allow interpretation. Standard
    specified values are: 164, 332, and 500, but others can be used if
    agreed upon.
    '''
    
    firePoint = 'firePoint'
    '''
    Fire point (in �C). Fire point is when fire is sustained (oil catches
    fire). Can only be done by means of open cup test, which is commonly
    used in US.
    '''
    
    flashPointClosedCup = 'flashPointClosedCup'
    '''
    Flash point (in �C) determined via closed cup test. Flash point occurs
    when enough vapors have accumulated to sustain a flash. Closed cup
    is used in Europe.
    '''
    
    flashPointOpenCup = 'flashPointOpenCup'
    '''
    Flash point (in �C) determined via open cup test. Flash point occurs
    when enough vapors have accumulated to sustain a flash. Open cup is
    used in US.
    '''
    
    inductionTime = 'inductionTime'
    '''
    Oxidation induction time (in hours). Typically performed on new oil,but
    can be done on used oil.
    '''
    
    inhibitor61125MethodC = 'inhibitor61125MethodC'
    '''
    Amount of inhibitor used in oxidation stablity test performed according
    to IEC 61125, method C. This value should accompany values resulting
    from testing according to IEC 61125, method C to allow interpretation.
    '''
    
    interfacialTension = 'interfacialTension'
    '''
    Interfacial tension (in dyne/centimetre or milliNewton/metre, which
    are the same).
    '''
    
    kinematicViscosity = 'kinematicViscosity'
    '''
    Kinematic viscosity (in millimetre2/second). Kinematic viscosity is
    the ratio of - absolute (or dynamic) viscosity to density.
    '''
    
    oxidation = 'oxidation'
    '''
    Measure of oxidation stability (in hours).
    '''
    
    oxidationInhibitorD2668 = 'oxidationInhibitorD2668'
    '''
    2,6-ditertiary-butyl para-cresol and 2,6-ditertiary-butyl phenol concentration
    (in percent by weight).
    '''
    
    oxidationInhibitorDBP = 'oxidationInhibitorDBP'
    '''
    2,6-ditertiary-butyl phenol (DBP) oxidation inhibitor concentration
    (in percent by weight).
    '''
    
    oxidationInhibitorDBPC = 'oxidationInhibitorDBPC'
    '''
    2,6-ditertiarybutyl para-cresol (DBPC) oxidation inhibitor concentration
    (in percent by weight).
    '''
    
    passivatorBTA = 'passivatorBTA'
    '''
    Metal passivator BTA content (in milligram/kilogram).
    '''
    
    passivatorContent = 'passivatorContent'
    '''
    Total passivator content (in milligram/kilogram).
    '''
    
    passivatorIrgamet39 = 'passivatorIrgamet39'
    '''
    Irgamet 39 metal passivator content (in ppm, specifically milligram/kilogram).
    '''
    
    passivatorTTA = 'passivatorTTA'
    '''
    Metal passivator TTA (Irgamet39 in solid form) content (in milligram/kilogram).
    '''
    
    petroleumOrigin = 'petroleumOrigin'
    '''
    Characterization of the carbon-type composition of insulating oils
    by petroleum origin.
    '''
    
    pourPoint = 'pourPoint'
    '''
    Pour point (in �C). The pour point of a liquid is the temperature at
    which it becomes semi solid and loses its flow characteristics.
    '''
    
    pourPointAutomatic = 'pourPointAutomatic'
    '''
    Pour point (in �C) determined by automatic method. The pour point of
    a liquid is the temperature at which it becomes semi solid and loses
    its flow characteristics.
    '''
    
    powerFactorPercent = 'powerFactorPercent'
    '''
    Fluid power factor at specified temperature (in percent). Commonly
    used in US. (Note: Fluid power factor is very similar to fluid dissapation
    factor, but fluid power factor is cosine of the phase angle between
    an AC voltage applied to oil and the resulting current (where dissipation
    factor is the tangent). For values up to 0.005, fluid power factor
    and dissapation factor are very close. There is a conversion equation
    between the two).
    '''
    
    resistivity = 'resistivity'
    '''
    Resistivity at 90�C (in gigohm-metre).
    '''
    
    sedimentAndSludgePercent = 'sedimentAndSludgePercent'
    '''
    Sediment and sludge (in percent).
    '''
    
    sludge = 'sludge'
    '''
    Sludge (in percent by mass). Typically performed on new oil,but can
    be done on used oil.
    '''
    
    solubleAcids = 'solubleAcids'
    '''
    Soluble acids (in milligram of KOH/gram). Typically performed on new
    oil,but can be done on used oil.
    '''
    
    specificGravity = 'specificGravity'
    '''
    Specific gravity corrected to 15�C. Also known as relative density.
    It is a ratio of density of tested oil to density of water at a specific
    temperature.
    '''
    
    staticElectrification = 'staticElectrification'
    '''
    Static electrification tendency (in microcoulombs per metre3). Also
    called static charging tendency and electrostatic charging tendency
    (ECT).
    '''
    
    totalAcids = 'totalAcids'
    '''
    Total acids (soluble plus volatile) (in milligram of KOH/gram). Typically
    performed on new oil,but can be done on used oil.
    '''
    
    volatileAcids = 'volatileAcids'
    '''
    Volatile acids (in milligram of KOH/gram). Typically performed on new
    oil,but can be done on used oil.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisFluidDiscreteKind(Enum):
    '''
    Discretes representing oil fluid test analysis result.
    '''

    colorNumber = 'colorNumber'
    '''
    Fluid color index number. Color numbers are expressed in 0.5 intervals
    and value specified is "less-than". For example, a value of '2.5' means
    the color index number is between 2.0 and 2.5.
    Possible values: 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0,
    5.5, 6.0, 6.5, 7.0, 7.5, 8.0.
    '''
    
    colorNumberPlatinumCobaltScale = 'colorNumberPlatinumCobaltScale'
    '''
    Fluid color index on the platinum cobalt scale.
    Possible values: 5, 10, 15, 20, 25, 30, 35, 40, 50, 60, 70, 100, 150,
    200, 250, 300, 350, 400, 450.
    '''
    
    corrosiveSulphurBy51353 = 'corrosiveSulphurBy51353'
    '''
    Corrosive sulphur test result using silver strip test.
    Possible values: absent, present.
    '''
    
    corrosiveSulphurBy62535 = 'corrosiveSulphurBy62535'
    '''
    Corrosive sulphur test result using covered (copper) conductor deposition
    test.
    Possible values: potentiallyCorrosive, nonCorrosive.
    '''
    
    corrosiveSulphurByD1275 = 'corrosiveSulphurByD1275'
    '''
    Corrosive sulphur test result using bare copper strip test.
    Possible values: corrosive, nonCorrosive.
    '''
    
    sludgePrecipitation = 'sludgePrecipitation'
    '''
    Sludge precipitation test results.
    Possible values: present, notPresent.
    '''
    
    tarnishLevel = 'tarnishLevel'
    '''
    Tarnish level indicated by corrosive sulphur test.
    Possible values: 1A, 1B, 2A, 2B, 2C, 2D, 2E, 3A, 3B, 4A, 4B, 4C.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisGasAnalogKind(Enum):
    '''
    Analogs representing oil dissolved gas analysis result.
    '''

    acetylene = 'acetylene'
    '''
    C2H2 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    butane = 'butane'
    '''
    C4H10 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    carbon = 'carbon'
    '''
    C concentration (in ppm, specifically in microlitre/litre).
    '''
    
    carbon3 = 'carbon3'
    '''
    C3 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    carbon4 = 'carbon4'
    '''
    C4 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    carbonDioxide = 'carbonDioxide'
    '''
    CO2 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    carbonMonoxide = 'carbonMonoxide'
    '''
    CO concentration (in ppm, specifically in microlitre/litre).
    '''
    
    equivalentTCGPercent = 'equivalentTCGPercent'
    '''
    Equivalent Total Combustible Gas (ETCG) percent.
    An estimate, calculated from the dissolved-gas concentrations and the
    oil sample temperature, of what the TCG would be in a gas space in
    equilibrium with the oil. ETCG reflects what the TCG would be in air
    spaces near the oil.
    '''
    
    estimatedSafeHandlingLimit = 'estimatedSafeHandlingLimit'
    '''
    Estimated Safe Handling Limit (ESHL) (in percent). Estimated safe handling
    limit is an estimate of the lower flammability limit (LFL) of the combustible
    gas mixture which the dissolved gas in the oil would give off by the
    oil if exposed to air.
    Expressed in percent like the equivalent total combustible gas percent,
    it is calculated from the dissolved-gas concentrations, the oil sample
    temperature, and the lower flammability limits of the individual combustible
    gases.
    '''
    
    ethane = 'ethane'
    '''
    C2H6 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    ethylene = 'ethylene'
    '''
    C2H4 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    hydran = 'hydran'
    '''
    Measured composite of dissolved fault gas concentrations (in ppm, specifically
    in microlitre/litre). Relative sensitivity
    - H2: 100 % of concentration
    - CO: 15 � 4 % of concentration
    - C2H2: 8 � 2 % of concentration
    - C2H4: 1.5 � 0.5 % of concentration.
    '''
    
    hydranPredicted = 'hydranPredicted'
    '''
    Predicted hydran value (in ppm, specifically in microlitre/litre),
    calculated based on individual measured dissolved gas concentrations.
    - H2: 100 % of concentration
    - CO: 15 � 4 % of concentration
    - C2H2: 8 � 2 % of concentration
    - C2H4: 1.5 � 0.5 % of concentration
    '''
    
    hydrogen = 'hydrogen'
    '''
    H2 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    isobutane = 'isobutane'
    '''
    isoC4 (C4H10) concentration (in ppm, specifically in microlitre/litre).
    Isobutane is also known as methylpropane.
    '''
    
    methane = 'methane'
    '''
    CH4 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    nitrogen = 'nitrogen'
    '''
    N2 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    oxygen = 'oxygen'
    '''
    O2 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    propane = 'propane'
    '''
    C3H8 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    propene = 'propene'
    '''
    C3H6 concentration (in ppm, specifically in microlitre/litre).
    '''
    
    totalCombustibleGasPercent = 'totalCombustibleGasPercent'
    '''
    Total Combustible Gas (TCG) measured in headspace (in percent by volume).
    '''
    
    totalDissolvedCombustibleGas = 'totalDissolvedCombustibleGas'
    '''
    Total dissolved combustible gas concentration (in ppm, specifically
    in microlitre/litre). Calculated by adding the ppm of combustible gasses:
    hydrogen (H2), methane (CH4), ethane (C2H6), ethylene (C2H4), acetylene
    (C2H2), and carbon monoxide (CO).
    '''
    
    totalDissolvedGasPercent = 'totalDissolvedGasPercent'
    '''
    Total dissolved gas in oil (in percent by volume). Derived from the
    total area of all the gas peaks in the chromatogram.
    '''
    
    totalHeatGas = 'totalHeatGas'
    '''
    Sum of concentrations of methane, ethane, and ethylene (in ppm, specifically
    in microlitre/litre). Used in some diagnostic gas ratios, especially
    THG/acetylene, which compares �heat gas� to �arcing gas.�
    '''
    
    totalPartialPressure = 'totalPartialPressure'
    '''
    Total partial pressure (in Pa).
    Calculated value reflecting total of partial pressures of all combustible
    gasses.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisMetalsAnalogKind(Enum):
    '''
    Analogs representing oil metals and elements analysis result.
    '''

    aluminum = 'aluminum'
    '''
    Aluminum concentration (in ppb, specifically in microgram/litre).
    '''
    
    aluminumParticulate = 'aluminumParticulate'
    '''
    Aluminum concentration of particles larger than 0.45 microns (in ppb,specifically
    in microgram/litre).
    '''
    
    barium = 'barium'
    '''
    Barium concentration (in ppb, specifically in microgram/litre).
    '''
    
    boron = 'boron'
    '''
    Boron concentration (in ppb, specifically in microgram/litre).
    '''
    
    cadmium = 'cadmium'
    '''
    Cadmium concentration (in ppb, specifically in microgram/litre).
    '''
    
    calcium = 'calcium'
    '''
    Calcium concentration (in ppb, specifically in microgram/litre).
    '''
    
    chromium = 'chromium'
    '''
    Chromium concentration (in ppb, specifically in microgram/litre).
    '''
    
    copper = 'copper'
    '''
    Copper concentration (in ppb, specifically in microgram/litre).
    '''
    
    copperParticulate = 'copperParticulate'
    '''
    Copper concentration of particles larger than 0.45 microns (in ppb,specifically
    in microgram/litre).
    '''
    
    iron = 'iron'
    '''
    Iron concentration (in ppb, specifically in microgram/litre).
    '''
    
    ironParticulate = 'ironParticulate'
    '''
    Iron concentration of particles larger than 0.45 microns (in ppb, specifically
    in microgram/litre).
    '''
    
    lead = 'lead'
    '''
    Lead concentration (in ppb, specifically in microgram/litre).
    '''
    
    leadParticulate = 'leadParticulate'
    '''
    Lead concentration of particles larger than 0.45 microns (in ppb, specifically
    in microgram/litre).
    '''
    
    lithium = 'lithium'
    '''
    Lithium concentration (in ppb, specifically in microgram/litre).
    '''
    
    magnesium = 'magnesium'
    '''
    Magnesium concentration (in ppb, specifically in microgram/litre).
    '''
    
    molybdenum = 'molybdenum'
    '''
    Molybdenum concentration (in ppb, specifically in microgram/litre).
    '''
    
    nickel = 'nickel'
    '''
    Nickel concentration (in ppb, specifically in microgram/litre).
    '''
    
    phosphorus = 'phosphorus'
    '''
    Phosphorus concentration (in ppb, specifically in microgram/litre).
    '''
    
    silicon = 'silicon'
    '''
    Silicon concentration (in ppb, specifically in microgram/litre).
    '''
    
    silver = 'silver'
    '''
    Silver concentration (in ppb, specifically in microgram/litre).
    '''
    
    silverParticulate = 'silverParticulate'
    '''
    Silver concentration of particles larger than 0.45 microns (in ppb,
    specifically in microgram/litre).
    '''
    
    sodium = 'sodium'
    '''
    Sodium concentration (in ppb, specifically in microgram/litre).
    '''
    
    tin = 'tin'
    '''
    Tin concentration (in ppb, specifically in microgram/litre).
    '''
    
    titanium = 'titanium'
    '''
    Titanium concentration (in ppb, specifically in microgram/litre).
    '''
    
    tungsten = 'tungsten'
    '''
    Tungsten concentration (in ppb, specifically in microgram/litre).
    '''
    
    vanadium = 'vanadium'
    '''
    Vanadium concentration (in ppb, specifically in microgram/litre).
    '''
    
    zinc = 'zinc'
    '''
    Zinc concentration (in ppb, specifically in microgram/litre).
    '''
    
    zincParticulate = 'zincParticulate'
    '''
    Zinc concentration of particles larger than 0.45 microns (in ppb, specifically
    in microgram/litre).
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisMoistureAnalogKind(Enum):
    '''
    Analogs representing oil moisture analysis result.
    '''

    dewPoint = 'dewPoint'
    '''
    Dew point (in �C). Is usually a negative value.
    '''
    
    relativeSaturation = 'relativeSaturation'
    '''
    Relative saturation of water in fluid (in percent).
    '''
    
    relativeSaturationCalculated = 'relativeSaturationCalculated'
    '''
    Calculated relative saturation of water in fluid (in percent).
    '''
    
    waterContent = 'waterContent'
    '''
    Moisture measured via coulometric Karl Fischer titration (in ppm, specifically
    milligram/kilogram).
    '''
    
    waterContentMonitoredViaAluminumOxide = 'waterContentMonitoredViaAluminumOxide'
    '''
    Water content by aluminum oxide sensor (in ppm, specifically milligram/kilogram).
    '''
    
    waterContentMonitoredViaCapacitance = 'waterContentMonitoredViaCapacitance'
    '''
    Water content by capacitance sensor (in ppm, specifically milligram/kilogram).
    '''
    
    waterContentMonitoredViaInfrared = 'waterContentMonitoredViaInfrared'
    '''
    Water content by infrared sensor (in ppm, specifically milligram/kilogram).
    '''
    
    waterContentMonitoredViaOther = 'waterContentMonitoredViaOther'
    '''
    Water content by other sensor (in ppm, specifically milligram/kilogram).
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisPCBAnalogKind(Enum):
    '''
    Analogs representing oil PCB analysis result.
    '''

    aroclor1016 = 'aroclor1016'
    '''
    Concentration of Aroclor 1016 (in ppm, specifically in mg/kg).
    '''
    
    aroclor1221 = 'aroclor1221'
    '''
    Concentration of Aroclor 1221 (in ppm, specifically in mg/kg).
    '''
    
    aroclor1242 = 'aroclor1242'
    '''
    Concentration of Aroclor 1242 (in ppm, specifically in mg/kg).
    '''
    
    aroclor1254 = 'aroclor1254'
    '''
    Concentration of Aroclor 1254 (in ppm, specifically in mg/kg).
    '''
    
    aroclor1260 = 'aroclor1260'
    '''
    Concentration of Aroclor 1260 (in ppm, specifically in mg/kg).
    '''
    
    totalPCB = 'totalPCB'
    '''
    Total arochlor (PCB) content (in ppm, specifically in mg/kg). Is the
    sum of Aroclor 1221, Aroclor 1242, Aroclor 1254, Aroclor 1260, Aroclor
    1016.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisPCBDiscreteKind(Enum):
    '''
    Discretes representing oil PCB test analysis result.
    '''

    testKitPCB = 'testKitPCB'
    '''
    Possible values: <blank>, <50, >50.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisPaperAnalogKind(Enum):
    '''
    Analogs representing oil paper degradation analysis result.
    '''

    acetylfuran = 'acetylfuran'
    '''
    2-acetylfuran (2ACF) (in ppb). Also known as: 2-acetylfuran, furyl
    methyl ketone, 2-furyl methyl ketone, methyl 2-furyl ketone, and 1-(2-furanyl)ethanone.
    '''
    
    degreeOfPolymerization = 'degreeOfPolymerization'
    '''
    Direct measurement of degree of polymerization (DP) (unitless).
    '''
    
    degreeOfPolymerizationCalculated = 'degreeOfPolymerizationCalculated'
    '''
    Calculated degree of polymerization (DP) calculated using the Chendong
    equation (unitless).
    '''
    
    ethanol = 'ethanol'
    '''
    Concentration of ethanol (in ppb, specifically microgram/kilogram).
    '''
    
    furfural = 'furfural'
    '''
    2-furaldehyde (2FAL) (in ppb). Also known as: 2-furfural, 2-furaldehyde,
    2-furanaldehyde, fural, furfuraldehyde, furaldehyde, and 2-furancarboxaldehyde.
    '''
    
    furfurylAlcohol = 'furfurylAlcohol'
    '''
    Furfuryl alcohol (2FOL) (in ppb). Also known as: 2-furyl alcohol, 2-furfurol,
    2-furylmethanol, 2-hydroxymethylfuran, 2-furancarbinol, furancarbinol,
    2-furanmethanol, furanmethanol, furfural alcohol, and alpha-furylcarbinol.
    '''
    
    hydroxymethylfurfural = 'hydroxymethylfurfural'
    '''
    5-hydroxymethyl-2-furaldehyde (5H2F) (in ppb). Also known as: 5-hydroxymethyl-2-furfural,
    5-hydroxymethyl-2-furaldehyde, 5-hydroxymethylfurfuraldehyde, and 5-hydroxymethylfurfural.
    '''
    
    methanol = 'methanol'
    '''
    Concentration of methanol (in ppb, specifically microgram/kilogram).
    '''
    
    methylfurfural = 'methylfurfural'
    '''
    5-methyl-2-furaldehyde (5M2F) (in ppb). Also known as: 5-methyl-2-furfural,
    5-methyl-2-furaldehyde, 5-methyl-2-furfuraldehyde, and 5-methylfurfural.
    '''
    
    solidInsulationDielectricStrength = 'solidInsulationDielectricStrength'
    '''
    Dielectric breakdown of solid electrical insulating materials (in kV).
    '''
    
    tensileStrength = 'tensileStrength'
    '''
    Tensile strength (in kilonewtons/metre).
    '''
    
    totalFuran = 'totalFuran'
    '''
    Total furan (in ppb). Is the total of the concentrations of 5-hydroxymethyl-2-furaldehyde
    (5H2F), furfuryl alcohol (2FOL), 2-furaldehyde (2FAL), 2-acetylfuran
    (2ACF), 5-methyl-2-furaldehyde (5M2F).
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisParticleAnalogKind(Enum):
    '''
    Analogs representing oil particulate analysis result.
    '''

    carbonPercent = 'carbonPercent'
    '''
    Percent of particles which are carbon.
    '''
    
    count100Plus = 'count100Plus'
    '''
    Count of particles 100 microns and larger in a 1 millilitre sample.
    '''
    
    count10Plus = 'count10Plus'
    '''
    Count of particles 10 microns and larger in a 1 millilitre sample.
    '''
    
    count14Plus = 'count14Plus'
    '''
    Count of particles 14 microns and larger in a 1 millilitre sample.
    '''
    
    count15Plus = 'count15Plus'
    '''
    Count of particles 15 microns and larger in a 1 millilitre sample.
    '''
    
    count21Plus = 'count21Plus'
    '''
    Count of particles 21 microns and larger in a 1 millilitre sample.
    '''
    
    count25Plus = 'count25Plus'
    '''
    Count of particles 25 microns and larger in a 1 millilitre sample.
    '''
    
    count2Plus = 'count2Plus'
    '''
    Count of particles 2 microns and larger in a 1 millilitre sample.
    '''
    
    count38Plus = 'count38Plus'
    '''
    Count of particles 38 microns and larger in a 1 millilitre sample.
    '''
    
    count4Plus = 'count4Plus'
    '''
    Count of particles 4 microns and larger in a 1 millilitre sample.
    '''
    
    count50Plus = 'count50Plus'
    '''
    Count of particles 50 microns and larger in a 1 millilitre sample.
    '''
    
    count5Plus = 'count5Plus'
    '''
    Count of particles 5 microns and larger in a 1 millilitre sample.
    '''
    
    count6Plus = 'count6Plus'
    '''
    Count of particles 6 microns and larger in a 1 millilitre sample.
    '''
    
    count70Plus = 'count70Plus'
    '''
    Count of particles 70 microns and larger in a 1 millilitre sample.
    '''
    
    fibrePercent = 'fibrePercent'
    '''
    Percent of particles which are fibres.
    '''
    
    metalPercent = 'metalPercent'
    '''
    Percent of particles which are metal.
    '''
    
    otherPercent = 'otherPercent'
    '''
    Percent of particles which are 'other'.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilAnalysisParticleDiscreteKind(Enum):
    '''
    Discretes representing oil particulate analysis result.
    '''

    opacity = 'opacity'
    '''
    Opacity of oil.
    Possible values: any integer.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilPreservationKind(Enum):
    '''
    Kind of oil preservation.
    '''

    conservator = 'conservator'
    '''
    '''
    
    freeBreathing = 'freeBreathing'
    '''
    '''
    
    nitrogenBlanket = 'nitrogenBlanket'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilSampleLocation(Enum):
    '''
    Locations where oil can be sampled.
    '''

    oilDrainageDevice = 'oilDrainageDevice'
    '''
    Sample from oil drainage device.
    '''
    
    oilSampleValve = 'oilSampleValve'
    '''
    Sample from oil sample valve.
    '''
    
    other = 'other'
    '''
    Sample from other location.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OilTemperatureSource(Enum):
    '''
    Sources for oil temperature.
    '''

    infraredGun = 'infraredGun'
    '''
    Oil temperature from infrared gun.
    '''
    
    other = 'other'
    '''
    Oil temperature from other souce.
    '''
    
    topOilTemperatureGauge = 'topOilTemperatureGauge'
    '''
    Oil temperature from top oil temperature gauge.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OperatingMechanismKind(Enum):
    '''
    Kinds of operating mechanisms.
    '''

    capacitorTrip = 'capacitorTrip'
    '''
    Capacitor trip mechanism.
    '''
    
    hydraulic = 'hydraulic'
    '''
    Hydraulic mechanism.
    '''
    
    pneudraulic = 'pneudraulic'
    '''
    Pneudraulic mechanism.
    '''
    
    pneumatic = 'pneumatic'
    '''
    Pneumatic mechanism.
    '''
    
    solenoid = 'solenoid'
    '''
    Solenoid mechanism.
    '''
    
    spring = 'spring'
    '''
    Spring mechanism.
    '''
    
    springHandCrank = 'springHandCrank'
    '''
    Spring hand-crank mechanism.
    '''
    
    springHydraulic = 'springHydraulic'
    '''
    Spring hydraulic mechanism.
    '''
    
    springMotor = 'springMotor'
    '''
    Spring motor mechanism.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OperationalLimitDirectionKind(Enum):
    '''
    The direction attribute describes the side of a limit that is a violation.
    '''

    absoluteValue = 'absoluteValue'
    '''
    An absoluteValue limit means that a monitored absolute value above
    the limit value is a violation.
    '''
    
    high = 'high'
    '''
    High means that a monitored value above the limit value is a violation.
    If applied to a terminal flow, the positive direction is into the terminal.
    '''
    
    low = 'low'
    '''
    Low means a monitored value below the limit is a violation. If applied
    to a terminal flow, the positive direction is into the terminal.
    '''
    
@stereotype(CIMStereotype.gmdm)
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OrderedPhaseCodeKind(Enum):
    '''
    In some use cases, the ordering of phases is important. The PhaseCode class
    does not represent order, but this class addresses such use cases. When
    two or more phases are present, the individual phases may occur in any
    order, but the neutral must always occur last. When only one phase and
    the neutral is present, that phase and the neutral may be re-ordered.
    '''

    A = 'A'
    '''
    '''
    
    AB = 'AB'
    '''
    '''
    
    ABC = 'ABC'
    '''
    '''
    
    ABCN = 'ABCN'
    '''
    '''
    
    ABN = 'ABN'
    '''
    '''
    
    AC = 'AC'
    '''
    '''
    
    ACB = 'ACB'
    '''
    '''
    
    ACBN = 'ACBN'
    '''
    '''
    
    ACN = 'ACN'
    '''
    '''
    
    AN = 'AN'
    '''
    '''
    
    B = 'B'
    '''
    '''
    
    BA = 'BA'
    '''
    '''
    
    BAC = 'BAC'
    '''
    '''
    
    BACN = 'BACN'
    '''
    '''
    
    BAN = 'BAN'
    '''
    '''
    
    BC = 'BC'
    '''
    '''
    
    BCA = 'BCA'
    '''
    '''
    
    BCAN = 'BCAN'
    '''
    '''
    
    BCN = 'BCN'
    '''
    '''
    
    BN = 'BN'
    '''
    '''
    
    C = 'C'
    '''
    '''
    
    CA = 'CA'
    '''
    '''
    
    CAB = 'CAB'
    '''
    '''
    
    CABN = 'CABN'
    '''
    '''
    
    CAN = 'CAN'
    '''
    '''
    
    CB = 'CB'
    '''
    '''
    
    CBA = 'CBA'
    '''
    '''
    
    CBAN = 'CBAN'
    '''
    '''
    
    CBN = 'CBN'
    '''
    '''
    
    CN = 'CN'
    '''
    '''
    
    NA = 'NA'
    '''
    '''
    
    NB = 'NB'
    '''
    '''
    
    NC = 'NC'
    '''
    '''
    
    Ns1 = 'Ns1'
    '''
    '''
    
    Ns2 = 'Ns2'
    '''
    '''
    
    X = 'X'
    '''
    '''
    
    XN = 'XN'
    '''
    '''
    
    XY = 'XY'
    '''
    '''
    
    XYN = 'XYN'
    '''
    '''
    
    none = 'none'
    '''
    '''
    
    s1 = 's1'
    '''
    '''
    
    s12 = 's12'
    '''
    '''
    
    s12N = 's12N'
    '''
    '''
    
    s1N = 's1N'
    '''
    '''
    
    s2 = 's2'
    '''
    '''
    
    s21 = 's21'
    '''
    '''
    
    s21N = 's21N'
    '''
    '''
    
    s2N = 's2N'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OrganisationCategoryKind(Enum):
    '''
    A list of the different kinds of organisations.
    '''

    adhoc = 'adhoc'
    '''
    A temporary organization formed for a specific task or purpose, dissolving
    once its objective is met.
    '''
    
    association = 'association'
    '''
    A group of individuals or organizations united by a common purpose,
    interest, or profession.
    '''
    
    board = 'board'
    '''
    A governing body responsible for oversight, decision-making, and policy-setting
    within an organization.
    '''
    
    committee = 'committee'
    '''
    A subgroup within an organization assigned to focus on a specific task,
    issue, or function.
    '''
    
    company = 'company'
    '''
    A business entity engaged in commercial, industrial, or professional
    activities.
    '''
    
    consortium = 'consortium'
    '''
    A collaboration of multiple entities pooling resources to achieve a
    shared objective.
    '''
    
    cooperative = 'cooperative'
    '''
    A member-owned organization that operates for the mutual benefit of
    its members.
    '''
    
    corporateDivision = 'corporateDivision'
    '''
    A distinct operational segment within a larger company, often focusing
    on a specific product or market.
    '''
    
    council = 'council'
    '''
    A formal assembly of members who deliberate and make decisions on policies
    or governance matters.
    '''
    
    department = 'department'
    '''
    A specialized functional unit within a larger organization responsible
    for specific tasks or services.
    '''
    
    governmentAgency = 'governmentAgency'
    '''
    A public sector entity created to implement laws, policies, and services
    for the public.
    '''
    
    group = 'group'
    '''
    A general term for an organized collection of individuals or entities
    working toward a common goal.
    '''
    
    hybrid = 'hybrid'
    '''
    An organization combining characteristics of multiple organizational
    types, such as public-private partnerships.
    '''
    
    institution = 'institution'
    '''
    A structured entity, often longstanding, dedicated to a specific function
    such as education, research, or governance.
    '''
    
    judicialBody = 'judicialBody'
    '''
    An organization or panel responsible for interpreting and applying
    laws within a legal system.
    '''
    
    legislativeBody = 'legislativeBody'
    '''
    A governmental entity empowered to create, amend, and enact laws.
    '''
    
    political = 'political'
    '''
    An organization focused on influencing government policy, elections,
    or political ideology.
    '''
    
    section = 'section'
    '''
    A subdivision within a larger organization dedicated to a particular
    function or area of expertise.
    '''
    
    subcommittee = 'subcommittee'
    '''
    A smaller group within a committee tasked with addressing a specific
    aspect of the committee's work.
    '''
    
    team = 'team'
    '''
    A group of individuals collaborating to achieve a shared objective
    or complete a project.
    '''
    
    unit = 'unit'
    '''
    A distinct operational component within an organization, often focusing
    on a specific function or task.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class OrientationKind(Enum):
    '''
    The orientation of the coordinate system with respect to top, left, and
    the coordinate number system.
    '''

    negative = 'negative'
    '''
    For 2D diagrams, a negative orientation gives the left-hand orientation
    (favoured by computer graphics displays) with X values increasing from
    left to right and Y values increasing from top to bottom. This is also
    known as a left hand orientation.
    '''
    
    positive = 'positive'
    '''
    For 2D diagrams, a positive orientation will result in X values increasing
    from left to right and Y values increasing from bottom to top. This
    is also known as a right hand orientation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ParticipationCategoryMPM(Enum):
    '''
    For example:
    'Y' - Participates in both LMPM and SMPM
    'N' - Not included in LMP price measures
    'S' - Participates in SMPM price measures
    'L' - Participates in LMPM price measures
    '''

    L = 'L'
    '''
    '''
    
    N = 'N'
    '''
    '''
    
    S = 'S'
    '''
    '''
    
    Y = 'Y'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PetersenCoilModeKind(Enum):
    '''
    The mode of operation for a Petersen coil.
    '''

    automaticPositioning = 'automaticPositioning'
    '''
    Automatic positioning.
    '''
    
    fixed = 'fixed'
    '''
    Fixed position.
    '''
    
    manual = 'manual'
    '''
    Manual positioning.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PhaseCode(Enum):
    '''
    Enumeration of phase identifiers used to designate the combination of phase
    and/or neutral conductors at a terminal, measurement or equipment modelled
    as a single-line balanced equivalent.
    This is an unordered enumeration of phase identifiers. Allows designation
    of phases for both transmission and distribution equipment, circuits and
    loads. The enumeration, by itself, does not describe how the phases are
    connected together or connected to ground. Ground is not explicitly denoted
    as a phase.
    Residential and small commercial loads are often served from single-phase,
    or split-phase, secondary circuits. For the example of s12N, phases 1 and
    2 refer to hot wires that are 180 degrees out of phase, while N refers
    to the neutral wire. Through single-phase transformer connections, these
    secondary circuits may be served from one or two of the primary phases
    A, B, and C. For three-phase loads, use the A, B, C phase codes instead
    of s12N.
    The integer values are from IEC 61968-9 to support revenue metering applications.
    '''

    A = 'A'
    '''
    Phase A.
    '''
    
    AB = 'AB'
    '''
    Phases A and B.
    '''
    
    ABC = 'ABC'
    '''
    Phases A, B, and C.
    '''
    
    ABCN = 'ABCN'
    '''
    Phases A, B, C, and N.
    '''
    
    ABN = 'ABN'
    '''
    Phases A, B, and neutral.
    '''
    
    AC = 'AC'
    '''
    Phases A and C.
    '''
    
    ACN = 'ACN'
    '''
    Phases A, C and neutral.
    '''
    
    AN = 'AN'
    '''
    Phases A and neutral.
    '''
    
    B = 'B'
    '''
    Phase B.
    '''
    
    BC = 'BC'
    '''
    Phases B and C.
    '''
    
    BCN = 'BCN'
    '''
    Phases B, C, and neutral.
    '''
    
    BN = 'BN'
    '''
    Phases B and neutral.
    '''
    
    C = 'C'
    '''
    Phase C.
    '''
    
    CN = 'CN'
    '''
    Phases C and neutral.
    '''
    
    N = 'N'
    '''
    Neutral phase.
    '''
    
    X = 'X'
    '''
    Unknown non-neutral phase.
    '''
    
    XN = 'XN'
    '''
    Unknown non-neutral phase plus neutral.
    '''
    
    XY = 'XY'
    '''
    Two unknown non-neutral phases.
    '''
    
    XYN = 'XYN'
    '''
    Two unknown non-neutral phases plus neutral.
    '''
    
    none = 'none'
    '''
    No phases specified.
    '''
    
    s1 = 's1'
    '''
    Secondary phase 1.
    '''
    
    s12 = 's12'
    '''
    Secondary phase 1 and 2.
    '''
    
    s12N = 's12N'
    '''
    Secondary phases 1, 2, and neutral.
    '''
    
    s1N = 's1N'
    '''
    Secondary phase 1 and neutral.
    '''
    
    s2 = 's2'
    '''
    Secondary phase 2.
    '''
    
    s2N = 's2N'
    '''
    Secondary phase 2 and neutral.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PhaseCodeExtension(Enum):
    '''
    Enumeration of phase identifiers used to designate the combination of phase
    and/or neutral conductors at a terminal, measurement or equipment modelled
    as a single-line balanced equivalent.
    This is an unordered enumeration of phase identifiers. Allows designation
    of phases for both transmission and distribution equipment, circuits and
    loads. The enumeration, by itself, does not describe how the phases are
    connected together or connected to ground. Ground is not explicitly denoted
    as a phase.
    Residential and small commercial loads are often served from single-phase,
    or split-phase, secondary circuits. For the example of s12N, phases 1 and
    2 refer to hot wires that are 180 degrees out of phase, while N refers
    to the neutral wire. Through single-phase transformer connections, these
    secondary circuits may be served from one or two of the primary phases
    A, B, and C. For three-phase loads, use the A, B, C phase codes instead
    of s12N.
    The integer values are from IEC 61968-9 to support revenue metering applications.
    '''

    A = 'A'
    '''
    Phase A.
    '''
    
    AB = 'AB'
    '''
    Phases A and B.
    '''
    
    ABC = 'ABC'
    '''
    Phases A, B, and C.
    '''
    
    ABCN = 'ABCN'
    '''
    Phases A, B, C, and N.
    '''
    
    ABN = 'ABN'
    '''
    Phases A, B, and neutral.
    '''
    
    AC = 'AC'
    '''
    Phases A and C.
    '''
    
    ACN = 'ACN'
    '''
    Phases A, C and neutral.
    '''
    
    AN = 'AN'
    '''
    Phases A and neutral.
    '''
    
    B = 'B'
    '''
    Phase B.
    '''
    
    BC = 'BC'
    '''
    Phases B and C.
    '''
    
    BCN = 'BCN'
    '''
    Phases B, C, and neutral.
    '''
    
    BN = 'BN'
    '''
    Phases B and neutral.
    '''
    
    C = 'C'
    '''
    Phase C.
    '''
    
    CN = 'CN'
    '''
    Phases C and neutral.
    '''
    
    N = 'N'
    '''
    Neutral phase.
    '''
    
    X = 'X'
    '''
    Unknown non-neutral phase.
    '''
    
    XN = 'XN'
    '''
    Unknown non-neutral phase plus neutral.
    '''
    
    XY = 'XY'
    '''
    Two unknown non-neutral phases.
    '''
    
    XYN = 'XYN'
    '''
    Two unknown non-neutral phases plus neutral.
    '''
    
    none = 'none'
    '''
    No phases specified.
    '''
    
    s1 = 's1'
    '''
    Secondary phase 1.
    '''
    
    s12 = 's12'
    '''
    Secondary phase 1 and 2.
    '''
    
    s12N = 's12N'
    '''
    Secondary phases 1, 2, and neutral.
    '''
    
    s1N = 's1N'
    '''
    Secondary phase 1 and neutral.
    '''
    
    s2 = 's2'
    '''
    Secondary phase 2.
    '''
    
    s2N = 's2N'
    '''
    Secondary phase 2 and neutral.
    '''
    
@stereotype(CIMStereotype.enumeration)
class PhaseCodeProtection(Enum):
    '''
    Enumeration of phase identifiers used to designate the combination of phase
    and/or neutral conductors measured for protection function and protection
    function blocks. It is a restricted subset of PhaseCode enumeration. Using
    the complete PhaseCode enumeration does not make sense for the protection
    function, e.g. ABCN.
    '''

    A = 'A'
    '''
    Phase A.
    '''
    
    AB = 'AB'
    '''
    Phases A and B.
    '''
    
    ABC = 'ABC'
    '''
    Phases A, B, and C.
    '''
    
    B = 'B'
    '''
    Phase B.
    '''
    
    BC = 'BC'
    '''
    Phases B and C.
    '''
    
    C = 'C'
    '''
    Phase C.
    '''
    
    CA = 'CA'
    '''
    Phases C and A.
    '''
    
    N = 'N'
    '''
    Neutral phase.
    '''
    
    s1 = 's1'
    '''
    Secondary phase 1.
    '''
    
    s12 = 's12'
    '''
    Secondary phase 1 and 2.
    '''
    
    s2 = 's2'
    '''
    Secondary phase 2.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PhaseConnectedFaultKind(Enum):
    '''
    The type of fault connection among phases.
    '''

    lineOpen = 'lineOpen'
    '''
    The fault is when the conductor path is broken between two terminals.
    Additional coexisting faults may be required if the broken conductor
    also causes connections to grounds or other lines or phases.
    '''
    
    lineToGround = 'lineToGround'
    '''
    The fault connects the indicated phases to ground. The line to line
    fault impedance is not used and assumed infinite. The full ground impedance
    is connected between each phase specified in the fault and ground,
    but not between the phases.
    '''
    
    lineToLine = 'lineToLine'
    '''
    The fault connects the specified phases together without a connection
    to ground. The ground impedance of this fault is ignored. The line
    to line impedance is connected between each of the phases specified
    in the fault. For example three times for a three phase fault, one
    time for a two phase fault. A single phase fault should not be specified.
    '''
    
    lineToLineToGround = 'lineToLineToGround'
    '''
    The fault connects the indicated phases to ground and to each other.
    The line to line impedance is connected between each of the phases
    specified in the fault in a full mesh. For example three times for
    a three phase fault, one time for a two phase fault. A single phase
    fault should not be specified. The full ground impedance is connected
    between each phase specified in the fault and ground.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PhaseCountKind(Enum):
    '''
    Number of phases supported by a device.
    '''

    other = 'other'
    '''
    Other
    '''
    
    singlePhase = 'singlePhase'
    '''
    Single phase
    '''
    
    threePhase = 'threePhase'
    '''
    Three phases
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PhaseShuntConnectionKind(Enum):
    '''
    The configuration of phase connections for a single terminal device such
    as a load or capacitor.
    '''

    D = 'D'
    '''
    Delta connection.
    '''
    
    G = 'G'
    '''
    Ground connection; use when explicit connection to ground needs to
    be expressed in combination with the phase code, such as for electrical
    wire/cable or for meters.
    '''
    
    I = 'I'
    '''
    Independent winding, for single-phase connections.
    '''
    
    Y = 'Y'
    '''
    Wye connection.
    '''
    
    Yn = 'Yn'
    '''
    Wye, with neutral brought out for grounding.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PinDCTerminalKind(Enum):
    '''
    The kind of quantities that can serve as an input value for the DCTerminal
    pin.
    '''

    current = 'current'
    '''
    Direct current in the DCTerminal.
    '''
    
    voltage = 'voltage'
    '''
    Direct current voltage in the DCTerminal.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PinPowerTransferCorridorKind(Enum):
    '''
    The kind of quantities that can serve as an input value for the PowerTransferCorridor
    pin.
    '''

    activePower = 'activePower'
    '''
    Active power in the branch group.
    '''
    
    reactivePower = 'reactivePower'
    '''
    Reactive power in the branch group.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PinTerminalKind(Enum):
    '''
    The kind of quantities that can serve as an input value for the pin.
    '''

    activePower = 'activePower'
    '''
    Active power on the Terminal.
    '''
    
    apparentPower = 'apparentPower'
    '''
    Apparent power on the Terminal.
    '''
    
    current = 'current'
    '''
    Current on the Terminal.
    '''
    
    reactivePower = 'reactivePower'
    '''
    Reactive power on the Terminal.
    '''
    
    voltageAngle = 'voltageAngle'
    '''
    Voltage angle on the Terminal.
    '''
    
    voltageMagnitude = 'voltageMagnitude'
    '''
    Voltage magnitude on the Terminal.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PipeBusbarKind(Enum):
    '''
    Kind of pipe busbar
    '''

    Schedule40 = 'Schedule40'
    '''
    Size Schedule 40
    '''
    
    Schedule80 = 'Schedule80'
    '''
    Size Schedule 80
    '''
    
    other = 'other'
    '''
    Other
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PoleBaseKind(Enum):
    '''
    Kind of base for poles.
    '''

    asphalt = 'asphalt'
    '''
    '''
    
    cement = 'cement'
    '''
    '''
    
    dirt = 'dirt'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    unknown = 'unknown'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PolePreservativeKind(Enum):
    '''
    Preservative kind for poles.
    '''

    cellon = 'cellon'
    '''
    '''
    
    chemonite = 'chemonite'
    '''
    '''
    
    creosote = 'creosote'
    '''
    '''
    
    naphthena = 'naphthena'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    penta = 'penta'
    '''
    '''
    
    unknown = 'unknown'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PoleTreatmentKind(Enum):
    '''
    Kind of treatment for poles.
    '''

    butt = 'butt'
    '''
    '''
    
    full = 'full'
    '''
    '''
    
    grayStain = 'grayStain'
    '''
    '''
    
    greenStain = 'greenStain'
    '''
    '''
    
    natural = 'natural'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    penta = 'penta'
    '''
    '''
    
    unknown = 'unknown'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PotentialTransformerKind(Enum):
    '''
    The construction kind of the potential transformer.
    '''

    capacitiveCoupling = 'capacitiveCoupling'
    '''
    The potential transformer is using capacitive coupling to create secondary
    voltage.
    '''
    
    inductive = 'inductive'
    '''
    The potential transformer is using induction coils to create secondary
    voltage.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PowerElectricalChemicalUnitKind(Enum):
    '''
    Kind of power electrical chemical unit.
    '''

    electrolyticCell = 'electrolyticCell'
    '''
    An electrolytic cell is an electrochemical cell that drives a non-spontaneous
    redox reaction through the application of electrical energy. Example
    are the decomposition of water into hydrogen and oxygen.
    '''
    
    fuelCell = 'fuelCell'
    '''
    A fuel cell is an electrochemical cell that converts the chemical energy
    from a fuel into electricity through an electrochemical reaction of
    hydrogen fuel with oxygen or another oxidizing agent.
    '''
    
    other = 'other'
    '''
    Other type of cell used in chemical reactions.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PowerElectronicsGateKind(Enum):
    '''
    Type of power electronics component used to control MW and MVAR
    '''

    gto = 'gto'
    '''
    Gate Turn-off Thyristor
    '''
    
    iegt = 'iegt'
    '''
    Injection Enhanced Gate Transistor
    '''
    
    igbt = 'igbt'
    '''
    Insulated-Gate Bipolar Transistor
    '''
    
    igct = 'igct'
    '''
    Integrated Gate Commutated Thyristor
    '''
    
    other = 'other'
    '''
    Other
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PowerFrequencyControlKind(Enum):
    '''
    Kinds of power frequency control modes.
    '''

    activePower = 'activePower'
    '''
    Active power control mode.
    '''
    
    activePowerAndFrequency = 'activePowerAndFrequency'
    '''
    Active power and frequency control mode.
    '''
    
    frequency = 'frequency'
    '''
    Frequency control mode.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PriceTypeKind(Enum):
    '''
    Value of this enumeration for different prices include "total" for the
    complete/full/all-in price, "congestion" for the congestion cost associated
    with the total price, the "loss" for the loss price associated with the
    total price, "capacity" for prices related to installed or reserved capacity,
    "mileage" for use-based accounting, "system" for system-wide/copper-plate
    prices, and "delivery" for distribution-based prices.
    '''

    capacity = 'capacity'
    '''
    '''
    
    congestion = 'congestion'
    '''
    '''
    
    delivery = 'delivery'
    '''
    '''
    
    loss = 'loss'
    '''
    '''
    
    mileage = 'mileage'
    '''
    '''
    
    system = 'system'
    '''
    '''
    
    total = 'total'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PriorityKind(Enum):
    '''
    Priority categorization for loads associated with distributed resources.
    '''

    high = 'high'
    '''
    High priority categorization for loads associated with distributed
    resources.
    '''
    
    low = 'low'
    '''
    Low priority categorization for loads associated with distributed resources.
    '''
    
    medium = 'medium'
    '''
    Medium priority categorization for loads associated with distributed
    resources.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ProcedureKind(Enum):
    '''
    Kind of procedure.
    '''

    diagnosis = 'diagnosis'
    '''
    Diagnosis procedure.
    '''
    
    inspection = 'inspection'
    '''
    Inspection procedure.
    '''
    
    maintenance = 'maintenance'
    '''
    Maintenance procedure.
    '''
    
    other = 'other'
    '''
    Other procedure.
    '''
    
    test = 'test'
    '''
    Test procedure.
    '''
    
@stereotype(CIMStereotype.enumeration)
class ProgrammingLanguageKind(Enum):
    '''
    Enumeration of programming languages.
    '''

    C = 'C'
    '''
    '''
    
    Delphi = 'Delphi'
    '''
    '''
    
    Fortran = 'Fortran'
    '''
    '''
    
    Go = 'Go'
    '''
    '''
    
    Java = 'Java'
    '''
    '''
    
    JavaScript = 'JavaScript'
    '''
    '''
    
    Julia = 'Julia'
    '''
    '''
    
    Lua = 'Lua'
    '''
    '''
    
    Matlab = 'Matlab'
    '''
    '''
    
    Modelica = 'Modelica'
    '''
    Modelica is an object-oriented, declarative, multi-domain modeling
    language for component-oriented modeling of complex systems, e.g.,
    systems containing mechanical, electrical, electronic, hydraulic, thermal,
    control, electric power or process-oriented subcomponents.
    '''
    
    PHP = 'PHP'
    '''
    '''
    
    PLCopen = 'PLCopen'
    '''
    PLCopen as defined within IEC 61131-3.
    '''
    
    Pascal = 'Pascal'
    '''
    '''
    
    Perl = 'Perl'
    '''
    '''
    
    Python = 'Python'
    '''
    '''
    
    R = 'R'
    '''
    '''
    
    Rust = 'Rust'
    '''
    '''
    
    SQL = 'SQL'
    '''
    '''
    
    StructuredText = 'StructuredText'
    '''
    StructuredText (ST or STX) as defined within IEC 61131-3.
    '''
    
    Swift = 'Swift'
    '''
    '''
    
    VBA = 'VBA'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ProtectionFunctionRoleKind(Enum):
    '''
    This enumeration class is
    '''

    backupProtection = 'backupProtection'
    '''
    The backup protection part in the protection scheme.
    '''
    
    functionBlockCombination = 'functionBlockCombination'
    '''
    This literal express that the instance of ProtectionFunction is a set
    of several protection function blocks in the main protection part or
    the backup protection part.
    '''
    
    mainProtection = 'mainProtection'
    '''
    The main protection part in the protection scheme.
    '''
    
    scheme = 'scheme'
    '''
    This riteral refers to a protection system composed of one or more
    protection relay elements.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ProtectionFunctionSchemeKInd(Enum):
    '''
    '''

    abnormalFrequencyProtection = 'abnormalFrequencyProtection'
    '''
    The abnormal frequency protection.
    '''
    
    busbarProtection = 'busbarProtection'
    '''
    The busbar protection.
    '''
    
    distributionLineProtection = 'distributionLineProtection'
    '''
    The distribution line protection.
    '''
    
    generatorProtection = 'generatorProtection'
    '''
    The generator protection.
    '''
    
    other = 'other'
    '''
    '''
    
    outOfStepProtection = 'outOfStepProtection'
    '''
    The out-of-step protection.
    '''
    
    powerTransformerProtetion = 'powerTransformerProtetion'
    '''
    The power transformer protection.
    '''
    
    transmissionLineProtection = 'transmissionLineProtection'
    '''
    The transmission line protection.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ProtectionOperatingQuantityKind(Enum):
    '''
    Enumeration to express the operating quantity that a protection or protection-related
    function block operates on. The items in the enumeration only make sense
    if the phases attribute of the function blocks is ABC.
    Items �zeroSequenceTimesThree� and �negativeSequenceTimesThree� are options
    that some relays typically use to skip a division by three in the component
    calculation.
    '''

    maxPhase = 'maxPhase'
    '''
    Maximum of ABC phase quantities.
    '''
    
    maxPhasePhase = 'maxPhasePhase'
    '''
    Maximum of phase-phase quantities (AB, BC, CA). Makes sense only for
    the over-voltage protection function block when operating over phase-phase
    quantities.
    '''
    
    minPhase = 'minPhase'
    '''
    Minimum of ABC phase quantities.
    '''
    
    minPhasePhase = 'minPhasePhase'
    '''
    Minimum of phase-phase quantities (AB, BC, CA). Makes sense only for
    the under-voltage protection function block when operating over phase-phase
    quantities.
    '''
    
    negativeSequence = 'negativeSequence'
    '''
    Negative sequence operating quantity.
    '''
    
    negativeSequenceTimesThree = 'negativeSequenceTimesThree'
    '''
    Operating quantity defined as 3I2 or 3V2.
    '''
    
    positiveSequence = 'positiveSequence'
    '''
    Positive sequence operating quantity.
    '''
    
    zeroSequence = 'zeroSequence'
    '''
    Zero sequence operating quantity.
    '''
    
    zeroSequenceTimesThree = 'zeroSequenceTimesThree'
    '''
    Operating quantity defined as 3I0 or 3V0.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ProtectionOperationCharacteristicKind(Enum):
    '''
    This enumeration class expresses types of protection operation characteristic
    curves.
    '''

    definiteTime = 'definiteTime'
    '''
    This literals can be used to represent non-standard definite time characteristics.
    '''
    
    iecCurveA = 'iecCurveA'
    '''
    IEC Curve A is the curve type of standard inverse (SI).
    '''
    
    iecCurveB = 'iecCurveB'
    '''
    IEC Curve B is the curve type of very inverse (VI).
    '''
    
    iecCurveC = 'iecCurveC'
    '''
    IEC Curve C is the curve type of extremely inverse (EI).
    '''
    
    iecCurveLTI = 'iecCurveLTI'
    '''
    IEC LTI is the curve type of long-term inverse (LTI).
    '''
    
    ieeeExtremelyInverse = 'ieeeExtremelyInverse'
    '''
    ieee extremely inverse.
    '''
    
    ieeeModerateInverse = 'ieeeModerateInverse'
    '''
    IEEE moderate inverse.
    '''
    
    ieeeVeryInverse = 'ieeeVeryInverse'
    '''
    ieee very inverse.
    '''
    
    inverseTime = 'inverseTime'
    '''
    This literals can be used to represent non-standard inverse time characteristics.
    '''
    
    inversedDefiniteTime = 'inversedDefiniteTime'
    '''
    This literals can be used to represent non-standard inversed definite
    time characteristics.
    '''
    
    other = 'other'
    '''
    This literal is used to express characteristics that are different
    from those of the aforementioned literals
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PurposeFlagType(Enum):
    '''
    MPM Purpose Flag, for example:
    Nature of threshold data:
    'M' - Mitigation threshold
    'R' - Reporting threshold
    '''

    M = 'M'
    '''
    '''
    
    R = 'R'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RampCurveType(Enum):
    '''
    For example:
    0 - Fixed ramp rate independent of rate function unit MW output
    1 - Static ramp rates as a function of unit MW output only
    2 - Dynamic ramp rates as a function of unit MW output and ramping time
    '''

    _0 = '_0'
    '''
    Fixed ramp rate independent of rate function unit MW output
    '''
    
    _1 = '_1'
    '''
    Static ramp rates as a function of unit MW output only
    '''
    
    _2 = '_2'
    '''
    Dynamic ramp rates as a function of unit MW output and ramping time
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RampingPrincipleKind(Enum):
    '''
    Kind of ramping principle.
    '''

    continuous = 'continuous'
    '''
    Continuous ramping principle is applied between two scheduled time
    point. For instance, from 10 MW to 70 MW over one hour the change is
    1 MW/min.
    '''
    
    fifteenMinutes = 'fifteenMinutes'
    '''
    Fifteen minutes ramping principle. Ramping starts 15 minutes before
    the schedule time point and ends 15 minutes after. For instance, if
    the schedule time point is 19:30h it starts at 19:15h and ends at 19:45h.
    '''
    
    fiveMinutes = 'fiveMinutes'
    '''
    Five minutes ramping principle. Ramping starts five minutes before
    the schedule time point and ends five minutes after. For instance,
    if the schedule time point is 19:30h it starts at 19:25h and ends at
    19:35h.
    '''
    
    maxContinuous = 'maxContinuous'
    '''
    Maximum continuous ramping principle. The schedule is kept as long
    as possible and the maximum ramping rate is used to get from one point
    to another, symmetrically around the schedule time points. For example,
    there is 40 MW change in the schedule the maximum ramp rate is 20 MW/min
    the ramping starts 1 min before (e.g. 19:29h) and finishes 1 min after
    (e.g. 19:31h).
    '''
    
    tenMinutes = 'tenMinutes'
    '''
    Ten minutes ramping principle. Ramping starts 10 minutes before the
    schedule time point and ends 10 minutes after. For instance, if the
    schedule time point is 19:30h it starts at 19:20h and ends at 19:40h.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RandomisationKind(Enum):
    '''
    Kind of randomisation to be applied to control the timing of end device
    control commands and/or the definition of demand response and load control
    events. Value other than 'none' is typically used to mitigate potential
    deleterious effects of simultaneous operation of multiple devices.
    '''

    default = 'default'
    '''
    Randomisation of start and/or end times involving the operation of
    one or more devices is controlled by default settings for the device(s).
    '''
    
    end = 'end'
    '''
    End time of an event or control action affecting one or more devices
    is randomised to prevent simultaneous operation.
    '''
    
    none = 'none'
    '''
    Neither the start time nor the end time of an event or control action
    affecting one or more devices is randomised.
    '''
    
    start = 'start'
    '''
    Start time of an event or control action affecting one or more multiple
    devices is randomised.
    '''
    
    startAndEnd = 'startAndEnd'
    '''
    Both the start time and the end time of an event or control action
    affecting one or more devices are randomised to prevent simultaneous
    operation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ReactorCoreKind(Enum):
    '''
    '''

    air = 'air'
    '''
    '''
    
    concrete = 'concrete'
    '''
    '''
    
    none = 'none'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    steel = 'steel'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ReactorInsulationMediumKind(Enum):
    '''
    '''

    air = 'air'
    '''
    '''
    
    oil = 'oil'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ReadingReasonKind(Enum):
    '''
    Reason for the reading being taken.
    '''

    billing = 'billing'
    '''
    Reading(s) taken or to be taken in response to a billing-related inquiry
    by a customer or other party. A variant of 'inquiry'.
    '''
    
    demandReset = 'demandReset'
    '''
    Reading(s) taken or to be taken in conjunction with the resetting of
    one or more demand registers in a meter.
    '''
    
    inquiry = 'inquiry'
    '''
    Reading(s) taken or to be taken in response to an inquiry by a customer
    or other party.
    '''
    
    installation = 'installation'
    '''
    Reading(s) taken or to be taken in conjunction with installation of
    a meter.
    '''
    
    loadManagement = 'loadManagement'
    '''
    Reading(s) taken or to be taken to support management of loads on distribution
    networks or devices.
    '''
    
    loadResearch = 'loadResearch'
    '''
    Reading(s) taken or to be taken to support research and analysis of
    loads on distribution networks or devices.
    '''
    
    moveIn = 'moveIn'
    '''
    Reading(s) taken or to be taken in conjunction with a customer move-in
    event.
    '''
    
    moveOut = 'moveOut'
    '''
    Reading(s) taken or to be taken in conjunction with a customer move-out
    event.
    '''
    
    other = 'other'
    '''
    Reading(s) taken or to be taken for some other reason or purpose.
    '''
    
    removal = 'removal'
    '''
    Reading(s) taken or to be taken in conjunction with removal of a meter.
    '''
    
    serviceConnect = 'serviceConnect'
    '''
    Reading(s) taken or to be taken in conjunction with a connection or
    re-connection of service.
    '''
    
    serviceDisconnect = 'serviceDisconnect'
    '''
    Reading(s) taken or to be taken in conjunction with a disconnection
    of service.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RegulatingControlModeKind(Enum):
    '''
    The kind of regulation model. For example regulating voltage, reactive
    power, active power, etc.
    '''

    activePower = 'activePower'
    '''
    Active power is specified.
    '''
    
    admittance = 'admittance'
    '''
    Admittance is specified.
    '''
    
    currentFlow = 'currentFlow'
    '''
    Current flow is specified.
    '''
    
    powerFactor = 'powerFactor'
    '''
    Power factor is specified.
    '''
    
    reactivePower = 'reactivePower'
    '''
    Reactive power is specified.
    '''
    
    temperature = 'temperature'
    '''
    Control switches on/off based on the local temperature (i.e., a thermostat).
    '''
    
    timeScheduled = 'timeScheduled'
    '''
    Control switches on/off by time of day. The times may change on the
    weekend, or in different seasons.
    '''
    
    voltage = 'voltage'
    '''
    Voltage is specified.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RemedialActionSchemeKind(Enum):
    '''
    Classification of Remedial Action Scheme.
    '''

    rasp = 'rasp'
    '''
    Remedial Action Schema Plan (RASP). The triggering conditions are met
    through calculation or manual intervention.
    '''
    
    sips = 'sips'
    '''
    System Integrity Protection Scheme (SIPS). The triggering conditions
    are met through field measurements.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RemoteUnitType(Enum):
    '''
    Type of remote unit.
    '''

    ControlCenter = 'ControlCenter'
    '''
    Control centre.
    '''
    
    IED = 'IED'
    '''
    Intelligent electronic device (IED).
    '''
    
    RTU = 'RTU'
    '''
    Remote terminal unit.
    '''
    
    SubstationControlSystem = 'SubstationControlSystem'
    '''
    Substation control system.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ResourceAssnType(Enum):
    '''
    For example:
    Asset Owner Sink designator for use by CRR
    Asset Owner Source designator for use by CRR
    Reliability Must Run
    Scheduling Coordinator
    Load Serving Entity
    '''

    CSNK = 'CSNK'
    '''
    '''
    
    CSRC = 'CSRC'
    '''
    '''
    
    LSE = 'LSE'
    '''
    '''
    
    RMR = 'RMR'
    '''
    '''
    
    SC = 'SC'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ResourceCapacityType(Enum):
    '''
    Resource capacity type.
    '''

    FO = 'FO'
    '''
    Flexible Offer.
    '''
    
    MO = 'MO'
    '''
    Must Offer.
    '''
    
    NR = 'NR'
    '''
    Non spinning reserve.
    '''
    
    RA = 'RA'
    '''
    Resource Adequacy.
    '''
    
    RD = 'RD'
    '''
    Regulation Down.
    '''
    
    RMR = 'RMR'
    '''
    Reliability Must Run.
    '''
    
    RU = 'RU'
    '''
    Regulation Up.
    '''
    
    SR = 'SR'
    '''
    Spinning reserve.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ResourceCertificationKind(Enum):
    '''
    Types used for resource certification.
    '''

    BLACKSTART = 'BLACKSTART'
    '''
    Black start
    '''
    
    Capacity = 'Capacity'
    '''
    The resource is certified for capacity.
    '''
    
    DemandSideResponse = 'DemandSideResponse'
    '''
    Demand Side Reponse (DSR)
    '''
    
    Energy = 'Energy'
    '''
    The resource is certified for energy.
    '''
    
    IntermittentResource = 'IntermittentResource'
    '''
    Intermittent resource
    '''
    
    NonSpinningReserve = 'NonSpinningReserve'
    '''
    Non Spinning Reserve (NR, NONSPIN)
    '''
    
    RegulationDown = 'RegulationDown'
    '''
    Regulation Down (RD, REGDN)
    '''
    
    RegulationUp = 'RegulationUp'
    '''
    Regulation Up (RU, REGUP)
    '''
    
    ReliabilityMustRun = 'ReliabilityMustRun'
    '''
    Reliability Must Run (RMR)
    '''
    
    ReliabilityUnitCommitment = 'ReliabilityUnitCommitment'
    '''
    Reliability unit commitment (RUC)
    '''
    
    SpinningReserve = 'SpinningReserve'
    '''
    Spinning Reserve (SR, RRSPIN)
    '''
    
    SynchronousCondenser = 'SynchronousCondenser'
    '''
    Synchronous Condenser (SYNCCOND)
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ResourceRegistrationStatus(Enum):
    '''
    Types of resource registration status.
    '''

    Active = 'Active'
    '''
    Resource registration is active
    '''
    
    Decommissioned = 'Decommissioned'
    '''
    Resource registration status is decommissioned
    '''
    
    Inactive = 'Inactive'
    '''
    Resource registration status is inactive.
    '''
    
    Mothballed = 'Mothballed'
    '''
    Resource registration has been suspended
    '''
    
    Planned = 'Planned'
    '''
    Registration status is in the planning stage
    '''
    
@stereotype(CIMStereotype.enumeration)
class ResponsibilityKind(Enum):
    '''
    The kinds of responsibilities that are assigned. Mandatory and optional
    responsibilities are examples.
    '''

    mandatory = 'mandatory'
    '''
    A mandatory requirement.
    '''
    
    optional = 'optional'
    '''
    An optional requirement.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RetiredReasonKind(Enum):
    '''
    Reason asset retired.
    '''

    environmental = 'environmental'
    '''
    Retired due to environmental reasons.
    '''
    
    excessiveMaintenance = 'excessiveMaintenance'
    '''
    Retired due to excessive maintainance issues.
    '''
    
    facilitiesUpgrade = 'facilitiesUpgrade'
    '''
    Retired due to facility upgrade.
    '''
    
    failed = 'failed'
    '''
    Retired because of failure.
    '''
    
    obsolescence = 'obsolescence'
    '''
    Retired due to obsolescence.
    '''
    
    other = 'other'
    '''
    Retired due to other reasons.
    '''
    
    sold = 'sold'
    '''
    Retired and sold.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RevenueKind(Enum):
    '''
    Accounting classification of the type of revenue collected for the customer
    agreement, typically used to break down accounts for revenue accounting.
    '''

    commercial = 'commercial'
    '''
    Commercial revenue.
    '''
    
    industrial = 'industrial'
    '''
    Industrial revenue.
    '''
    
    irrigation = 'irrigation'
    '''
    Irrigation revenue.
    '''
    
    nonResidential = 'nonResidential'
    '''
    Non-residential revenue.
    '''
    
    other = 'other'
    '''
    Other revenue kind.
    '''
    
    residential = 'residential'
    '''
    Residential revenue.
    '''
    
    streetLight = 'streetLight'
    '''
    Streetlight revenue.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RiskScoreKind(Enum):
    '''
    Types of risk scores.
    '''

    customerRisk = 'customerRisk'
    '''
    Customer risk score.
    '''
    
    financialRisk = 'financialRisk'
    '''
    Financial risk score.
    '''
    
    safetyRisk = 'safetyRisk'
    '''
    Safety risk score.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class RotatingMachineControlModeKind(Enum):
    '''
    Kind of rotating machine controller mode.
    '''

    activePower = 'activePower'
    '''
    Active power is specified.
    '''
    
    powerFactor = 'powerFactor'
    '''
    Power factor is specified.
    '''
    
    reactivePower = 'reactivePower'
    '''
    Reactive power control.
    '''
    
    voltage = 'voltage'
    '''
    Voltage control.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class SSSCControlModeKind(Enum):
    '''
    Control modes of the Static Synchronous Series Compensator (SSSC).
    '''

    currentDroop = 'currentDroop'
    '''
    <font color="#636671">The device injects a voltage proportional to
    the difference between the line current and the target value of the
    CurrentDroopControlFunction. There are capacitive and inductive operational
    regions.</font>
    '''
    
    effectiveReactance = 'effectiveReactance'
    '''
    <font color="#636671">The device injects a voltage proportional to
    the line current to achieve the specified target value defined by the
    ImpedanceControlFunction. The voltage will vary according to the line
    current level.</font>
    '''
    
    monitoring = 'monitoring'
    '''
    <font color="#636671">The device bypasses and a voltage injection is
    close to zero. In monitoring mode current is monitored.</font>
    '''
    
    voltageInjection = 'voltageInjection'
    '''
    <font color="#636671">The device injects a fixed voltage that is either
    inductive or capacitive according to the specified target value of
    the VoltageInjectionControlFunction. The effective reactance varies
    according to the flow of the line current.</font>
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class STATCOMKind(Enum):
    '''
    This enumeration defines the basic architecture of the STATCOM.
    There are two basic types:
    Voltage Source Converter controlling a DC Capacitor and a Current Source
    Converter controlling a DC Inductor.
    '''

    cscShuntInductor = 'cscShuntInductor'
    '''
    Current Source Converter with a DC inductor
    '''
    
    other = 'other'
    '''
    Other
    '''
    
    vscShuntCapacitor = 'vscShuntCapacitor'
    '''
    Voltage Source Converter with a DC capacitor
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class SVCControlMode(Enum):
    '''
    Static VAr Compensator control mode.
    '''

    reactivePower = 'reactivePower'
    '''
    Reactive power control.
    '''
    
    voltage = 'voltage'
    '''
    Voltage control.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class SVCReactiveControlKind(Enum):
    '''
    An SVC can either be set to control the voltage of a bus or provide contant
    Mvar to the bus.
    '''

    constantMVARFlow = 'constantMVARFlow'
    '''
    The SVC will maintain a constant Mvar flow to the bus regardless of
    voltage.
    '''
    
    constantVoltage = 'constantVoltage'
    '''
    The SVC will retain a constant voltage by varying the reactive power
    flow to the bus.
    '''
    
    other = 'other'
    '''
    Other
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class SampleContainerType(Enum):
    '''
    Types of sample containers.
    '''

    glassCan = 'glassCan'
    '''
    Glass can container.
    '''
    
    metalCan = 'metalCan'
    '''
    Metal can container.
    '''
    
    syringe = 'syringe'
    '''
    Syringe.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ScaleKind(Enum):
    '''
    Kinds of scaling.
    '''

    exponential = 'exponential'
    '''
    Exponential scale.
    '''
    
    linear = 'linear'
    '''
    Linear scale.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class SealConditionKind(Enum):
    '''
    Kind of seal condition.
    '''

    broken = 'broken'
    '''
    Seal is broken.
    '''
    
    locked = 'locked'
    '''
    Seal is locked.
    '''
    
    missing = 'missing'
    '''
    Seal is missing.
    '''
    
    open = 'open'
    '''
    Seal is open.
    '''
    
    other = 'other'
    '''
    Other kind of seal condition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class SealKind(Enum):
    '''
    Kind of seal.
    '''

    lead = 'lead'
    '''
    Lead seal.
    '''
    
    lock = 'lock'
    '''
    Lock seal.
    '''
    
    other = 'other'
    '''
    Other kind of seal.
    '''
    
    steel = 'steel'
    '''
    Steel seal.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ServiceKind(Enum):
    '''
    Kind of service.
    '''

    air = 'air'
    '''
    Air service.
    '''
    
    electricity = 'electricity'
    '''
    Electricity service.
    '''
    
    gas = 'gas'
    '''
    Gas service.
    '''
    
    heat = 'heat'
    '''
    Heat service.
    '''
    
    heatingFluid = 'heatingFluid'
    '''
    Heating fluid service.
    '''
    
    internet = 'internet'
    '''
    Internet service.
    '''
    
    naturalGas = 'naturalGas'
    '''
    Natural gas service.
    '''
    
    other = 'other'
    '''
    Other kind of service.
    '''
    
    propane = 'propane'
    '''
    Propane service.
    '''
    
    rates = 'rates'
    '''
    Rates (e.g. tax, charge, toll, duty, tariff, etc.) service.
    '''
    
    refuse = 'refuse'
    '''
    Refuse (waster) service.
    '''
    
    sewerage = 'sewerage'
    '''
    Sewerage service.
    '''
    
    steam = 'steam'
    '''
    Steam service.
    '''
    
    time = 'time'
    '''
    Time service.
    '''
    
    tvLicence = 'tvLicence'
    '''
    TV license service.
    '''
    
    water = 'water'
    '''
    Water service.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ServiceMultiplierKind(Enum):
    '''
    Kind of service multiplier.
    '''

    ctRatio = 'ctRatio'
    '''
    Current transformer ratio used to convert associated quantities to
    real measurements.
    '''
    
    ptRatio = 'ptRatio'
    '''
    Voltage transformer ratio used to convert associated quantities to
    real measurements.
    '''
    
    transformerRatio = 'transformerRatio'
    '''
    Product of the CT ratio and PT ratio.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ShortCircuitRotorKind(Enum):
    '''
    Type of rotor, used by short circuit applications.
    '''

    salientPole1 = 'salientPole1'
    '''
    Salient pole 1 in IEC 60909.
    '''
    
    salientPole2 = 'salientPole2'
    '''
    Salient pole 2 in IEC 60909.
    '''
    
    turboSeries1 = 'turboSeries1'
    '''
    Turbo Series 1 in IEC 60909.
    '''
    
    turboSeries2 = 'turboSeries2'
    '''
    Turbo series 2 in IEC 60909.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
@stereotype(CIMStereotype.add)
class SinglePhaseKind(Enum):
    '''
    Enumeration of phase identifiers used to designate the specific phase of
    conducting equipment modelled as individual unbalanced phases.
    Allows designation of specific phases for transmission and distribution
    equipment, circuits and loads.
    '''

    A = 'A'
    '''
    Phase A.
    '''
    
    B = 'B'
    '''
    Phase B.
    '''
    
    C = 'C'
    '''
    Phase C.
    '''
    
    N = 'N'
    '''
    Neutral.
    '''
    
    s1 = 's1'
    '''
    Secondary phase 1.
    '''
    
    s2 = 's2'
    '''
    Secondary phase 2.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.deprecated)
@stereotype(CIMStereotype.Attribute)
class SkillLevelKind(Enum):
    '''
    Kind of skill level.
    '''

    apprentice = 'apprentice'
    '''
    '''
    
    expert = 'expert'
    '''
    Expert (or Advanced) level refers to individuals who have achieved
    a high level of competence and mastery in their field. They have extensive
    knowledge, experience, and specialized skills. They are capable of
    handling complex and challenging tasks, problem-solving, and providing
    leadership and guidance to others.
    '''
    
    master = 'master'
    '''
    '''
    
    novice = 'novice'
    '''
    Novice (or Beginner) level represents individuals who are new to the
    field and have limited knowledge and experience. They are in the early
    stages of skill development and require guidance, instruction, and
    supervision to perform tasks effectively.
    '''
    
    other = 'other'
    '''
    A kind of skill level that is not enumerated.
    '''
    
    proficient = 'proficient'
    '''
    Proficient (or Intermediate) level signifies individuals who have gained
    a foundational understanding of the field and possess a moderate level
    of expertise. They can perform tasks independently with a reasonable
    level of competency and are capable of handling routine and moderately
    complex assignments.
    '''
    
    specialist = 'specialist'
    '''
    Specialist level represents individuals who have achieved an exceptional
    level of expertise and focus in a specific area within the field. They
    possess deep knowledge, advanced skills, and often have significant
    experience in a particular niche or specialization. Specialists are
    sought after for their unique capabilities and may be considered authorities
    or thought leaders in their field.
    '''
    
    standard = 'standard'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class Source(Enum):
    '''
    Source gives information related to the origin of a value.
    '''

    DEFAULTED = 'DEFAULTED'
    '''
    The value contains a default value.
    '''
    
    PROCESS = 'PROCESS'
    '''
    The value is provided by input from the process I/O or being calculated
    from some function.
    '''
    
    SUBSTITUTED = 'SUBSTITUTED'
    '''
    The value is provided by input of an operator or by an automatic source.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class StreetlightLampKind(Enum):
    '''
    Kind of lamp for the streetlight.
    '''

    highPressureSodium = 'highPressureSodium'
    '''
    '''
    
    mercuryVapor = 'mercuryVapor'
    '''
    '''
    
    metalHalide = 'metalHalide'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class StructureMaterialKind(Enum):
    '''
    Kind of material used for structures.
    '''

    concrete = 'concrete'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    steel = 'steel'
    '''
    '''
    
    wood = 'wood'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class StructureSupportKind(Enum):
    '''
    Kind of structure support.
    '''

    anchor = 'anchor'
    '''
    '''
    
    guy = 'guy'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class SubstationControllerModeKind(Enum):
    '''
    Kind of substation controller mode.
    '''

    activePower = 'activePower'
    '''
    Active power control is the primary control of the substation..
    '''
    
    reactivePower = 'reactivePower'
    '''
    Reactive power control is the primary control of the substation.
    '''
    
    voltage = 'voltage'
    '''
    Voltage control is the primary control of the substation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class SynchronousMachineKind(Enum):
    '''
    Synchronous machine type.
    '''

    condenser = 'condenser'
    '''
    Indicates the synchronous machine can operate as a condenser.
    '''
    
    generator = 'generator'
    '''
    Indicates the synchronous machine can operate as a generator.
    '''
    
    generatorOrCondenser = 'generatorOrCondenser'
    '''
    Indicates the synchronous machine can operate as a generator or as
    a condenser.
    '''
    
    generatorOrCondenserOrMotor = 'generatorOrCondenserOrMotor'
    '''
    Indicates the synchronous machine can operate as a generator or as
    a condenser or as a motor.
    '''
    
    generatorOrMotor = 'generatorOrMotor'
    '''
    Indicates the synchronous machine can operate as a generator or as
    a motor.
    '''
    
    motor = 'motor'
    '''
    Indicates the synchronous machine can operate as a motor.
    '''
    
    motorOrCondenser = 'motorOrCondenser'
    '''
    Indicates the synchronous machine can operate as a motor or as a condenser.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class SynchronousMachineOperatingMode(Enum):
    '''
    Synchronous machine operating mode.
    '''

    condenser = 'condenser'
    '''
    Operating as condenser.
    '''
    
    generator = 'generator'
    '''
    Operating as generator.
    '''
    
    motor = 'motor'
    '''
    Operating as motor.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TAPPIStandardEditionKind(Enum):
    '''
    List of editions for TAPPI standards.
    '''

    _2009 = '_2009'
    '''
    2009 standard edition.
    '''
    
    none = 'none'
    '''
    No standard edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown standard edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TAPPIStandardKind(Enum):
    '''
    List of TAPPI standards.
    '''

    T494 = 'T494'
    '''
    Tensile properties of paper and paperboard(using constant rate of elongation
    apparatus), Test Method TAPPI/ANSI T 494 om-13.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TCSCControlModeKind(Enum):
    '''
    Kind of TCSC control mode.
    '''

    activePower = 'activePower'
    '''
    Control is active power.
    '''
    
    current = 'current'
    '''
    Control is current.
    '''
    
    impedance = 'impedance'
    '''
    Control is impedance.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TRType(Enum):
    '''
    Transmission Contract Right type -for example:
    individual or chain of contract rights
    '''

    CHAIN = 'CHAIN'
    '''
    TR chain
    '''
    
    INDIVIDUAL = 'INDIVIDUAL'
    '''
    Individual TR
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TelephoneNumberKind(Enum):
    '''
    The kind of intended uss of a telephone number.
    '''

    fax = 'fax'
    '''
    A telephone number used to send or receive scanned printed materials
    over a telephone line or digital network.
    '''
    
    home = 'home'
    '''
    A telephone number used to contact a person at home.
    '''
    
    mobile = 'mobile'
    '''
    A telephone number used to make calls, send and receive text messages,
    and access data.
    '''
    
    other = 'other'
    '''
    The telephone number is other than indicated by the enumerations
    '''
    
    work = 'work'
    '''
    A telephone number used to contact a person at work or to contact an
    organisation.
    '''
    
@stereotype(CIMStereotype.enumeration)
class TelephonyKind(Enum):
    '''
    The kind of telephony technology or system telephone number is assigned
    to.
    '''

    cell = 'cell'
    '''
    A telephone number assigned to a cell phone and wireless cellular service.
    '''
    
    landline = 'landline'
    '''
    A telephone number assigned to a phone connected to a landline telephone
    network.
    '''
    
    other = 'other'
    '''
    The telephone number is assigned to telephony other than indicated
    by the enumerations.
    '''
    
    pager = 'pager'
    '''
    A telephone number assigned to a pager (a one-way communication device)
    used to receive short messages or alerts, typically via radio signals
    or telephone networks.
    '''
    
    voIP = 'voIP'
    '''
    A telephone number assigned to a Voice over Internet Protocol network.
    '''
    
    voicemail = 'voicemail'
    '''
    A telephone number assigned to a one-way communication device used
    to record and playback audio messages.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TerminalConnectionKind(Enum):
    '''
    The terminal connection of the capacitor cans (i.e. single bushing, double
    bushing, or triple bushing
    '''

    doubleBushing = 'doubleBushing'
    '''
    designed to be connected in series with several cans
    '''
    
    other = 'other'
    '''
    Other
    '''
    
    singleBushing = 'singleBushing'
    '''
    Phase to ground application
    '''
    
    tripleBushing = 'tripleBushing'
    '''
    Single can wired three phase to ground
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TestMethod(Enum):
    '''
    Possible test methods.
    '''

    _60567ByDisplacement = '_60567ByDisplacement'
    '''
    60567 by displacement method.
    '''
    
    _60567ByPartition = '_60567ByPartition'
    '''
    60567 by partition method.
    '''
    
    _60567ByVacuum = '_60567ByVacuum'
    '''
    60567 by vacuum method.
    '''
    
    _60970Automatic = '_60970Automatic'
    '''
    Automatic method.
    '''
    
    _60970Manual1 = '_60970Manual1'
    '''
    Manual method 1.
    '''
    
    _60970Manual2 = '_60970Manual2'
    '''
    Manual method 2.
    '''
    
    _61125A = '_61125A'
    '''
    61125A method.
    '''
    
    _61125B = '_61125B'
    '''
    61125B method.
    '''
    
    _61125C = '_61125C'
    '''
    61125C method.
    '''
    
    _62270AnnexA = '_62270AnnexA'
    '''
    62270 Annex A method.
    '''
    
    _62535AnnexA = '_62535AnnexA'
    '''
    62535 Annex A method.
    '''
    
    _62535Main = '_62535Main'
    '''
    62535 main method.
    '''
    
    D1275A = 'D1275A'
    '''
    D1275A method.
    '''
    
    D1275B = 'D1275B'
    '''
    D1275B method.
    '''
    
    D3612A = 'D3612A'
    '''
    D3612A method.
    '''
    
    D3612B = 'D3612B'
    '''
    D3612B method.
    '''
    
    D3612C = 'D3612C'
    '''
    D3612C method.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TestReason(Enum):
    '''
    Reason for test.
    '''

    postOilTreatment = 'postOilTreatment'
    '''
    Test after oil treatment.
    '''
    
    postOperationFault = 'postOperationFault'
    '''
    Test after operation fault.
    '''
    
    postRepair = 'postRepair'
    '''
    Test after repair.
    '''
    
    routine = 'routine'
    '''
    Routine test.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TestVariantKind(Enum):
    '''
    Test variants.
    '''

    _0C = '_0C'
    '''
    Testing done at temperature of 0�C.
    '''
    
    _100C = '_100C'
    '''
    Testing done at temperature of 100�C.
    '''
    
    _164hours = '_164hours'
    '''
    Measurements taken at 164 hours.
    '''
    
    _1mm = '_1mm'
    '''
    Specimen of 1 mm thickness used in testing.
    '''
    
    _25C = '_25C'
    '''
    Testing done at temperature of 25�C.
    '''
    
    _2mm = '_2mm'
    '''
    Specimen of 2 mm thickness used in testing.
    '''
    
    _30C = '_30C'
    '''
    Testing done at temperature of 30�C.
    '''
    
    _40C = '_40C'
    '''
    Testing done at temperature of 40�C.
    '''
    
    _72hours = '_72hours'
    '''
    Measurements taken at 72 hours.
    '''
    
    minus30C = 'minus30C'
    '''
    Testing done at temperature of -30�C.
    '''
    
    minus40C = 'minus40C'
    '''
    Testing done at temperature of -40�C.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TimeIntervalKind(Enum):
    '''
    '''

    D = 'D'
    '''
    '''
    
    M = 'M'
    '''
    '''
    
    Y = 'Y'
    '''
    '''
    
    h = 'h'
    '''
    '''
    
    m = 'm'
    '''
    '''
    
    s = 's'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TransformerApplicationKind(Enum):
    '''
    Classifications of network roles in which transformers can be deployed.
    The classifications are intended to reflect both criticality of transformer
    in network operations and typical usage experienced by transformer.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    distribution = 'distribution'
    '''
    Transformer between one distribution voltage level and another distribution
    voltage level.
    '''
    
    generatorStepUp = 'generatorStepUp'
    '''
    Transformer is generator step-up transformer.
    '''
    
    transmissionBusToBus = 'transmissionBusToBus'
    '''
    Transformer between bus at one transmission voltage level and a bus
    at another transmission voltage level.
    '''
    
    transmissionBusToDistribution = 'transmissionBusToDistribution'
    '''
    Transformer between bus at transmission voltage level and bus at distribution
    voltage level.
    '''
    
@stereotype(CIMStereotype.enumeration)
class TransformerCharacteristicCurveKind(Enum):
    '''
    This enumeration class expresses types of protection transformer time current
    characteristic curves.
    '''

    damageCurve = 'damageCurve'
    '''
    The curve for damage characteristics.
    '''
    
    inrushCurve = 'inrushCurve'
    '''
    The curve for protection coordination.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TransformerFailureReasonKind(Enum):
    '''
    Reason for transformer failure.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood. (PAB 2016/01/09).
    '''

    bushingFailure = 'bushingFailure'
    '''
    Bushing-caused failure.
    '''
    
    lossOfOil = 'lossOfOil'
    '''
    Loss-of-oil-caused faliure.
    '''
    
    oilRelatedFailure = 'oilRelatedFailure'
    '''
    Oil-related failure.
    '''
    
    poorOilQuality = 'poorOilQuality'
    '''
    Oil quality-related failure.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TransmissionModeKind(Enum):
    '''
    Transmission mode for end device display controls, applicable to premises
    area network (PAN) devices.
    '''

    anonymous = 'anonymous'
    '''
    Message transmission mode whereby messages or commands are broadcast
    to unspecified devices listening for such communications.
    '''
    
    both = 'both'
    '''
    Message transmission mode whereby messages or commands are sent by
    both 'normal' and 'anonymous' methods.
    '''
    
    normal = 'normal'
    '''
    Message transmission mode whereby messages or commands are sent to
    specific devices.
    '''
    
@stereotype(CIMStereotype.enumeration)
class TroubleCallKind(Enum):
    '''
    Describes the type of Trouble, based on customer input.
    '''

    lineDown = 'lineDown'
    '''
    The customer is reporting a line down
    '''
    
    powerOut = 'powerOut'
    '''
    The customer is reporting an outage.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class TroubleReportingKind(Enum):
    '''
    Kind of trouble reporting.
    '''

    call = 'call'
    '''
    Trouble call received by customer service representative.
    '''
    
    email = 'email'
    '''
    Trouble reported by email.
    '''
    
    ivr = 'ivr'
    '''
    Trouble reported through interactive voice response system.
    '''
    
    letter = 'letter'
    '''
    Trouble reported by letter.
    '''
    
    other = 'other'
    '''
    Trouble reported by other means.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class UKMinistryOfDefenceStandardEditionKind(Enum):
    '''
    List of editions for UK Ministry of Defence standards.
    '''

    Issue1 = 'Issue1'
    '''
    Issue 1 standard edition.
    '''
    
    none = 'none'
    '''
    No standard edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown standard edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class UKMinistryofDefenceStandardKind(Enum):
    '''
    List of UK Ministry of Defence standards.
    '''

    _0550Part65 = '_0550Part65'
    '''
    Ministry of Defence, Defence Standard 05-50 (Part 65)/Issue 1 METHODS
    FOR TESTING FUELS, LUBRICANTS AND ASSOCIATED PRODUCTS.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class UndergroundStructureKind(Enum):
    '''
    Kind of underground structure.
    '''

    burd = 'burd'
    '''
    '''
    
    enclosure = 'enclosure'
    '''
    '''
    
    handhole = 'handhole'
    '''
    '''
    
    manhole = 'manhole'
    '''
    '''
    
    pad = 'pad'
    '''
    '''
    
    pullbox = 'pullbox'
    '''
    '''
    
    subsurfaceEnclosure = 'subsurfaceEnclosure'
    '''
    '''
    
    trench = 'trench'
    '''
    '''
    
    tunnel = 'tunnel'
    '''
    '''
    
    vault = 'vault'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class UnitMultiplier(Enum):
    '''
    The unit multipliers defined for the CIM. When applied to unit symbols,
    the unit symbol is treated as a derived unit. Regardless of the contents
    of the unit symbol text, the unit symbol shall be treated as if it were
    a single-character unit symbol. Unit symbols should not contain multipliers,
    and it should be left to the multiplier to define the multiple for an entire
    data type.
    For example, if a unit symbol is "m2Pers" and the multiplier is "k", then
    the value is k(m**2/s), and the multiplier applies to the entire final
    value, not to any individual part of the value. This can be conceptualized
    by substituting a derived unit symbol for the unit type. If one imagines
    that the symbol "&#222;" represents the derived unit "m2Pers", then applying
    the multiplier "k" can be conceptualized simply as "k&#222;".
    For example, the SI unit for mass is "kg" and not "g". If the unit symbol
    is defined as "kg", then the multiplier is applied to "kg" as a whole and
    does not replace the "k" in front of the "g". In this case, the multiplier
    of "m" would be used with the unit symbol of "kg" to represent one gram.
    As a text string, this violates the instructions in IEC 80000-1. However,
    because the unit symbol in CIM is treated as a derived unit instead of
    as an SI unit, it makes more sense to conceptualize the "kg" as if it were
    replaced by one of the proposed replacements for the SI mass symbol. If
    one imagines that the "kg" were replaced by a symbol "&#222;", then it
    is easier to conceptualize the multiplier "m" as creating the proper unit
    "m&#222;", and not the forbidden unit "mkg".
    '''

    E = 'E'
    '''
    Exa 10**18.
    '''
    
    G = 'G'
    '''
    Giga 10**9.
    '''
    
    M = 'M'
    '''
    Mega 10**6.
    '''
    
    P = 'P'
    '''
    Peta 10**15.
    '''
    
    T = 'T'
    '''
    Tera 10**12.
    '''
    
    Y = 'Y'
    '''
    Yotta 10**24.
    '''
    
    Z = 'Z'
    '''
    Zetta 10**21.
    '''
    
    a = 'a'
    '''
    Atto 10**-18.
    '''
    
    c = 'c'
    '''
    Centi 10**-2.
    '''
    
    d = 'd'
    '''
    Deci 10**-1.
    '''
    
    da = 'da'
    '''
    Deca 10**1.
    '''
    
    f = 'f'
    '''
    Femto 10**-15.
    '''
    
    h = 'h'
    '''
    Hecto 10**2.
    '''
    
    k = 'k'
    '''
    Kilo 10**3.
    '''
    
    m = 'm'
    '''
    Milli 10**-3.
    '''
    
    micro = 'micro'
    '''
    Micro 10**-6.
    '''
    
    n = 'n'
    '''
    Nano 10**-9.
    '''
    
    none = 'none'
    '''
    No multiplier or equivalently multiply by 1.
    '''
    
    p = 'p'
    '''
    Pico 10**-12.
    '''
    
    y = 'y'
    '''
    Yocto 10**-24.
    '''
    
    z = 'z'
    '''
    Zepto 10**-21.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class UnitRegulationKind(Enum):
    '''
    Unit regulation kind.
    '''

    _0 = '_0'
    '''
    Unit is not on regulation.
    '''
    
    _1 = '_1'
    '''
    Unit is on AGC and regulating.
    '''
    
    _2 = '_2'
    '''
    Unit is suppose to be on regulation but it is not under regulation
    now.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class UnitSymbol(Enum):
    '''
    The derived units defined for usage in the CIM. In some cases, the derived
    unit is equal to an SI unit. Whenever possible, the standard derived symbol
    is used instead of the formula for the derived unit. For example, the unit
    symbol Farad is defined as "F" instead of "CPerV". In cases where a standard
    symbol does not exist for a derived unit, the formula for the unit is used
    as the unit symbol. For example, density does not have a standard symbol
    and so it is represented as "kgPerm^3". With the exception of the "kg",
    which is an SI unit, the unit symbols do not contain multipliers and therefore
    represent the base derived unit to which a multiplier can be applied as
    a whole.
    Every unit symbol is treated as an unparseable text as if it were a single-letter
    symbol. The meaning of each unit symbol is defined by the accompanying
    descriptive text and not by the text contents of the unit symbol.
    To allow the widest possible range of serializations without requiring
    special character handling, several substitutions are made which deviate
    from the format described in IEC 80000-1. The division symbol "/" is replaced
    by the letters "Per". Exponents are written in plain text after the unit
    as "m^3". The letters "deg" are used instead of the degree symbol. Any
    clarification of the meaning for a substitution is included in the description
    for the unit symbol.
    Non-SI units are included in list of unit symbols to allow sources of data
    to be correctly labelled with their non-SI units (for example, a GPS sensor
    that is reporting numbers that represent feet instead of meters). This
    allows software to use the unit symbol information correctly convert and
    scale the raw data of those sources into SI-based units.
    The integer values are used for harmonization with IEC 61850.
    '''

    A = 'A'
    '''
    Current in amperes.
    '''
    
    A2 = 'A2'
    '''
    Amperes squared (A^2).
    '''
    
    A2h = 'A2h'
    '''
    Ampere-squared hour, ampere-squared hour.
    '''
    
    A2s = 'A2s'
    '''
    Ampere squared time in square amperes (A^2*s).
    '''
    
    APerA = 'APerA'
    '''
    Current, ratio of amperages.
    '''
    
    APerm = 'APerm'
    '''
    Amperes per metre (A/m), magnetic field strength.
    '''
    
    Ah = 'Ah'
    '''
    Ampere-hours, ampere-hours.
    '''
    
    As = 'As'
    '''
    Ampere seconds (A*s).
    '''
    
    Bq = 'Bq'
    '''
    Radioactivity in becquerels (1/s).
    '''
    
    Btu = 'Btu'
    '''
    Energy, British Thermal Units.
    '''
    
    C = 'C'
    '''
    Electric charge in coulombs (A*s).
    '''
    
    CPerkg = 'CPerkg'
    '''
    Exposure (x rays), coulombs per kilogram.
    '''
    
    CPerm2 = 'CPerm2'
    '''
    Surface charge density, coulombs per square metre.
    '''
    
    CPerm3 = 'CPerm3'
    '''
    Electric charge density, coulombs per cubic metre.
    '''
    
    F = 'F'
    '''
    Electric capacitance in farads (C/V).
    '''
    
    FPerm = 'FPerm'
    '''
    Permittivity, farads per metre.
    '''
    
    G = 'G'
    '''
    Magnetic flux density, gausses (1 G = 10e-4*T).
    '''
    
    Gy = 'Gy'
    '''
    Absorbed dose in grays (J/kg).
    '''
    
    GyPers = 'GyPers'
    '''
    Absorbed dose rate, grays per second.
    '''
    
    H = 'H'
    '''
    Electric inductance in henrys (Wb/A).
    '''
    
    HPerm = 'HPerm'
    '''
    Permeability, henrys per metre.
    '''
    
    Hz = 'Hz'
    '''
    Frequency in hertz (1/s).
    '''
    
    HzPerHz = 'HzPerHz'
    '''
    Frequency, rate of frequency change.
    '''
    
    HzPers = 'HzPers'
    '''
    Rate of change of frequency in hertz per second.
    '''
    
    J = 'J'
    '''
    Energy in joules (N*m = C*V = W*s).
    '''
    
    JPerK = 'JPerK'
    '''
    Heat capacity in joules/kelvin.
    '''
    
    JPerkg = 'JPerkg'
    '''
    Specific energy, J/kg.
    '''
    
    JPerkgK = 'JPerkgK'
    '''
    Specific heat capacity, specific entropy, joules per kilogram Kelvin.
    '''
    
    JPerm2 = 'JPerm2'
    '''
    Insulation energy density, joules per square metre or watt second per
    square metre.
    '''
    
    JPerm3 = 'JPerm3'
    '''
    Energy density, joules per cubic metre.
    '''
    
    JPermol = 'JPermol'
    '''
    Molar energy, joules per mole.
    '''
    
    JPermolK = 'JPermolK'
    '''
    Molar entropy, molar heat capacity, joules per mole kelvin.
    '''
    
    JPers = 'JPers'
    '''
    Energy rate in joules per second (J/s).
    '''
    
    K = 'K'
    '''
    Temperature in kelvins.
    '''
    
    KPers = 'KPers'
    '''
    Temperature change rate in kelvins per second.
    '''
    
    M = 'M'
    '''
    Length, nautical miles (1 M = 1852 m).
    '''
    
    Mx = 'Mx'
    '''
    Magnetic flux, maxwells (1 Mx = 10-8 Wb).
    '''
    
    N = 'N'
    '''
    Force in newtons (kg*m/s^2).
    '''
    
    NPerm = 'NPerm'
    '''
    Surface tension, newton per metre.
    '''
    
    Nm = 'Nm'
    '''
    Moment of force, newton metres.
    '''
    
    Oe = 'Oe'
    '''
    Magnetic field in oersteds, (1 Oe = (10^3/(4*pi)) A/m = 79.57747 A/m).
    '''
    
    Pa = 'Pa'
    '''
    Pressure in pascals (N/m^2). Note: the absolute or relative measurement
    of pressure is implied with this entry. See below for more explicit
    forms.
    '''
    
    PaPers = 'PaPers'
    '''
    Pressure change rate in pascals per second.
    '''
    
    Pas = 'Pas'
    '''
    Dynamic viscosity, pascal seconds.
    '''
    
    Q = 'Q'
    '''
    Quantity power, Q.
    '''
    
    Qh = 'Qh'
    '''
    Quantity energy, Qh.
    '''
    
    S = 'S'
    '''
    Conductance in siemens.
    '''
    
    SPerm = 'SPerm'
    '''
    Conductance per length (F/m).
    '''
    
    Sv = 'Sv'
    '''
    Dose equivalent in sieverts (J/kg).
    '''
    
    T = 'T'
    '''
    Magnetic flux density in teslas (Wb/m^2).
    '''
    
    V = 'V'
    '''
    Electric potential in volts (W/A).
    '''
    
    V2 = 'V2'
    '''
    Volt squared (W^2/A^2).
    '''
    
    V2h = 'V2h'
    '''
    Volt-squared hour, volt-squared-hours.
    '''
    
    VA = 'VA'
    '''
    Apparent power in volt amperes. See also real power and reactive power.
    '''
    
    VAh = 'VAh'
    '''
    Apparent energy in volt ampere hours.
    '''
    
    VAr = 'VAr'
    '''
    Reactive power in volt amperes reactive. The "reactive" or "imaginary"
    component of electrical power (V*I*sin(phi)). (See also real power
    and apparent power).
    Note: Different meter designs use different methods to arrive at their
    results. Some meters may compute reactive power as an arithmetic value,
    while others compute the value vectorially. The data consumer should
    determine the method in use and the suitability of the measurement
    for the intended purpose.
    '''
    
    VArh = 'VArh'
    '''
    Reactive energy in volt ampere reactive hours.
    '''
    
    VPerHz = 'VPerHz'
    '''
    Magnetic flux in volt per hertz.
    '''
    
    VPerV = 'VPerV'
    '''
    Voltage, ratio of voltages.
    '''
    
    VPerVA = 'VPerVA'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between
    IEC meters and EEI (ANSI) meters. It is assumed that the data consumers
    understand the type of meter being used and agree on the sign convention
    in use at any given utility.
    '''
    
    VPerVAr = 'VPerVAr'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between
    IEC meters and EEI (ANSI) meters. It is assumed that the data consumers
    understand the type of meter being used and agree on the sign convention
    in use at any given utility.
    '''
    
    VPerm = 'VPerm'
    '''
    Electric field strength, volts per metre.
    '''
    
    Vh = 'Vh'
    '''
    Volt-hour, Volt hours.
    '''
    
    Vs = 'Vs'
    '''
    Volt seconds (Ws/A).
    '''
    
    W = 'W'
    '''
    Real power in watts (J/s). Electrical power may have real and reactive
    components. The real portion of electrical power (I^2*R or V*I*cos(phi)),
    is expressed in Watts. See also apparent power and reactive power.
    '''
    
    WPerA = 'WPerA'
    '''
    Active power per current flow, watts per Ampere.
    '''
    
    WPerW = 'WPerW'
    '''
    Signal Strength, ratio of power.
    '''
    
    WPerm2 = 'WPerm2'
    '''
    Heat flux density, irradiance, watts per square metre.
    '''
    
    WPerm2sr = 'WPerm2sr'
    '''
    Radiance, watts per square metre steradian.
    '''
    
    WPermK = 'WPermK'
    '''
    Thermal conductivity in watt/metres kelvin.
    '''
    
    WPers = 'WPers'
    '''
    Ramp rate in watts per second.
    '''
    
    WPersr = 'WPersr'
    '''
    Radiant intensity, watts per steradian.
    '''
    
    Wb = 'Wb'
    '''
    Magnetic flux in webers (V*s).
    '''
    
    Wh = 'Wh'
    '''
    Real energy in watt hours.
    '''
    
    anglemin = 'anglemin'
    '''
    Plane angle, minutes.
    '''
    
    anglesec = 'anglesec'
    '''
    Plane angle, seconds.
    '''
    
    bar = 'bar'
    '''
    Pressure in bars, (1 bar = 100 kPa).
    '''
    
    cd = 'cd'
    '''
    Luminous intensity in candelas.
    '''
    
    charPers = 'charPers'
    '''
    Data rate (baud) in characters per second.
    '''
    
    character = 'character'
    '''
    Number of characters.
    '''
    
    cosPhi = 'cosPhi'
    '''
    Power factor, dimensionless.
    Note 1: This definition of power factor only holds for balanced systems.
    See the alternative definition under code 153.
    Note 2�: Beware of differing sign conventions in use between the IEC
    and EEI. It is assumed that the data consumer understands the type
    of meter in use and the sign convention in use by the utility.
    '''
    
    count = 'count'
    '''
    Amount of substance, counter value.
    '''
    
    d = 'd'
    '''
    Time in days, day = 24 h = 86400 s.
    '''
    
    dB = 'dB'
    '''
    Sound pressure level in decibels. Note: multiplier "d" is included
    in this unit symbol for compatibility with IEC 61850-7-3.
    '''
    
    dBm = 'dBm'
    '''
    Power level (logarithmic ratio of signal strength , Bel-mW), normalized
    to 1 mW. Note: multiplier "d" is included in this unit symbol for compatibility
    with IEC 61850-7-3.
    '''
    
    deg = 'deg'
    '''
    Plane angle in degrees.
    '''
    
    degC = 'degC'
    '''
    Relative temperature in degrees Celsius (degC).
    '''
    
    ft3 = 'ft3'
    '''
    Volume, cubic feet.
    '''
    
    gPerg = 'gPerg'
    '''
    Concentration, The ratio of the mass of a solute divided by the mass
    of the solution.
    '''
    
    gal = 'gal'
    '''
    Volume in gallons, US gallon (1 gal = 231 in^3 = 128 fl ounce).
    '''
    
    h = 'h'
    '''
    Time in hours, hour = 60 min = 3600 s.
    '''
    
    ha = 'ha'
    '''
    Area, hectares.
    '''
    
    kat = 'kat'
    '''
    Catalytic activity, katal = mol/s.
    '''
    
    katPerm3 = 'katPerm3'
    '''
    Catalytic activity concentration, katals per cubic metre.
    '''
    
    kg = 'kg'
    '''
    Mass in kilograms. Note: multiplier "k" is included in this unit symbol
    for compatibility with IEC 61850-7-3.
    '''
    
    kgPerJ = 'kgPerJ'
    '''
    Weight per energy in kilograms per joule (kg/J). Note: multiplier "k"
    is included in this unit symbol for compatibility with IEC 61850-7-3.
    '''
    
    kgPerm = 'kgPerm'
    '''
    Mass per length in kilogram/metres (kg/m). Note: multiplier "k" is
    included in this unit symbol for compatibility with mass datatype.
    '''
    
    kgPerm3 = 'kgPerm3'
    '''
    Density in kilogram/cubic metres (kg/m^3). Note: multiplier "k" is
    included in this unit symbol for compatibility with IEC 61850-7-3.
    '''
    
    kgm = 'kgm'
    '''
    Moment of mass in kilogram metres (kg*m) (first moment of mass). Note:
    multiplier "k" is included in this unit symbol for compatibility with
    IEC 61850-7-3.
    '''
    
    kgm2 = 'kgm2'
    '''
    Moment of mass in kilogram square metres (kg*m^2) (Second moment of
    mass, commonly called the moment of inertia). Note: multiplier "k"
    is included in this unit symbol for compatibility with IEC 61850-7-3.
    '''
    
    kn = 'kn'
    '''
    Speed, knots (1 kn = 1852/3600) m/s.
    '''
    
    l = 'l'
    '''
    Volume in litres, litre = dm^3 = m^3/1000.
    '''
    
    lPerh = 'lPerh'
    '''
    Volumetric flow rate, litres per hour.
    '''
    
    lPerl = 'lPerl'
    '''
    Concentration, The ratio of the volume of a solute divided by the volume
    of the solution.
    '''
    
    lPers = 'lPers'
    '''
    Volumetric flow rate in litres per second.
    '''
    
    lm = 'lm'
    '''
    Luminous flux in lumens (cd*sr).
    '''
    
    lx = 'lx'
    '''
    Illuminance in lux (lm/m^2).
    '''
    
    m = 'm'
    '''
    Length in metres.
    '''
    
    m2 = 'm2'
    '''
    Area in square metres (m^2).
    '''
    
    m2Pers = 'm2Pers'
    '''
    Viscosity in square metres/second (m^2/s).
    '''
    
    m3 = 'm3'
    '''
    Volume in cubic metres (m^3).
    '''
    
    m3Compensated = 'm3Compensated'
    '''
    Volume, cubic metres, with the value compensated for weather effects.
    '''
    
    m3Perh = 'm3Perh'
    '''
    Volumetric flow rate, cubic metres per hour.
    '''
    
    m3Perkg = 'm3Perkg'
    '''
    Specific volume, cubic metres per kilogram, v.
    '''
    
    m3Pers = 'm3Pers'
    '''
    Volumetric flow rate in cubic metres per second (m^3/s).
    '''
    
    m3Uncompensated = 'm3Uncompensated'
    '''
    Volume, cubic metres, with the value uncompensated for weather effects.
    '''
    
    mPerm3 = 'mPerm3'
    '''
    Fuel efficiency in metres per cubic metres (m/m^3).
    '''
    
    mPers = 'mPers'
    '''
    Velocity in metres per second (m/s).
    '''
    
    mPers2 = 'mPers2'
    '''
    Acceleration in metres per second squared (m/s^2).
    '''
    
    min = 'min'
    '''
    Time in minutes, minute = 60 s.
    '''
    
    mmHg = 'mmHg'
    '''
    Pressure, millimetres of mercury (1 mmHg is approximately 133.3 Pa).
    '''
    
    mol = 'mol'
    '''
    Amount of substance in moles.
    '''
    
    molPerkg = 'molPerkg'
    '''
    Concentration, Molality, the amount of solute in moles and the amount
    of solvent in kilograms.
    '''
    
    molPerm3 = 'molPerm3'
    '''
    Concentration, The amount of substance concentration, (c), the amount
    of solvent in moles divided by the volume of solution in m^3.
    '''
    
    molPermol = 'molPermol'
    '''
    Concentration, Molar fraction, the ratio of the molar amount of a solute
    divided by the molar amount of the solution.
    '''
    
    none = 'none'
    '''
    Dimension less quantity, e.g. count, per unit, etc.
    '''
    
    ohm = 'ohm'
    '''
    Electric resistance in ohms (V/A).
    '''
    
    ohmPerm = 'ohmPerm'
    '''
    Electric resistance per length in ohms per metre ((V/A)/m).
    '''
    
    ohmm = 'ohmm'
    '''
    Resistivity, ohm metres, (rho).
    '''
    
    onePerHz = 'onePerHz'
    '''
    Reciprocal of frequency (1/Hz).
    '''
    
    onePerm = 'onePerm'
    '''
    Wavenumber, reciprocal metres, (1/m).
    '''
    
    ppm = 'ppm'
    '''
    Concentration in parts per million.
    '''
    
    rad = 'rad'
    '''
    Plane angle in radians (m/m).
    '''
    
    radPers = 'radPers'
    '''
    Angular velocity in radians per second (rad/s).
    '''
    
    radPers2 = 'radPers2'
    '''
    Angular acceleration, radians per second squared.
    '''
    
    rev = 'rev'
    '''
    Amount of rotation, revolutions.
    '''
    
    rotPers = 'rotPers'
    '''
    Rotations per second (1/s). See also Hz (1/s).
    '''
    
    s = 's'
    '''
    Time in seconds.
    '''
    
    sPers = 'sPers'
    '''
    Time, Ratio of time.
    '''
    
    sr = 'sr'
    '''
    Solid angle in steradians (m^2/m^2).
    '''
    
    therm = 'therm'
    '''
    Energy, therms.
    '''
    
    tonne = 'tonne'
    '''
    Mass in tons, "tonne" or "metric ton" (1000 kg = 1 Mg).
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class UnitType(Enum):
    '''
    Combined Cycle
    Gas Turbine
    Hydro Turbine
    Other
    Photovoltaic
    Hydro Pump-Turbine
    Reciprocating Engine
    Steam Turbine
    Synchronous Condenser
    Wind Turbine
    '''

    CCYC = 'CCYC'
    '''
    Combined Cycle
    '''
    
    GTUR = 'GTUR'
    '''
    Gas Turbine
    '''
    
    HYDR = 'HYDR'
    '''
    Hydro Turbine
    '''
    
    OTHR = 'OTHR'
    '''
    Other
    '''
    
    PHOT = 'PHOT'
    '''
    Photovoltaic
    '''
    
    PTUR = 'PTUR'
    '''
    Hydro Pump-Turbine
    '''
    
    RECP = 'RECP'
    '''
    Reciprocating Engine
    '''
    
    STUR = 'STUR'
    '''
    Steam Turbine
    '''
    
    SYNC = 'SYNC'
    '''
    Synchronous Condenser
    '''
    
    WIND = 'WIND'
    '''
    Wind Turbine
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class UsagePointConnectedKind(Enum):
    '''
    State of the usage point with respect to connection to the network.
    '''

    connected = 'connected'
    '''
    The usage point is connected to the network and able to receive or
    send the applicable commodity (electricity, gas, water, etc.).
    '''
    
    logicallyDisconnected = 'logicallyDisconnected'
    '''
    The usage point has been disconnected through operation of a disconnect
    function within the meter present at the usage point. The usage point
    is unable to receive or send the applicable commodity (electricity,
    gas, water, etc.) A logical disconnect can often be achieved without
    utilising a field crew.
    '''
    
    physicallyDisconnected = 'physicallyDisconnected'
    '''
    The usage point has been disconnected from the network at a point upstream
    of the meter. The usage point is unable to receive or send the applicable
    commodity (electricity, gas, water, etc.). A physical disconnect is
    often achieved by utilising a field crew.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class Validity(Enum):
    '''
    Validity for MeasurementValue.
    '''

    GOOD = 'GOOD'
    '''
    The value is marked good if no abnormal condition of the acquisition
    function or the information source is detected.
    '''
    
    INVALID = 'INVALID'
    '''
    The value is marked invalid when a supervision function recognises
    abnormal conditions of the acquisition function or the information
    source (missing or non-operating updating devices). The value is not
    defined under this condition. The mark invalid is used to indicate
    to the client that the value may be incorrect and shall not be used.
    '''
    
    QUESTIONABLE = 'QUESTIONABLE'
    '''
    The value is marked questionable if a supervision function detects
    an abnormal behaviour, however the value could still be valid. The
    client is responsible for determining whether or not values marked
    "questionable" should be used.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class VehicleUsageKind(Enum):
    '''
    Usage of a vehicle.
    '''

    contractor = 'contractor'
    '''
    Contractor vehicle.
    '''
    
    crew = 'crew'
    '''
    Crew vehicle.
    '''
    
    other = 'other'
    '''
    Other vehicle.
    '''
    
    user = 'user'
    '''
    User vehicle.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class VsPpccControlKind(Enum):
    '''
    Types applicable to the control of real power and/or DC voltage by voltage
    source converter.
    '''

    pPcc = 'pPcc'
    '''
    Control is real power at point of common coupling. The target value
    is provided by ACDCConverter.targetPpcc.
    '''
    
    pPccAndUdcDroop = 'pPccAndUdcDroop'
    '''
    Control is active power at point of common coupling and local DC voltage,
    with the droop. Target values are provided by ACDCConverter.targetPpcc,
    ACDCConverter.targetUdc and VsConverter.droop.
    '''
    
    pPccAndUdcDroopPilot = 'pPccAndUdcDroopPilot'
    '''
    Control is active power at point of common coupling and the pilot DC
    voltage, with the droop. The mode is used for Multi Terminal DC (MTDC)
    systems where multiple DC substations are connected to the DC transmission
    lines. The pilot voltage is then used to coordinate the control the
    DC voltage across the DC substations. Targets are provided by ACDCConverter.targetPpcc,
    ACDCConverter.targetUdc and VsConverter.droop.
    '''
    
    pPccAndUdcDroopWithCompensation = 'pPccAndUdcDroopWithCompensation'
    '''
    Control is active power at point of common coupling and compensated
    DC voltage, with the droop. Compensation factor is the resistance,
    as an approximation of the DC voltage of a common (real or virtual)
    node in the DC network. Targets are provided by ACDCConverter.targetPpcc,
    ACDCConverter.targetUdc, VsConverter.droop and VsConverter.droopCompensation.
    '''
    
    phasePcc = 'phasePcc'
    '''
    Control is phase at point of common coupling. Target is provided by
    VsConverter.targetPhasePcc.
    '''
    
    udc = 'udc'
    '''
    Control is DC voltage with target value provided by ACDCConverter.targetUdc.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class VsQpccControlKind(Enum):
    '''
    Kind of reactive power control at point of common coupling for a voltage
    source converter.
    '''

    powerFactorPcc = 'powerFactorPcc'
    '''
    Control is power factor at point of common coupling. Target is provided
    by VsConverter.targetPowerFactorPcc.
    '''
    
    pulseWidthModulation = 'pulseWidthModulation'
    '''
    No explicit control. Pulse-modulation factor is directly set in magnitude
    (VsConverter.targetPWMfactor) and phase (VsConverter.targetPhasePcc).
    '''
    
    reactivePcc = 'reactivePcc'
    '''
    Control is reactive power at point of common coupling. Target is provided
    by VsConverter.targetQpcc.
    '''
    
    voltagePcc = 'voltagePcc'
    '''
    Control is voltage at point of common coupling. Target is provided
    by VsConverter.targetUpcc.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class WEPStandardEditionKind(Enum):
    '''
    List of editions for WEP standards.
    '''

    none = 'none'
    '''
    No edition.
    '''
    
    unknown = 'unknown'
    '''
    Unknown edition.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class WEPStandardKind(Enum):
    '''
    List of WEP standards.
    '''

    _121254E = '_121254E'
    '''
    Westinghouse Engineering Procedure 12,1254E.
    '''
    
@stereotype(CIMStereotype.enumeration)
class WeightKind(Enum):
    '''
    Kind of weight
    '''

    empty = 'empty'
    '''
    Net weight without medium filled such as transmission transformer without
    oil filled.
    '''
    
    installed = 'installed'
    '''
    Total weight at installation
    '''
    
    other = 'other'
    '''
    Other
    '''
    
    transportation = 'transportation'
    '''
    Transportation weight
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class WindGenUnitKind(Enum):
    '''
    Kind of wind generating unit.
    '''

    offshore = 'offshore'
    '''
    The wind generating unit is located offshore.
    '''
    
    onshore = 'onshore'
    '''
    The wind generating unit is located onshore.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class WindingConnection(Enum):
    '''
    Winding connection type.
    '''

    A = 'A'
    '''
    Autotransformer common winding.
    '''
    
    D = 'D'
    '''
    Delta.
    '''
    
    I = 'I'
    '''
    Independent winding, for single-phase connections.
    '''
    
    Y = 'Y'
    '''
    Wye.
    '''
    
    Yn = 'Yn'
    '''
    Wye, with neutral brought out for grounding.
    '''
    
    Z = 'Z'
    '''
    ZigZag.
    '''
    
    Zn = 'Zn'
    '''
    ZigZag, with neutral brought out for grounding.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
@stereotype(CIMStereotype.add)
class WireConstructionKind(Enum):
    '''
    Kind of cable construction.
    '''

    other = 'other'
    '''
    Other kind of cable construction.
    '''
    
    solid = 'solid'
    '''
    Solid cable.
    '''
    
    stranded = 'stranded'
    '''
    Stranded cable.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class WireInsulationKind(Enum):
    '''
    Kind of wire insulation.
    '''

    asbestosAndVarnishedCambric = 'asbestosAndVarnishedCambric'
    '''
    Asbestos and varnished cambric wire insulation.
    '''
    
    beltedPilc = 'beltedPilc'
    '''
    Belted pilc wire insulation.
    '''
    
    butyl = 'butyl'
    '''
    Butyl wire insulation.
    '''
    
    crosslinkedPolyethylene = 'crosslinkedPolyethylene'
    '''
    Crosslinked polyethylene wire insulation.
    '''
    
    ethylenePropyleneRubber = 'ethylenePropyleneRubber'
    '''
    Ethylene propylene rubber wire insulation.
    '''
    
    highMolecularWeightPolyethylene = 'highMolecularWeightPolyethylene'
    '''
    High nolecular weight polyethylene wire insulation.
    '''
    
    highPressureFluidFilled = 'highPressureFluidFilled'
    '''
    High pressure fluid filled wire insulation.
    '''
    
    lowCapacitanceRubber = 'lowCapacitanceRubber'
    '''
    Low capacitance rubber wire insulation.
    '''
    
    oilPaper = 'oilPaper'
    '''
    Oil paper wire insulation.
    '''
    
    other = 'other'
    '''
    Other kind of wire insulation.
    '''
    
    ozoneResistantRubber = 'ozoneResistantRubber'
    '''
    Ozone resistant rubber wire insulation.
    '''
    
    rubber = 'rubber'
    '''
    Rubber wire insulation.
    '''
    
    siliconRubber = 'siliconRubber'
    '''
    Silicon rubber wire insulation.
    '''
    
    treeResistantHighMolecularWeightPolyethylene = 'treeResistantHighMolecularWeightPolyethylene'
    '''
    Tree resistant high molecular weight polyethylene wire insulation.
    '''
    
    treeRetardantCrosslinkedPolyethylene = 'treeRetardantCrosslinkedPolyethylene'
    '''
    Tree retardant crosslinked polyethylene wire insulation.
    '''
    
    unbeltedPilc = 'unbeltedPilc'
    '''
    Unbelted pilc wire insulation.
    '''
    
    varnishedCambricCloth = 'varnishedCambricCloth'
    '''
    Varnished cambric cloth wire insulation.
    '''
    
    varnishedDacronGlass = 'varnishedDacronGlass'
    '''
    Varnished dacron glass wire insulation.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class WireMaterialKind(Enum):
    '''
    Kind of wire material.
    '''

    aaac = 'aaac'
    '''
    Aluminum-alloy conductor steel reinforced.
    '''
    
    acsr = 'acsr'
    '''
    Aluminum conductor steel reinforced.
    '''
    
    aluminum = 'aluminum'
    '''
    Aluminum wire.
    '''
    
    aluminumAlloy = 'aluminumAlloy'
    '''
    Aluminum-alloy wire.
    '''
    
    aluminumAlloySteel = 'aluminumAlloySteel'
    '''
    Aluminum-alloy-steel wire.
    '''
    
    aluminumSteel = 'aluminumSteel'
    '''
    Aluminum-steel wire.
    '''
    
    copper = 'copper'
    '''
    Copper wire.
    '''
    
    other = 'other'
    '''
    Other wire material.
    '''
    
    steel = 'steel'
    '''
    Steel wire.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class WireUsageKind(Enum):
    '''
    Kind of wire usage.
    '''

    distribution = 'distribution'
    '''
    Wire is used in medium voltage network.
    '''
    
    other = 'other'
    '''
    Other kind of wire usage.
    '''
    
    secondary = 'secondary'
    '''
    Wire is used in low voltage circuit.
    '''
    
    transmission = 'transmission'
    '''
    Wire is used in extra-high voltage or high voltage network.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class WorkKind(Enum):
    '''
    Kinds of work.
    '''

    connect = 'connect'
    '''
    Connect work.
    '''
    
    construction = 'construction'
    '''
    Construction work.
    '''
    
    disconnect = 'disconnect'
    '''
    Disconnect work.
    '''
    
    inspection = 'inspection'
    '''
    Inspection work.
    '''
    
    maintenance = 'maintenance'
    '''
    Maintenance work.
    '''
    
    other = 'other'
    '''
    Other kind of work.
    '''
    
    refurbishment = 'refurbishment'
    '''
    Work related to asset refurbishment.
    '''
    
    repair = 'repair'
    '''
    Repair work.
    '''
    
    service = 'service'
    '''
    Service work.
    '''
    
    test = 'test'
    '''
    Test work.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.deprecated)
@stereotype(CIMStereotype.Attribute)
class YesNo(Enum):
    '''
    Used as a flag set to Yes or No.
    '''

    NO = 'NO'
    '''
    '''
    
    YES = 'YES'
    '''
    '''
    
@stereotype(CIMStereotype.gmdm)
@stereotype(CIMStereotype.enumeration)
class wmk(Enum):
    '''
    '''

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ActivePower(CIMUnit):
    '''
    Product of RMS value of the voltage and the RMS value of the in-phase component
    of the current.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.W
    def __init__(self, value, input_unit: str='W', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ActivePowerChangeRate(CIMUnit):
    '''
    Rate of change of active power per time.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.WPers
    def __init__(self, value, input_unit: str='WPers', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ActivePowerPerCurrentFlow(CIMUnit):
    '''
    Active power variation with current flow.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.WPerA
    def __init__(self, value, input_unit: str='WPerA', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ActivePowerPerFrequency(CIMUnit):
    '''
    Active power variation with frequency.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.WPers
    def __init__(self, value, input_unit: str='WPers', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class AngleDegrees(CIMUnit):
    '''
    Measurement of angle in degrees.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.deg
    def __init__(self, value, input_unit: str='deg', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class AngleRadians(CIMUnit):
    '''
    Phase angle in radians.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.rad
    def __init__(self, value, input_unit: str='rad', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ApparentPower(CIMUnit):
    '''
    Product of the RMS value of the voltage and the RMS value of the current.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.VA
    def __init__(self, value, input_unit: str='VA', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Area(CIMUnit):
    '''
    Area.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.m2
    def __init__(self, value, input_unit: str='m2', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Capacitance(CIMUnit):
    '''
    Capacitive part of reactance (imaginary part of impedance), at rated frequency.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.F
    def __init__(self, value, input_unit: str='F', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class CapacitancePerLength(CIMUnit):
    '''
    Capacitance per unit of length.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.FPerm
    def __init__(self, value, input_unit: str='FPerm', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Classification(CIMUnit):
    '''
    Classification of level. Specify as 1..n, with 1 being the most detailed,
    highest priority, etc as described on the attribute using this data type.
    '''

    value: int = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Conductance(CIMUnit):
    '''
    Factor by which voltage must be multiplied to give corresponding power
    lost from a circuit. Real part of admittance.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.S
    def __init__(self, value, input_unit: str='S', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ConductancePerLength(CIMUnit):
    '''
    Real part of admittance per unit of length.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.SPerm
    def __init__(self, value, input_unit: str='SPerm', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class CostPerEnergyUnit(CIMUnit):
    '''
    Cost, in units of currency, per quantity of electrical energy generated.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class CostPerHeatUnit(CIMUnit):
    '''
    Cost, in units of currency, per quantity of heat generated.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class CostPerVolume(CIMUnit):
    '''
    Cost per unit volume.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class CostRate(CIMUnit):
    '''
    Cost, in units of currency, per elapsed time.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class CurrentFlow(CIMUnit):
    '''
    Electrical current with sign convention: positive flow is out of the conducting
    equipment into the connectivity node. Can be both AC and DC.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.A
    def __init__(self, value, input_unit: str='A', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Displacement(CIMUnit):
    '''
    Unit of displacement relative to a reference position, hence can be negative.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.m
    def __init__(self, value, input_unit: str='m', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Emission(CIMUnit):
    '''
    Quantity of emission per fuel heat content.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.kgPerJ
    def __init__(self, value, input_unit: str='kgPerJ', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Frequency(CIMUnit):
    '''
    Cycles per second.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.Hz
    def __init__(self, value, input_unit: str='Hz', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class HeatRate(CIMUnit):
    '''
    Heat generated, in energy per time unit of elapsed time.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.J
    def __init__(self, value, input_unit: str='J', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Hours(CIMUnit):
    '''
    Time specified in hours.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.h
    def __init__(self, value, input_unit: str='h', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Impedance(CIMUnit):
    '''
    Ratio of voltage to current.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.ohm
    def __init__(self, value, input_unit: str='ohm', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Inductance(CIMUnit):
    '''
    Inductive part of reactance (imaginary part of impedance), at rated frequency.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.H
    def __init__(self, value, input_unit: str='H', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class InductancePerLength(CIMUnit):
    '''
    Inductance per unit of length.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.HPerm
    def __init__(self, value, input_unit: str='HPerm', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class KiloActivePower(CIMUnit):
    '''
    Active power in kilowatts.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.k)
    @property # read-only
    def unit(self):
        return UnitSymbol.W
    def __init__(self, value, input_unit: str='W', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Length(CIMUnit):
    '''
    Unit of length. It shall be a positive value or zero.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.m
    def __init__(self, value, input_unit: str='m', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Minutes(CIMUnit):
    '''
    Time in minutes.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.min
    def __init__(self, value, input_unit: str='min', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Money(CIMUnit):
    '''
    Amount of money.
    '''

    value: str = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class PU(CIMUnit):
    '''
    Per Unit - a positive or negative value referred to a defined base. Values
    typically range from -10 to +10.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class PerCent(CIMUnit):
    '''
    Percentage on a defined base. For example, specify as 100 to indicate at
    the defined base.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Pressure(CIMUnit):
    '''
    Pressure in pascals.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.Pa
    def __init__(self, value, input_unit: str='Pa', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Reactance(CIMUnit):
    '''
    Reactance (imaginary part of impedance), at rated frequency.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.ohm
    def __init__(self, value, input_unit: str='ohm', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ReactancePerLength(CIMUnit):
    '''
    Reactance (imaginary part of impedance) per unit of length, at rated frequency.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.ohmPerm
    def __init__(self, value, input_unit: str='ohmPerm', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ReactivePower(CIMUnit):
    '''
    Product of RMS value of the voltage and the RMS value of the quadrature
    component of the current.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.VAr
    def __init__(self, value, input_unit: str='VAr', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class RealEnergy(CIMUnit):
    '''
    Real electrical energy.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.Wh
    def __init__(self, value, input_unit: str='Wh', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Resistance(CIMUnit):
    '''
    Resistance (real part of impedance).
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.ohm
    def __init__(self, value, input_unit: str='ohm', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ResistancePerLength(CIMUnit):
    '''
    Resistance (real part of impedance) per unit of length.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.ohmPerm
    def __init__(self, value, input_unit: str='ohmPerm', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class RotationSpeed(CIMUnit):
    '''
    Number of revolutions per second.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.Hz
    def __init__(self, value, input_unit: str='Hz', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Seconds(CIMUnit):
    '''
    Time, in seconds.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.s
    def __init__(self, value, input_unit: str='s', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Susceptance(CIMUnit):
    '''
    Imaginary part of admittance.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.S
    def __init__(self, value, input_unit: str='S', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class SusceptancePerLength(CIMUnit):
    '''
    Imaginary part of admittance per unit of length.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.SPerm
    def __init__(self, value, input_unit: str='SPerm', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Temperature(CIMUnit):
    '''
    Value of temperature in degrees Celsius.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.degC
    def __init__(self, value, input_unit: str='degC', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Voltage(CIMUnit):
    '''
    Electrical voltage, can be both AC and DC.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.V
    def __init__(self, value, input_unit: str='V', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class VoltagePerReactivePower(CIMUnit):
    '''
    Voltage variation with reactive power.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.VPerVAr
    def __init__(self, value, input_unit: str='VPerVAr', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Volume(CIMUnit):
    '''
    Volume.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.m3
    def __init__(self, value, input_unit: str='m3', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class VolumeFlowRate(CIMUnit):
    '''
    Volume per time.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.m3Pers
    def __init__(self, value, input_unit: str='m3Pers', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class WaterLevel(CIMUnit):
    '''
    Reservoir water level referred to a given datum such as mean sea level.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.m
    def __init__(self, value, input_unit: str='m', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class ASTMStandard(Identity):
    '''
    Standard published by ASTM (ASTM International).
    '''

    standardEdition: Optional[ ASTMStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of ASTM standard.
    '''
    
    standardNumber: Optional[ ASTMStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ASTM standard number.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class AcceptanceTest(Identity):
    '''
    Acceptance test for assets.
    '''

    dateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time the asset was last tested using the 'type' of test and
    yielding the current status in 'success' attribute.
    '''
    
    success: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if asset has passed acceptance test and may be placed in or is
    in service. It is set to false if asset is removed from service and
    is required to be tested again before being placed back in service,
    possibly in a new location. Since asset may go through multiple tests
    during its lifecycle, the date of each acceptance test may be recorded
    in 'Asset.ActivityRecord.status.dateTime'.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Type of test or group of tests that was conducted on 'dateTime'.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class CIGREStandard(Identity):
    '''
    Standard published by CIGRE (Council on Large Electric Systems).
    '''

    standardEdition: Optional[ CIGREStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of CIGRE standard.
    '''
    
    standardNumber: Optional[ CIGREStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    CIGRE standard number.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class ControlledAppliance(Identity):
    '''
    Appliance controlled with a PAN device control.
    '''

    isElectricVehicle: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is an electric vehicle.
    '''
    
    isExteriorLighting: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is exterior lighting.
    '''
    
    isGenerationSystem: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is a generation system.
    '''
    
    isHvacCompressorOrFurnace: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is HVAC compressor or furnace.
    '''
    
    isInteriorLighting: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is interior lighting.
    '''
    
    isIrrigationPump: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is an irrigation pump.
    '''
    
    isManagedCommercialIndustrialLoad: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is managed commercial or industrial load.
    '''
    
    isPoolPumpSpaJacuzzi: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is a pool, pump, spa or jacuzzi.
    '''
    
    isSimpleMiscLoad: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is a simple miscellaneous load.
    '''
    
    isSmartAppliance: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is a smart appliance.
    '''
    
    isStripAndBaseboardHeater: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is a stip or baseboard heater.
    '''
    
    isWaterHeater: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the appliance is a water heater.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class DINStandard(Identity):
    '''
    Standard published by DIN (German Institute of Standards).
    '''

    standardEdition: Optional[ DINStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of DIN standard.
    '''
    
    standardNumber: Optional[ DINStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    DIN standard number.
    '''
    
@dataclass(repr=False)
class DateInterval(Identity):
    '''
    Interval between two dates.
    '''

    end: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End date of this interval.
    '''
    
    start: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Start date of this interval.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class DateTimeInterval(Identity):
    '''
    rdfs:label : "Date-time interval"@en
    rdfs:comment : "'intervalo de fecha-hora' es una subclase de 'intervalo
    propio', definida utilizando el multi-elemento 'descripci�n de fecha-hora'."@es
    <http://www.w3.org/2004/02/skos/core#note> : "'intervalo de fecha-hora'
    se puede utilizar s�lo para un intervalo cuyos l�mites coinciden con un
    elemento de fecha-hora alineados con el calendario y la zona horaria indicados.
    Por ejemplo, aunque ambos tienen una duraci�n de un d�a, el intervalo de
    24 horas que empieza en la media noche del comienzo del 8 mayo en Europa
    Central se puede expresar como un 'intervalo de fecha-hora', el intervalo
    de 24 horas que empieza a las 1:30pm no."@es
    rdfs:label : "intervalo de fecha-hora"@es
    <http://www.w3.org/2004/02/skos/core#definition> : "DateTimeInterval is
    a subclass of ProperInterval, defined using the multi-element DateTimeDescription."@en
    rdfs:comment : "DateTimeInterval is a subclass of ProperInterval, defined
    using the multi-element DateTimeDescription."@en
    <http://www.w3.org/2004/02/skos/core#note> : ":DateTimeInterval can only
    be used for an interval whose limits coincide with a date-time element
    aligned to the calendar and timezone indicated. For example, while both
    have a duration of one day, the 24-hour interval beginning at midnight
    at the beginning of 8 May in Central Europe can be expressed as a :DateTimeInterval,
    but the 24-hour interval starting at 1:30pm cannot."@en
    <http://www.w3.org/2004/02/skos/core#definition> : "'intervalo de fecha-hora'
    es una subclase de 'intervalo propio', definida utilizando el multi-elemento
    'descripci�n de fecha-hora'."@es
    '''

    end: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End date and time of this interval. The end date and time where the
    interval is defined up to, but excluded.
    '''
    
    start: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Start date and time of this interval. The start date and time is included
    in the defined interval.
    '''
    
    timehasDateTimeDescription: Optional[GeneralDateTimeDescription] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class DecimalQuantity(Identity):
    '''
    Quantity with decimal value and associated unit or currency information.
    '''

    value: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of this quantity.
    '''
    
    currency: Optional[ Currency ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Currency of this quantity.
    '''
    
    multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit multiplier of this quantity.
    '''
    
    unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit of this quantity.
    '''
    
@stereotype(CIMStereotype.Compound)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class DeploymentDate(Identity):
    '''
    Dates for deployment events of an asset. May have multiple deployment type
    dates for this device and a compound type allows a query to return multiple
    dates.
    '''

    inServiceDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time asset most recently put in service.
    '''
    
    installedDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time asset most recently installed.
    '''
    
    notYetInstalledDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time of asset deployment transition to not yet installed.
    '''
    
    outOfServiceDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time asset most recently taken out of service.
    '''
    
    removedDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date and time asset most recently removed.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class DobleStandard(Identity):
    '''
    Standard published by Doble.
    '''

    standardEdition: Optional[ DobleStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of Doble standard.
    '''
    
    standardNumber: Optional[ DobleStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Doble standard number.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class EPAStandard(Identity):
    '''
    Standard published by EPA (United States Environmental Protection Agency).
    '''

    standardEdition: Optional[ EPAStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of EPA standard.
    '''
    
    standardNumber: Optional[ EPAStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    EPA standard number.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class EndDeviceCapability(Identity):
    '''
    Inherent capabilities of an end device (i.e., the functions it supports).
    '''

    autonomousDst: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if autonomous DST (daylight saving time) function is supported.
    '''
    
    communication: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if communication function is supported.
    '''
    
    connectDisconnect: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if connect and disconnect function is supported.
    '''
    
    demandResponse: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if demand response function is supported.
    '''
    
    electricMetering: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if electric metering function is supported.
    '''
    
    gasMetering: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if gas metering function is supported.
    '''
    
    metrology: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if metrology function is supported.
    '''
    
    onRequestRead: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if on request read function is supported.
    '''
    
    outageHistory: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if outage history function is supported.
    '''
    
    pressureCompensation: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if device performs pressure compensation for metered quantities.
    '''
    
    pricingInfo: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if pricing information is supported.
    '''
    
    pulseOutput: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if device produces pulse outputs.
    '''
    
    relaysProgramming: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if relays programming function is supported.
    '''
    
    reverseFlow: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if reverse flow function is supported.
    '''
    
    superCompressibilityCompensation: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if device performs super compressibility compensation for metered
    quantities.
    '''
    
    temperatureCompensation: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if device performs temperature compensation for metered quantities.
    '''
    
    textMessage: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the displaying of text messages is supported.
    '''
    
    waterMetering: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'move Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if water metering function is supported.
    '''
    
@stereotype(CIMStereotype.Compound)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class EndDeviceTiming(Identity):
    '''
    Timing for the control actions of end devices.
    '''

    durationIndefinite: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if 'duration' is indefinite.
    '''
    
    duration: Optional[ float | Minutes ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Duration of the end device control action or the business event that
    is the subject of the end device control.
    '''
    
    randomisation: Optional[ RandomisationKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Kind of randomisation to be applied to the end device control actions
    to be executed.
    '''
    
@stereotype(CIMStereotype.Compound)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class FaultImpedance(Identity):
    '''
    Impedance description for the fault.
    '''

    rGround: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The resistance of the fault between phases and ground.
    '''
    
    rLineToLine: Optional[ float | Resistance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The resistance of the fault between phases.
    '''
    
    xGround: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactance of the fault between phases and ground.
    '''
    
    xLineToLine: Optional[ float | Reactance ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The reactance of the fault between phases.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class FloatQuantity(Identity):
    '''
    Quantity with float value and associated unit information.
    '''

    value: Optional[float] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of this quantity.
    '''
    
    multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit multiplier of this quantity.
    '''
    
    unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit of this quantity.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class IECStandard(Identity):
    '''
    Standard published by IEC (International Electrotechnical Commission).
    '''

    standardEdition: Optional[ IECStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of IEC standard.
    '''
    
    standardNumber: Optional[ IECStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    IEC standard number.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class IEEEStandard(Identity):
    '''
    Standard published by IEEE (Institute of Electrical and Electronics Engineers).
    '''

    standardEdition: Optional[ IEEEStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of IEEE standard.
    '''
    
    standardNumber: Optional[ IEEEStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    IEEE standard number.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class ISOStandard(Identity):
    '''
    Standard published by ISO (International Organization for Standardization).
    '''

    standardEdition: Optional[ ISOStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of ISO standard.
    '''
    
    standardNumber: Optional[ ISOStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    ISO standard number.
    '''
    
@stereotype(CIMStereotype.Compound)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class InUseDate(Identity):
    '''
    Dates associated with asset 'in use' status. May have multiple in use dates
    for this device and a compound type allows a query to return multiple dates.
    '''

    inUseDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date asset was most recently put in use.
    '''
    
    notReadyForUseDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date of most recent asset transition to not ready for use state.
    '''
    
    readyForUseDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date of most recent asset transition to ready for use state.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class IntegerQuantity(Identity):
    '''
    Quantity with integer value and associated unit information.
    '''

    value: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of this quantity.
    '''
    
    multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit multiplier of this quantity.
    '''
    
    unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit of this quantity.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class LaborelecStandard(Identity):
    '''
    Standard published by Laborelec.
    '''

    standardEdition: Optional[ LaborelecStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of Laborelec standard.
    '''
    
    standardNumber: Optional[ LaborelecStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Laborelec standard number.
    '''
    
@stereotype(CIMStereotype.Compound)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class LifecycleDate(Identity):
    '''
    Dates for asset lifecycle state changes. May have multiple lifecycle dates
    for this device and a compound type allows a query to return multiple dates.
    '''

    installationDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date current installation was completed, which may not be the same
    as the in-service date. Asset may have been installed at other locations
    previously. Ignored if asset is (1) not currently installed (e.g.,
    stored in a depot) or (2) not intended to be installed (e.g., vehicle,
    tool).
    '''
    
    manufacturedDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date the asset was manufactured.
    '''
    
    purchaseDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date the asset was purchased. Note that even though an asset may have
    been purchased, it may not have been received into inventory at the
    time of purchase.
    '''
    
    receivedDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date the asset was received and first placed into inventory.
    '''
    
    removalDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date when the asset was last removed from service. Ignored if (1) not
    intended to be in service, or (2) currently in service.
    '''
    
    retiredDate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Date the asset is permanently retired from service and may be scheduled
    for disposal. Ignored if asset is (1) currently in service, or (2)
    permanently removed from service.
    '''
    
@dataclass(repr=False)
class MonthDayInterval(Identity):
    '''
    Interval between two times specified as month and day.
    '''

    end: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End time of this interval.
    '''
    
    start: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Start time of this interval.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class RationalNumber(Identity):
    '''
    Rational number = 'numerator' / 'denominator'.
    '''

    denominator: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Denominator. Value 1 indicates the number is a simple integer.
    '''
    
    numerator: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Numerator.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class ReadingInterharmonic(Identity):
    '''
    Interharmonics are represented as a rational number 'numerator' / 'denominator',
    and harmonics are represented using the same mechanism and identified by
    'denominator'=1.
    '''

    denominator: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Interharmonic denominator. Value 0 means not applicable. Value 2 is
    used in combination with 'numerator'=1 to represent interharmonic 1/2.
    Finally, value 1 indicates the harmonic of the order specified with
    'numerator'.
    '''
    
    numerator: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Interharmonic numerator. Value 0 means not applicable. Value 1 is used
    in combination with 'denominator'=2 to represent interharmonic 1/2,
    and with 'denominator'=1 it represents fundamental frequency. Finally,
    values greater than 1 indicate the harmonic of that order (e.g., 'numerator'=5
    is the fifth harmonic).
    '''
    
@stereotype(CIMStereotype.Compound)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class RemoteConnectDisconnectInfo(Identity):
    '''
    Details of remote connect and disconnect function.
    '''

    energyUsageStartDateTime: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Start date and time to accumulate energy for energy usage limiting.
    '''
    
    isArmConnect: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the RCD switch has to be armed before a connect action can
    be initiated.
    '''
    
    isArmDisconnect: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the RCD switch has to be armed before a disconnect action can
    be initiated.
    '''
    
    isEnergyLimiting: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if the energy usage is limited and the customer will be disconnected
    if they go over the limit.
    '''
    
    needsPowerLimitCheck: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if load limit has to be checked to issue an immediate disconnect
    (after a connect) if load is over the limit.
    '''
    
    needsVoltageLimitCheck: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if voltage limit has to be checked to prevent connect if voltage
    is over the limit.
    '''
    
    usePushbutton: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    True if pushbutton has to be used for connect.
    '''
    
    armedTimeout: Optional[ float | Seconds ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Setting of the timeout elapsed time.
    '''
    
    customerVoltageLimit: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Voltage limit on customer side of RCD switch above which the connect
    should not be made.
    '''
    
    energyLimit: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Limit of energy before disconnect.
    '''
    
    energyUsageWarning: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Warning energy limit, used to trigger event code that energy usage
    is nearing limit.
    '''
    
    powerLimit: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Load limit above which the connect should either not take place or
    should cause an immediate disconnect.
    '''
    
@stereotype(CIMStereotype.deprecated)
@stereotype(CIMStereotype.Compound)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class StreetAddress(Identity):
    '''
    General purpose street and postal address information.
    '''

    language: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    The language in which the address is specified, using ISO 639-1 two
    digit language code.
    '''
    
    poBox: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Post office box.
    '''
    
    postalCode: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Postal code for the address.
    '''
    
    status: Optional[Status] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Status of this address.
    '''
    
    streetDetail: Optional[StreetDetail] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Street detail.
    '''
    
    townDetail: Optional[TownDetail] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': '',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Town detail.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class StringQuantity(Identity):
    '''
    Quantity with string value (when it is not important whether it is an integral
    or a floating point number) and associated unit information.
    '''

    value: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Value of this quantity.
    '''
    
    multiplier: Optional[ UnitMultiplier ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit multiplier of this quantity.
    '''
    
    unit: Optional[ UnitSymbol ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Unit of this quantity.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class TAPPIStandard(Identity):
    '''
    Standard published by TAPPI.
    '''

    standardEdition: Optional[ TAPPIStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of TAPPI standard.
    '''
    
    standardNumber: Optional[ TAPPIStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    TAPPI standard number.
    '''
    
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class TimeInterval(Identity):
    '''
    Interval between two times.
    '''

    end: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    End time of this interval.
    '''
    
    start: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Start time of this interval.
    '''
    
@stereotype(CIMStereotype.Compound)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class UKMinistryOfDefenceStandard(Identity):
    '''
    Standard published by United Kingdom Ministry of Defence.
    '''

    standardEdition: Optional[ UKMinistryOfDefenceStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of UK Ministry of Defence standard.
    '''
    
    standardNumber: Optional[ UKMinistryofDefenceStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    UK Ministry of Defence standard number.
    '''
    
@stereotype(CIMStereotype.Compound)
@stereotype(CIMStereotype.Attribute)
@dataclass(repr=False)
class WEPStandard(Identity):
    '''
    Standard published by Westinghouse - a WEP (Westinghouse Engineering Procedure).
    '''

    standardEdition: Optional[ WEPStandardEditionKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    Edition of WEP standard.
    '''
    
    standardNumber: Optional[ WEPStandardKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://iec.ch/TC57/CIM101#',
        })
    '''
    WEP standard number.
    '''
    
