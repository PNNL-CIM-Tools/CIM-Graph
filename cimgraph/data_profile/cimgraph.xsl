<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:a="http://langdale.com.au/2005/Message#"
	xmlns:sawsdl="http://www.w3.org/ns/sawsdl"
	xmlns="http://langdale.com.au/2009/Indent">

	<xsl:output indent="yes" method="xml" encoding="utf-8" />
	<xsl:param name="version"/>
	<xsl:param name="baseURI"/>
	<xsl:param name="ontologyURI"/>
	<xsl:param name="envelope">Profile</xsl:param>
	<xsl:param name="package">au.com.langdale.cimtool.generated</xsl:param>

    <!-- Key for tracing parent-child inheritance -->
    <xsl:key name="classes-by-super" match="a:Root|a:ComplexType" use="a:SuperType/@name"/>

    <!-- Template for top-level item in schema file -->
    <xsl:template match="a:Catalog">
        <document>
            <!-- Header text with library imports -->
            <item>from __future__ import annotations</item>
			<item>from dataclasses import dataclass, field</item>
			<item>from typing import Optional</item>
			<item>from enum import Enum</item>
            <item>from pydantic import BaseModel, ValidationError</item>
            <item>from cimgraph.data_profile.units import units </item>
			<list begin="'''" indent="    " end="'''">
				<item>Annotated CIMantic Graphs data profile for <xsl:value-of select="$envelope" /></item>
				<item>Generated by CIMTool http://cimtool.org</item>
			</list>

        <!-- Start with top-level concrete classes and then work down -->
        <xsl:for-each select="a:Root[not(a:SuperType)]">
            <xsl:call-template name="super"/>
        </xsl:for-each>
        <!-- Then do top-level abstract classes and work down -->
        <xsl:for-each select="a:ComplexType[not(a:SuperType)]">
            <xsl:call-template name="super"/>
        </xsl:for-each>
        <!-- Then do all enumerations -->
        <xsl:for-each select="a:EnumeratedType">
            <xsl:call-template name="enumeration"/>
        </xsl:for-each>

        </document>
    </xsl:template>

    <!-- Template for top-level classes with no inheritance -->
    <xsl:template name="super">
        <!-- Create dataclass for each CIM class -->
        <item>@dataclass</item>
        <item>class <xsl:value-of select="@name"/>():</item>
        <!-- Parse all comment text, merge multiple comments into single block -->
        <list begin="    '''" indent="    " end="    '''">
            <xsl:for-each select="a:Comment">
                <xsl:call-template name="comment"/>
            </xsl:for-each>
        </list>
        <!-- Parse all simple attributes -->
        <xsl:for-each select="a:Simple">
            <list begin="" indent="    " end="">
                <xsl:call-template name="simpleattribute"/>
            </list>
        </xsl:for-each>
        <!-- Parse all attributes with datatypes / units -->
        <xsl:for-each select="a:Domain">
            <list begin="" indent="    " end="">
                <xsl:call-template name="attribute"/>
            </list>
        </xsl:for-each>
        <!-- Parse all associations to other classes -->
        <xsl:for-each select="a:Instance|a:Reference">
            <list begin="" indent="    " end="">
                <xsl:call-template name="assocation"/>
            </list>
        </xsl:for-each>
        <!-- Parse all child classes inheriting from top-level class -->
        <xsl:for-each select="key('classes-by-super', @name)">
            <xsl:call-template name="lower"/>
        </xsl:for-each>

	</xsl:template>

    <!-- Template for lower level classes -->
    <xsl:template name="lower">
        <!-- Only process the first occurrence of each SuperType -->
        <xsl:if test="generate-id() = generate-id(key('classes-by-super', a:SuperType/@name)[1])">
            <!-- Find all Root elements with the same SuperType -->
            <xsl:for-each select="key('classes-by-super', a:SuperType/@name)">
                <!-- Create dataclass for each CIM class -->
                <item>@dataclass</item>
                <item>
                    class <xsl:value-of select="@name"/>(<xsl:value-of select="a:SuperType/@name"/>):
                </item>
                <!-- Parse all comment text, merge multiple comments into single block -->
                <list begin="    '''" indent="    " end="    '''">
                    <xsl:for-each select="a:Comment">
                        <xsl:call-template name="comment"/>
                    </xsl:for-each>
                </list>
                <!-- Parse all simple attributes -->
                <xsl:for-each select="a:Simple">
                    <list begin="" indent="    " end="">
                        <xsl:call-template name="simpleattribute"/>
                    </list>
                </xsl:for-each>
                <!-- Parse all attributes with datatypes / units -->
                <xsl:for-each select="a:Domain">
                    <list begin="" indent="    " end="">
                        <xsl:call-template name="attribute"/>
                    </list>
                </xsl:for-each>
                <!-- Parse all associations to other classes -->
                <xsl:for-each select="a:Instance|a:Reference">
                    <list begin="" indent="    " end="">
                        <xsl:call-template name="assocation"/>
                    </list>
                </xsl:for-each>
                <!-- Parse all child classes inheriting from current class -->
                <xsl:for-each select="key('classes-by-super', @name)">
                    <xsl:call-template name="lower"/>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>

    <!-- Template for Domain attributes with datatypes -->
    <xsl:template name = 'attribute'>
		<xsl:if test="@maxOccurs &lt;= 1">

            <xsl:variable name="xstype">
                <xsl:call-template name="type">
                    <xsl:with-param name="xstype" select="@xstype"/>
                </xsl:call-template>
            </xsl:variable>

			<item>
                <xsl:value-of select="@name"/>: Optional[
                <xsl:value-of select="$xstype"/>  |
                units.<xsl:value-of select="@type"/> ] = field(
            </item>
			<list begin="" indent="    " end="">
                default = None,
			</list>
            <list begin="" indent="    " end="">
                metadata = {
                <list begin="" indent="    " end="">
                    <xsl:call-template name="attr_metadata"/>
                </list>
                })
			</list>
            <list begin="'''" indent="" end="'''">
                <xsl:for-each select="a:Comment">
                    <xsl:call-template name="comment"/>
                </xsl:for-each>
            </list>
		</xsl:if>
	</xsl:template>

    <xsl:template name = 'simpleattribute'>
		<xsl:if test="@maxOccurs &lt;= 1">
            <xsl:variable name="xstype">
                <xsl:call-template name="type">
                    <xsl:with-param name="xstype" select="@xstype"/>
                </xsl:call-template>
            </xsl:variable>

			<item>
                <xsl:value-of select="@name"/>: Optional[
                <xsl:value-of select="$xstype"/> ] = field(
            </item>
			<list begin="" indent="    " end="">
                default = None,
			</list>
            <list begin="" indent="    " end="">
                metadata = {
                <list begin="" indent="    " end="">
                    <xsl:call-template name="attr_metadata"/>
                </list>
                })
			</list>
            <list begin="'''" indent="" end="'''">
                <xsl:for-each select="a:Comment">
                    <xsl:call-template name="comment"/>
                </xsl:for-each>
            </list>
		</xsl:if>
	</xsl:template>

    <xsl:template name = 'assocation'>
		<xsl:if test="@maxOccurs &lt;= 1">

			<item>
                <xsl:value-of select="@name"/>: Optional[ str |
                <xsl:value-of select="@type"/> ] = field(
            </item>
		</xsl:if>
        <xsl:if test="@maxOccurs &gt; 1 or @maxOccurs = 'unbounded'">
			<item>
                <xsl:value-of select="@name"/>: list[ str |
                <xsl:value-of select="@type"/> ] = field(
            </item>
		</xsl:if>
			<list begin="" indent="    " end="">
                default = None,
			</list>
            <list begin="" indent="    " end="">
                metadata = {
                <list begin="" indent="    " end="">
                    <xsl:call-template name="assc_metadata"/>
                </list>
                })
			</list>
            <list begin="'''" indent="" end="'''">
                <xsl:for-each select="a:Comment">
                    <xsl:call-template name="comment"/>
                </xsl:for-each>
            </list>

	</xsl:template>

    <xsl:template name="enumeration">

        <item>class <xsl:value-of select="@name"/>( Enum ):</item>
        <list begin="    '''" indent="    " end="    '''">
            <xsl:for-each select="a:Comment">
                <xsl:call-template name="comment"/>
            </xsl:for-each>
        </list>
        <xsl:for-each select="a:EnumeratedValue">
            <list begin="" indent="    " end="">
                <xsl:call-template name="enumvalue"/>
            </list>
        </xsl:for-each>

	</xsl:template>

    <xsl:template name="comment">
		<!--  generate and annotation -->
		<!--  generate human readable annotation -->
        <wrap width="70">
			<xsl:value-of select="."/>
		</wrap>



	</xsl:template>



    <xsl:template name="attr_metadata">
		<item> 'type': 'attribute', </item>
		<item> 'minOccurs': '<xsl:value-of select="@minOccurs"/>', </item>
		<item> 'maxOccurs': '<xsl:value-of select="@maxOccurs"/>' </item>
	</xsl:template>

    <xsl:template name="assc_metadata">
		<item> 'type': 'association', </item>
		<item> 'minOccurs': '<xsl:value-of select="@minOccurs"/>', </item>
		<item> 'maxOccurs': '<xsl:value-of select="@maxOccurs"/>', </item>
		<item> 'inverse': '<xsl:value-of select="substring-after(@inverseBaseProperty,'#')"/>' </item>
	</xsl:template>

    <xsl:template name="enumvalue">
		<item>
            <xsl:value-of select="@name"/> = '<xsl:value-of select="@name"/>'
        </item>
        <list begin="'''" indent="" end="'''">
            <xsl:for-each select="a:Comment">
                <xsl:call-template name="comment"/>
            </xsl:for-each>
        </list>
	</xsl:template>

    <xsl:template name="type">
		<xsl:param name="xstype" select="@xstype"/>
		<xsl:choose>
			<xsl:when test="$xstype = 'string'">str</xsl:when>
			<xsl:when test="$xstype = 'integer' or @xstype = 'int'">int</xsl:when>
			<xsl:when test="$xstype = 'float'">float</xsl:when>
			<xsl:when test="$xstype = 'double'">float</xsl:when>
			<xsl:when test="$xstype = 'boolean'">bool</xsl:when>
			<xsl:otherwise>str</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

</xsl:stylesheet>
