<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:a="http://langdale.com.au/2005/Message#"
	xmlns:sawsdl="http://www.w3.org/ns/sawsdl"
	xmlns="http://langdale.com.au/2009/Indent">

	<xsl:output indent="yes" method="xml" encoding="utf-8" />
	<xsl:param name="version"/>
	<xsl:param name="baseURI"/>
	<xsl:param name="ontologyURI"/>
	<xsl:param name="envelope">Profile</xsl:param>
	<xsl:param name="package">au.com.langdale.cimtool.generated</xsl:param>

    <xsl:template match="a:Catalog">
		<!--  the top level template  -->
		<document>
			<item>from __future__ import annotations</item>
			<item>from dataclasses import dataclass, field</item>
			<item>from typing import Optional</item>
			<list begin="'''" indent="    " end="'''">
				<item>Annotated CIMantic Graphs data profile for <xsl:value-of select="$envelope" /></item>
				<item>Generated by CIMTool http://cimtool.org</item>
			</list>
            <xsl:for-each select="a:Root">
                <xsl:call-template name="super"/>
            </xsl:for-each>
            <xsl:for-each select="a:Root">
                <xsl:call-template name="lower"/>
            </xsl:for-each>

		</document>
	</xsl:template>

    <xsl:template name="super">
		<xsl:variable name="super" select="a:SuperType[1]"/>

        <xsl:if test="not($super)">
            <item>@dataclass</item>
            <item>class <xsl:value-of select="@name"/>():</item>
            <xsl:for-each select="a:Comment">
                <list begin="" indent="    " end="">
                    <xsl:call-template name="comment"/>
                </list>
            </xsl:for-each>
            <xsl:for-each select="a:Simple">
                <list begin="" indent="    " end="">
                    <xsl:call-template name="attribute"/>
                </list>
            </xsl:for-each>
            <xsl:for-each select="a:Instance">
                <list begin="" indent="    " end="">
                    <xsl:call-template name="assocation"/>
                </list>
            </xsl:for-each>
        </xsl:if>

	</xsl:template>

    <xsl:template name="lower">
		<xsl:variable name="super" select="a:SuperType[1]"/>

        <xsl:if test="($super)">
            <item>@dataclass</item>
            <item>class <xsl:value-of select="@name"/>():</item>
            <xsl:for-each select="a:Comment">
                <list begin="" indent="    " end="">
                    <xsl:call-template name="comment"/>
                </list>
            </xsl:for-each>
            <xsl:for-each select="a:Simple">
                <list begin="" indent="    " end="">
                    <xsl:call-template name="attribute"/>
                </list>
            </xsl:for-each>
            <xsl:for-each select="a:Instance|a:Reference">
                <list begin="" indent="    " end="">
                    <xsl:call-template name="assocation"/>
                </list>
            </xsl:for-each>
        </xsl:if>

	</xsl:template>


    <xsl:template name = 'attribute'>
		<xsl:if test="@maxOccurs &lt;= 1">
            <xsl:variable name="type">
                <xsl:call-template name="type">
                    <xsl:with-param name="xstype" select="@xstype"/>
                </xsl:call-template>
            </xsl:variable>

			<item>
                <xsl:value-of select="@name"/>: Optional[
                <xsl:value-of select="$type"/> ] = field(
            </item>
			<list begin="" indent="    " end="">
                default = None,
			</list>
            <list begin="" indent="    " end="">
                metadata = {
                <list begin="" indent="    " end="">
                    <xsl:call-template name="attr_metadata"/>
                </list>
                })
			</list>
            <xsl:for-each select="a:Comment">
                <xsl:call-template name="comment"/>
            </xsl:for-each>
		</xsl:if>
	</xsl:template>

    <xsl:template name = 'assocation'>
		<xsl:if test="@maxOccurs &lt;= 1">
            <xsl:variable name="type">
                <xsl:call-template name="type">
                    <xsl:with-param name="xstype" select="@xstype"/>
                </xsl:call-template>
            </xsl:variable>

			<item>
                <xsl:value-of select="@name"/>: Optional[
                <xsl:value-of select="$type"/> ] = field(
            </item>
		</xsl:if>
        <xsl:if test="@maxOccurs &gt; 1 or @maxOccurs = 'unbounded'">
			<item>
                <xsl:value-of select="@name"/>: list[
                <xsl:value-of select="@type"/> ] = field(
            </item>
		</xsl:if>
			<list begin="" indent="    " end="">
                default = None,
			</list>
            <list begin="" indent="    " end="">
                metadata = {
                <list begin="" indent="    " end="">
                    <xsl:call-template name="assc_metadata"/>
                </list>
                })
			</list>
            <xsl:for-each select="a:Comment">
                <xsl:call-template name="comment"/>
            </xsl:for-each>

	</xsl:template>

    <xsl:template name="comment">
		<!--  generate and annotation -->
		<!--  generate human readable annotation -->
		<item>'''</item>
        <wrap width="70">
			<xsl:value-of select="."/>
		</wrap>
		<item>'''</item>

	</xsl:template>

    <xsl:template name="attr_metadata">
		<item> 'type': 'attribute', </item>
		<item> 'minOccurs': '<xsl:value-of select="@minOccurs"/>', </item>
		<item> 'maxOccurs': '<xsl:value-of select="@maxOccurs"/>' </item>
	</xsl:template>

    <xsl:template name="assc_metadata">
		<item> 'type': 'association', </item>
		<item> 'minOccurs': '<xsl:value-of select="@minOccurs"/>', </item>
		<item> 'maxOccurs': '<xsl:value-of select="@maxOccurs"/>', </item>
		<item> 'inverse': '<xsl:value-of select="substring-after(@inverseBaseProperty,'#')"/>' </item>


	</xsl:template>

    <xsl:template name="type">
		<xsl:param name="xstype" select="@xstype"/>
		<xsl:choose>
			<xsl:when test="$xstype = 'string'">str</xsl:when>
			<xsl:when test="$xstype = 'integer' or @xstype = 'int'">int</xsl:when>
			<xsl:when test="$xstype = 'float'">float</xsl:when>
			<xsl:when test="$xstype = 'double'">float</xsl:when>
			<xsl:when test="$xstype = 'boolean'">bool</xsl:when>
			<xsl:otherwise>str</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

</xsl:stylesheet>
