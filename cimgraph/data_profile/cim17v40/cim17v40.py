from __future__ import annotations

import logging
from dataclasses import dataclass, field
from enum import Enum
from typing import Optional

from cimgraph.data_profile.identity import Identity

_log = logging.getLogger(__name__)
'''
    Annotated CIMantic Graphs data profile for cim17v40
    Generated by CIMTool http://cimtool.org
'''

BASE_URI = 'http://iec.ch/TC57/2007/profile#'
ONTOLOGY_URI = 'http://iec.ch/TC57/CIM100#'

@dataclass(repr=False)
class IdentifiedObject(Identity):
    '''
    This is a root class to provide common identification for all classes needing
    identification and naming attributes.
    '''

    mRID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Master resource identifier issued by a model authority. The mRID is unique
    within an exchange context. Global uniqueness is easily achieved by using
    a UUID, as specified in RFC 4122, for the mRID. The use of UUID is strongly
    recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the mRID
    is mapped to rdf:ID or rdf:about attributes that identify CIM object elements.
    '''

    aliasName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The aliasName is free text human readable name of the object alternative
    to IdentifiedObject.name. It may be non unique and may not correlate to
    a naming hierarchy.
    The attribute aliasName is retained because of backwards compatibility
    between CIM relases. It is however recommended to replace aliasName with
    the Name class as aliasName is planned for retirement at a future time.
    '''

    description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The description is a free human readable text describing or naming the
    object. It may be non unique and may not correlate to a naming hierarchy.
    '''

    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The name is any free human readable and possibly non unique text naming
    the object.
    '''

    DiagramObjects: list[DiagramObject] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DiagramObject.IdentifiedObject',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The diagram objects that are associated with the domain object.
    '''

    InstanceSet: Optional[InstanceSet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'InstanceSet.InstanceSetMember',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Dataset containing the data objects.
    '''

    Names: list[Name] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Name.IdentifiedObject',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All names of this identified object.
    '''

    PropertiesCIMDataObject: Optional[ChangeSetMember] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ChangeSetMember.PropertiesObject',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The single CIM data object in the appropriate dataset context.
    '''

    TargetingCIMDataObject: list[ChangeSetMember] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ChangeSetMember.TargetObject',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Data objects registered.
    '''

@dataclass(repr=False)
class ACDCTerminal(IdentifiedObject):
    '''
    An electrical connection point (AC or DC) to a piece of conducting equipment.
    Terminals are connected at physical connection points called connectivity
    nodes.
    '''

    connected: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The connected status is related to a bus-branch model and the topological
    node to terminal relation. True implies the terminal is connected to the
    related topological node and false implies it is not.
    In a bus-branch model, the connected status is used to tell if equipment
    is disconnected without having to change the connectivity described by
    the topological node to terminal relation. A valid case is that conducting
    equipment can be connected in one end and open in the other. In particular
    for an AC line segment, where the reactive line charging can be significant,
    this is a relevant case.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The orientation of the terminal connections for a multiple terminal conducting
    equipment. The sequence numbering starts with 1 and additional terminals
    should follow in increasing order. The first terminal is the "starting
    point" for a two terminal branch.
    '''

    BusNameMarker: Optional[BusNameMarker] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BusNameMarker.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The bus name marker used to name the bus (topological node).
    '''

    Measurements: list[Measurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Measurement.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurements associated with this terminal defining where the measurement
    is placed in the network topology. It may be used, for instance, to capture
    the sensor position, such as a voltage transformer (PT) at a busbar or
    a current transformer (CT) at the bar between a breaker and an isolator.
    '''

    OperationalLimitSet: list[OperationalLimitSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalLimitSet.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operational limit sets at the terminal.
    '''

@dataclass(repr=False)
class DCBaseTerminal(ACDCTerminal):
    '''
    An electrical connection point at a piece of DC conducting equipment. DC
    terminals are connected at one physical DC node that may have multiple
    DC terminals connected. A DC node is similar to an AC connectivity node.
    The model requires that DC connections are distinct from AC connections.
    '''

    DCNode: Optional[DCNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DCNode.DCTerminals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DC connectivity node to which this DC base terminal connects with zero
    impedance.
    '''

    DCTopologicalNode: Optional[DCTopologicalNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DCTopologicalNode.DCTerminals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    See association end Terminal.TopologicalNode.
    '''

@dataclass(repr=False)
class ACDCConverterDCTerminal(DCBaseTerminal):
    '''
    A DC electrical connection point at the AC/DC converter. The AC/DC converter
    is electrically connected also to the AC side. The AC connection is inherited
    from the AC conducting equipment in the same way as any other AC equipment.
    The AC/DC converter DC terminal is separate from generic DC terminal to
    restrict the connection with the AC side to AC/DC converter and so that
    no other DC conducting equipment can be connected to the AC side.
    '''

    polarity: Optional[ DCPolarityKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Represents the normal network polarity condition. Depending on the converter
    configuration the value shall be set as follows:
    - For a monopole with two converter terminals use DCPolarityKind “positive”
    and “negative”.
    - For a bi-pole or symmetric monopole with three converter terminals use
    DCPolarityKind “positive”, “middle” and “negative”.
    '''

    DCConductingEquipment: Optional[ACDCConverter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACDCConverter.DCTerminals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A DC converter terminal belong to an DC converter.
    '''

@dataclass(repr=False)
class DCTerminal(DCBaseTerminal):
    '''
    An electrical connection point to generic DC conducting equipment.
    '''

    DCConductingEquipment: Optional[DCConductingEquipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DCConductingEquipment.DCTerminals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An DC terminal belong to a DC conducting equipment.
    '''

@dataclass(repr=False)
class Terminal(ACDCTerminal):
    '''
    An AC electrical connection point to a piece of conducting equipment. Terminals
    are connected at physical connection points called connectivity nodes.
    '''

    phases: Optional[ PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Represents the normal network phasing condition. If the attribute is missing,
    three phases (ABC) shall be assumed, except for terminals of grounding
    classes (specializations of EarthFaultCompensator, GroundDisconnector,
    and Ground) which will be assumed to be N. Therefore, phase code ABCN is
    explicitly declared when needed, e.g. for star point grounding equipment.
    The phase code on terminals connecting same ConnectivityNode or same TopologicalNode
    as well as for equipment between two terminals shall be consistent.
    '''

    AuxiliaryEquipment: list[AuxiliaryEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AuxiliaryEquipment.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The auxiliary equipment connected to the terminal.
    '''

    BranchGroupTerminal: list[BranchGroupTerminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BranchGroupTerminal.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The directed branch group terminals for which this terminal is monitored.
    '''

    Bushing: Optional[Bushing] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Bushing.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Circuit: Optional[Circuit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Circuit.EndTerminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ConductingEquipment: Optional[ConductingEquipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ConductingEquipment.Terminals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The conducting equipment of the terminal. Conducting equipment have terminals
    that may be connected to other conducting equipment terminals via connectivity
    nodes or topological nodes.
    '''

    ConnectivityNode: Optional[ConnectivityNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ConnectivityNode.Terminals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The connectivity node to which this terminal connects with zero impedance.
    '''

    ConverterDCSides: list[ACDCConverter] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ACDCConverter.PccTerminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All converters' DC sides linked to this point of common coupling terminal.
    '''

    EquipmentFaults: list[EquipmentFault] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EquipmentFault.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The equipment faults at this terminal.
    '''

    HasFirstMutualCoupling: list[MutualCoupling] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MutualCoupling.First_Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Mutual couplings associated with the branch as the first branch.
    '''

    HasSecondMutualCoupling: list[MutualCoupling] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MutualCoupling.Second_Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Mutual couplings with the branch associated as the first branch.
    '''

    NormalHeadFeeder: Optional[Feeder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Feeder.NormalHeadTerminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The feeder that this terminal normally feeds. Only specified for the terminals
    at head of feeders.
    '''

    PinTerminal: list[PinTerminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PinTerminal.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegulatingControl: list[RegulatingControl] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegulatingControl.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The controls regulating this terminal.
    '''

    RemoteInputSignal: list[RemoteInputSignal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RemoteInputSignal.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Input signal coming from this terminal.
    '''

    SvPowerFlow: list[SvPowerFlow] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SvPowerFlow.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The power flow state variable associated with the terminal.
    '''

    TieFlow: list[TieFlow] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TieFlow.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The control area tie flows to which this terminal associates.
    '''

    TopologicalNode: Optional[TopologicalNode] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The topological node associated with the terminal. This can be used as
    an alternative to the connectivity node path to topological node, thus
    making it unnecessary to model connectivity nodes in some cases. Note that
    the if connectivity nodes are in the model, this association would probably
    not be used as an input specification.
    '''

    TransformerEnd: list[TransformerEnd] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerEnd.Terminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All transformer ends connected at this terminal.
    '''

@dataclass(repr=False)
class MktTerminal(Terminal):
    '''
    Subclass of IEC61970:Core:Terminal.
    '''

    Flowgate: Optional[Flowgate] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Flowgate.MktTerminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TerminalConstraintTerm: list[TerminalConstraintTerm] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TerminalConstraintTerm.MktTerminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ActivityRecord(IdentifiedObject):
    '''
    Records activity for an entity at a point in time; activity may be for
    an event that has already occurred or for a planned activity.
    '''

    createdDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this activity record has been created (different from the
    'status.dateTime', which is the time of a status change of the associated
    object, if applicable).
    '''

    reason: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason for event resulting in this activity record, typically supplied
    when user initiated.
    '''

    severity: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Severity level of event resulting in this activity record.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of event resulting in this activity record.
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.ActivityRecords',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All assets for which this activity record has been created.
    '''

    Author: Optional[Author] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Author.ActivityRecords',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Author of this activity record.
    '''

    Document: Optional[Document] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Document.ActivityRecord',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The document having associated activity records
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Information on consequence of event resulting in this activity record.
    '''

@dataclass(repr=False)
class AssetHealthEvent(ActivityRecord):
    '''
    An asset health-related event that is created by an analytic. The event
    is a record of a change in asset health.
    '''

    actionRecommendation: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Recommendation for action.
    '''

    actionTimeline: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time horizon for action.
    '''

    effectiveDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date and time when the event is effective.
    '''

    Analytic: Optional[Analytic] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Analytic.AssetHealthEvent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Analytic that initiated this asset health event.
    '''

@dataclass(repr=False)
class ConfigurationEvent(ActivityRecord):
    '''
    Used to report details on creation, change or deletion of an entity or
    its configuration.
    '''

    effectiveDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this event has or will become effective.
    '''

    modifiedBy: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Source/initiator of modification.
    '''

    remark: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Free text remarks.
    '''

    ChangedAsset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.ConfigurationEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset whose change resulted in this configuration event.
    '''

    ChangedDocument: Optional[Document] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Document.ConfigurationEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Document whose change resulted in this configuration event.
    '''

    ChangedLocation: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.ConfigurationEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location whose change resulted in this configuration event.
    '''

    ChangedOrganisationRole: Optional[OrganisationRole] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OrganisationRole.ConfigurationEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Organisation role whose change resulted in this configuration event.
    '''

    ChangedPersonRole: Optional[PersonRole] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PersonRole.ConfigurationEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Person role whose change resulted in this configuration event.
    '''

    ChangedServiceCategory: Optional[ServiceCategory] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceCategory.ConfigurationEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Service category whose change resulted in this configuration event.
    '''

    ChangedUsagePoint: Optional[UsagePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UsagePoint.ConfigurationEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Usage point whose change resulted in this configuration event.
    '''

    FaultCauseType: Optional[FaultCauseType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'FaultCauseType.ConfigurationEvent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fault cause type whose change resulted in this configuration event.
    '''

    PowerSystemResource: Optional[PowerSystemResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.ConfigurationEvent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power system resource whose change resulted in this configuration event.
    '''

@dataclass(repr=False)
class EndDeviceEvent(ActivityRecord):
    '''
    Event detected by a device function associated with the end device.
    '''

    issuerID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unique identifier of the business entity originating an end device control.
    '''

    issuerTrackingID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identifier assigned by the initiator (e.g. retail electric provider) of
    an end device control action to uniquely identify the demand response event,
    text message, or other subject of the control action. Can be used when
    cancelling an event or text message request or to identify the originating
    event or text message in a consequential end device event.
    '''

    userID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if user initiated) ID of user who initiated this end device event.
    '''

    EndDevice: Optional[EndDevice] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDevice.EndDeviceEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End device that reported this end device event.
    '''

    EndDeviceEventDetails: list[EndDeviceEventDetail] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceEventDetail.EndDeviceEvent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All details of this end device event.
    '''

    EndDeviceEventType: Optional[EndDeviceEventType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDeviceEventType.EndDeviceEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of this end device event.
    '''

    MeterReading: Optional[MeterReading] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReading.EndDeviceEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Set of measured values to which this event applies.
    '''

    UsagePoint: Optional[UsagePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UsagePoint.EndDeviceEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Usage point for which this end device event is reported.
    '''

@dataclass(repr=False)
class EnvironmentalAlert(ActivityRecord):
    '''
    An environmental alert issued by a provider or system.
    '''

    alertType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of the issued alert which is drawn from the specified alert type
    list.
    '''

    cancelledDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time and date alert cancelled. Used only if alert is cancelled before it
    expires.
    '''

    headline: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An abbreviated textual description of the alert issued.
    Note: the full text of the alert appears in the .description attribute
    (inherited from IdentifiedObject).
    '''

    AlertTypeList: Optional[AlertTypeList] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AlertTypeList.EnvironmentalAlert',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The list of alert types from which the type of this alert is drawn.
    '''

    EnvironmentalDataProvider: Optional[EnvironmentalDataProvider] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalDataProvider.EnvironmentalAlert',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental data provider for this alert.
    '''

    EnvironmentalLocationKind: list[EnvironmentalLocationType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalLocationType.EnvironmentalAlert',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of location to which this environmental alert applies.
    '''

    inEffect: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The interval for which this weather alert is in effect.
    '''

@dataclass(repr=False)
class EnvironmentalEvent(ActivityRecord):
    '''
    An environmental event to which one or more forecasts or observations may
    be tied and which may relate to or affect one or more assets.
    This class is intended to be used as a means of grouping forecasts and/or
    observations and could be used for a variety of purposes, including:
    <ul>
    <li>to define a 'named' event like Hurricane Katrina and allow the historic
    (or forecast) values for phenomena and measurements (precipitation, temperature)
    across time to be associated with it</li>
    <li>to identify assets that were (or are forecast to be) affected by a
    phenomenon or set of measurements</li>
    </ul>
    '''

    EnvironmentalInformation: list[EnvironmentalInformation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalInformation.EnvironmentalEvent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Forecast or observation related to this environmental event.
    '''

@dataclass(repr=False)
class FailureEvent(ActivityRecord):
    '''
    An event where an asset has failed to perform its functions within specified
    parameters. This class is intended to reflect the failure itself. Additional
    information resulting from forensic analysis could be captured by a diagnosis
    data set.
    '''

    corporateCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Code for asset failure.
    '''

    failureDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time and date of asset failure.
    '''

    faultLocatingMethod: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The method used for locating the faulted part of the asset. For example,
    cable options include: Cap Discharge-Thumping, Bridge Method, Visual Inspection,
    Other.
    '''

    location: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Failure location on an object.
    '''

    rootCause: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Root cause of asset failure.
    '''

    breakerFailureReason: Optional[ BreakerFailureReasonKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason for breaker failure.
    '''

    failureClassification: Optional[ AssetFailureClassification ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Classification of failure.
    '''

    failureIsolationMethod: Optional[ FailureIsolationMethodKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    How the asset failure was isolated from the system.
    '''

    failureMode: Optional[ AssetFailureMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    What asset failed to be able to do.
    '''

    transformerFailureReason: Optional[ TransformerFailureReasonKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason for transformer failure.
    '''

@dataclass(repr=False)
class MktActivityRecord(ActivityRecord):
    '''
    Subclass of IEC61968: Common:ActivityRecord.
    '''

@dataclass(repr=False)
class PSREvent(ActivityRecord):
    '''
    Event recording the change in operational status of a power system resource
    (PSR); may be for an event that has already occurred or for a planned activity.
    '''

    kind: Optional[ PSREventKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of event.
    '''

    PowerSystemResource: Optional[PowerSystemResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.PSREvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power system resource that generated this event.
    '''

@dataclass(repr=False)
class SwitchingEvent(ActivityRecord):
    '''
    Event indicating the completion (success or fail) of any switching action
    (jumper action, cut action, tag action, etc). The switching action may
    or may not be a consequential event in response to a request to complete
    the action.
    '''

    SwitchingAction: Optional[SwitchingAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingAction.SwitchingEvent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching action that is performed on the switching event
    '''

@dataclass(repr=False)
class AdjacentCASet(IdentifiedObject):
    '''
    Groups Adjacent Control Areas.
    '''

    lossPercentage : Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Loss percentage
    '''

    BidSelfSched: list[BidSelfSched] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BidSelfSched.AdjacentCASet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    HostControlArea: Optional[HostControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HostControlArea.AdjacentCASet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.AdjacentCASet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RTO: Optional[RTO] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RTO.AdjacentCASet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SubControlArea: list[SubControlArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SubControlArea.AdjacentCASet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AggregateNode(IdentifiedObject):
    '''
    An aggregated node can define a typed grouping further defined by the AnodeType
    enumeratuion. Types range from System Zone/Regions to Market Energy Regions
    to Aggregated Loads and Aggregated Generators.
    '''

    qualifASOrder: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Processing Order for AS self-provisions for this region. The priority of
    this attribute directs the awards of any resource that resides in overlapping
    regions. The regions are processed in priority manner.
    '''

    anodeType: Optional[ AnodeType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of aggregated node
    '''

    AreaLoadCurve: list[AreaLoadCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AreaLoadCurve.AggregateNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    CnodeDistributionFactor: list[CnodeDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CnodeDistributionFactor.AggregateNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Instruction: list[Instructions] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Instructions.AggregateNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Pnode: list[Pnode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Pnode.AggregateNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.AggregateNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A RegisteredResource can be associated to only one AggregateNode if not
    connected to a Pnode or MktConnectivityNode.
    '''

    RTO: Optional[RTO] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RTO.AggregateNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SubControlArea: list[SubControlArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SubControlArea.AggregateNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class RUCZone(AggregateNode):
    '''
    A specialized class of type AggregatedNode type. Defines RUC Zones. A forecast
    region represents a collection of Nodes for which the Market operator has
    developed sufficient historical demand and relevant weather data to perform
    a demand forecast for such area. The Market Operator may further adjust
    this forecast to ensure that the Reliability Unit Commitment produces adequate
    local capacity procurement.
    '''

    LossClearingResults: list[LossClearingResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LossClearingResults.RUCZone',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AlertTypeList(IdentifiedObject):
    '''
    A named list of alert types.
    Note: the name of the list is reflected in the .name attribute (inherited
    from IdentifiedObject).
    '''

    version: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The version of the named list of alert types.
    '''

    EnvironmentalAlert: list[EnvironmentalAlert] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalAlert.AlertTypeList',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An alert whose type is drawn from this alert type list.
    '''

    EnvironmentalDataAuthority: Optional[EnvironmentalDataAuthority] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalDataAuthority.AlertTypeList',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The environmental data authority responsible for publishing this list of
    alert types.
    '''

@dataclass(repr=False)
class AltGeneratingUnitMeas(IdentifiedObject):
    '''
    A prioritized measurement to be used for the generating unit in the control
    area specification.
    '''

    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority of a measurement usage. Lower numbers have first priority.
    '''

    AnalogValue: Optional[AnalogValue] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AnalogValue.AltGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The specific analog value used as a source.
    '''

    ControlAreaGeneratingUnit: Optional[ControlAreaGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ControlAreaGeneratingUnit.AltGeneratingUnitMeas',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The control area generating unit to which the prioritized measurement assignment
    is applied.
    '''

@dataclass(repr=False)
class AltTieMeas(IdentifiedObject):
    '''
    A prioritized measurement to be used for the tie flow as part of the control
    area specification.
    '''

    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority of a measurement usage. Lower numbers have first priority.
    '''

    AnalogValue: Optional[AnalogValue] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AnalogValue.AltTieMeas',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The specific analog value used as a source.
    '''

    TieFlow: Optional[TieFlow] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TieFlow.AltTieMeas',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The tie flow of the alternate measurements.
    '''

@dataclass(repr=False)
class AnalyticScore(IdentifiedObject):
    '''
    An indicative scoring by an analytic that can be used to characterize the
    health of or the risk associated with one or more assets. The analytic
    score reflects the results of an execution of an analytic against an asset
    or group of assets.
    '''

    calculationDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Timestamp of when the score was calculated.
    '''

    effectiveDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date-time for when the score applies.
    '''

    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset health score value.
    '''

    Analytic: Optional[Analytic] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Analytic.AnalyticScore',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Analytic which was executed to arrive at this analytic score..
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.AnalyticScore',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset to which this analytic score applies.
    '''

    AssetAggregateScore: Optional[AggregateScore] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AggregateScore.AnalyticScore',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Aggregate score to which this analytic score contributed.
    '''

    AssetGroup: Optional[AssetGroup] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetGroup.AnalyticScore',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset group to which this analytic score applies..
    '''

@dataclass(repr=False)
class AggregateScore(AnalyticScore):
    '''
    An aggregated indicative scoring by an analytic, which is based on other
    analytic scores, that can be used to characterize the health of or the
    risk associated with one or more assets.
    '''

    AnalyticScore: list[AnalyticScore] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AnalyticScore.AssetAggregateScore',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Analytic score contributing to this aggregate score.
    '''

@dataclass(repr=False)
class HealthScore(AggregateScore):
    '''
    Score that is indicative of the health of one or more assets.
    '''

    AssetRiskScore: Optional[RiskScore] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RiskScore.AssetHealthScore',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Risk score with which this health score is associated.
    '''

@dataclass(repr=False)
class RiskScore(AggregateScore):
    '''
    Score that is indicative of the risk associated with one or more assets.
    '''

    kind: Optional[ RiskScoreKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The risk kind, such as CustomerRisk, FinancialRisk, SafetyRisk, etc.
    '''

    AssetHealthScore: list[HealthScore] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'HealthScore.AssetRiskScore',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Individual health score associated with this risk score.
    '''

@dataclass(repr=False)
class AnnotatedProjectDependency(IdentifiedObject):
    '''
    '''

    dependencyType: Optional[ DependencyKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DependentOnStage: Optional[NetworkModelProjectStage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectStage.DependencyDependentOnStage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DependingStage: Optional[NetworkModelProjectStage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectStage.DenpendecyDependingStage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Appointment(IdentifiedObject):
    '''
    Meeting time and location.
    '''

    callAhead: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if requested to call customer when someone is about to arrive at their
    premises.
    '''

    meetingInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time reserved for appointment.
    '''

    Persons: list[PersonRole] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PersonRole.Appointments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All persons for this appointment.
    '''

    Works: list[Work] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Work.Appointments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All works for this appointment.
    '''

@dataclass(repr=False)
class Asset(IdentifiedObject):
    '''
    Tangible resource of the utility, including power system equipment, various
    end devices, cabinets, buildings, etc. For electrical network equipment,
    the role of the asset is defined through PowerSystemResource and its subclasses,
    defined mainly in the Wires model (refer to IEC61970-301 and model package
    IEC61970::Wires). Asset description places emphasis on the physical characteristics
    of the equipment fulfilling that role.
    '''

    critical: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if asset is considered critical for some reason (for example, a pole
    with critical attachments).
    '''

    initialCondition: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Condition of asset at last baseline. Examples include new, rebuilt, overhaul
    required, other. Refer to inspection data for information on the most current
    condition of the asset.
    '''

    lotNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Lot number for this asset. Even for the same model and version number,
    many assets are manufactured in lots.
    '''

    position: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Position of asset or asset component. May often be in relation to other
    assets or components.
    '''

    serialNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Serial number of this asset.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Utility-specific classification of Asset and its subtypes, according to
    their corporate standards, practices, and existing IT systems (e.g., for
    management of assets, maintenance, work, outage, customers, etc.).
    '''

    utcNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Uniquely tracked commodity (UTC) number.
    '''

    initialLossOfLife: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of initial life expectancy that has been lost as of the last
    life expectancy baseline. Represents
    (initial life expectancy - current life expectancy) / initial life expectancy.
    '''

    inUseState: Optional[ InUseStateKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication of whether asset is currently deployed (in use), ready to be
    put into use or not available for use.
    '''

    kind: Optional[ AssetKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of asset. Used in description of asset components in asset instance
    templates.
    '''

    lifecycleState: Optional[ AssetLifecycleStateKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current lifecycle state of asset.
    '''

    purchasePrice: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Purchase price of asset.
    '''

    retiredReason: Optional[ RetiredReasonKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason asset retired.
    '''

    acceptanceTest: Optional[AcceptanceTest] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Information on acceptance test.
    '''

    ActivityRecords: list[ActivityRecord] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ActivityRecord.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All activity records created for this asset.
    '''

    Analytic: list[Analytic] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Analytic.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Analytic performed on this asset.
    '''

    AnalyticScore: list[AnalyticScore] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AnalyticScore.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Analytic result related to this asset.
    '''

    AssetContainer: Optional[AssetContainer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetContainer.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Container of this asset.
    '''

    AssetDeployment: Optional[AssetDeployment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetDeployment.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This asset's deployment.
    '''

    AssetFunction: list[AssetFunction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetFunction.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Function performed by this asset.
    '''

    AssetGroup: list[AssetGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetGroup.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset group of which this asset is a part.
    '''

    AssetInfo: Optional[AssetInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetInfo.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Data applicable to this asset.
    '''

    AssetPropertyCurves: list[AssetPropertyCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetPropertyCurve.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    BreakerOperation: Optional[SwitchOperationSummary] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchOperationSummary.Breaker',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Breaker operation information for this breaker.
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConfigurationEvent.ChangedAsset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All configuration events created for this asset.
    '''

    electronicAddress: Optional[ElectronicAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Electronic address.
    '''

    ErpInventory: Optional[ErpInventory] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpInventory.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpItemMaster: Optional[ErpItemMaster] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpItemMaster.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpRecDeliveryItems: list[ErpRecDelvLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpRecDelvLineItem.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    FinancialInfo: Optional[FinancialInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'FinancialInfo.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Financial information related to this asset.
    '''

    Incident: list[Incident] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Incident.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    inUseDate: Optional[InUseDate] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    In use dates for this asset.
    '''

    lifecycleDate: Optional[LifecycleDate] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    <was lifecycle>
    Lifecycle dates for this asset.
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this asset.
    '''

    Measurements: list[Measurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Measurement.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement related to this asset.
    '''

    Medium: list[Medium] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Medium.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Medium with which this asset is filled.
    '''

    OperationalTags: list[OperationalTag] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalTag.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All operational tags placed on this asset.
    '''

    OrganisationRoles: list[AssetOrganisationRole] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetOrganisationRole.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All roles an organisation plays for this asset.
    '''

    Ownerships: list[Ownership] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Ownership.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All ownerships of this asset.
    '''

    PowerSystemResources: list[PowerSystemResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PowerSystemResource.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All power system resources used to electrically model this asset. For example,
    transformer asset is electrically modelled with a transformer and its windings
    and tap changer.
    '''

    ProcedureDataSet: list[ProcedureDataSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProcedureDataSet.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Procedure data set that applies to this asset.
    '''

    Procedures: list[Procedure] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Procedure.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All procedures applicable to this asset.
    '''

    ProductAssetModel: Optional[ProductAssetModel] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ProductAssetModel.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The model of this asset.
    '''

    Reconditionings: list[Reconditioning] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reconditioning.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ReliabilityInfos: list[ReliabilityInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReliabilityInfo.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ReplacementWorkTasks: list[WorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkTask.OldAsset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All work tasks on replacement of this old asset.
    '''

    ScheduledEvents: list[ScheduledEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ScheduledEvent.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Scheduled event related to this asset.
    '''

    ServiceLocation: Optional[ServiceLocation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceLocation.Asset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The sevice location at which the assets exist
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of this asset.
    '''

    WorkTasks: list[WorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkTask.Assets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All non-replacement work tasks performed on this asset.
    '''

@dataclass(repr=False)
class AssetContainer(Asset):
    '''
    Asset that is aggregation of other assets such as conductors, transformers,
    switchgear, land, fences, buildings, equipment, vehicles, etc.
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.AssetContainer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All assets within this container asset.
    '''

    LandProperties: list[LandProperty] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LandProperty.AssetContainers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Seals: list[Seal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Seal.AssetContainer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All seals applied to this asset container.
    '''

@dataclass(repr=False)
class Cabinet(AssetContainer):
    '''
    Enclosure that offers protection to the equipment it contains and/or safety
    to people/animals outside it.
    '''

@dataclass(repr=False)
class DuctBank(AssetContainer):
    '''
    A duct contains individual wires in the layout as specified with associated
    wire spacing instances; number of them gives the number of conductors in
    this duct.
    '''

    circuitCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of circuits in duct bank. Refer to associations between a duct (ConductorAsset)
    and an ACLineSegment to understand which circuits are in which ducts.
    '''

    WireSpacingInfos: list[WireSpacingInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WireSpacingInfo.DuctBank',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class EndDevice(AssetContainer):
    '''
    Asset container that performs one or more end device functions. One type
    of end device is a meter which can perform metering, load management, connect/disconnect,
    accounting functions, etc. Some end devices, such as ones monitoring and
    controlling air conditioners, refrigerators, pool pumps may be connected
    to a meter. All end devices may have communication capability defined by
    the associated communication function(s). An end device may be owned by
    a consumer, a service provider, utility or otherwise.
    There may be a related end device function that identifies a sensor or
    control point within a metering application or communications systems (e.g.,
    water, gas, electricity).
    Some devices may use an optical port that conforms to the ANSI C12.18 standard
    for communications.
    '''

    amrSystem: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Automated meter reading (AMR) or other communication system responsible
    for communications to this end device.
    '''

    installCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Installation code.
    '''

    isPan: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, this is a premises area network (PAN) device.
    '''

    isSmartInverter: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, there is a communicating inverter present.
    '''

    isVirtual: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, there is no physical device. As an example, a virtual meter can
    be defined to aggregate the consumption for two or more physical meters.
    Otherwise, this is a physical hardware device.
    '''

    timeZoneOffset: Optional[ float | Minutes ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time zone offset relative to GMT for the location of this end device.
    '''

    Customer: Optional[Customer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Customer.EndDevices',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer owning this end device.
    '''

    EndDeviceControls: list[EndDeviceControl] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceControl.EndDevices',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device controls sending commands to this end device.
    '''

    EndDeviceEvents: list[EndDeviceEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceEvent.EndDevice',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All events reported by this end device.
    '''

    EndDeviceFunctions: list[EndDeviceFunction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceFunction.EndDevice',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device functions this end device performs.
    '''

    EndDeviceGroups: list[EndDeviceGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceGroup.EndDevices',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device groups referring to this end device.
    '''

    EndDeviceInfo: Optional[EndDeviceInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDeviceInfo.EndDevices',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End device data.
    '''

    MeterReadSchedule: Optional[MeterReadSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReadSchedule.EndDevice',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter read schedule that applies to the end device
    '''

    ServiceLocation: Optional[ServiceLocation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceLocation.EndDevices',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Service location whose service delivery is measured by this end device.
    '''

    UsagePoint: Optional[UsagePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UsagePoint.EndDevices',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Usage point to which this end device belongs.
    '''

@dataclass(repr=False)
class Meter(EndDevice):
    '''
    Physical asset that performs the metering role of the usage point. Used
    for measuring consumption and detection of events.
    '''

    connectionCategory: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A code used to specify the connection category, e.g. low voltage, where
    the meter operates.
    '''

    formNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter form designation per ANSI C12.10 or other applicable standard. An
    alphanumeric designation denoting the circuit arrangement for which the
    meter is applicable and its specific terminal arrangement.
    '''

    MeterMultipliers: list[MeterMultiplier] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeterMultiplier.Meter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All multipliers applied at this meter.
    '''

    MeterReadings: list[MeterReading] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeterReading.Meter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All meter readings provided by this meter.
    '''

    MeterReplacementWorkTasks: list[MeterWorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeterWorkTask.OldMeter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All work tasks on replacement of this old meter.
    '''

    MeterServiceWorkTask: list[MeterWorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeterWorkTask.Meter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All non-replacement work tasks on this meter.
    '''

    VendingTransactions: list[Transaction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Transaction.Meter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All vending transactions on this meter.
    '''

@dataclass(repr=False)
class Facility(AssetContainer):
    '''
    A facility may contain buildings, storage facilities, switching facilities,
    power generation, manufacturing facilities, maintenance facilities, etc.
    '''

    kind: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of this facility.
    '''

@dataclass(repr=False)
class Structure(AssetContainer):
    '''
    Construction holding assets such as conductors, transformers, switchgear,
    etc. Where applicable, number of conductors can be derived from the number
    of associated wire spacing instances.
    '''

    fumigantAppliedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date fumigant was last applied.
    '''

    fumigantName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name of fumigant.
    '''

    removeWeed: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if weeds are to be removed around asset.
    '''

    weedRemovedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date weed were last removed.
    '''

    height: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Visible height of structure above ground level for overhead construction
    (e.g., Pole or Tower) or below ground level for an underground vault, manhole,
    etc. Refer to associated DimensionPropertiesInfo for other types of dimensions.
    '''

    materialKind: Optional[ StructureMaterialKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Material this structure is made of.
    '''

    ratedVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum rated voltage of the equipment that can be mounted on/contained
    within the structure.
    '''

    StructureSupports: list[StructureSupport] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'StructureSupport.SecuredStructure',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Structure support for this structure.
    '''

    WireSpacingInfos: list[WireSpacingInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WireSpacingInfo.Structures',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Pole(Structure):
    '''
    Pole asset.
    '''

    breastBlock: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if a block of material has been attached to base of pole in ground
    for stability. This technique is used primarily when anchors can not be
    used.
    '''

    classification: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pole class: 1, 2, 3, 4, 5, 6, 7, H1, H2, Other, Unknown.
    '''

    construction: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The framing structure mounted on the pole.
    '''

    jpaReference: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Joint pole agreement reference number.
    '''

    speciesType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pole species. Aluminum, Aluminum Davit, Concrete, Fiberglass, Galvanized
    Davit, Galvanized, Steel Davit Primed, Steel Davit, Steel Standard Primed,
    Steel, Truncated, Wood-Treated, Wood-Hard, Wood-Salt Treated, Wood-Soft,
    Wood, Other, Unknown.
    '''

    treatedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time pole was last treated with preservative.
    '''

    baseKind: Optional[ PoleBaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of base for this pole.
    '''

    diameter: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Diameter of the pole.
    '''

    length: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Length of the pole (inclusive of any section of the pole that may be underground
    post-installation).
    '''

    preservativeKind: Optional[ PolePreservativeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of preservative for this pole.
    '''

    treatmentKind: Optional[ PoleTreatmentKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of treatment for this pole.
    '''

    Streetlights: list[Streetlight] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Streetlight.Pole',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All streetlights attached to this pole.
    '''

@dataclass(repr=False)
class Bushing(Asset):
    '''
    Bushing asset.
    '''

    BushingInsulationPFs: list[BushingInsulationPF] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BushingInsulationPF.Bushing',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    FixedContact: Optional[InterrupterUnit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'InterrupterUnit.Bushing',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fixed contact of interrupter to which this bushing is attached.
    '''

    MovingContact: Optional[InterrupterUnit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'InterrupterUnit.Bushing',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Moving contact of interrupter to which this bushing is attached.
    '''

    Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.Bushing',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Terminal to which this bushing is attached.
    '''

@dataclass(repr=False)
class ComModule(Asset):
    '''
    An asset having communications capabilities that can be paired with a meter
    or other end device to provide the device with communication ability, through
    associated communication function. An end device that has communications
    capabilities through embedded hardware can use that function directly (without
    the communication module), or combine embedded communication function with
    additional communication functions provided through an external communication
    module (e.g. zigbee).
    '''

    amrSystem: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Automated meter reading (AMR) system communicating with this com module.
    '''

    supportsAutonomousDst: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, autonomous daylight saving time (DST) function is supported.
    '''

    timeZoneOffset: Optional[ float | Minutes ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time zone offset relative to GMT for the location of this com module.
    '''

    ComFunctions: list[ComFunction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ComFunction.ComModule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All functions this communication module performs.
    '''

@dataclass(repr=False)
class FACTSDevice(Asset):
    '''
    FACTS device asset.
    '''

    kind: Optional[ FACTSDeviceKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of FACTS device.
    '''

@dataclass(repr=False)
class InterrupterUnit(Asset):
    '''
    Breaker interrupter.
    Some interrupters have one fixed and one moving contact, some have 2 fixed
    contacts, some 2 moving contacts. An interrupter will have relationships
    with 2 bushings and those relationships may be any combination of the FixedContact
    and MovingContact associations.
    '''

    Bushing: list[Bushing] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Bushing.MovingContact',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Bushing(s) to which the fixed contact(s) of this interrupter is(are) attached.
    Some interrupters have one fixed and one moving contact, some have 2 fixed
    contacts, some 2 moving contacts. An interrupter will have relationships
    with 2 bushings and those relationships may be any combination of the FixedContact
    and MovingContact associations.
    '''

    OperatingMechanism: Optional[OperatingMechanism] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperatingMechanism.InterrupterUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Breaker mechanism controlling this interrupter.
    '''

@dataclass(repr=False)
class Joint(Asset):
    '''
    Joint connects two or more cables. It includes the portion of cable under
    wipes, welds, or other seals.
    '''

    insulation: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of insulation around the joint, classified according to the utility's
    asset management standards and practices.
    '''

    configurationKind: Optional[ JointConfigurationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Configuration of joint.
    '''

    fillKind: Optional[ JointFillKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Material used to fill the joint.
    '''

@dataclass(repr=False)
class OperatingMechanism(Asset):
    '''
    Breaker mechanism.
    '''

@dataclass(repr=False)
class Streetlight(Asset):
    '''
    Streetlight asset.
    '''

    armLength: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Length of arm. Note that a new light may be placed on an existing arm.
    '''

    lampKind: Optional[ StreetlightLampKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Lamp kind.
    '''

    lightRating: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power rating of light.
    '''

    Pole: Optional[Pole] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Pole.Streetlights',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pole to which thiss streetlight is attached.
    '''

@dataclass(repr=False)
class StructureSupport(Asset):
    '''
    Support for structure assets.
    '''

    anchorRodCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if anchor) Number of rods used.
    '''

    size: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Size of this support structure.
    '''

    anchorKind: Optional[ AnchorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if anchor) Kind of anchor.
    '''

    anchorRodLength: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if anchor) Length of rod used.
    '''

    direction: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Direction of this support structure.
    '''

    kind: Optional[ StructureSupportKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of structure support.
    '''

    length: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Length of this support structure.
    '''

    SecuredStructure: Optional[Structure] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Structure.StructureSupports',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The secured structure supported by this structure support.
    '''

@dataclass(repr=False)
class WorkAsset(Asset):
    '''
    Asset used to perform work.
    '''

    Crew: Optional[Crew] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Crew.WorkAssets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Crew using this work asset.
    '''

@dataclass(repr=False)
class AssetDeployment(IdentifiedObject):
    '''
    Deployment of asset deployment in a power system resource role.
    '''

    likelihoodOfFailure: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Likelihood of asset failure on a scale of 1(low) to 100 (high).
    '''

    breakerApplication: Optional[ BreakerApplicationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of network role breaker is playing in this deployment (applies to
    breaker assets only).
    '''

    deploymentState: Optional[ DeploymentStateKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current deployment state of asset.
    '''

    facilityKind: Optional[ FacilityKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of facility (like substation or pole or building or plant or service
    center) at which asset deployed.
    '''

    transformerApplication: Optional[ TransformerApplicationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of network role transformer is playing in this deployment (applies
    to transformer assets only).
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.AssetDeployment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset in this deployment.
    '''

    BaseVoltage: Optional[BaseVoltage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BaseVoltage.NetworkAssetDeployment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Base voltage of this network asset deployment.
    '''

    deploymentDate: Optional[DeploymentDate] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Dates of asset deployment.
    '''

@dataclass(repr=False)
class AssetFunction(IdentifiedObject):
    '''
    Function performed by an asset.
    '''

    configID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Configuration specified for this function.
    '''

    firmwareID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Firmware version.
    '''

    hardwareID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Hardware version.
    '''

    password: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Password needed to access this function.
    '''

    programID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name of program.
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.AssetFunction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset on which this function can be performed.
    '''

@dataclass(repr=False)
class EndDeviceFunction(AssetFunction):
    '''
    Function performed by an end device such as a meter, communication equipment,
    controllers, etc.
    '''

    enabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the function is enabled.
    '''

    EndDevice: Optional[EndDevice] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDevice.EndDeviceFunctions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End device that performs this function.
    '''

    Registers: list[Register] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Register.EndDeviceFunction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All registers for quantities metered by this end device function.
    '''

@dataclass(repr=False)
class ComFunction(EndDeviceFunction):
    '''
    Communication function of communication equipment or a device such as a
    meter.
    '''

    amrAddress: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Communication ID number (e.g. serial number, IP address, telephone number,
    etc.) of the AMR module which serves this meter.
    '''

    amrRouter: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Communication ID number (e.g. port number, serial number, data collector
    ID, etc.) of the parent device associated to this AMR module.
    '''

    direction: Optional[ ComDirectionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of communication direction.
    '''

    technology: Optional[ ComTechnologyKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of communication technology.
    '''

    ComModule: Optional[ComModule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ComModule.ComFunctions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Module performing this communication function.
    '''

@dataclass(repr=False)
class ConnectDisconnectFunction(EndDeviceFunction):
    '''
    A function that will disconnect and reconnect the customer's load under
    defined conditions.
    '''

    eventCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Running cumulative count of connect or disconnect events, for the lifetime
    of this function or until the value is cleared.
    '''

    isConnected: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if this function is in the connected state.
    '''

    isDelayedDiscon: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set true, the switch may disconnect the service at the end of a specified
    time delay after the disconnect signal has been given. If set false, the
    switch may disconnect the service immediately after the disconnect signal
    has been given. This is typically the case for over current circuit-breakers
    which are classified as either instantaneous or slow acting.
    '''

    isLocalAutoDisconOp: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set true and if disconnection can be operated locally, the operation
    happens automatically. Otherwise it happens manually.
    '''

    isLocalAutoReconOp: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set true and if reconnection can be operated locally, then the operation
    happens automatically. Otherwise, it happens manually.
    '''

    isRemoteAutoDisconOp: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set true and if disconnection can be operated remotely, then the operation
    happens automatically. If set false and if disconnection can be operated
    remotely, then the operation happens manually.
    '''

    isRemoteAutoReconOp: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set true and if reconnection can be operated remotely, then the operation
    happens automatically. If set false and if reconnection can be operated
    remotely, then the operation happens manually.
    '''

    rcdInfo: Optional[RemoteConnectDisconnectInfo] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Information on remote connect disconnect switch.
    '''

    Switches: list[Switch] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Switch.ConnectDisconnectFunctions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class SimpleEndDeviceFunction(EndDeviceFunction):
    '''
    Simple end device function distinguished by 'kind'. Use this class for
    instances that cannot be represented by another end device function specialisations.
    '''

    kind: Optional[ EndDeviceFunctionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of this function.
    '''

@dataclass(repr=False)
class AssetInfo(IdentifiedObject):
    '''
    Set of attributes of an asset, representing typical datasheet information
    of a physical device that can be instantiated and shared in different data
    exchange contexts:
    - as attributes of an asset instance (installed or in stock)
    - as attributes of an asset model (product by a manufacturer)
    - as attributes of a type asset (generic type of an asset as used in designs/extension
    planning).
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.AssetInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All assets described by this data.
    '''

    CatalogAssetType: Optional[CatalogAssetType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CatalogAssetType.AssetInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset information (nameplate) for this catalog asset type.
    '''

    PowerSystemResources: list[PowerSystemResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PowerSystemResource.AssetDatasheet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All power system resources with this datasheet information.
    '''

    ProductAssetModel: Optional[ProductAssetModel] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ProductAssetModel.AssetInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Product asset model which conforms to this catalog asset type.
    '''

@dataclass(repr=False)
class BusbarSectionInfo(AssetInfo):
    '''
    Busbar section data.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated current.
    '''

    ratedVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage.
    '''

@dataclass(repr=False)
class BushingInfo(AssetInfo):
    '''
    Bushing datasheet information.
    '''

    c1Capacitance: Optional[ float | Capacitance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Factory measured capacitance, measured between the power factor tap and
    the bushing conductor.
    '''

    c1PowerFactor: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Factory measured insulation power factor, measured between the power factor
    tap and the bushing conductor.
    '''

    c2Capacitance: Optional[ float | Capacitance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Factory measured capacitance measured between the power factor tap and
    ground.
    '''

    c2PowerFactor: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Factory measured insulation power factor, measured between the power factor
    tap and ground.
    '''

    insulationKind: Optional[ BushingInsulationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of insulation.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated current for bushing as installed.
    '''

    ratedImpulseWithstandVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated impulse withstand voltage, also known as BIL (Basic Impulse Level).
    '''

    ratedLineToGroundVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated line-to-ground voltage. Also referred to as Uy on bushing nameplate.
    '''

    ratedVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage. Can be referred to as Um, system voltage or class on bushing
    nameplate.
    '''

@dataclass(repr=False)
class EndDeviceInfo(AssetInfo):
    '''
    End device data.
    '''

    isSolidState: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, this is a solid state end device (as opposed to a mechanical or
    electromechanical device).
    '''

    phaseCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of potential phases the end device supports, typically 0, 1 or 3.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated current.
    '''

    ratedVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage.
    '''

    capability: Optional[EndDeviceCapability] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Inherent capabilities of the device (i.e., the functions it supports).
    '''

    EndDevices: list[EndDevice] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDevice.EndDeviceInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end devices described with this data.
    '''

@dataclass(repr=False)
class InterrupterUnitInfo(AssetInfo):
    '''
    Interrupter datasheet information.
    '''

    interruptingMedium: Optional[ InterruptingMediumKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interrupting medium.
    '''

@dataclass(repr=False)
class OperatingMechanismInfo(AssetInfo):
    '''
    Breaker operating mechanism datasheet information.
    '''

    closeAmps: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Close current (nominal).
    '''

    closeVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Close voltage in volts DC.
    '''

    mechanismKind: Optional[ OperatingMechanismKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of breaker operating mechanism.
    '''

    motorRunCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated motor run current in amps.
    '''

    motorStartCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated motor start current in amps.
    '''

    motorVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Nominal motor voltage in volts DC.
    '''

    tripAmps: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Trip current (nominal).
    '''

    tripVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Trip voltage in volts DC.
    '''

@dataclass(repr=False)
class PowerTransformerInfo(AssetInfo):
    '''
    Set of power transformer data, from an equipment library.
    '''

    TransformerTankInfos: list[TransformerTankInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerTankInfo.PowerTransformerInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Data for all the tanks described by this power transformer data.
    '''

@dataclass(repr=False)
class ShuntCompensatorInfo(AssetInfo):
    '''
    Properties of shunt capacitor, shunt reactor or switchable bank of shunt
    capacitor or reactor assets.
    '''

    maxPowerLoss: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum allowed apparent power loss.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated current.
    '''

    ratedReactivePower: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated reactive power.
    '''

    ratedVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage.
    '''

    ShuntCompensatorControl: Optional[ShuntCompensatorControl] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ShuntCompensatorControl.ShuntCompensatorInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class SwitchInfo(AssetInfo):
    '''
    <was Switch data.>
    Switch datasheet information.
    '''

    isSinglePhase: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, it is a single phase switch.
    '''

    isUnganged: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the switch is not ganged (i.e., a switch phase may be operated
    separately from other phases).
    '''

    breakingCapacity: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum fault current a breaking device can break safely under prescribed
    conditions of use.
    '''

    gasWeightPerTank: Optional[ float | Mass ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Weight of gas in each tank of SF6 dead tank breaker.
    '''

    lowPressureAlarm: Optional[ float | Pressure ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Gas or air pressure at or below which a low pressure alarm is generated.
    '''

    lowPressureLockOut: Optional[ float | Pressure ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Gas or air pressure below which the breaker will not open.
    '''

    oilVolumePerTank: Optional[ float | Volume ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Volume of oil in each tank of bulk oil breaker.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated current.
    '''

    ratedFrequency: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Frequency for which switch is rated.
    '''

    ratedImpulseWithstandVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated impulse withstand voltage, also known as BIL (Basic Impulse Level).
    '''

    ratedInterruptingTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switch rated interrupting time in seconds.
    '''

    ratedVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage.
    '''

@dataclass(repr=False)
class TapChangerInfo(AssetInfo):
    '''
    Tap changer data.
    '''

    ctRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Built-in current transducer ratio.
    '''

    highStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Highest possible tap step position, advance from neutral.
    '''

    isTcul: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Whether this tap changer has under load tap changing capabilities.
    '''

    lowStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Lowest possible tap step position, retard from neutral.
    '''

    neutralStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The neutral tap step position for the winding.
    '''

    ptRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Built-in voltage transducer ratio.
    '''

    bil: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Basic Insulation Level (BIL) expressed as the impulse crest voltage of
    a nominal wave, typically 1.2 X 50 microsecond. This is a measure of the
    ability of the insulation to withstand very high voltage surges.
    '''

    ctRating: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Built-in current transformer primary rating.
    '''

    frequency: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Frequency at which the ratings apply.
    '''

    neutralU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage at which the winding operates at the neutral tap setting.
    '''

    ratedApparentPower: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated apparent power.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated current.
    '''

    ratedVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage.
    '''

    stepPhaseIncrement: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase shift per step position.
    '''

    stepVoltageIncrement: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tap step increment, in per cent of rated voltage, per step position.
    '''

@dataclass(repr=False)
class TransformerEndInfo(AssetInfo):
    '''
    Transformer end data.
    '''

    endNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number for this transformer end, corresponding to the end's order in the
    PowerTransformer.vectorGroup attribute. Highest voltage winding should
    be 1.
    '''

    phaseAngleClock: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Winding phase angle where 360 degrees are represented with clock hours,
    so the valid values are {0, ..., 11}. For example, to express the second
    winding in code 'Dyn11', set attributes as follows: 'endNumber'=2, 'connectionKind'
    = Yn and 'phaseAngleClock' = 11.
    '''

    connectionKind: Optional[ WindingConnection ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of connection.
    '''

    emergencyS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Apparent power that the winding can carry under emergency conditions (also
    called long-term emergency power).
    '''

    insulationU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Basic insulation level voltage rating.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    DC resistance.
    '''

    ratedS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal apparent power rating.
    '''

    ratedU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage: phase-phase for three-phase windings, and either phase-phase
    or phase-neutral for single-phase windings.
    '''

    shortTermS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Apparent power that this winding can carry for a short period of time (in
    emergency).
    '''

    CoreAdmittance: Optional[TransformerCoreAdmittance] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerCoreAdmittance.TransformerEndInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Core admittance calculated from this transformer end datasheet, representing
    magnetising current and core losses. The full values of the transformer
    should be supplied for one transformer end info only.
    '''

    EnergisedEndNoLoadTests: list[NoLoadTest] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NoLoadTest.EnergisedEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All no-load test measurements in which this transformer end was energised.
    '''

    EnergisedEndOpenCircuitTests: list[OpenCircuitTest] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OpenCircuitTest.EnergisedEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All open-circuit test measurements in which this transformer end was excited.
    '''

    EnergisedEndShortCircuitTests: list[ShortCircuitTest] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ShortCircuitTest.EnergisedEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All short-circuit test measurements in which this transformer end was energised.
    '''

    FromMeshImpedances: list[TransformerMeshImpedance] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerMeshImpedance.FromTransformerEndInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All mesh impedances between this 'to' and other 'from' transformer ends.
    '''

    GroundedEndShortCircuitTests: list[ShortCircuitTest] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ShortCircuitTest.GroundedEnds',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All short-circuit test measurements in which this transformer end was short-circuited.
    '''

    OpenEndOpenCircuitTests: list[OpenCircuitTest] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OpenCircuitTest.OpenEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All open-circuit test measurements in which this transformer end was not
    excited.
    '''

    ToMeshImpedances: list[TransformerMeshImpedance] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerMeshImpedance.ToTransformerEndInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All mesh impedances between this 'from' and other 'to' transformer ends.
    '''

    TransformerStarImpedance: Optional[TransformerStarImpedance] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerStarImpedance.TransformerEndInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer star impedance calculated from this transformer end datasheet.
    '''

    TransformerTankInfo: Optional[TransformerTankInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerTankInfo.TransformerEndInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer tank data that this end description is part of.
    '''

@dataclass(repr=False)
class TransformerTankInfo(AssetInfo):
    '''
    Set of transformer tank data, from an equipment library.
    '''

    PowerTransformerInfo: Optional[PowerTransformerInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerTransformerInfo.TransformerTankInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power transformer data that this tank description is part of.
    '''

    TransformerEndInfos: list[TransformerEndInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerEndInfo.TransformerTankInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Data for all the ends described by this transformer tank data.
    '''

@dataclass(repr=False)
class WireAssemblyInfo(AssetInfo):
    '''
    Describes the construction of a multi-conductor wire.
    '''

    PerLengthLineParameter: list[PerLengthLineParameter] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PerLengthLineParameter.WireAssemblyInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Per length line parameter associated with this wire assembly.
    '''

    WirePhaseInfo: list[WirePhaseInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WirePhaseInfo.WireAssemblyInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Wire phase information associated with this wire assembly.
    '''

@dataclass(repr=False)
class WireInfo(AssetInfo):
    '''
    Wire data that can be specified per line segment phase, or for the line
    segment as a whole in case its phases all have the same wire characteristics.
    '''

    coreStrandCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if used) Number of strands in the steel core.
    '''

    insulated: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if conductor is insulated.
    '''

    sizeDescription: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Describes the wire gauge or cross section (e.g., 4/0, #2, 336.5).
    '''

    strandCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of strands in the conductor.
    '''

    coreRadius: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if there is a different core material) Radius of the central core.
    '''

    gmr: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Geometric mean radius. If we replace the conductor by a thin walled tube
    of radius GMR, then its reactance is identical to the reactance of the
    actual conductor.
    '''

    insulationMaterial: Optional[ WireInsulationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if insulated conductor) Material used for insulation.
    '''

    insulationThickness: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if insulated conductor) Thickness of the insulation.
    '''

    material: Optional[ WireMaterialKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conductor material.
    '''

    rAC25: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    AC resistance per unit length of the conductor at 25 °C.
    '''

    rAC50: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    AC resistance per unit length of the conductor at 50 °C.
    '''

    rAC75: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    AC resistance per unit length of the conductor at 75 °C.
    '''

    radius: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Outside radius of the wire.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current carrying capacity of the wire under stated thermal conditions.
    '''

    rDC20: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    DC resistance per unit length of the conductor at 20 °C.
    '''

    ACLineSegmentPhase: list[ACLineSegmentPhase] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ACLineSegmentPhase.WireInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    AC line segment phase information associated with this wire information.
    '''

    WirePhaseInfo: list[WirePhaseInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WirePhaseInfo.WireInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Wire phase information associated with this wire information.
    '''

@dataclass(repr=False)
class CableInfo(WireInfo):
    '''
    Cable data.
    '''

    isStrandFill: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if wire strands are extruded in a way to fill the voids in the cable.
    '''

    sheathAsNeutral: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if sheath / shield is used as a neutral (i.e., bonded).
    '''

    constructionKind: Optional[ CableConstructionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of construction of this cable.
    '''

    diameterOverCore: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Diameter over the core, including any semi-con screen; should be the insulating
    layer's inside diameter.
    '''

    diameterOverInsulation: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Diameter over the insulating layer, excluding outer screen.
    '''

    diameterOverJacket: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Diameter over the outermost jacketing layer.
    '''

    diameterOverScreen: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Diameter over the outer screen; should be the shield's inside diameter.
    '''

    nominalTemperature: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum nominal design operating temperature.
    '''

    outerJacketKind: Optional[ CableOuterJacketKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of outer jacket of this cable.
    '''

    shieldMaterial: Optional[ CableShieldMaterialKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Material of the shield.
    '''

@dataclass(repr=False)
class ConcentricNeutralCableInfo(CableInfo):
    '''
    Concentric neutral cable data.
    '''

    neutralStrandCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of concentric neutral strands.
    '''

    diameterOverNeutral: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Diameter over the concentric neutral strands.
    '''

    neutralStrandGmr: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Geometric mean radius of the neutral strand.
    '''

    neutralStrandRadius: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Outside radius of the neutral strand.
    '''

    neutralStrandRDC20: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    DC resistance per unit length of the neutral strand at 20 °C.
    '''

@dataclass(repr=False)
class TapeShieldCableInfo(CableInfo):
    '''
    Tape shield cable data.
    '''

    tapeLap: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of the tape shield width that overlaps in each wrap, typically
    10% to 25%.
    '''

    tapeThickness: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Thickness of the tape shield, before wrapping.
    '''

@dataclass(repr=False)
class OverheadWireInfo(WireInfo):
    '''
    Overhead wire data.
    '''

@dataclass(repr=False)
class WireSpacingInfo(AssetInfo):
    '''
    Wire spacing data that associates multiple wire positions with the line
    segment, and allows to calculate line segment impedances. Number of phases
    can be derived from the number of associated wire positions whose phase
    is not neutral.
    '''

    isCable: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, this spacing data describes a cable.
    '''

    phaseWireCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of wire sub-conductors in the symmetrical bundle (typically between
    1 and 4).
    '''

    phaseWireSpacing: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Distance between wire sub-conductors in a symmetrical bundle.
    '''

    usage: Optional[ WireUsageKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Usage of the associated wires.
    '''

    ACLineSegment: list[ACLineSegment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ACLineSegment.WireSpacingInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The AC line segment defined by the wire spacing information
    '''

    DuctBank: Optional[DuctBank] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DuctBank.WireSpacingInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Structures: list[Structure] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Structure.WireSpacingInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WirePositions: list[WirePosition] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WirePosition.WireSpacingInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All positions of single wires (phase or neutral) making the conductor.
    '''

@dataclass(repr=False)
class AssetModelCatalogue(IdentifiedObject):
    '''
    Catalogue of available types of products and materials that are used to
    build or install, maintain or operate an Asset. Each catalogue item is
    for a specific product (AssetModel) available from a specific supplier.
    '''

    AssetModelCatalogueItems: list[AssetModelCatalogueItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetModelCatalogueItem.AssetModelCatalogue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AsynchronousMachineDynamics(IdentifiedObject):
    '''
    Asynchronous machine whose behaviour is described by reference to a standard
    model expressed in either time constant reactance form or equivalent circuit
    form <font color="#0f0f0f">or by definition of a user-defined model.</font>
    Parameter details:
    <ol>
    <li>Asynchronous machine parameters such as <i>Xl, Xs,</i> etc. are actually
    used as inductances in the model, but are commonly referred to as reactances
    since, at nominal frequency, the PU values are the same. However, some
    references use the symbol <i>L</i> instead of <i>X</i>.</li>
    </ol>
    '''

    AsynchronousMachine: Optional[AsynchronousMachine] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AsynchronousMachine.AsynchronousMachineDynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asynchronous machine to which this asynchronous machine dynamics model
    applies.
    '''

@dataclass(repr=False)
class Auction(IdentifiedObject):
    '''
    A class providing the identification and type of an auction.
    '''

    allocationMode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identification of the method of allocation in an auction.
    '''

    cancelled: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An indicator that signifies that the auction has been cancelled.
    '''

    category: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The product category of an auction.
    '''

    paymentTerms: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terms which dictate the determination of the bid payment price.
    '''

    rights: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The rights of use the transmission capacity acquired in an auction.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The kind of the Auction (e.g. implicit, explicit ...).
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.Auction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class BaseFrequency(IdentifiedObject):
    '''
    The BaseFrequency class describes a base frequency for a power system network.
    In case of multiple power networks with different frequencies, e.g. 50
    Hz or 60 Hz each network will have its own base frequency class. Hence
    it is assumed that power system objects having different base frequencies
    appear in separate documents where each document has a single base frequency
    instance.
    '''

    frequency: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The base frequency.
    '''

@dataclass(repr=False)
class BasePower(IdentifiedObject):
    '''
    The BasePower class defines the base power used in the per unit calculations.
    '''

    basePower: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value used as base power.
    '''

@dataclass(repr=False)
class BaseVoltage(IdentifiedObject):
    '''
    Defines a system base voltage which is referenced.
    '''

    nominalVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The power system resource's base voltage. Shall be a positive value and
    not zero.
    '''

    ConductingEquipment: list[ConductingEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConductingEquipment.BaseVoltage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All conducting equipment with this base voltage. Use only when there is
    no voltage level container used and only one base voltage applies. For
    example, not used for transformers.
    '''

    NetworkAssetDeployment: list[AssetDeployment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetDeployment.BaseVoltage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A network asset deployment at this base voltage level.
    '''

    TopologicalNode: list[TopologicalNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TopologicalNode.BaseVoltage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The topological nodes at the base voltage.
    '''

    TransformerEnds: list[TransformerEnd] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerEnd.BaseVoltage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer ends at the base voltage. This is essential for PU calculation.
    '''

    VoltageLevel: list[VoltageLevel] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'VoltageLevel.BaseVoltage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The voltage levels having this base voltage.
    '''

@dataclass(repr=False)
class BasicIntervalSchedule(IdentifiedObject):
    '''
    Schedule of values at points in time.
    '''

    startTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time for the first time point. The value can be a time of day, not
    a specific date.
    '''

    value1Multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Multiplier for value1.
    '''

    value1Unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value1 units of measure.
    '''

    value2Multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Multiplier for value2.
    '''

    value2Unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value2 units of measure.
    '''

@dataclass(repr=False)
class DynamicSchedule(BasicIntervalSchedule):
    '''
    A continuously variable component of a control area's MW net interchange
    schedule. Dynamic schedules are sent and received by control areas.
    '''

    dynSchedSignRev: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Dynamic schedule sign reversal required (true/false)
    '''

    dynSchedStatus: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The "active" or "inactive" status of the dynamic schedule
    '''

    MktMeasurement: Optional[MktMeasurement] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MktMeasurement.DynamicSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Receive_SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.Receive_DynamicSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A control area can receive dynamic schedules from other control areas
    '''

    Send_SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.Send_DynamicSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A control area can send dynamic schedules to other control areas
    '''

@dataclass(repr=False)
class IrregularIntervalSchedule(BasicIntervalSchedule):
    '''
    The schedule has time points where the time between them varies.
    '''

    TimePoints: list[IrregularTimePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IrregularTimePoint.IntervalSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The point data values that define a curve.
    '''

@dataclass(repr=False)
class RegularIntervalSchedule(BasicIntervalSchedule):
    '''
    The schedule has time points where the time between them is constant.
    '''

    endTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time for the last time point. The value can be a time of day, not a
    specific date.
    '''

    timeStep: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time between each pair of subsequent regular time points in sequence
    order.
    '''

    TimePoints: list[RegularTimePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegularTimePoint.IntervalSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The regular interval time point data values that define this schedule.
    '''

@dataclass(repr=False)
class AreaLoadCurve(RegularIntervalSchedule):
    '''
    Area load curve definition.
    '''

    forecastType: Optional[ LoadForecastType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Load forecast area type.
    '''

    AggregateNode: Optional[AggregateNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AggregateNode.AreaLoadCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TACArea: Optional[TACArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TACArea.AreaLoadCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class BidSelfSched(RegularIntervalSchedule):
    '''
    Defines self schedule values to be used for specified time intervals.
    '''

    pumpSelfSchedMw: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Contains the PriceTaker, ExistingTransmissionContract, TransmissionOwnershipRights
    pumping self schedule quantity. If this value is not null, then the unit
    is in pumping mode.
    '''

    selfSchedMw: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Self scheduled value
    '''

    selfSchedSptResource: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Price Taker Export Self Sched Support Resource
    '''

    wheelingTransactionReference: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A unique identifier of a wheeling transaction. A wheeling transaction is
    a balanced Energy exchange among Supply and Demand Resources.
    '''

    balancingFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is a Y/N flag for a self-schedule of a resource per market per date
    and hour, using a specific TR ID. It indicates whether a self-schedule
    using a TR is balanced with another self-schedule using the same TR ID.
    '''

    bidType: Optional[ BidTypeRMR ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    bidType has two types as the required output of requirements and qualified
    pre-dispatch.
    '''

    priorityFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is a Y/N flag for a self-schedule of a resource per market per date
    and hour, using a specific TR ID. It indicates whether a self-schedule
    using a TR has scheduling priority in DAM/RTM.
    '''

    referenceType: Optional[ SelfSchedReferenceType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication of which type of self schedule is being referenced.
    '''

    selfSchedType: Optional[ MarketProductSelfSchedType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This attribute is used to specify if a bid includes a self sched bid. If
    so what self sched type is it. The possible values are shown as follow
    but not limited to:
    'ETC' - Existing transmission contract
    'TOR' - Transmission ownership right
    'RMR' - Reliability must run
    'RGMR' - Regulatory must run
    "RMT" - Relaiability must take
    "PT" - Price taker
    "LPT" - Low price taker
    "SP" - Self provision
    "RA" - Resource adequacy
    This attribute is originally defined in the BidSelfSched class
    '''

    updateType: Optional[ MQSCHGType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class GenUnitOpSchedule(RegularIntervalSchedule):
    '''
    The generating unit's Operator-approved current operating schedule (or
    plan), typically produced with the aid of unit commitment type analyses.
    The X-axis represents absolute time. The Y1-axis represents the status
    (0=off-line and unavailable: 1=available: 2=must run: 3=must run at fixed
    power value: etc.). The Y2-axis represents the must run fixed power value
    where required.
    '''

    GeneratingUnit: Optional[GeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.GenUnitOpSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A generating unit may have an operating schedule, indicating the planned
    operation of the unit.
    '''

@dataclass(repr=False)
class HydroPumpOpSchedule(RegularIntervalSchedule):
    '''
    The hydro pump's Operator-approved current operating schedule (or plan),
    typically produced with the aid of unit commitment type analyses. The unit's
    operating schedule status is typically given as: (0=unavailable) (1=available
    to startup or shutdown) (2=must pump).
    '''

    HydroPump: Optional[HydroPump] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HydroPump.HydroPumpOpSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hydro pump has a pumping schedule over time, indicating when pumping
    is to occur.
    '''

@dataclass(repr=False)
class InflowForecast(RegularIntervalSchedule):
    '''
    Natural water inflow to a reservoir, usually forecasted from predicted
    rain and snowmelt. Typically in one hour increments for up to 10 days.
    The forecast is given in average cubic meters per second over the time
    increment.
    '''

    Reservoir: Optional[Reservoir] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Reservoir.InflowForecasts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A reservoir may have a "natural" inflow forecast.
    '''

@dataclass(repr=False)
class SeasonDayTypeSchedule(RegularIntervalSchedule):
    '''
    A time schedule covering a 24 hour period, with curve data for a specific
    type of season and day.
    '''

    DayType: Optional[DayType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DayType.SeasonDayTypeSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    DayType for the Schedule.
    '''

    Season: Optional[Season] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Season.SeasonDayTypeSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Season for the Schedule.
    '''

@dataclass(repr=False)
class ConformLoadSchedule(SeasonDayTypeSchedule):
    '''
    A curve of load versus time (X-axis) showing the active power values (Y1-axis)
    and reactive power (Y2-axis) for each unit of the period covered. This
    curve represents a typical pattern of load over the time period for a given
    day type and season.
    '''

    ConformLoadGroup: Optional[ConformLoadGroup] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ConformLoadGroup.ConformLoadSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ConformLoadGroup where the ConformLoadSchedule belongs.
    '''

@dataclass(repr=False)
class NonConformLoadSchedule(SeasonDayTypeSchedule):
    '''
    An active power (Y1-axis) and reactive power (Y2-axis) schedule (curves)
    versus time (X-axis) for non-conforming loads, e.g., large industrial load
    or power station service (where modelled).
    '''

    NonConformLoadGroup: Optional[NonConformLoadGroup] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NonConformLoadGroup.NonConformLoadSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The NonConformLoadGroup where the NonConformLoadSchedule belongs.
    '''

@dataclass(repr=False)
class RegulationSchedule(SeasonDayTypeSchedule):
    '''
    A pre-established pattern over time for a controlled variable, e.g., busbar
    voltage.
    '''

    RegulatingControl: Optional[RegulatingControl] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegulatingControl.RegulationSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Regulating controls that have this schedule.
    '''

    VoltageControlZones: list[VoltageControlZone] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'VoltageControlZone.RegulationSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A VoltageControlZone may have a voltage regulation schedule.
    '''

@dataclass(repr=False)
class SwitchSchedule(SeasonDayTypeSchedule):
    '''
    A schedule of switch positions. If RegularTimePoint.value1 is 0, the switch
    is open. If 1, the switch is closed.
    '''

    Switch: Optional[Switch] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Switch.SwitchSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A SwitchSchedule is associated with a Switch.
    '''

@dataclass(repr=False)
class TapSchedule(SeasonDayTypeSchedule):
    '''
    A pre-established pattern over time for a tap step.
    '''

    TapChanger: Optional[TapChanger] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TapChanger.TapSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A TapSchedule is associated with a TapChanger.
    '''

@dataclass(repr=False)
class SteamSendoutSchedule(RegularIntervalSchedule):
    '''
    The cogeneration plant's steam sendout schedule in volume per time unit.
    '''

    CogenerationPlant: Optional[CogenerationPlant] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CogenerationPlant.SteamSendoutSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A cogeneration plant has a steam sendout schedule.
    '''

@dataclass(repr=False)
class BilateralExchangeActor(IdentifiedObject):
    '''
    BilateralExchangeActor describes an actor that provides ICCP data, consumes
    ICCP data or both. The ICCP data provider lists the data it makes available
    to an ICCP data consumer. This data is described by ProvidedBilateralPoints.
    The relation between an ICCP data provider and a consumer is established
    by a BilateralExchangeAgreement. It is up to the ICCP data consumer to
    select what ProvidedBilateralPoints to use. The selection made is not described
    in this information model.
    '''

    CommunicationLink: list[CommunicationLink] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CommunicationLink.BilateralExchangeActor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Communication addressing for a Bilateral Table used by a ICCP data provider
    or consumer.
    '''

    ConsumerBilateralExchange: list[BilateralExchangeAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BilateralExchangeAgreement.Consumer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Agreement to information subscriber.
    '''

    ProvidedBilateralIOPoint: list[ProvidedBilateralPoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProvidedBilateralPoint.BilateralExchangeActor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    ICCP information in a Bilateral table that will be exposed to a remote
    peer.
    '''

    ProviderBilateralExchange: list[BilateralExchangeAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BilateralExchangeAgreement.Provider',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Agreement to information provider.
    '''

@dataclass(repr=False)
class ICCPVCC(BilateralExchangeActor):
    '''
    Indicates that the ICCP information is global in nature and normally is
    available to all authorized peers.
    '''

@dataclass(repr=False)
class ICCPVirtualControlCentre(BilateralExchangeActor):
    '''
    This contains the information that a particular actor exposes for a particular
    agreed upon ICCP Bilateral Table.
    '''

    calling: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used to indicate if the Provider is responsible for initiating the TASE.2
    connection. If the value is TRUE, the provider is responsible for establishing
    the association. If the value is FALSE, the peer provider of the Bilateral
    Table will need to establish the association.
    '''

    clientAndServer: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If True the value indicates that the entity represented by the bilateral
    table is capable of issuing requests and responding to request (e.g. bidirectional
    support of ICCP requests).
    If False, this indicates that a calling entity (e.g. calling = True) will
    not be able to respond to ICCP requests. If False, and calling=False, this
    indicates that the entity will only respond to ICCP requests and not issue
    ICCP requests.
    '''

    minimumUpdateInterval: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the fastest update interval that can be provided for integrity
    information and Transfer Set creation. The value is in seconds.
    '''

    nameOfLocalICC: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the ICC scope name that the remote can use to access the information
    in the Bilateral Table if the information is not VCC scoped. This value
    may not be null.
    '''

    supportForBlock1: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for basic services. Must
    always be true.
    '''

    supportForBlock2: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for extended conditions.
    '''

    supportForBlock3: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for blocked transfers.
    '''

    supportForBlock4: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for information messages.
    '''

    supportForBlock5: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for device control.
    '''

    supportForDepriciatedBlock8: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for accounts. The use of
    this block was deprecated in Edition 3.
    '''

    transportSecurityRequirement: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, then transport level security as specified by IEC 62351-6 is required.
    '''

    applicationSecurityRequirement: Optional[ ApplicationSecurityKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the expected security mechanism, per IEC 62351-4, to be utilized.
    '''

@dataclass(repr=False)
class BilateralExchangeAgreement(IdentifiedObject):
    '''
    This is the representation of the information exchange agreement between
    peers.
    '''

    Consumer: Optional[BilateralExchangeActor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BilateralExchangeActor.ConsumerBilateralExchange',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Subscriber of information from a remote peer.
    '''

    Provider: Optional[BilateralExchangeActor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BilateralExchangeActor.ProviderBilateralExchange',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Provider of information to a remote peer.
    '''

@dataclass(repr=False)
class TASE2BilateralTable(BilateralExchangeAgreement):
    '''
    This class describe the sending (providing) side in a bilateral ICCP data
    exchange. Hence the ICCP bilateral (table) descriptions are created by
    exchanging ICCP Provider data between the parties.
    '''

    bilateralTableID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the version of the Bilateral Table configuration that is being
    exchanged.
    '''

    bilateralTableVersion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Version attribute identifies a unique version of the Bilateral Table.
    If any changes are made to a Bilateral Table, then a new unique value for
    this attribute shall be generated.
    '''

    tase2version: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the version of the TASE.2 that is needed to access the Bilateral
    Table information via TASE.2.
    In order for a link to be established, both sides must have the same value.
    '''

@dataclass(repr=False)
class BranchGroup(IdentifiedObject):
    '''
    A group of branch terminals whose directed flow summation is to be monitored.
    A branch group need not form a cutset of the network.
    '''

    monitorActivePower: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Monitor the active power flow.
    '''

    monitorReactivePower: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Monitor the reactive power flow.
    '''

    maximumActivePower: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum active power flow.
    '''

    maximumReactivePower: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum reactive power flow.
    '''

    minimumActivePower: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum active power flow.
    '''

    minimumReactivePower: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum reactive power flow.
    '''

    BranchGroupTerminal: list[BranchGroupTerminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BranchGroupTerminal.BranchGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The directed branch group terminals to be summed.
    '''

@dataclass(repr=False)
class BusNameMarker(IdentifiedObject):
    '''
    Used to apply user standard names to TopologicalNodes. Associated with
    one or more terminals that are normally connected with the bus name. The
    associated terminals are normally connected by non-retained switches. For
    a ring bus station configuration, all BusbarSection terminals in the ring
    are typically associated. For a breaker and a half scheme, both BusbarSections
    would normally be associated. For a ring bus, all BusbarSections would
    normally be associated. For a "straight" busbar configuration, normally
    only the main terminal at the BusbarSection would be associated.
    '''

    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority of bus name marker for use as topology bus name. Use 0 for do
    not care. Use 1 for highest priority. Use 2 as priority is less than 1
    and so on.
    '''

    ReportingGroup: Optional[ReportingGroup] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReportingGroup.BusNameMarker',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reporting group to which this bus name marker belongs.
    '''

    Terminal: list[ACDCTerminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ACDCTerminal.BusNameMarker',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminals associated with this bus name marker.
    '''

    TopologicalNode: Optional[TopologicalNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.BusNameMarker',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A user defined topological node that was originally defined in a planning
    model not yet having topology described by ConnectivityNodes. Once ConnectivityNodes
    has been created they may linked to user defined ToplogicalNdes using BusNameMarkers.
    '''

@dataclass(repr=False)
class BushingInsulationPF(IdentifiedObject):
    '''
    Bushing insulation power factor condition as a result of a test.
    Typical status values are: Acceptable, Minor Deterioration or Moisture
    Absorption, Major Deterioration or Moisture Absorption, Failed.
    '''

    testKind: Optional[ BushingInsulationPfTestKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of test for this bushing.
    '''

    Bushing: Optional[Bushing] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Bushing.BushingInsulationPFs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TransformerObservation: Optional[TransformerObservation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerObservation.BushingInsultationPFs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class CSCDynamics(IdentifiedObject):
    '''
    CSC function block whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''

    CSConverter: Optional[CsConverter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CsConverter.CSCDynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current source converter to which current source converter dynamics model
    applies.
    '''

@dataclass(repr=False)
class CalculationMethodHierarchy(IdentifiedObject):
    '''
    The hierarchy of calculation methods used to derive this measurement.
    .
    '''

    CalculationMethodOrder: list[CalculationMethodOrder] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CalculationMethodOrder.CalculationMethodHierarchy',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Order of a statistical calculation associated with this calculation method
    hierarchy.
    '''

    Measurement: list[Measurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Measurement.CalculationMethodHierarchy',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement to which this calculation method hierarchy applies.
    '''

    MeasurementValue: Optional[MeasurementValue] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeasurementValue.CalculationMethodHierarchy',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement value to which this calculation method hierarchy applies.
    '''

@dataclass(repr=False)
class CashierShift(IdentifiedObject):
    '''
    The operating shift for a cashier, during which the cashier may transact
    against the cashier shift, subject to vendor shift being open.
    '''

@dataclass(repr=False)
class CatalogAssetType(IdentifiedObject):
    '''
    a Assets that may be used for planning, work or design purposes.
    '''

    stockItem: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if item is a stock item (default).
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Description of type of asset.
    '''

    estimatedUnitCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Estimated unit cost (or cost per unit length) of this type of asset. It
    does not include labor to install, construct or configure it.
    '''

    kind: Optional[ AssetKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of asset (from enumerated list).
    '''

    AssetInfo: Optional[AssetInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetInfo.CatalogAssetType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generic nameplate information associated with this catalog asset type.
    '''

    CompatibleUnits: list[CompatibleUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CompatibleUnit.GenericAssetModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpBomItemDatas: list[ErpBomItemData] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpBomItemData.TypeAsset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpInventoryIssues: list[ErpIssueInventory] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpIssueInventory.TypeAsset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpReqLineItems: list[ErpReqLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpReqLineItem.TypeAsset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ProductAssetModel: list[ProductAssetModel] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProductAssetModel.CatalogAssetType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Product asset model conforming to this catalog asset type.
    '''

    quantity: Optional[StringQuantity] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value, unit of measure, and multiplier for the quantity.
    '''

    TypeAssetCatalogue: Optional[TypeAssetCatalogue] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TypeAssetCatalogue.TypeAssets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Channel(IdentifiedObject):
    '''
    A single path for the collection or reporting of register values over a
    period of time. For example, a register which measures forward energy can
    have two channels, one providing bulk quantity readings and the other providing
    interval readings of a fixed interval size.
    '''

    isVirtual: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the data is being calculated by an enterprise system rather than
    metered directly.
    '''

    ReadingType: Optional[ReadingType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReadingType.Channel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reading type for register values reported/collected by this channel.
    '''

    Register: Optional[Register] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Register.Channels',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Register whose values are collected/reported by this channel.
    '''

@dataclass(repr=False)
class Charge(IdentifiedObject):
    '''
    A charge element associated with other entities such as tariff structures,
    auxiliary agreements or other charge elements. The total charge amount
    applicable to this instance of charge is the sum of fixed and variable
    portion.
    '''

    kind: Optional[ ChargeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The kind of charge to be applied.
    '''

    variablePortion: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The variable portion of this charge element, calculated as a percentage
    of the total amount of a parent charge.
    '''

    AuxiliaryAccounts: list[AuxiliaryAccount] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AuxiliaryAccount.Charges',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All auxiliary accounts to which this charge has to be levied.
    '''

    ChildCharges: list[Charge] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Charge.ParentCharge',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All sub-components of this complex charge.
    '''

    ConsumptionTariffIntervals: list[ConsumptionTariffInterval] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConsumptionTariffInterval.Charges',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tariff intervals to which this consumption-based charge has to be levied.
    '''

    fixedPortion: Optional[AccountingUnit] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The fixed portion of this charge element.
    '''

    ParentCharge: Optional[Charge] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Charge.ChildCharges',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Parent of this charge sub-component.
    '''

    TimeTariffIntervals: list[TimeTariffInterval] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeTariffInterval.Charges',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tariff intervals to which this time-based charge has to be levied.
    '''

@dataclass(repr=False)
class ChargeComponent(IdentifiedObject):
    '''
    A Charge Component is a list of configurable charge quality items to feed
    into settlement calculation and/or bill determinants.
    '''

@dataclass(repr=False)
class ChargeGroup(IdentifiedObject):
    '''
    Charge Group is the grouping of Charge Types for settlement invoicing purpose.
    Examples such as Ancillary Services, Interests, etc.
    '''

    effectiveDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    marketCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    terminationDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ChargeGroupChild: list[ChargeGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ChargeGroup.ChargeGroupParent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A ChargeGroup instance can have relationships with other ChargeGroup instances.
    '''

    ChargeGroupParent: Optional[ChargeGroup] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ChargeGroup.ChargeGroupChild',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A ChargeGroup instance can have relationships with other ChargeGroup instances.
    '''

    ChargeType: list[ChargeType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ChargeType.ChargeGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A ChargeGroup can have 0-n ChargeType. A ChargeType can associate to 0-n
    ChargeGroup.
    '''

    MktUserAttribute: list[MktUserAttribute] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktUserAttribute.ChargeGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ClassificationCondition(IdentifiedObject):
    '''
    A classification condition used to define preconditions that must be met
    by a phenomena classification.
    '''

    duration: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The duration of the of the condition in seconds
    '''

    test: Optional[ TestKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The test applied to the value.
    '''

    EnvironmentalAnalog: list[EnvironmentalAnalog] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalAnalog.ClassificationCondition',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Analog which contributes to the definition of this classification condition.
    '''

    EnvironmentalStringMeasurement: list[EnvironmentalStringMeasurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalStringMeasurement.ClassificationCondition',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    String measurement which contributes to the definition of this classification
    condition.
    '''

    PhenomenonClassification: Optional[PhenomenonClassification] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PhenomenonClassification.ClassificationCondition',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phenomenon classification to which this condition relates.
    '''

@dataclass(repr=False)
class CnodeDistributionFactor(IdentifiedObject):
    '''
    Participation factors per Cnode. Used to calculate "participation" of Cnode
    in an AggregateNode. Each Cnode associated to an AggregateNode would be
    assigned a participation factor for its participation within the AggregateNode.
    '''

    factor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used to calculate "participation" of Cnode in an AggregateNode
    '''

    podLossFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Point of delivery loss factor
    '''

    AggregateNode: Optional[AggregateNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AggregateNode.CnodeDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    HostControlArea: Optional[HostControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HostControlArea.CnodeDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktConnectivityNode: Optional[MktConnectivityNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MktConnectivityNode.CnodeDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.CnodeDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class CommodityDefinition(IdentifiedObject):
    '''
    Commodities in the context of IEC 62325 are MarketProducts (energy, regulation,
    reserve, etc) traded at a specific location, which in this case is a Pnode
    (either a specific pricing node or a pricing area or zone defined as a
    collection of pricing nodes). The CommodityDefinition is a container for
    these two parameters, plus the unit of measure and the currency in which
    the Commodity is traded. Each CommodityDefinition should be relatively
    static; defined once and rarely changed.
    '''

    commodityCurrency: Optional[ Currency ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The currency in which the Commodity is traded, using the standard conventions
    associated with the Currency enumeration.
    '''

    commodityUnit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit of measure in which the Commodity is traded, using the standard
    conventions associated with the UnitSymbol enumeration.
    '''

    commodityUnitMultiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit multiplier, e.g. "k" to convert the unit "W-h" to "kW-h", using
    the standard conventions associated with the UnitMultiplier enumeration.
    '''

    CommodityPrice: list[CommodityPrice] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CommodityPrice.CommodityDefinition',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketProduct: Optional[MarketProduct] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketProduct.CommodityDefinition',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Pnode: Optional[Pnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Pnode.CommodityDefinition',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RTO: Optional[RTO] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RTO.CommodityDefinition',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ConditionFactor(IdentifiedObject):
    '''
    This is to specify the various condition factors for a design that may
    alter the cost estimate or the allocation.
    '''

    cfValue: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The actual value of the condition factor, such as labor flat fee or percentage.
    '''

    kind: Optional[ ConditionFactorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of this condition factor.
    '''

    DesignLocationCUs: list[DesignLocationCU] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DesignLocationCU.ConditionFactors',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DesignLocations: list[DesignLocation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DesignLocation.ConditionFactors',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Designs: list[Design] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Design.ConditionFactors',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ConnectivityNode(IdentifiedObject):
    '''
    Connectivity nodes are points where terminals of AC conducting equipment
    are connected together with zero impedance.
    '''

    ConnectivityNodeContainer: Optional[ConnectivityNodeContainer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ConnectivityNodeContainer.ConnectivityNodes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Container of this connectivity node.
    '''

    Terminals: list[Terminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Terminal.ConnectivityNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Terminals interconnected with zero impedance at a this connectivity node.
    '''

    TopologicalNode: Optional[TopologicalNode] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.ConnectivityNodes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The topological node to which this connectivity node is assigned. May depend
    on the current state of switches in the network.
    '''

@dataclass(repr=False)
class MktConnectivityNode(ConnectivityNode):
    '''
    Subclass of IEC61970:Topology:ConnectivityNode.
    '''

    CnodeDistributionFactor: list[CnodeDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CnodeDistributionFactor.MktConnectivityNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    IndividualPnode: Optional[IndividualPnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IndividualPnode.MktConnectivityNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    LossPenaltyFactor: list[LossSensitivity] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LossSensitivity.MktConnectivityNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    NodeConstraintTerm: list[NodeConstraintTerm] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NodeConstraintTerm.MktConnectivityNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.MktConnectivityNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RTO: Optional[RTO] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RTO.MktConnectivityNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SysLoadDistribuFactor: Optional[SysLoadDistributionFactor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SysLoadDistributionFactor.MktConnectivityNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ConstraintResults(IdentifiedObject):
    '''
    Provides the Market results for the constraint processing for either the
    DAM or RTM. The data includes the constraint type (binding or violated),
    the solved value for the constraint, and the associated shadow price.
    '''

@dataclass(repr=False)
class Contingency(IdentifiedObject):
    '''
    An event threatening system reliability, consisting of one or more contingency
    elements.
    '''

    mustStudy: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Set true if must study this contingency.
    '''

    ContingencyElement: list[ContingencyElement] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ContingencyElement.Contingency',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A contingency can have any number of contingency elements.
    '''

@dataclass(repr=False)
class ContingencyElement(IdentifiedObject):
    '''
    An element of a system event to be studied by contingency analysis, representing
    a change in status of a single piece of equipment.
    '''

    Contingency: Optional[Contingency] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Contingency.ContingencyElement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A contingency element belongs to one contingency.
    '''

@dataclass(repr=False)
class ContingencyEquipment(ContingencyElement):
    '''
    Equipment whose in service status is to change, such as a power transformer
    or AC line segment.
    '''

    contingentStatus: Optional[ ContingencyEquipmentStatusKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The status for the associated equipment when in the contingency state.
    This status is independent of the case to which the contingency is originally
    applied, but defines the equipment status when the contingency is applied.
    '''

    Equipment: Optional[Equipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Equipment.ContingencyEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The single piece of equipment to which to apply the contingency.
    '''

@dataclass(repr=False)
class ContractorItem(IdentifiedObject):
    '''
    Contractor information for work task.
    '''

    activityCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Activity code identifies a specific and distinguishable unit of work.
    '''

    bidAmount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The amount that a given contractor will charge for performing this unit
    of work.
    '''

    cost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The total amount charged.
    '''

    ErpPayables: list[ErpPayable] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpPayable.ContractorItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkCostDetail: Optional[WorkCostDetail] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WorkCostDetail.ContractorItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkTask: Optional[OldWorkTask] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OldWorkTask.ContractorItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ControlAreaGeneratingUnit(IdentifiedObject):
    '''
    A control area generating unit. This class is needed so that alternate
    control area definitions may include the same generating unit. It should
    be noted that only one instance within a control area should reference
    a specific generating unit.
    '''

    AltGeneratingUnitMeas: list[AltGeneratingUnitMeas] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AltGeneratingUnitMeas.ControlAreaGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The link to prioritized measurements for this GeneratingUnit.
    '''

    ControlArea: Optional[ControlArea] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ControlArea.ControlAreaGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The parent control area for the generating unit specifications.
    '''

    GeneratingUnit: Optional[GeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.ControlAreaGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The generating unit specified for this control area. Note that a control
    area should include a GeneratingUnit only once.
    '''

@dataclass(repr=False)
class CoolingPowerRating(IdentifiedObject):
    '''
    There are often stages of power which are associated with stages of cooling.
    For instance, a transformer may be rated 121kV on the primary, 15kV on
    the secondary and 4kV on the tertiary winding. These are voltage ratings
    and the power ratings are generally the same for all three windings and
    independent of the voltage ratings, there are instances where the tertiary
    may have a lower power rating.
    For example, for three stages, the power rating may be 15/20/25 MVA and
    the cooling is OA/FA/FOA. The 15 MVA rating goes with the OA cooling (Oil
    and Air cooling). This is called the self cooled rating as there are no
    external cooling enhancements. The 20 MVA rating goes with the FA cooling
    (Forced Air cooling), this means that when the fans are running and thus
    enhancing the cooling characteristics, the transformer can operate at a
    power level of 20 MVA. The 25 MVA rating goes with the FOA cooling (Forced
    Oil and Air cooling), this means that when the fans and pumps are running
    and thus enhancing the cooling characteristics even more than before, the
    transformer can operate at a power level of 25 MVA. This 15/20/25 MVA does
    not state how the power is split between the various windings. It may be
    25 MVA input on the primary, 25 MVA output on the secondary and 0 MVA output
    on the tertiary. It may also operate at 25 MVA input on the primary, 17
    MVA output on the secondary and 8 MVA output on the tertiary.
    '''

    stage: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Stage of cooling and associated power rating.
    '''

    coolingKind: Optional[ CoolingKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of cooling system.
    '''

    powerRating: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The power rating associated with type of cooling specified for this stage.
    '''

    Reconditionings: list[Reconditioning] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reconditioning.PowerRatings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class CoordinateSystem(IdentifiedObject):
    '''
    Coordinate reference system.
    '''

    crsUrn: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A Uniform Resource Name (URN) for the coordinate reference system (crs)
    used to define 'Location.PositionPoints'.
    An example would be the European Petroleum Survey Group (EPSG) code for
    a coordinate reference system, defined in URN under the Open Geospatial
    Consortium (OGC) namespace as: urn:ogc:def:crs:EPSG::XXXX, where XXXX is
    an EPSG code (a full list of codes can be found at the EPSG Registry web
    site http://www.epsg-registry.org/). To define the coordinate system as
    being WGS84 (latitude, longitude) using an EPSG OGC, this attribute would
    be urn:ogc:def:crs:EPSG::4.3.2.6
    A profile should limit this code to a set of allowed URNs agreed to by
    all sending and receiving parties.
    '''

    Locations: list[Location] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Location.CoordinateSystem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All locations described with position points in this coordinate system.
    '''

@dataclass(repr=False)
class CostType(IdentifiedObject):
    '''
    A categorization for resources, often costs, in accounting transactions.
    Examples include: material components, building in service, coal sales,
    overhead, etc.
    '''

    amountAssignable: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if an amount can be assigned to the resource element (e.g., building
    in service, transmission plant, software development capital); false otherwise
    (e.g., internal labor, material components).
    '''

    code: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A codified representation of the resource element.
    '''

    level: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The level of the resource element in the hierarchy of resource elements
    (recursive relationship).
    '''

    stage: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The stage for which this costType applies: estimated design, estimated
    actual or actual actual.
    '''

    ChildCostTypes: list[CostType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CostType.ParentCostType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    CompatibleUnits: list[CompatibleUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CompatibleUnit.CostType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpJournalEntries: list[ErpJournalEntry] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpJournalEntry.CostTypes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ParentCostType: Optional[CostType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CostType.ChildCostTypes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkCostDetails: list[WorkCostDetail] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkCostDetail.CostType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Crew(IdentifiedObject):
    '''
    Group of people with specific skills, tools, and vehicles.
    '''

    CrewMembers: list[CrewMember] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CrewMember.Crew',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All members of this crew.
    '''

    CrewType: Optional[CrewType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CrewType.Crews',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of this crew.
    '''

    FieldDispatchHistory: list[FieldDispatchHistory] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FieldDispatchHistory.Crew',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The dispatch history associated with the crew.
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.Crew',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The location this crew is assigned to.
    '''

    Outage: list[Outage] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Outage.Crew',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage that is assigned to the crew.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of this crew.
    '''

    SwitchingAction: Optional[SwitchingAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingAction.Crew',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching action that is assigned to this crew.
    '''

    WorkAssets: list[WorkAsset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkAsset.Crew',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All work assets used by this crew.
    '''

    WorkTasks: list[WorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkTask.Crews',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All work tasks this crew participates in.
    '''

@dataclass(repr=False)
class OldCrew(Crew):
    '''
    A crew is a group of people with specific skills, tools, and vehicles.
    '''

@dataclass(repr=False)
class CrewType(IdentifiedObject):
    '''
    Custom description of the type of crew. This may be used to determine the
    type of work the crew can be assigned to. Examples include repair, tree
    trimming, switching, etc.
    '''

    Crews: list[Crew] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Crew.CrewType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All crews of this type.
    '''

@dataclass(repr=False)
class Curve(IdentifiedObject):
    '''
    A multi-purpose curve or functional relationship between an independent
    variable (X-axis) and dependent (Y-axis) variables.
    '''

    curveStyle: Optional[ CurveStyle ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The style or shape of the curve.
    '''

    xMultiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Multiplier for X-axis.
    '''

    xUnit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The X-axis units of measure.
    '''

    y1Multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Multiplier for Y1-axis.
    '''

    y1Unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Y1-axis units of measure.
    '''

    y2Multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Multiplier for Y2-axis.
    '''

    y2Unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Y2-axis units of measure.
    '''

    y3Multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Multiplier for Y3-axis.
    '''

    y3Unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Y3-axis units of measure.
    '''

    CurveDatas: list[CurveData] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CurveData.Curve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The point data values that define this curve.
    '''

@dataclass(repr=False)
class AssetPropertyCurve(Curve):
    '''
    An Asset Property that is described through curves rather than as a data
    point. The relationship is to be defined between an independent variable
    (X-axis) and one or two dependent variables (Y1-axis and Y2-axis).
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.AssetPropertyCurves',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Specification: Optional[Specification] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Specification.AssetPropertyCurves',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class CTTempActivePowerCurve(Curve):
    '''
    Relationship between the combustion turbine's power output rating in gross
    active power (X-axis) and the ambient air temperature (Y-axis).
    '''

    CombustionTurbine: Optional[CombustionTurbine] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CombustionTurbine.CTTempActivePowerCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A combustion turbine may have an active power versus ambient temperature
    relationship.
    '''

@dataclass(repr=False)
class DefaultBidCurve(Curve):
    '''
    Default bid curve for default energy bid curve and default startup curves
    (cost and time).
    '''

    curveType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    To indicate a type used for a default energy bid curve, such as LMP, cost
    or consultative based.
    '''

    debAdderFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Default energy bid adder flag
    '''

    DefaultBid: Optional[DefaultBid] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DefaultBid.DefaultBidCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class EmissionAccount(Curve):
    '''
    Accounts for tracking emissions usage and credits for thermal generating
    units. A unit may have zero or more emission accounts, and will typically
    have one for tracking usage and one for tracking credits.
    '''

    emissionType: Optional[ EmissionType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of emission, for example sulfur dioxide (SO2). The y1AxisUnits
    of the curve contains the unit of measure (e.g. kg) and the emissionType
    is the type of emission (e.g. sulfur dioxide).
    '''

    emissionValueSource: Optional[ EmissionValueSource ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The source of the emission value.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.EmmissionAccounts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have one or more emission allowance accounts.
    '''

@dataclass(repr=False)
class EmissionCurve(Curve):
    '''
    Relationship between the unit's emission rate in units of mass per hour
    (Y-axis) and output active power (X-axis) for a given type of emission.
    This curve applies when only one type of fuel is being burned.
    '''

    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''

    emissionContent: Optional[ float | Emission ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The emission content per quantity of fuel burned.
    '''

    emissionType: Optional[ EmissionType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of emission, which also gives the production rate measurement
    unit. The y1AxisUnits of the curve contains the unit of measure (e.g. kg)
    and the emissionType is the type of emission (e.g. sulfur dioxide).
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.EmissionCurves',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have one or more emission curves.
    '''

@dataclass(repr=False)
class FuelAllocationSchedule(Curve):
    '''
    The amount of fuel of a given type which is allocated for consumption over
    a specified period of time.
    '''

    fuelAllocationEndDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The end time and date of the fuel allocation schedule.
    '''

    fuelAllocationStartDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The start time and date of the fuel allocation schedule.
    '''

    maxFuelAllocation: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum amount of fuel that is allocated for consumption for the scheduled
    time period.
    '''

    minFuelAllocation: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum amount of fuel that is allocated for consumption for the scheduled
    time period, e.g., based on a "take-or-pay" contract.
    '''

    fuelType: Optional[ FuelType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of fuel, which also indicates the corresponding measurement unit.
    '''

    FossilFuel: Optional[FossilFuel] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'FossilFuel.FuelAllocationSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A fuel allocation schedule shall have a fossil fuel.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.FuelAllocationSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have one or more fuel allocation schedules.
    '''

@dataclass(repr=False)
class GenUnitOpCostCurve(Curve):
    '''
    Relationship between unit operating cost (Y-axis) and unit output active
    power (X-axis). The operating cost curve for thermal units is derived from
    heat input and fuel costs. The operating cost curve for hydro units is
    derived from water flow rates and equivalent water costs.
    '''

    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''

    GeneratingUnit: Optional[GeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.GenUnitOpCostCurves',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A generating unit may have one or more cost curves, depending upon fuel
    mixture and fuel cost.
    '''

@dataclass(repr=False)
class GrossToNetActivePowerCurve(Curve):
    '''
    Relationship between the generating unit's gross active power output on
    the X-axis (measured at the terminals of the machine(s)) and the generating
    unit's net active power output on the Y-axis (based on utility-defined
    measurements at the power station). Station service loads, when modelled,
    should be treated as non-conforming bus loads. There may be more than one
    curve, depending on the auxiliary equipment that is in service.
    '''

    GeneratingUnit: Optional[GeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.GrossToNetActivePowerCurves',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A generating unit may have a gross active power to net active power curve,
    describing the losses and auxiliary power requirements of the unit.
    '''

@dataclass(repr=False)
class HeatInputCurve(Curve):
    '''
    Relationship between unit heat input in energy per time for main fuel (Y1-axis)
    and supplemental fuel (Y2-axis) versus unit output in active power (X-axis).
    The quantity of main fuel used to sustain generation at this output level
    is prorated for throttling between definition points. The quantity of supplemental
    fuel used at this output level is fixed and not prorated.
    '''

    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''

    auxPowerMult: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power output - auxiliary power multiplier adjustment factor.
    '''

    auxPowerOffset: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power output - auxiliary power offset adjustment factor.
    '''

    heatInputEff: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Heat input - efficiency multiplier adjustment factor.
    '''

    heatInputOffset: Optional[ float | HeatRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Heat input - offset adjustment factor.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.HeatInputCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have a heat input curve.
    '''

@dataclass(repr=False)
class HeatRateCurve(Curve):
    '''
    Relationship between unit heat rate per active power (Y-axis) and unit
    output (X-axis). The heat input is from all fuels.
    '''

    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.HeatRateCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have a heat rate curve.
    '''

@dataclass(repr=False)
class MktHeatRateCurve(HeatRateCurve):
    '''
    Subclass of IEC 61970: Generation: Production:HeatRateCurve.
    '''

@dataclass(repr=False)
class HydroGeneratingEfficiencyCurve(Curve):
    '''
    Relationship between unit efficiency as percentage and unit output active
    power for a given net head in meters. The relationship between efficiency,
    discharge, head, and power output is expressed as follows: E =KP/HQ
    where: E is the efficiency, as a percentage; P is the active power; H is
    the height; Q is the discharge, volume/time unit; K is a constant.
    For example, a curve instance for a given net head could show efficiency
    (Y-axis) versus active power output (X-axis) or versus discharge on the
    X-axis.
    '''

    HydroGeneratingUnit: Optional[HydroGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HydroGeneratingUnit.HydroGeneratingEfficiencyCurves',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A hydro generating unit has an efficiency curve.
    '''

@dataclass(repr=False)
class IncrementalHeatRateCurve(Curve):
    '''
    Relationship between unit incremental heat rate in (delta energy/time)
    per (delta active power) and unit output in active power. The IHR curve
    represents the slope of the HeatInputCurve. Note that the "incremental
    heat rate" and the "heat rate" have the same engineering units.
    '''

    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.IncrementalHeatRateCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have an incremental heat rate curve.
    '''

@dataclass(repr=False)
class LevelVsVolumeCurve(Curve):
    '''
    Relationship between reservoir volume and reservoir level. The volume is
    at the Y-axis and the reservoir level at the X-axis.
    '''

    Reservoir: Optional[Reservoir] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Reservoir.LevelVsVolumeCurves',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A reservoir may have a level versus volume relationship.
    '''

@dataclass(repr=False)
class PenstockLossCurve(Curve):
    '''
    Relationship between penstock head loss (in meters) and total discharge
    through the penstock (in cubic meters per second). One or more turbines
    may be connected to the same penstock.
    '''

    HydroGeneratingUnit: Optional[HydroGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HydroGeneratingUnit.PenstockLossCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A hydro generating unit has a penstock loss curve.
    '''

@dataclass(repr=False)
class ReactiveCapabilityCurve(Curve):
    '''
    Reactive power rating envelope versus the synchronous machine's active
    power, in both the generating and motoring modes. For each active power
    value there is a corresponding high and low reactive power limit value.
    Typically there will be a separate curve for each coolant condition, such
    as hydrogen pressure. The Y1 axis values represent reactive minimum and
    the Y2 axis values represent reactive maximum.
    '''

    coolantTemperature: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The machine's coolant temperature (e.g., ambient air or stator circulating
    water).
    '''

    hydrogenPressure: Optional[ float | Pressure ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hydrogen coolant pressure.
    '''

    EquivalentInjection: list[EquivalentInjection] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EquivalentInjection.ReactiveCapabilityCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The equivalent injection using this reactive capability curve.
    '''

    InitiallyUsedBySynchronousMachines: list[SynchronousMachine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SynchronousMachine.InitialReactiveCapabilityCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Synchronous machines using this curve as default.
    '''

    SynchronousMachines: list[SynchronousMachine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SynchronousMachine.ReactiveCapabilityCurves',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Synchronous machines using this curve.
    '''

@dataclass(repr=False)
class ResourceOperationMaintenanceCost(Curve):
    '''
    To model the Operation and Maintenance (O and M) costs of a generation
    resource.
    '''

    omCostColdStartup: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Verifiable O&amp;M Cost ($), Cold Startup
    '''

    omCostHotStartup: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Verifiable O&amp;M Cost ($), Hot Startup
    '''

    omCostIntermediateStartup: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Verifiable O&amp;M Cost ($), Intermediate Startup
    '''

    omCostLowSustainedLimit: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Verifiable O&amp;M Cost ($/MWh), LSL
    '''

    gasPercentAboveLowSustainedLimit: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Fuel Index Price (gas) for operating above Low Sustained
    Limit (LSL)
    '''

    oilPercentAboveLowSustainedLimit: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Fuel Oil Price (FOP) for operating above Low Sustained Limit
    (LSL)
    '''

    solidfuelPercentAboveLowSustainedLimit: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Solid Fuel for operating above Low Sustained Limit (LSL)
    '''

    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ResourceVerifiableCosts.ResourceOperationMaintenanceCost',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ShutdownCurve(Curve):
    '''
    Relationship between the rate in gross active power/minute (Y-axis) at
    which a unit should be shutdown and its present gross MW output (X-axis).
    '''

    shutdownDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date and time of the most recent generating unit shutdown.
    '''

    shutdownCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fixed shutdown cost.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.ShutdownCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have a shutdown curve.
    '''

@dataclass(repr=False)
class StartIgnFuelCurve(Curve):
    '''
    The quantity of ignition fuel (Y-axis) used to restart and repay the auxiliary
    power consumed versus the number of hours (X-axis) the unit was off line.
    '''

    ignitionFuelType: Optional[ FuelType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of ignition fuel.
    '''

    StartupModel: Optional[StartupModel] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StartupModel.StartIgnFuelCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit's startup model may have a startup ignition fuel curve.
    '''

@dataclass(repr=False)
class StartMainFuelCurve(Curve):
    '''
    The quantity of main fuel (Y-axis) used to restart and repay the auxiliary
    power consumed versus the number of hours (X-axis) the unit was off line.
    '''

    mainFuelType: Optional[ FuelType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of main fuel.
    '''

    StartupModel: Optional[StartupModel] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StartupModel.StartMainFuelCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit's startup model may have a startup main fuel curve.
    '''

@dataclass(repr=False)
class StartRampCurve(Curve):
    '''
    Rate in gross active power per minute (Y-axis) at which a unit can be loaded
    versus the number of hours (X-axis) the unit was off line.
    '''

    hotStandbyRamp: Optional[ float | ActivePowerChangeRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The startup ramp rate in gross for a unit that is on hot standby.
    '''

    StartupModel: Optional[StartupModel] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StartupModel.StartRampCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit's startup model may have a startup ramp curve.
    '''

@dataclass(repr=False)
class TailbayLossCurve(Curve):
    '''
    Relationship between tailbay head loss height (Y-axis) and the total discharge
    into the power station's tailbay volume per time unit (X-axis) . There
    could be more than one curve depending on the level of the tailbay reservoir
    or river level.
    '''

    HydroGeneratingUnit: Optional[HydroGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HydroGeneratingUnit.TailbayLossCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A hydro generating unit has a tailbay loss curve.
    '''

@dataclass(repr=False)
class TargetLevelSchedule(Curve):
    '''
    Reservoir water level targets from advanced studies or "rule curves". Typically
    in one hour increments for up to 10 days.
    '''

    highLevelLimit: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    High target level limit, above which the reservoir operation will be penalized.
    '''

    lowLevelLimit: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Low target level limit, below which the reservoir operation will be penalized.
    '''

    Reservoir: Optional[Reservoir] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Reservoir.TargetLevelSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A reservoir may have a water level target schedule.
    '''

@dataclass(repr=False)
class VsCapabilityCurve(Curve):
    '''
    The P-Q capability curve for a voltage source converter, with P on X-axis
    and Qmin and Qmax on Y1-axis and Y2-axis.
    '''

    VsConverterDCSides: list[VsConverter] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'VsConverter.CapabilityCurve',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All converters with this capability curve.
    '''

@dataclass(repr=False)
class DCNode(IdentifiedObject):
    '''
    DC nodes are points where terminals of DC conducting equipment are connected
    together with zero impedance.
    '''

    DCEquipmentContainer: Optional[DCEquipmentContainer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DCEquipmentContainer.DCNodes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DC container for the DC nodes.
    '''

    DCTerminals: list[DCBaseTerminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCBaseTerminal.DCNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    DC base terminals interconnected with zero impedance at a this DC connectivity
    node.
    '''

    DCTopologicalNode: Optional[DCTopologicalNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DCTopologicalNode.DCNodes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DC topological node to which this DC connectivity node is assigned.
    May depend on the current state of switches in the network.
    '''

@dataclass(repr=False)
class DCTopologicalIsland(IdentifiedObject):
    '''
    An electrically connected subset of the network. DC topological islands
    can change as the current network state changes, e.g. due to:
    - disconnect switches or breakers changing state in a SCADA/EMS.
    - manual creation, change or deletion of topological nodes in a planning
    tool.
    Only energised TopologicalNode-s shall be part of the topological island.
    '''

    DCTopologicalNodes: list[DCTopologicalNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCTopologicalNode.DCTopologicalIsland',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DC topological nodes in a DC topological island.
    '''

@dataclass(repr=False)
class DCTopologicalNode(IdentifiedObject):
    '''
    DC bus.
    '''

    DCEquipmentContainer: Optional[DCEquipmentContainer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DCEquipmentContainer.DCTopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The connectivity node container to which the topological node belongs.
    '''

    DCNodes: list[DCNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCNode.DCTopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DC connectivity nodes combined together to form this DC topological
    node. May depend on the current state of switches in the network.
    '''

    DCTerminals: list[DCBaseTerminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCBaseTerminal.DCTopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    See association end TopologicalNode.Terminal.
    '''

    DCTopologicalIsland: Optional[DCTopologicalIsland] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DCTopologicalIsland.DCTopologicalNodes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A DC topological node belongs to a DC topological island.
    '''

@dataclass(repr=False)
class DERGroupDispatch(IdentifiedObject):
    '''
    Specifies the capabilities of the DER Group that are to be dispatched according
    to a schedule. Each dispatch identifies a DER Group and the specific monitorable
    parameter to be dispatched over a specific time interval.
    '''

    EndDeviceGroup: list[EndDeviceGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceGroup.DERGroupDispatch',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DER Group for which dispatches are made.
    '''

@dataclass(repr=False)
class DERGroupForecast(IdentifiedObject):
    '''
    Specifies the forecasted values of the DERMonitorableParameters for a DER
    Group over a specific time interval.
    '''

    predictionCreationDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The timestamp for when the DER Group forecast was created
    '''

    EndDeviceGroup: list[EndDeviceGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceGroup.DERGroupForecast',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DER Group for which forecasts are made.
    '''

@dataclass(repr=False)
class DatasetArg(IdentifiedObject):
    '''
    A model operation argument referencing a dataset instance.
    '''

    Dataset: Optional[InstanceSet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'InstanceSet.DatasetArg',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Dataset referenced by this argument of a model operation..
    '''

    OperationDatasetArgDescription: Optional[DatasetArgDescription] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DatasetArgDescription.OperationDatasetArg',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of role for this dataset role. Should only reference role types
    that belong to the operation type of the associated operation.
    '''

@dataclass(repr=False)
class DatasetArgDescription(IdentifiedObject):
    '''
    '''

    OperationDatasetArg: list[DatasetArg] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DatasetArg.OperationDatasetArgDescription',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operation dataset roles conforming to this role type.
    '''

@dataclass(repr=False)
class DayType(IdentifiedObject):
    '''
    Group of similar days. For example it could be used to represent weekdays,
    weekend, or holidays.
    '''

    SeasonDayTypeSchedules: list[SeasonDayTypeSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SeasonDayTypeSchedule.DayType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Schedules that use this DayType.
    '''

@dataclass(repr=False)
class DemandResponseProgram(IdentifiedObject):
    '''
    Demand response program.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of demand response program; examples are CPP (critical-peak pricing),
    RTP (real-time pricing), DLC (direct load control), DBP (demand bidding
    program), BIP (base interruptible program). Note that possible types change
    a lot and it would be impossible to enumerate them all.
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAgreement.DemandResponsePrograms',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All customer agreements through which the customer is enrolled in this
    demand response program.
    '''

    EndDeviceGroups: list[EndDeviceGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceGroup.DemandResponsePrograms',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All groups of end devices enrolled in this demand response program.
    '''

    UsagePointGroups: list[UsagePointGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePointGroup.DemandResponsePrograms',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage point groups enrolled in this demand response program.
    '''

    validityInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interval within which the program is valid.
    '''

@dataclass(repr=False)
class DesignLocation(IdentifiedObject):
    '''
    A logical part of the design (e.g., pole and all equipment on a pole).
    This includes points and spans.
    '''

    spanLength: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The legth of the span from the previous pole to this pole.
    '''

    ConditionFactors: list[ConditionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConditionFactor.DesignLocations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Designs: list[Design] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Design.DesignLocations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpBomItemDatas: list[ErpBomItemData] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpBomItemData.DesignLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MiscCostItems: list[MiscCostItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MiscCostItem.DesignLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkLocations: list[WorkLocation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkLocation.DesignLocations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class DesignLocationCU(IdentifiedObject):
    '''
    Compatible unit at a given design location.
    '''

@dataclass(repr=False)
class Diagram(IdentifiedObject):
    '''
    The diagram being exchanged. The coordinate system is a standard Cartesian
    coordinate system and the orientation attribute defines the orientation.
    The initial view related attributes can be used to specify an initial view
    with the x,y coordinates of the diagonal points.
    '''

    x1InitialView: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    X coordinate of the first corner of the initial view.
    '''

    x2InitialView: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    X coordinate of the second corner of the initial view.
    '''

    y1InitialView: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Y coordinate of the first corner of the initial view.
    '''

    y2InitialView: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Y coordinate of the second corner of the initial view.
    '''

    orientation: Optional[ OrientationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coordinate system orientation of the diagram. A positive orientation gives
    standard “right-hand” orientation, with negative orientation indicating
    a “left-hand” orientation. For 2D diagrams, a positive orientation will
    result in X values increasing from left to right and Y values increasing
    from bottom to top. A negative orientation gives the “left-hand” orientation
    (favoured by computer graphics displays) with X values increasing from
    left to right and Y values increasing from top to bottom.
    '''

    DiagramElements: list[DiagramObject] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DiagramObject.Diagram',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A diagram is made up of multiple diagram objects.
    '''

    DiagramStyle: Optional[DiagramStyle] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DiagramStyle.Diagram',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A Diagram may have a DiagramStyle.
    '''

@dataclass(repr=False)
class DiagramObject(IdentifiedObject):
    '''
    An object that defines one or more points in a given space. This object
    can be associated with anything that specializes IdentifiedObject. For
    single line diagrams such objects typically include such items as analog
    values, breakers, disconnectors, power transformers, and transmission lines.
    '''

    drawingOrder: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The drawing order of this element. The higher the number, the later the
    element is drawn in sequence. This is used to ensure that elements that
    overlap are rendered in the correct order.
    '''

    isPolygon: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Defines whether or not the diagram objects points define the boundaries
    of a polygon or the routing of a polyline. If this value is true then a
    receiving application should consider the first and last points to be connected.
    '''

    offsetX: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The offset in the X direction. This is used for defining the offset from
    centre for rendering an icon (the default is that a single point specifies
    the centre of the icon).
    The offset is in per-unit with 0 indicating there is no offset from the
    horizontal centre of the icon. -0.5 indicates it is offset by 50% to the
    left and 0.5 indicates an offset of 50% to the right.
    '''

    offsetY: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The offset in the Y direction. This is used for defining the offset from
    centre for rendering an icon (the default is that a single point specifies
    the centre of the icon).
    The offset is in per-unit with 0 indicating there is no offset from the
    vertical centre of the icon. The offset direction is dependent on the orientation
    of the diagram, with -0.5 and 0.5 indicating an offset of +/- 50% on the
    vertical axis.
    '''

    rotation: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Sets the angle of rotation of the diagram object. Zero degrees is pointing
    to the top of the diagram. Rotation is clockwise. DiagramObject.rotation=0
    has the following meaning: The connection point of an element which has
    one terminal is pointing to the top side of the diagram. The connection
    point "From side" of an element which has more than one terminal is pointing
    to the top side of the diagram.
    DiagramObject.rotation=90 has the following meaning: The connection point
    of an element which has one terminal is pointing to the right hand side
    of the diagram. The connection point "From side" of an element which has
    more than one terminal is pointing to the right hand side of the diagram.
    '''

    Diagram: Optional[Diagram] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Diagram.DiagramElements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A diagram object is part of a diagram.
    '''

    DiagramObjectPoints: list[DiagramObjectPoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DiagramObjectPoint.DiagramObject',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A diagram object can have 0 or more points to reflect its layout position,
    routing (for polylines) or boundary (for polygons).
    '''

    DiagramObjectStyle: Optional[DiagramObjectStyle] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DiagramObjectStyle.StyledObjects',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A diagram object has a style associated that provides a reference for the
    style used in the originating system.
    '''

    IdentifiedObject: Optional[IdentifiedObject] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IdentifiedObject.DiagramObjects',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The domain object to which this diagram object is associated.
    '''

    VisibilityLayers: list[VisibilityLayer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'VisibilityLayer.VisibleObjects',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A diagram object can be part of multiple visibility layers.
    '''

@dataclass(repr=False)
class TextDiagramObject(DiagramObject):
    '''
    A diagram object for placing free-text or text derived from an associated
    domain object.
    '''

    text: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The text that is displayed by this text diagram object.
    '''

@dataclass(repr=False)
class DiagramObjectStyle(IdentifiedObject):
    '''
    A reference to a style used by the originating system for a diagram object.
    A diagram object style describes information such as line thickness, shape
    such as circle or rectangle etc, and colour.
    '''

    StyledObjects: list[DiagramObject] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DiagramObject.DiagramObjectStyle',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A style can be assigned to multiple diagram objects.
    '''

@dataclass(repr=False)
class DiagramStyle(IdentifiedObject):
    '''
    The diagram style refers to a style used by the originating system for
    a diagram. A diagram style describes information such as schematic, geographic,
    etc.
    '''

    Diagram: list[Diagram] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Diagram.DiagramStyle',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A DiagramStyle can be used by many Diagrams.
    '''

@dataclass(repr=False)
class DimensionsInfo(IdentifiedObject):
    '''
    As applicable, the basic linear, area, or volume dimensions of an asset,
    asset type (AssetModel) or other type of object (such as land area). Units
    and multipliers are specified per dimension.
    '''

    orientation: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A description of the orientation of the object relative to the dimensions.
    As an example, a vault may have north-south orientation for the sizeLength
    measurement and sizeDepth may be the height of the vault.
    '''

    sizeDepth: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Depth measurement.
    '''

    sizeDiameter: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Diameter measurement.
    '''

    sizeLength: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Length measurement.
    '''

    sizeWidth: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Width measurement.
    '''

    Specifications: list[Specification] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Specification.DimensionsInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Document(IdentifiedObject):
    '''
    Parent class for different groupings of information collected and managed
    as a part of a business process. It will frequently contain references
    to other objects, such as assets, people and power system resources.
    '''

    authorName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name of the author of this document.
    '''

    comment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Free text comment.
    '''

    createdDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time that this document was created.
    '''

    lastModifiedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this document was last modified. Documents may potentially
    be modified many times during their lifetime.
    '''

    revisionNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Revision number for this document.
    '''

    subject: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Document subject.
    '''

    title: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Document title.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Utility-specific classification of this document, according to its corporate
    standards, practices, and existing IT systems (e.g., for management of
    assets, maintenance, work, outage, customers, etc.).
    '''

    ActivityRecord: list[ActivityRecord] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ActivityRecord.Document',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The activity record for a document
    '''

    Approver: Optional[Approver] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Approver.Documents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Approver of this document.
    '''

    Author: Optional[Author] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Author.Documents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Author of this document.
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConfigurationEvent.ChangedDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All configuration events created for this document.
    '''

    docStatus: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of this document. For status of subject matter this document represents
    (e.g., Agreement, Work), use 'status' attribute.
    Example values for 'docStatus.status' are draft, approved, cancelled, etc.
    '''

    Editor: Optional[Editor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Editor.Documents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Editor of this document.
    '''

    electronicAddress: Optional[ElectronicAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Electronic address.
    '''

    Issuer: Optional[Issuer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Issuer.Documents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Issuer of this document.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of subject matter (e.g., Agreement, Work) this document represents.
    For status of the document itself, use 'docStatus' attribute.
    '''

@dataclass(repr=False)
class Agreement(Document):
    '''
    Formal agreement between two parties defining the terms and conditions
    for a set of services. The specifics of the services are, in turn, defined
    via one or more service agreements.
    '''

    signDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date this agreement was consummated among associated persons and/or organisations.
    '''

    validityInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time interval this agreement is valid (from going into effect
    to termination).
    '''

@dataclass(repr=False)
class AuxiliaryAgreement(Agreement):
    '''
    An ad-hoc auxiliary account agreement associated with a customer agreement,
    not part of the customer's account, but typically subject to formal agreement
    between customer and supplier (utility). Typically this is used to collect
    revenue owed by the customer for other services or arrears accrued with
    the utility for other services. It is typically linked to a prepaid token
    purchase transaction, thus forcing the customer to make a payment towards
    settlement of the auxiliary account balance whenever the customer needs
    to purchase a prepaid token for electricity.
    The present status of the auxiliary agreement can be defined in the context
    of the utility's business rules, for example: enabled, disabled, pending,
    over recovered, under recovered, written off, etc.
    '''

    auxCycle: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The frequency for automatically recurring auxiliary charges, where 'AuxiliaryAccount.initialCharge'
    is recursively added to 'AuxiliaryAccount.dueCurrent' at the start of each
    'auxCycle'. For example: on a specified date and time; hourly; daily; weekly;
    monthly; 3-monthly; 6-monthly; 12-monthly; etc.
    '''

    auxPriorityCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The coded priority indicating the priority that this auxiliary agreement
    has above other auxiliary agreements (associated with the same customer
    agreement) when it comes to competing for settlement from a payment transaction
    or token purchase.
    '''

    payCycle: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The contractually expected payment frequency (by the customer). Examples
    are: ad-hoc; on specified date; hourly, daily, weekly, monthly. etc.
    '''

    subType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Sub-classification of the inherited 'type' for this AuxiliaryAgreement.
    '''

    arrearsInterest: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The interest per annum to be charged prorata on 'AuxiliaryAccount.dueArrears'
    at the end of each 'payCycle'.
    '''

    fixedAmount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The fixed amount that has to be collected from each vending transaction
    towards settlement of this auxiliary agreement. Note that there may be
    multiple tokens vended per vending transaction, but this is not relevant.
    '''

    minAmount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum amount that has to be paid at any transaction towards settling
    this auxiliary agreement or reducing the balance.
    '''

    vendPortion: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The percentage of the transaction amount that has to be collected from
    each vending transaction towards settlement of this auxiliary agreement
    when payments are not in arrears. Note that there may be multiple tokens
    vended per vending transaction, but this is not relevant.
    '''

    vendPortionArrear: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The percentage of the transaction amount that has to be collected from
    each vending transaction towards settlement of this auxiliary agreement
    when payments are in arrears. Note that there may be multiple tokens vended
    per vending transaction, but this is not relevant.
    '''

    AuxiliaryAccounts: list[AuxiliaryAccount] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AuxiliaryAccount.AuxiliaryAgreement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All auxiliary accounts regulated by this agreement.
    '''

    CustomerAgreement: Optional[CustomerAgreement] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerAgreement.AuxiliaryAgreements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer agreement this (non-service related) auxiliary agreement refers
    to.
    '''

@dataclass(repr=False)
class CustomerAgreement(Agreement):
    '''
    Agreement between the customer and the service supplier to pay for service
    at a specific service location. It records certain billing information
    about the type of service provided at the service location and is used
    during charge creation to determine the type of service.
    '''

    isPrePay: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the customer is a pre-pay customer for the specified service.
    '''

    loadMgmt: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Load management code.
    '''

    shutOffDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Final date and time the service will be billed to the previous customer.
    '''

    AuxiliaryAgreements: list[AuxiliaryAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AuxiliaryAgreement.CustomerAgreement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All (non-service related) auxiliary agreements that refer to this customer
    agreement.
    '''

    Customer: Optional[Customer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Customer.CustomerAgreements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer for this agreement.
    '''

    CustomerAccount: Optional[CustomerAccount] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerAccount.CustomerAgreements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer account owning this agreement.
    '''

    DemandResponsePrograms: list[DemandResponseProgram] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DemandResponseProgram.CustomerAgreements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All demand response programs the customer is enrolled in through this customer
    agreement.
    '''

    MeterReadings: list[MeterReading] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeterReading.CustomerAgreement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (could be deprecated in the future) All meter readings for this customer
    agreement.
    '''

    MeterReadSchedule: Optional[MeterReadSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReadSchedule.CustomerAgreement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter read schedule that applies to the customer agreement
    '''

    PricingStructures: list[PricingStructure] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PricingStructure.CustomerAgreements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All pricing structures applicable to this customer agreement.
    '''

    ServiceCategory: Optional[ServiceCategory] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceCategory.CustomerAgreements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Service category for this agreement.
    '''

    ServiceLocations: list[ServiceLocation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ServiceLocation.CustomerAgreements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All service locations regulated by this customer agreement.
    '''

    ServiceSupplier: Optional[ServiceSupplier] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceSupplier.CustomerAgreements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Service supplier for this customer agreement.
    '''

    StandardIndustryCode: Optional[StandardIndustryCode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StandardIndustryCode.CustomerAgreements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.CustomerAgreement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All service delivery points regulated by this customer agreement.
    '''

@dataclass(repr=False)
class EnergyProduct(Agreement):
    '''
    An EnergyProduct is offered commercially as a ContractOrTariff.
    '''

@dataclass(repr=False)
class FTR(Agreement):
    '''
    Financial Transmission Rights (FTR) regarding transmission capacity at
    a flowgate.
    '''

@dataclass(repr=False)
class LocationGrant(Agreement):
    '''
    A grant provides a right, as defined by type, for a parcel of land. Note
    that the association to Location, Asset, Organisation, etc. for the Grant
    is inherited from Agreement, a type of Document.
    '''

    propertyData: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Property related information that describes the Grant's land parcel. For
    example, it may be a deed book number, deed book page number, and parcel
    number.
    '''

    LandProperty: Optional[LandProperty] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'LandProperty.LocationGrants',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Land property this location grant applies to.
    '''

@dataclass(repr=False)
class RightOfWay(Agreement):
    '''
    A right-of-way (ROW) is for land where it is lawful to use for a public
    road, an electric power line, etc. Note that the association to Location,
    Asset, Organisation, etc. for the Grant is inherited from Agreement, a
    type of Document.
    '''

    propertyData: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Property related information that describes the ROW's land parcel. For
    example, it may be a deed book number, deed book page number, and parcel
    number.
    '''

    LandProperties: list[LandProperty] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LandProperty.RightOfWays',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All land properties this right of way applies to.
    '''

@dataclass(repr=False)
class Analytic(Document):
    '''
    An algorithm or calculation for making an assessment about an asset or
    asset grouping for lifecycle decision making.
    '''

    bestValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value that indicates best possible numeric value.
    '''

    worstValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value that indicates worst possible numeric value.
    '''

    kind: Optional[ AnalyticKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of analytic this analytic is.
    '''

    scaleKind: Optional[ ScaleKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The scoring scale kind.
    '''

    AnalyticScore: list[AnalyticScore] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AnalyticScore.Analytic',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Analytic score produced by this analytic.
    '''

    Asset: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.Analytic',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset on which this analytic can be performed.
    '''

    AssetGroup: list[AssetGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetGroup.Analytic',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset group on which this analytic can be performed.
    '''

    AssetHealthEvent: list[AssetHealthEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetHealthEvent.Analytic',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset health event which can be generated by this analytic.
    '''

@dataclass(repr=False)
class AssetGroup(Document):
    '''
    A grouping of assets created for a purpose such as fleet analytics, inventory
    or compliance management.
    '''

    kind: Optional[ AssetGroupKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of asset group this asset group is.
    '''

    Analytic: list[Analytic] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Analytic.AssetGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Analytic which can be performed on this asset group.
    '''

    AnalyticScore: list[AnalyticScore] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AnalyticScore.AssetGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Analytic score for this asset group.
    '''

    Asset: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.AssetGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset which is a part of this asset group.
    '''

@dataclass(repr=False)
class AssetModelCatalogueItem(Document):
    '''
    Provides pricing and other relevant information about a specific manufacturer's
    product (i.e., AssetModel), and its price from a given supplier. A single
    AssetModel may be availble from multiple suppliers. Note that manufacturer
    and supplier are both types of organisation, which the association is inherited
    from Document.
    '''

    unitCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit cost for an asset model from a specific supplier, either for a unit
    cost or cost per unit length. Cost is for material or asset only and does
    not include labor to install/construct or configure it.
    '''

    AssetModel: Optional[ProductAssetModel] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ProductAssetModel.AssetModelCatalogueItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AssetModelCatalogue: Optional[AssetModelCatalogue] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetModelCatalogue.AssetModelCatalogueItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPOLineItems: list[ErpPOLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpPOLineItem.AssetModelCatalogueItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpQuoteLineItems: list[ErpQuoteLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpQuoteLineItem.AssetModelCatalogueItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AuxiliaryAccount(Document):
    '''
    Variable and dynamic part of auxiliary agreement, generally representing
    the current state of the account related to the outstanding balance defined
    in auxiliary agreement.
    '''

    balance: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The total amount currently remaining on this account that is required to
    be paid in order to settle the account to zero. This excludes any due amounts
    not yet paid.
    '''

    principleAmount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The initial principle amount, with which this account was instantiated.
    '''

    AuxiliaryAgreement: Optional[AuxiliaryAgreement] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AuxiliaryAgreement.AuxiliaryAccounts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Auxiliary agreement regulating this account.
    '''

@dataclass(repr=False)
class BankAccount(Document):
    '''
    Bank account.
    '''

    accountNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Account reference number.
    '''

@dataclass(repr=False)
class BaseWork(Document):
    '''
    Common representation for work and work tasks.
    '''

@dataclass(repr=False)
class Work(BaseWork):
    '''
    Document used to request, initiate, track and record work.
    '''

    requestDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time work was requested.
    '''

    workOrderNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Work order number (or other unique identifying information) for this work.
    '''

    Appointments: list[Appointment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Appointment.Works',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All appointments for this work.
    '''

    BusinessCase: Optional[BusinessCase] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BusinessCase.Works',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Customers: list[Customer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Customer.Works',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All the customers for which this work is performed.
    '''

    Designs: list[Design] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Design.Work',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpProjectAccounting: Optional[ErpProjectAccounting] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpProjectAccounting.Works',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Incidents: list[Incident] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Incident.Works',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All incidents being addressed by this work.
    '''

    Project: Optional[Project] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Project.Works',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkBillingInfo: Optional[WorkBillingInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WorkBillingInfo.Works',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkCostDetails: list[WorkCostDetail] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkCostDetail.Works',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkFlowSteps: list[WorkFlowStep] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkFlowStep.Work',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkTasks: list[WorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkTask.Work',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All tasks in this work.
    '''

@dataclass(repr=False)
class WorkTask(BaseWork):
    '''
    A task within a set of work.
    '''

    completedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time work task was completed.
    '''

    crewETA: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Estimated time of arrival, so that customer or police/fire department can
    be informed when the crew will arrive.
    '''

    estimatedCompletionTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time and Date when the work task will be completed.
    '''

    instruction: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Instructions for performing this task.
    '''

    schedOverride: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If specified, override schedule and perform this task in accordance with
    instructions specified here.
    '''

    startedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time work task was started.
    '''

    contractorCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total contractor costs associated with the work task.
    '''

    laborCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total labor costs associated with the work task.
    '''

    laborHours: Optional[ float | Hours ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Hours of labor expended under work task.
    '''

    materiallCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total material costs associated with the work task.
    '''

    taskKind: Optional[ WorkTaskKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of work.
    '''

    toolCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total tool costs associated with the work task.
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.WorkTasks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All assets on which this non-replacement work task is performed.
    '''

    Crews: list[Crew] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Crew.WorkTasks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All crews participating in this work task.
    '''

    MaterialItems: list[MaterialItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MaterialItem.WorkTask',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The material items that are required to perform the work task.
    '''

    OldAsset: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.ReplacementWorkTasks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Old asset replaced by this work task.
    '''

    ProcedureDataSet: list[ProcedureDataSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProcedureDataSet.WorkTask',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Procedure data set associated with this work task.
    '''

    SwitchingPlan: Optional[SwitchingPlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingPlan.WorkTasks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching plan executed by this work task.
    '''

    TroubleOrder: Optional[TroubleOrder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleOrder.WorkTask',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The trouble order that contains the work tasks.
    '''

    Work: Optional[Work] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Work.WorkTasks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Work this task belongs to.
    '''

@dataclass(repr=False)
class MeterWorkTask(WorkTask):
    '''
    Work task involving meters.
    '''

    Meter: Optional[Meter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Meter.MeterServiceWorkTask',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter on which this non-replacement work task is performed.
    '''

    OldMeter: Optional[Meter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Meter.MeterReplacementWorkTasks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Old meter replaced by this work task.
    '''

    UsagePoint: Optional[UsagePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UsagePoint.MeterServiceWorkTasks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Usage point to which this meter service work task applies.
    '''

@dataclass(repr=False)
class OldWorkTask(WorkTask):
    '''
    A set of tasks is required to implement a design.
    '''

@dataclass(repr=False)
class Bid(Document):
    '''
    Represents both bids to purchase and offers to sell energy or ancillary
    services in an RTO-sponsored market.
    '''

    startTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start time and date for which bid applies.
    '''

    stopTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Stop time and date for which bid is applicable.
    '''

    marketType: Optional[ MarketType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The market type, DAM or RTM.
    '''

@dataclass(repr=False)
class DefaultBid(Bid):
    '''
    DefaultBid is a generic class to hold Default Energy Bid, Default Startup
    Bid, and Default Minimum Load Bid:
    Default Energy Bid
    A Default Energy Bid is a monotonically increasing staircase function consisting
    at maximum 10 economic bid segments, or 10 ($/MW, MW) pairs. There are
    three methods for determining the Default Energy Bid:
    <ul>
    <li>Cost Based: derived from the Heat Rate or Average Cost multiplied by
    the Gas Price Index plus 10%.</li>
    <li>LMP Based: a weighted average of LMPs in the preceding 90 days.</li>
    <li>Negotiated: an amount negotiated with the designated Independent Entity.</li>
    </ul>
    Default Startup Bid
    A Default Startup Bid (DSUB) shall be calculated for each RMR unit based
    on the Startup Cost stored in the Master File and the applicable GPI and
    EPI.
    Default Minimum Load Bid
    A Default Minimum Load Bid (DMLB) shall be calculated for each RMR unit
    based on the Minimum Load Cost stored in the Master File and the applicable
    GPI.
    '''

    bidType: Optional[ BidType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Default bid type such as Default Energy Bid, Default Minimum Load Bid,
    and Default Startup Bid
    '''

    minLoadCost: Optional[ float | CostRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum load cost in $/hr
    '''

    peakFlag: Optional[ OnOff ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    on-peak, off-peak, or all
    '''

    DefaultBidCurve: Optional[DefaultBidCurve] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DefaultBidCurve.DefaultBid',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: Optional[RegisteredResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegisteredResource.DefaultBid',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class BillDeterminant(Document):
    '''
    Models various charges to support billing and settlement.
    '''

@dataclass(repr=False)
class BusinessCase(Document):
    '''
    Business justification for capital expenditures, usually addressing operations
    and maintenance costs as well.
    '''

    corporateCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A codified representation of the business case (i.e., codes for highway
    relocation, replace substation transformers, etc.).
    '''

    Projects: list[Project] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Project.BusinessCase',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Works: list[Work] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Work.BusinessCase',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ChargeType(Document):
    '''
    Charge Type is the basic level configuration for settlement to process
    specific charges for invoicing purpose. Examples such as: Day Ahead Spinning
    Reserve Default Invoice Interest Charge, etc.
    '''

    chargeOrder: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    chargeVersion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    effectiveDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    factor: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    frequencyType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    terminationDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    totalInterval: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ChargeComponents: list[ChargeComponent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ChargeComponent.ChargeTypes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A ChargeType can have 0-n ChargeComponent and a ChargeComponent can associate
    to 0-n ChargeType
    '''

    ChargeGroup: list[ChargeGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ChargeGroup.ChargeType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A ChargeGroup can have 0-n ChargeType. A ChargeType can associate to 0-n
    ChargeGroup.
    '''

    MajorChargeGroup: list[MajorChargeGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MajorChargeGroup.ChargeType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A MajorChargeGroup can have 0-n ChargeType. A ChargeType can associate
    to 0-n MajorChargeGroup.
    '''

    MktUserAttribute: list[MktUserAttribute] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktUserAttribute.ChargeType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class CompatibleUnit(Document):
    '''
    A pre-planned job model containing labor, material, and accounting requirements
    for standardized job planning.
    '''

    quantity: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The quantity, unit of measure, and multiplier at the CU level that applies
    to the materials.
    '''

    estCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Estimated total cost for perfoming CU.
    '''

@dataclass(repr=False)
class CongestionRevenueRight(Document):
    '''
    Congestion Revenue Rights (CRR) class that is inherited from a Document
    class.
    A CRR is a financial concept that is used to hedge congestion charges.
    The CRR is usually settled based on the Locational Marginal Prices (LMPs)
    that are calculated in the day-ahead market. These LMPs are determined
    by the Day-ahead resource schedules/bids. CRRs will not hedge against marginal
    losses. If the congestion component of LMP at the sink is greater than
    at the source, then the CRR owner is entitled to receive a portion of congestion
    revenues. If the congestion component at the sink is less than at the source,
    then an obligation-type CRR owner will be charged, but an option-type CRR
    owner will not.
    '''

@dataclass(repr=False)
class CustomerAccount(Document):
    '''
    Assignment of a group of products and services purchased by the customer
    through a customer agreement, used as a mechanism for customer billing
    and payment. It contains common information from the various types of customer
    agreements to create billings (invoices) for a customer and receive payment.
    '''

    billingCycle: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cycle day on which the associated customer account will normally be billed,
    used to determine when to produce the billing.
    '''

    budgetBill: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Budget bill code.
    '''

    lastBillAmount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The last amount that will be billed to the customer prior to shut off of
    the account.
    '''

    AccountNotification: list[AccountNotification] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AccountNotification.CustomerAccount',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The notification for the customer account.
    '''

    Customer: Optional[Customer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Customer.CustomerAccounts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer owning this account.
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAgreement.CustomerAccount',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All agreements for this customer account.
    '''

    CustomerBillingInfos: list[CustomerBillingInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerBillingInfo.CustomerAccount',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpInvoicees: list[ErpInvoice] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpInvoice.CustomerAccount',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MeterReadSchedule: Optional[MeterReadSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReadSchedule.CustomerAccount',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter read schedule that applies to the customer account
    '''

    PaymentTransactions: list[Transaction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Transaction.CustomerAccount',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All payment transactions for this customer account.
    '''

    WorkBillingInfos: list[WorkBillingInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkBillingInfo.CustomerAccount',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class CustomerBillingInfo(Document):
    '''
    The creation of the monthly customer billing statements is the method employed
    to notify Customers of charges, adjustments and credits applied to their
    account for Services and Products. The actuall billing occurs through an
    ErpInvoice. The CustomerBillingInfo includes information from the payment,
    collection, meter reading, installed meter, service, site, customer, customer
    account, customer agreement, services and pricing subject areas. Each component
    price shows up as a separate line item on the ErpInvoice.
    The Customer Billing Statement may include collection and account messages,
    marketing/civic event messages and bill inserts.
    One Customer Billing Statement is produced for all Agreements under a CustomerAccount
    per billing cycle date defined in 'CustomerAccount.billingCycle'.
    The history of CustomerBillingInfo, Invoices and Payments is to be maintained
    in associated ActivityRecords.
    '''

    billingDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Business date designated for the billing run which produced this CustomerBillingInfo.
    '''

    dueDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Calculated date upon which a customer billing amount is due, used in the
    invoicing process to determine when a Customer's Payment is delinquent.
    It takes into consideration the regulatory criteria and the Customer's
    requested due date. In the absence of a Customer requested due date, the
    due date is typically calculated from the regulated number of days and
    the 'billingDate'.
    '''

    lastPaymentDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date of the last payment received from the customer. It is retained in
    the Customer Billing system, although the details of each payment are tracked
    in the ERP system.
    '''

    pymtPlanType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of payment plan.
    '''

    kind: Optional[ CustomerBillingKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of bill customer receives.
    '''

    lastPaymentAmt: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Amount of the last payment received from the customer. It is retained in
    the Customer Billing system, although the details of each payment are tracked
    in the ERP system.
    '''

    outBalance: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Outstanding balance on the CustomerAccount as of the statement date.
    '''

    pymtPlanAmt: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Monthly amortized amount due during each billing cycle for the CustomerAccount
    balance for which the Payment Plan is set-up.
    '''

    CustomerAccount: Optional[CustomerAccount] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerAccount.CustomerBillingInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpInvoiceLineItems: list[ErpInvoiceLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpInvoiceLineItem.CustomerBillingInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Design(Document):
    '''
    A design for consideration by customers, potential customers, or internal
    work.
    Note that the Version of design is the revision attribute that is inherited
    from Document.
    '''

    costEstimate: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Estimated cost (not price) of design.
    '''

    kind: Optional[ DesignKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of this design.
    '''

    price: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Price to customer for implementing design.
    '''

    ConditionFactors: list[ConditionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConditionFactor.Designs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DesignLocations: list[DesignLocation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DesignLocation.Designs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DesignLocationsCUs: list[DesignLocationCU] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DesignLocationCU.Designs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpBOMs: list[ErpBOM] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpBOM.Design',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpQuoteLineItem: Optional[ErpQuoteLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpQuoteLineItem.Design',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Work: Optional[Work] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Work.Designs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkCostDetails: list[WorkCostDetail] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkCostDetail.Design',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class EnergyTransaction(Document):
    '''
    Specifies the schedule for energy transfers between interchange areas that
    are necessary to satisfy the associated interchange transaction.
    '''

    capacityBacked: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interchange capacity flag. When the flag is set to true, it indicates a
    transaction is capacity backed.
    '''

    firmInterchangeFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Firm interchange flag indicates whether or not this energy transaction
    can be changed without potential financial consequences.
    '''

    payCongestion: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Willing to Pay congestion flag
    '''

    reason: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason for energy transaction.
    '''

    congestChargeMax: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum congestion charges in monetary units.
    '''

    deliveryPointP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Delivery point active power.
    '''

    energyMin: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transaction minimum active power if dispatchable.
    '''

    receiptPointP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Receipt point active power.
    '''

    state: Optional[ EnergyTransactionType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    { Approve | Deny | Study }
    '''

    CurtailmentProfiles: list[CurtailmentProfile] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CurtailmentProfile.EnergyTransaction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An EnergyTransaction may be curtailed by any of the participating entities.
    '''

    EnergyPriceCurves: list[EnergyPriceCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyPriceCurve.EnergyTransactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    EnergyProduct: Optional[EnergyProduct] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergyProduct.EnergyTransactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The "Source" for an EnergyTransaction is an EnergyProduct which is injected
    into a ControlArea. Typically this is a ServicePoint.
    '''

    EnergyProfiles: list[EnergyProfile] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyProfile.EnergyTransaction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An EnergyTransaction shall have at least one EnergyProfile.
    '''

    Export_SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.Export_EnergyTransactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy is transferred between interchange areas
    '''

    Import_SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.Import_EnergyTransactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy is transferred between interchange areas
    '''

    LossProfiles: list[LossProfile] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LossProfile.EnergyTransaction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An EnergyTransaction may have a LossProfile.
    '''

    TieLines: list[TieLine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TieLine.EnergyTransaction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A dynamic energy transaction can act as a pseudo tie line.
    '''

    TransmissionReservation: Optional[TransmissionReservation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransmissionReservation.EnergyTransaction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpBOM(Document):
    '''
    Information that generally describes the Bill of Material Structure and
    its contents for a utility.
    This is used by ERP systems to transfer Bill of Material information between
    two business applications.
    '''

    Design: Optional[Design] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Design.ErpBOMs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpBomItemDatas: list[ErpBomItemData] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpBomItemData.ErpBOM',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpInvoice(Document):
    '''
    A roll up of invoice line items. The whole invoice has a due date and amount
    to be paid, with information such as customer, banks etc. being obtained
    through associations. The invoice roll up is based on individual line items
    that each contain amounts and descriptions for specific services or products.
    '''

    dueDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Calculated date upon which the Invoice amount is due.
    '''

    mailedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date on which the customer billing statement/invoice was printed/mailed.
    '''

    proForma: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if payment is to be paid by a Customer to accept a particular ErpQuote
    (with associated Design) and have work initiated, at which time an associated
    ErpInvoice should automatically be generated. EprPayment.subjectStatus
    satisfies terms specificed in the ErpQuote.
    '''

    referenceNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of an invoice to be reference by this invoice.
    '''

    transactionDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time when the invoice is issued.
    '''

    transferType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of invoice transfer.
    '''

    amount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total amount due on this invoice based on line items and applicable adjustments.
    '''

    billMediaKind: Optional[ BillMediaKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of media by which the CustomerBillingInfo was delivered.
    '''

    kind: Optional[ ErpInvoiceKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of invoice (default is 'sales').
    '''

    CustomerAccount: Optional[CustomerAccount] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerAccount.ErpInvoicees',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpInvoiceLineItems: list[ErpInvoiceLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpInvoiceLineItem.ErpInvoice',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpInvoiceLineItem(Document):
    '''
    An individual line item on an invoice.
    '''

    glAccount: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    General Ledger account code, must be a valid combination.
    '''

    glDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time line item will be posted to the General Ledger.
    '''

    lineAmount: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Amount due for this line item.
    '''

    lineNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Line item number on invoice statement.
    '''

    lineVersion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Version number of the bill run.
    '''

    netAmount: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Net line item charge amount.
    '''

    previousAmount: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Previous line item charge amount.
    '''

    kind: Optional[ ErpInvoiceLineItemKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of line item.
    '''

    billPeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Bill period for the line item.
    '''

    ComponentErpInvoiceLineItems: list[ErpInvoiceLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpInvoiceLineItem.ContainerErpInvoiceLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ContainerErpInvoiceLineItem: Optional[ErpInvoiceLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpInvoiceLineItem.ComponentErpInvoiceLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    CustomerBillingInfos: list[CustomerBillingInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerBillingInfo.ErpInvoiceLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer billing for services rendered.
    '''

    ErpInvoice: Optional[ErpInvoice] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpInvoice.ErpInvoiceLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpJournalEntries: list[ErpJournalEntry] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpJournalEntry.ErpInvoiceLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPayableLineItem: Optional[ErpPayableLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpPayableLineItem.ErpInvoiceLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPayments: list[ErpPayment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpPayment.ErpInvoiceLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpQuoteLineItem: Optional[ErpQuoteLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpQuoteLineItem.ErpInvoiceLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpRecDelvLineItem: Optional[ErpRecDelvLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpRecDelvLineItem.ErpInvoiceLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpRecLineItem: Optional[ErpRecLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpRecLineItem.ErpInvoiceLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    UserAttributes: list[UserAttribute] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UserAttribute.ErpInvoiceLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkBillingInfos: list[WorkBillingInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkBillingInfo.ErpLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpJournal(Document):
    '''
    Book for recording accounting transactions as they occur. Transactions
    and adjustments are first recorded in a journal, which is like a diary
    of instructions, advising which account to be charged and by how much.
    A journal represents a change in the balances of a business's financial
    accounts. Many tasks or transactions throughout an enterprise will result
    in the creation of a journal. Some examples are creating a customer invoice,
    paying a vendor, transferring inventory, or paying employees.
    '''

    ErpJournalEntries: list[ErpJournalEntry] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpJournalEntry.ErpJournal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpLedger(Document):
    '''
    In accounting transactions, a ledger is a book containing accounts to which
    debits and credits are posted from journals, where transactions are initially
    recorded. Journal entries are periodically posted to the ledger. Ledger
    Actual represents actual amounts by account within ledger within company
    or business area. Actual amounts may be generated in a source application
    and then loaded to a specific ledger within the enterprise general ledger
    or budget application.
    '''

    ErpLedgerEntries: list[ErpLedgerEntry] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpLedgerEntry.ErpLedger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpLedgerBudget(Document):
    '''
    Information for utility Ledger Budgets. They support the transfer budget
    amounts between all possible source applications throughout an enterprise
    and a general ledger or budget application.
    '''

    ErpLedBudLineItems: list[ErpLedBudLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpLedBudLineItem.ErpLedgerBudget',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpPOLineItem(Document):
    '''
    Of an ErpPurchaseOrder, this is an individually ordered item or product
    along with the quantity, price and other descriptive information.
    '''

    AssetModelCatalogueItem: Optional[AssetModelCatalogueItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetModelCatalogueItem.ErpPOLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPurchaseOrder: Optional[ErpPurchaseOrder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpPurchaseOrder.ErpPOLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpRecDelLineItem: Optional[ErpRecDelvLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpRecDelvLineItem.ErpPOLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpReqLineItem: Optional[ErpReqLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpReqLineItem.ErpPOLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpPayable(Document):
    '''
    A transaction that represents an invoice from a supplier. A payable (or
    voucher) is an open item, approved and ready for payment, in the Accounts
    Payable ledger.
    '''

    ContractorItems: list[ContractorItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ContractorItem.ErpPayables',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPayableLineItems: list[ErpPayableLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpPayableLineItem.ErpPayable',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpPayment(Document):
    '''
    Payment infromation and status for any individual line item of an ErpInvoice
    (e.g., when payment is from a customer). ErpPayable is also updated when
    payment is to a supplier and ErpReceivable is updated when payment is from
    a customer. Multiple payments can be made against a single line item and
    an individual payment can apply to more that one line item.
    '''

    termsPayment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Payment terms (e.g., net 30).
    '''

    ErpInvoiceLineItems: list[ErpInvoiceLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpInvoiceLineItem.ErpPayments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPayableLineItems: list[ErpPayableLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpPayableLineItem.ErpPayments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpRecLineItems: list[ErpRecLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpRecLineItem.ErpPayments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpProjectAccounting(Document):
    '''
    Utility Project Accounting information, used by ERP applications to enable
    all relevant sub-systems that submit single sided transactions to transfer
    information with a Project Accounting Application. This would include,
    but not necessarily be limited to: Accounts Payable, Accounts Receivable,
    Budget, Order Management, Purchasing, Time and Labor, Travel and Expense.
    '''

    ErpTimeEntries: list[ErpTimeEntry] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpTimeEntry.ErpProjectAccounting',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Projects: list[Project] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Project.ErpProjectAccounting',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkCostDetails: list[WorkCostDetail] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkCostDetail.ErpProjectAccounting',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Works: list[Work] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Work.ErpProjectAccounting',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpPurchaseOrder(Document):
    '''
    A document that communicates an order to purchase goods from a buyer to
    a supplier. The PurchaseOrder carries information to and from the buyer
    and supplier. It is a legally binding document once both Parties agree
    to the contents and the specified terms and conditions of the order.
    '''

    ErpPOLineItems: list[ErpPOLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpPOLineItem.ErpPurchaseOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpQuote(Document):
    '''
    Document describing the prices of goods or services provided by a supplier.
    It includes the terms of the purchase, delivery proposals, identification
    of goods or services ordered, as well as their quantities.
    '''

    ErpQuoteLineItems: list[ErpQuoteLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpQuoteLineItem.ErpQuote',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpReceivable(Document):
    '''
    Transaction representing an invoice, credit memo or debit memo to a customer.
    It is an open (unpaid) item in the Accounts Receivable ledger.
    '''

    ErpRecLineItems: list[ErpRecLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpRecLineItem.ErpReceivable',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpReceiveDelivery(Document):
    '''
    Transaction for an Organisation receiving goods or services that may be
    used to indicate receipt of goods in conjunction with a purchase order.
    A receivable is an open (unpaid) item in the Accounts Receivable ledger.
    '''

    ErpRecDelvLineItems: list[ErpRecDelvLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpRecDelvLineItem.ErpReceiveDelivery',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpRequisition(Document):
    '''
    General information that applies to a utility requisition that is a request
    for the purchase of goods or services. Typically, a requisition leads to
    the creation of a purchase order to a specific supplier.
    '''

    ErpReqLineItems: list[ErpReqLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpReqLineItem.ErpRequisition',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Incident(Document):
    '''
    Description of a problem in the field that may be reported in a trouble
    ticket or come from another source. It may have to do with an outage.
    '''

    cause: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cause of this incident.
    '''

    Asset: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.Incident',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    CustomerNotifications: list[CustomerNotification] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerNotification.Incident',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All notifications for a customer related to the status change of this incident.
    '''

    Hazard: list[Hazard] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Hazard.Incident',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    IncidentHazard: list[IncidentHazard] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IncidentHazard.Incident',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All hazards associated with this incident.
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.Incident',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this incident.
    '''

    Outage: Optional[Outage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Outage.Incident',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Outage for this incident.
    '''

    Owner: Optional[Operator] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Operator.Incidents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Operator who owns this incident.
    '''

    TroubleOrder: Optional[TroubleOrder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleOrder.Incident',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The trouble order that is associated to the incident
    '''

    TroubleTickets: list[TroubleTicket] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TroubleTicket.Incident',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All trouble tickets reporting this incident.
    '''

    UnplannedOutage: Optional[UnplannedOutage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UnplannedOutage.Incident',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unplanned outage that may be associated with the incidents.
    '''

    Works: list[Work] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Work.Incidents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All works addressing this incident.
    '''

@dataclass(repr=False)
class MarketDocument(Document):
    '''
    Electronic document containing the information necessary to satisfy a given
    business process set of requirements.
    '''

    AceTariffType: list[AceTariffType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AceTariffType.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AttributeInstanceComponent: list[AttributeInstanceComponent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AttributeInstanceComponent.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DateAndOrTime: list[DateAndOrTime] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DateAndOrTime.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Domain: list[Domain] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Domain.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.SelfMarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketParticipant: list[MarketParticipant] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketParticipant.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Period: list[Period] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Period.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Process: list[Process] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Process.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Reason: list[Reason] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reason.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SelfMarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.MarketDocument',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MarketAgreement(MarketDocument):
    '''
    An identification or eventually the contents of an agreement between two
    or more parties.
    '''

@dataclass(repr=False)
class MarketFactors(Document):
    '''
    Aggregation of market information relative for a specific time interval.
    '''

    intervalEndTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The end of the time interval for which requirement is defined.
    '''

    intervalStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The start of the time interval for which requirement is defined.
    '''

    Market: Optional[Market] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Market.MarketFactors',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ExPostLoss(MarketFactors):
    '''
    Model of ex-post calcultion of MW losses.
    '''

@dataclass(repr=False)
class InstructionClearing(MarketFactors):
    '''
    Model of market clearing, relating to commitment instructions. Identifies
    interval.
    '''

    ActualDemandResponseEvent: Optional[DistributedResourceActualEvent] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DistributedResourceActualEvent.InstructionClearing',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    ActualDemandResponseEvents may exist that are not part of a cordinated
    MarketActualEvent associated to a Market. These ActualDemandResponseEvents
    can have many InstructionClearing Instructions for specified RegisteredResources
    or Distributed Energy Resource type of AggregateNodes.
    '''

    Instructions: list[Instructions] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Instructions.InstructionClearing',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ResourceDeploymentStatus: list[ResourceDeploymentStatus] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ResourceDeploymentStatus.InstructionClearing',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class LossClearing(MarketFactors):
    '''
    RT only and is published on 5 minute intervals for the previous RT time
    interval results.
    '''

    LossClearingResults: list[LossClearingResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LossClearingResults.LossClearing',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class LossSensitivity(MarketFactors):
    '''
    Loss sensitivity applied to a ConnectivityNode for a given time interval.
    '''

    lossFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Loss penalty factor.
    Defined as: 1 / ( 1 - Incremental Transmission Loss); with the Incremental
    Transmission Loss expressed as a plus or minus value. The typical range
    of penalty factors is (0,9 to 1,1).
    '''

    MktConnectivityNode: Optional[MktConnectivityNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MktConnectivityNode.LossPenaltyFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PnodeClearing(MarketFactors):
    '''
    Pricing node clearing results posted for a given settlement period.
    '''

@dataclass(repr=False)
class MarketSkill(Document):
    '''
    Proficiency level of a craft, which is required to operate or maintain
    a particular type of asset and/or perform certain types of work.
    '''

    effectiveDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time the skill became effective.
    '''

    level: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Level of skill for a Craft.
    '''

    certificationPeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interval between the certification and its expiry.
    '''

    MarketPerson: Optional[MarketPerson] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketPerson.MarketSkills',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketQualificationRequirements: list[MarketQualificationRequirement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketQualificationRequirement.MarketSkills',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MerchantAccount(Document):
    '''
    The operating account controlled by merchant agreement, against which the
    vendor may vend tokens or receipt payments. Transactions via vendor shift
    debit the account and bank deposits via bank statement credit the account.
    '''

@dataclass(repr=False)
class MeterReadSchedule(Document):
    '''
    '''

    CustomerAccount: list[CustomerAccount] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAccount.MeterReadSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All customer accounts for the meter read schedule.
    '''

    CustomerAgreement: list[CustomerAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAgreement.MeterReadSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All customer agreements for the meter read schedule.
    '''

    EndDevice: list[EndDevice] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDevice.MeterReadSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end devices for the meter read schedule.
    '''

    EndDeviceGroup: list[EndDeviceGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceGroup.MeterReadSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device groups for the meter read schedule.
    '''

    ReadingType: list[ReadingType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReadingType.MeterReadSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All reading types for the meter read schedule.
    '''

    TimeSchedule: list[TimeSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSchedule.MeterReadSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All time schedules for the meter read schedule.
    '''

    UsagePoint: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.MeterReadSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage points for the meter read schedule.
    '''

    UsagePointGroup: list[UsagePointGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePointGroup.MeterReadSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage point groups for the meter read schedule.
    '''

@dataclass(repr=False)
class OneCallRequest(Document):
    '''
    A request for other utilities to mark their underground facilities prior
    to commencement of construction and/or maintenance.
    '''

@dataclass(repr=False)
class OperationalRestriction(Document):
    '''
    A document that can be associated with equipment to describe any sort of
    restrictions compared with the original manufacturer's specification or
    with the usual operational practice e.g. temporary maximum loadings, maximum
    switching current, do not operate if bus couplers are open, etc.
    In the UK, for example, if a breaker or switch ever mal-operates, this
    is reported centrally and utilities use their asset systems to identify
    all the installed devices of the same manufacturer's type. They then apply
    operational restrictions in the operational systems to warn operators of
    potential problems. After appropriate inspection and maintenance, the operational
    restrictions may be removed.
    '''

    activePeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interval during which this restriction is applied.
    '''

    Equipments: list[Equipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Equipment.OperationalRestrictions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All equipments to which this restriction applies.
    '''

    ProductAssetModel: Optional[ProductAssetModel] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ProductAssetModel.OperationalRestrictions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset model to which this restriction applies.
    '''

    restrictedValue: Optional[FloatQuantity] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Restricted (new) value; includes unit of measure and potentially multiplier.
    '''

@dataclass(repr=False)
class OperationalUpdatedRating(OperationalRestriction):
    '''
    Lowered capability because of deterioration or inadequacy (sometimes referred
    to as derating or partial outage) or other kind of operational rating change.
    '''

    changeType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of operational updated rating, e.g. a derate, a rerate or a return
    to normal.
    '''

    PlannedOutage: Optional[PlannedOutage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PlannedOutage.UpdatedRatings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Planned equipment outage with this updated rating.
    '''

@dataclass(repr=False)
class OperationalTag(Document):
    '''
    Operational tag placed on a power system resource or asset in the context
    of switching plan execution or other work in the field.
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.OperationalTags',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset on which this tag has been placed.
    '''

    PowerSystemResource: Optional[PowerSystemResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.OperationalTags',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power system resource on which this tag has been placed.
    '''

    TagAction: Optional[TagAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TagAction.OperationalTag',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tag action associated with this tag.
    '''

@dataclass(repr=False)
class Outage(Document):
    '''
    Document describing details of an active or planned outage in a part of
    the electrical network.
    A non-planned outage may be created upon:
    - a breaker trip,
    - a fault indicator status change,
    - a meter event indicating customer outage,
    - a reception of one or more customer trouble calls, or
    - an operator command, reflecting information obtained from the field crew.
    Outage restoration may be performed using a switching plan which complements
    the outage information with detailed switching activities, including the
    relationship to the crew and work.
    A planned outage may be created upon:
    - a request for service, maintenance or construction work in the field,
    or
    - an operator-defined outage for what-if/contingency network analysis.
    '''

    communityDescriptor: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    a name to denote the community - this could be a name or a code of some
    kind.
    '''

    customersRestored: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    number of customers that have been restored in the area.
    '''

    metersAffected: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The updated number of meters affected by the outage as reported by the
    OMS within the utility. It is assumed this number will be updated repeatedly
    until the full outage is resolved.
    '''

    originalCustomersServed: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    the total number of customers that are served in the area (both outaged
    and not outaged).
    '''

    originalMetersAffected: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The original number of meters that were affected as reported by the OMS
    within the utility. That is, this is the total number of meters that were
    out at the beginning of the outage.
    '''

    utilityDisclaimer: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This contains an disclaimers the utility would like to place on the data
    provided to any stakeholder. This may be different for different stakeholders.
    This should possibly be an attribute under the Organization class but it
    is placed here for now.
    '''

    outageKind: Optional[ OutageStatusKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Defines if the outage has been verified or is only estimated
    '''

    statusKind: Optional[ CrewStatusKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    defines the status of the crew as in dispatched or arrived, etc.
    '''

    actualPeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Actual outage period; end of the period corresponds to the actual restoration
    time.
    '''

    Crew: list[Crew] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Crew.Outage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The crew that is assigned to the outage.
    '''

    DeEnergizedUsagePoint: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.Outage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    all deenergized useage points associated with the outage.
    '''

    EnergizedUsagePoint: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.Outage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All energized usage points associated with this outage.
    '''

    Equipments: list[Equipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Equipment.Outages',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All equipments associated with this outage.
    '''

    estimatedPeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Estimated outage period for a planned outage. The start of the period is
    the start of the planned outage and the end of the period corresponds to
    the end of the planned outage.
    '''

    EstimatedRestorationTime: Optional[EstimatedRestorationTime] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EstimatedRestorationTime.Outage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The estimated time that the power will be restored after an outage
    '''

    Faults: list[Fault] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Fault.Outage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All faults involved in this outage.
    '''

    Incident: list[Incident] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Incident.Outage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Incident reported in trouble call that results in this outage.
    '''

    OutageArea: list[OutageArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OutageArea.Outage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage area where the outage occured.
    '''

    OutageIsolationEquipment: list[ConductingEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConductingEquipment.Outage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The equipment that isolates this outage
    '''

    PlannedSwitchActions: list[SwitchAction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchAction.PlannedOutage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All switch actions to apply within the scope of this planned outage. Each
    such action groups switches to which the action is to apply in order to
    produce the desired network state considered as outage.
    '''

    summary: Optional[ServicePointOutageSummary] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Summary counts of service points (customers) affected by this outage.
    '''

    SwitchingPlans: list[SwitchingPlan] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchingPlan.Outage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All switching plans that lead to supply restoration due to this outage.
    Only one will be retained for execution.
    '''

@dataclass(repr=False)
class PlannedOutage(Outage):
    '''
    '''

    reason: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reason for the planned outage.
    '''

    FieldDispatchHistory: Optional[FieldDispatchHistory] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'FieldDispatchHistory.PlannedOutage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The dispatch history associated with the planned outage
    '''

    OutagePlan: Optional[OutagePlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OutagePlan.PlannedOutage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Outage plan for executing a planned outage.
    '''

    UpdatedRatings: list[OperationalUpdatedRating] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalUpdatedRating.PlannedOutage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All updated ratings for this planned equipment outage.
    '''

@dataclass(repr=False)
class UnplannedOutage(Outage):
    '''
    Document describing the consequence of an unplanned outage in a part of
    the electrical network. For the purposes of this model, an unplanned outage
    refers to a state where energy is not delivered; such as, customers out
    of service, a street light is not served, etc.
    A unplanned outage may be created upon:
    - impacts the SAIDI calculation
    - a breaker trip,
    - a fault indicator status change,
    - a meter event indicating customer outage,
    - a reception of one or more customer trouble calls, or
    - an operator command, reflecting information obtained from the field crew.
    Outage restoration may be performed using a switching plan which complements
    the outage information with detailed switching activities, including the
    relationship to the crew and work.
    '''

    cause: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The cause of this outage. This is the cause that is used to present to
    external entities. That is, the cause is weather, equipment failure, etc.
    Note: At present, this is a free string text; it could be replaced with
    an enumeration in the future.
    '''

    reportedStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The earliest start time of the Outage - as reported by some system or individual
    '''

    causeKind: Optional[ OutageCauseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The possible cause that could be associated with this unplanned outage.
    '''

    FieldDispatchHistory: Optional[FieldDispatchHistory] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'FieldDispatchHistory.UnplannedOutage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The dispatch history associated with the unplanned outage
    '''

    Incident: list[Incident] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Incident.UnplannedOutage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The incidents that are associated with the unplanned outage
    '''

    TroubleOrder: list[TroubleOrder] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TroubleOrder.UnplannedOutage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The trouble order that is associated to the unplanned outage.
    '''

    TroubleTicket: list[TroubleTicket] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TroubleTicket.UnplannedOutage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ticket called in by the customer that describes the trouble
    '''

@dataclass(repr=False)
class OutageOrder(Document):
    '''
    Transmits an outage plan to a crew in order for the planned outage to be
    executed.
    '''

    comment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Free-form comment associated with the outage order
    '''

    Location: list[Location] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Location.OutageOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this outage order.
    '''

    OutagePlan: Optional[OutagePlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OutagePlan.OutageOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage plan that is defined to address the outage order.
    '''

@dataclass(repr=False)
class OutagePlan(Document):
    '''
    Document containing the definition of planned outages of equipment and/or
    usage points. It will reference switching plans that are used to execute
    the planned outage.
    '''

    approvedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date and time the outage plan was approved
    '''

    cancelledDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and Time the planned outage was canceled.
    '''

    purpose: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Purpose of this outage plan, such as whether it is to replace equipment
    or perform maintenance or repairs or to reconfigure network topology.
    '''

    Customer: list[Customer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Customer.OutagePlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The customers that are affected by this planned outage.
    '''

    OutageOrder: Optional[OutageOrder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OutageOrder.OutagePlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage order that will address the outage plan.
    '''

    PlannedOutage: Optional[PlannedOutage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PlannedOutage.OutagePlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage resulting from the execution of the outage plan.
    '''

    plannedPeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    planned start and end time of the planned outage.
    '''

    SwitchingPlan: Optional[SwitchingPlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingPlan.OutagePlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The swiching plan that is associated with the outage plan.
    '''

@dataclass(repr=False)
class PassThroughBill(Document):
    '''
    Pass Through Bill is used for:
    1)Two sided charge transactions with or without ISO involvement
    2) Specific direct charges or payments that are calculated outside or provided
    directly to settlements
    3) Specific charge bill determinants that are externally supplied and used
    in charge calculations
    '''

@dataclass(repr=False)
class PlannedOutageNotification(Document):
    '''
    This class will be used to generate call ahead lists for customers who
    will be affected by a planned outage.
    '''

    Customer: list[Customer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Customer.PlannedOutageNotification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The customer that receives the notification
    '''

    SwitchingPlan: Optional[SwitchingPlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingPlan.PlannedOutageNotification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching plan that contains the planned outage notification.
    '''

    UsagePoint: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.PlannedOutageNotification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Usage Point that is specified in the planned outage notification.
    '''

@dataclass(repr=False)
class PricingStructure(Document):
    '''
    Grouping of pricing components and prices used in the creation of customer
    charges and the eligibility criteria under which these terms may be offered
    to a customer. The reasons for grouping include state, customer classification,
    site characteristics, classification (i.e. fee price structure, deposit
    price structure, electric service price structure, etc.) and accounting
    requirements.
    '''

    code: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unique user-allocated key for this pricing structure, used by company representatives
    to identify the correct price structure for allocating to a customer. For
    rate schedules it is often prefixed by a state code.
    '''

    dailyCeilingUsage: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Absolute maximum valid non-demand usage quantity used in validating a customer's
    billed non-demand usage.
    '''

    dailyEstimatedUsage: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used in place of actual computed estimated average when history of usage
    is not available, and typically manually entered by customer accounting.
    '''

    dailyFloorUsage: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Absolute minimum valid non-demand usage quantity used in validating a customer's
    billed non-demand usage.
    '''

    taxExemption: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if this pricing structure is not taxable.
    '''

    revenueKind: Optional[ RevenueKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (accounting) Kind of revenue, often used to determine the grace period
    allowed, before collection actions are taken on a customer (grace periods
    vary between revenue classes).
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAgreement.PricingStructures',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All customer agreements with this pricing structure.
    '''

    ServiceCategory: Optional[ServiceCategory] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceCategory.PricingStructures',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Service category to which this pricing structure applies.
    '''

    Tariffs: list[Tariff] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Tariff.PricingStructures',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All tariffs used by this pricing structure.
    '''

    Transactions: list[Transaction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Transaction.PricingStructure',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All transactions applying this pricing structure.
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.PricingStructures',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All service delivery points (with prepayment meter running as a stand-alone
    device, with no CustomerAgreement or Customer) to which this pricing structure
    applies.
    '''

@dataclass(repr=False)
class Procedure(Document):
    '''
    Documented procedure for various types of work or work tasks on assets.
    '''

    instruction: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Textual description of this procedure.
    '''

    sequenceNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Sequence number in a sequence of procedures being performed.
    '''

    kind: Optional[ ProcedureKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of procedure.
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.Procedures',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All assets to which this procedure applies.
    '''

    CompatibleUnits: list[CompatibleUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CompatibleUnit.Procedures',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Limits: list[Limit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Limit.Procedures',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Measurements: list[Measurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Measurement.Procedures',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Document containing this measurement.
    '''

    ProcedureDataSets: list[ProcedureDataSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProcedureDataSet.Procedure',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All data sets captured by this procedure.
    '''

@dataclass(repr=False)
class ProcedureDataSet(Document):
    '''
    A data set recorded each time a procedure is executed. Observed results
    are captured in associated measurement values and/or values for properties
    relevant to the type of procedure performed.
    '''

    completedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time procedure was completed.
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.ProcedureDataSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset to which this procedure data set applies.
    '''

    MeasurementValue: list[MeasurementValue] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeasurementValue.ProcedureDataSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement value related to this procedure data set.
    '''

    Procedure: Optional[Procedure] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Procedure.ProcedureDataSets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Procedure capturing this data set.
    '''

    Properties: list[UserAttribute] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UserAttribute.ProcedureDataSets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    UserAttributes used to specify further properties of this procedure data
    set. Use 'name' to specify what kind of property it is, and 'value.value'
    attribute for the actual value.
    '''

    TransformerObservations: list[TransformerObservation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerObservation.ProcedureDataSets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkTask: Optional[WorkTask] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WorkTask.ProcedureDataSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Work task that created this procedure data set.
    '''

@dataclass(repr=False)
class InspectionDataSet(ProcedureDataSet):
    '''
    Documents the result of one inspection, for a given attribute of an asset.
    '''

    locationCondition: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Description of the conditions of the location where the asset resides.
    '''

    AccordingToSchedules: list[ScheduledEventData] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ScheduledEventData.InspectionDataSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class LabTestDataSet(ProcedureDataSet):
    '''
    Results of testing done by a lab.
    '''

    conclusion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conclusion drawn from test results.
    '''

    conclusionConfidence: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Description of confidence in conclusion.
    '''

    testEquipmentID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identity of lab equipment used to perform test.
    '''

    reasonForTest: Optional[ TestReason ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason for performing test.
    '''

    AssetTestLab: Optional[AssetTestLab] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetTestLab.LabTestDataSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Test lab which produced this set of lab test results.
    '''

    Specimen: Optional[Specimen] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Specimen.LabTestDataSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specimen on which lab testing done in determining results.
    '''

@dataclass(repr=False)
class MaintenanceDataSet(ProcedureDataSet):
    '''
    The result of a maintenance activity, a type of Procedure, for a given
    attribute of an asset.
    '''

    conditionAfter: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Condition of asset just following maintenance procedure.
    '''

    conditionBefore: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Description of the condition of the asset just prior to maintenance being
    performed.
    '''

    maintCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Code for the type of maintenance performed.
    '''

@dataclass(repr=False)
class TestDataSet(ProcedureDataSet):
    '''
    Test results, usually obtained by a lab or other independent organisation.
    '''

    conclusion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conclusion drawn from test results.
    '''

    specimenID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identifier of specimen used in inspection or test.
    '''

    specimenToLabDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time the specimen was received by the lab.
    '''

@dataclass(repr=False)
class Project(Document):
    '''
    A collection of related work. For construction projects and maintenance
    projects, multiple phases may be performed.
    '''

@dataclass(repr=False)
class SafetyDocument(Document):
    '''
    Document restricting or authorising works on electrical equipment (for
    example a permit to work, sanction for test, limitation of access, or certificate
    of isolation), defined based upon organisational practices.
    '''

    issuedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this safety document has been issued.
    '''

    releasedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this safety document has been released.
    '''

    IssuedBySupervisor: Optional[OperationsSafetySupervisor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperationsSafetySupervisor.IssuedSafetyDocuments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Supervisor that issued this safety document.
    '''

    IssuedToSupervisor: Optional[FieldSafetySupervisor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'FieldSafetySupervisor.IssuedSafetyDocuments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Supervisor to whom this safety document is issued.
    '''

    ReleasedBySupervisor: Optional[FieldSafetySupervisor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'FieldSafetySupervisor.ReleasedSafetyDocuments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Supervisor that released this safety document.
    '''

    ReleasedToSupervisor: Optional[OperationsSafetySupervisor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperationsSafetySupervisor.ReleasedSafetyDocuments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Supervisor to which this safety document is released.
    '''

    SwitchingPlan: Optional[SwitchingPlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingPlan.SafetyDocuments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching plan to which this safety document applies.
    '''

@dataclass(repr=False)
class ClearanceDocument(SafetyDocument):
    '''
    Safety document used to authorise work on conducting equipment in the field.
    Tagged equipment is not allowed to be operated.
    '''

    mustBeDeenergised: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the equipment must be deenergised.
    '''

    mustBeGrounded: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the equipment must be grounded.
    '''

    ClearanceAction: Optional[ClearanceAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ClearanceAction.Clearance',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Clearance action associated with this clearance.
    '''

    TaggedPSRs: list[PowerSystemResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PowerSystemResource.Clearances',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All power system resources tagged through this clearance.
    '''

@dataclass(repr=False)
class ServiceRequest(Document):
    '''
    '''

    appointmentRequested: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    serviceSize: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The size or quantity requested by the customer; for example, 200 AMPS for
    electrical service, 50 MBits per second for internet service, etc.
    '''

    kind: Optional[ ServiceRequestKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    serviceKind: Optional[ ServiceKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Customer: Optional[Customer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Customer.ServiceRequest',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The customer making the service request
    '''

    ServiceLocation: Optional[ServiceLocation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceLocation.ServiceRequest',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The service location for the serivce request
    '''

    WorkTimeSchedule: list[WorkTimeSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkTimeSchedule.ServiceRequest',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All work time schedules associated with a service request
    '''

@dataclass(repr=False)
class Settlement(Document):
    '''
    Specifies a settlement run.
    '''

@dataclass(repr=False)
class Specification(Document):
    '''
    Specification can be used for various purposes relative to an asset, a
    logical device (PowerSystemResource), location, etc. Examples include documents
    supplied by manufacturers such as asset installation instructions, asset
    maintenance instructions, etc.
    '''

    AssetProperites: list[UserAttribute] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UserAttribute.PropertySpecification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    UserAttributes used to specify further properties of the asset covered
    with this specification. Use 'name' to specify what kind of property it
    is, and 'value.value' attribute for the actual value.
    '''

    AssetPropertyCurves: list[AssetPropertyCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetPropertyCurve.Specification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DimensionsInfos: list[DimensionsInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DimensionsInfo.Specifications',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Mediums: list[Medium] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Medium.Specification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    QualificationRequirements: list[QualificationRequirement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'QualificationRequirement.Specifications',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Ratings: list[UserAttribute] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UserAttribute.RatingSpecification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    UserAttributes used to specify ratings of the asset covered by this specification.
    Ratings also can be used to set the initial value of operational measurement
    limits. Use 'name' to specify what kind of rating it is (e.g., voltage,
    current), and 'value' attribute for the actual value and unit information
    of the rating.
    '''

    ReliabilityInfos: list[ReliabilityInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReliabilityInfo.Specification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class StandardIndustryCode(Document):
    '''
    The Standard Industrial Classification (SIC) are the codes that identify
    the type of products/service an industry is involved in, and used for statutory
    reporting purposes. For example, in the USA these codes are located by
    the federal government, and then published in a book entitled "The Standard
    Industrial Classification Manual". The codes are arranged in a hierarchical
    structure.
    Note that Residential Service Agreements are not classified according to
    the SIC codes.
    '''

    code: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Standard alphanumeric code assigned to a particular product/service within
    an industry.
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAgreement.StandardIndustryCode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class SwitchingOrder(Document):
    '''
    Transmits a switching plan to a crew in order for the plan to be executed.
    '''

    comment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Free-form comment associated with the switching order.
    '''

    Location: list[Location] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Location.SwitchingOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this switching order.
    '''

    plannedExecutionInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The planned start and end time for the switching order.
    '''

    SwitchingPlan: Optional[SwitchingPlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingPlan.SwitchingOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching plan that is defined in the switching order.
    '''

@dataclass(repr=False)
class SwitchingPlan(Document):
    '''
    A sequence of grouped or atomic steps intended to:
    - de-energise equipment or part of the network for safe work, and/or
    - bring back in service previously de-energised equipment or part of the
    network.
    '''

    approvedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date and time the switching plan was approved
    '''

    cancelledDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and Time the switching plan was cancelled.
    '''

    purpose: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Purpose of this plan, such as whether it is to move the state from normal
    to some abnormal condition, or to restore the normal state after an abnormal
    condition, or to perform some kind of optimisation such as correction of
    overload, voltage control, etc.
    '''

    rank: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Ranking in comparison to other switching plans.
    '''

    Outage: Optional[Outage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Outage.SwitchingPlans',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Outage that will be activated or eliminated when this switching plan gets
    executed.
    '''

    OutagePlan: Optional[OutagePlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OutagePlan.SwitchingPlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage plan for which the switching plan is defined.
    '''

    PlannedOutageNotification: Optional[PlannedOutageNotification] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PlannedOutageNotification.SwitchingPlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The planned outage notification that is associated to the switching plan.
    '''

    plannedPeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    the planned start and end times for the switching plan.
    '''

    SafetyDocuments: list[SafetyDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SafetyDocument.SwitchingPlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All safety documents applicable to this swtiching plan.
    '''

    SwitchingAction: list[SwitchingAction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchingAction.SwitchingPlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching actions that are associated with the switching plan.
    '''

    SwitchingOrder: Optional[SwitchingOrder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingOrder.SwitchingPlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching order that specified the switching plan to be implemented.
    '''

    SwitchingPlanRequest: Optional[SwitchingPlanRequest] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingPlanRequest.SwitchingPlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The request for the specified switching plan.
    '''

    SwitchingStepGroups: list[SwitchingStepGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchingStepGroup.SwitchingPlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All groups of switching steps within this switching plan.
    '''

    WorkTasks: list[WorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkTask.SwitchingPlan',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All work tasks to execute this switching plan.
    '''

@dataclass(repr=False)
class SwitchingPlanRequest(Document):
    '''
    A document used to request that a switching plan be created for a particular
    purpose.
    '''

    comment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Free-form text to describe the request
    '''

    equipmentToBeIsolated: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    free-form list of the equipment to be isolated by the switching
    '''

    groundingPoints: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    free-form list of equipment to be grounded or other actions to be taken
    in order to accomplish the required grounding.
    '''

    isolationArea: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    free-form description of the area to be isolated by the switching
    '''

    isolationPoints: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    free-form list of equipment to be operated or other actions to be taken
    in order to accomplish the required isolation.
    '''

    purpose: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The purpose of this switching plan request.
    '''

    switchingRequestDetails: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The details of this switching plan request.
    '''

    forwardSwitchingDateTimeInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date when the switching to isolate equipment is performed.
    '''

    outageDateTimeInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The window of time during which one or more customers will be de-energized
    during execution of the switching plan.
    '''

    RequestingOrganization: Optional[Organisation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Organisation.SwitchingPlanRequest',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The organization that requested the switching plan.
    '''

    reverseSwitchingDateTimeInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date when the switching to energize equipment is performed.
    '''

    SwitchingPlan: list[SwitchingPlan] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchingPlan.SwitchingPlanRequest',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching plan for the request.
    '''

@dataclass(repr=False)
class Tariff(Document):
    '''
    Document, approved by the responsible regulatory agency, listing the terms
    and conditions, including a schedule of prices, under which utility services
    will be provided. It has a unique number within the state or province.
    For rate schedules it is frequently allocated by the affiliated Public
    utilities commission (PUC).
    '''

    endDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if tariff became inactive) Date tariff was terminated.
    '''

    startDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date tariff was activated.
    '''

@dataclass(repr=False)
class TariffProfile(Document):
    '''
    A schedule of charges; structure associated with Tariff that allows the
    definition of complex tarif structures such as step and time of use when
    used in conjunction with TimeTariffInterval and Charge. Inherited 'status.value'
    is defined in the context of the utility's business rules, for example:
    active, inactive, etc.
    '''

@dataclass(repr=False)
class TimeSchedule(Document):
    '''
    Description of anything that changes through time. Time schedule is used
    to perform a single-valued function of time. Use inherited 'type' attribute
    to give additional information on this schedule, such as: periodic (hourly,
    daily, weekly, monthly, etc.), day of the month, by date, calendar (specific
    times and dates).
    '''

    disabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if this schedule is deactivated (disabled).
    '''

    recurrencePattern: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interval at which the scheduled action repeats (e.g., first Monday of every
    month, last day of the month, etc.).
    '''

    offset: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The offset from midnight (i.e., 0 h, 0 min, 0 s) for the periodic time
    points to begin. For example, for an interval meter that is set up for
    five minute intervals ('recurrencePeriod'=300=5 min), setting 'offset'=120=2
    min would result in scheduled events to read the meter executing at 2 min,
    7 min, 12 min, 17 min, 22 min, 27 min, 32 min, 37 min, 42 min, 47 min,
    52 min, and 57 min past each hour.
    '''

    recurrencePeriod: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Duration between time points, from the beginning of one period to the beginning
    of the next period. Note that a device like a meter may have multiple interval
    periods (e.g., 1 min, 5 min, 15 min, 30 min, or 60 min).
    '''

    MeterReadSchedule: Optional[MeterReadSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReadSchedule.TimeSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter read schedule for which the time schedule applies
    '''

    scheduleInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Schedule date and time interval.
    '''

    TimePoints: list[TimePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimePoint.TimeSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Sequence of time points belonging to this time schedule.
    '''

@dataclass(repr=False)
class WorkTimeSchedule(TimeSchedule):
    '''
    Time schedule specific to work.
    '''

    kind: Optional[ WorkTimeScheduleKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of this work schedule.
    '''

    BaseWork: Optional[BaseWork] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BaseWork.TimeSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time schedule for this work or work task.
    '''

    ServiceRequest: Optional[ServiceRequest] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceRequest.WorkTimeSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The service request for which the work time schedule exists
    '''

@dataclass(repr=False)
class TroubleOrder(Document):
    '''
    Trouble order sends an incident to a crew to initiate a response to an
    unplanned outage.
    '''

    comment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Free-form comment associated with the trouble order.
    '''

    Incident: Optional[Incident] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Incident.TroubleOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The incident that may be associated with the trouble order.
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.TroubleOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The location of this trouble order
    '''

    plannedExecutionInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The planned start and end time for the trouble order.
    '''

    TroubleTicket: list[TroubleTicket] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TroubleTicket.TroubleOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ticket called in by the customer that describes the trouble
    '''

    UnplannedOutage: Optional[UnplannedOutage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UnplannedOutage.TroubleOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unplanned outage that is associated to the Trouble Order.
    '''

    WorkTask: list[WorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WorkTask.TroubleOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The work tasks that are associated with this trouble order.
    '''

@dataclass(repr=False)
class TroubleTicket(Document):
    '''
    '''

    comment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Free-form comment associated with the trouble call for example, "customer
    reported a large flash", etc.
    '''

    dateTimeOfReport: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time the trouble has been reported.
    '''

    firstResponderStatus: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates whether the first responder such as police, fire department etc.has
    been notified and whether they are on site or en route.
    '''

    multiplePremises: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Set to true if the outage report indicated that other neighbors are also
    out of power.
    '''

    resolvedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this trouble ticket has been resolved.
    '''

    troubleCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Trouble code (e.g., power down, flickering lights, partial power, etc).
    '''

    reportingKind: Optional[ TroubleReportingKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates how the customer reported trouble.
    '''

    Customer: Optional[Customer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Customer.TroubleTickets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer for whom this trouble ticket is relevant.
    '''

    Hazard: list[Hazard] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Hazard.TroubleTicket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Incident: Optional[Incident] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Incident.TroubleTickets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Incident reported in this trouble ticket
    '''

    IncidentHazard: list[IncidentHazard] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IncidentHazard.TroubleTicket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All hazards reported with this trouble ticket.
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.TroubleTicket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Notification: list[CustomerNotification] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerNotification.TroubleTickets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Notification for this trouble ticket.
    '''

    ServiceLocation: Optional[ServiceLocation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceLocation.TroubleTicket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The service location to which one or more trouble tickets are associated.
    '''

    TroubleOrder: Optional[TroubleOrder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleOrder.TroubleTicket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The order to which one or more trouble tickets are associated.
    '''

    TroubleReporter: Optional[TroubleReporter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleReporter.TroubleTicket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TroubleSymptoms: Optional[TroubleSymptoms] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleSymptoms.TroubleTicket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    UnplannedOutage: Optional[UnplannedOutage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UnplannedOutage.TroubleTicket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unplanned outage to which one or more trouble tickets are associated.
    '''

@dataclass(repr=False)
class TypeMaterial(Document):
    '''
    Documentation for a generic material item that may be used for design,
    work and other purposes. Any number of MaterialItems manufactured by various
    vendors may be used to perform this TypeMaterial.
    Note that class analagous to "AssetModel" is not used for material items.
    This is because in some cases, for example, a utility sets up a Master
    material record for a 3 inch long half inch diameter steel bolt and they
    do not necessarily care what specific supplier is providing the material
    item. As different vendors are used to supply the part, the Stock Code
    of the material item can stay the same. In other cases, each time the vendor
    changes, a new stock code is set up so they can track material used by
    vendor. Therefore a Material Item "Model" is not typically needed.
    '''

    costType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of cost to which this Material Item belongs.
    '''

    quantity: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value, unit of measure, and multiplier for the quantity.
    '''

    stockItem: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if item is a stock item (default).
    '''

    estUnitCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The estimated unit cost of this type of material, either for a unit cost
    or cost per unit length. Cost is for material or asset only and does not
    include labor to install/construct or configure it.
    '''

    ErpIssueInventories: list[ErpIssueInventory] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpIssueInventory.TypeMaterial',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpReqLineItems: list[ErpReqLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpReqLineItem.TypeMaterial',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MaterialItems: list[MaterialItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MaterialItem.TypeMaterial',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class WorkBillingInfo(Document):
    '''
    Billing information for work performed for the customer. The history of
    Work Billing Info, Invoices, and Payments is to be maintained in associated
    ActivityRecords.
    '''

    discount: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Discount from standard price.
    '''

    dueDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time by which payment for bill is expected from client.
    '''

    issueDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time bill was issued to client.
    '''

    receivedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date payment was received from client.
    '''

    costEstimate: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Estimated cost for work.
    '''

    deposit: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Amount of price on deposit.
    '''

    workPrice: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Amount of bill.
    '''

    CustomerAccount: Optional[CustomerAccount] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerAccount.WorkBillingInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpLineItems: list[ErpInvoiceLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpInvoiceLineItem.WorkBillingInfos',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Works: list[Work] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Work.WorkBillingInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class WorkCostDetail(Document):
    '''
    A collection of all of the individual cost items collected from multiple
    sources.
    '''

    isDebit: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if 'amount' is a debit, false if it is a credit.
    '''

    transactionDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time that 'amount' is posted to the work.
    '''

    amount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Amount in designated currency for work, either a total or an individual
    element. As defined in the attribute "type," multiple instances are applicable
    to each work for: planned cost, actual cost, authorized cost, budgeted
    cost, forecasted cost, other.
    '''

    ContractorItems: list[ContractorItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ContractorItem.WorkCostDetail',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    CostType: Optional[CostType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CostType.WorkCostDetails',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Design: Optional[Design] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Design.WorkCostDetails',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpProjectAccounting: Optional[ErpProjectAccounting] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpProjectAccounting.WorkCostDetails',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    LaborItems: list[LaborItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LaborItem.WorkCostDetail',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MiscCostItems: list[MiscCostItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MiscCostItem.WorkCostDetail',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    OverheadCost: Optional[OverheadCost] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OverheadCost.WorkCostDetails',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PropertyUnits: list[PropertyUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PropertyUnit.WorkCostDetails',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkCostSummary: Optional[WorkCostSummary] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WorkCostSummary.WorkCostDetail',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Works: list[Work] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Work.WorkCostDetails',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkTask: Optional[OldWorkTask] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OldWorkTask.WorkCostDetails',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class WorkCostSummary(Document):
    '''
    A roll up by cost type for the entire cost of a work order. For example,
    total labor.
    '''

    WorkCostDetail: Optional[WorkCostDetail] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WorkCostDetail.WorkCostSummary',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Domain(IdentifiedObject):
    '''
    An area of activity defined within the energy market.
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.Domain',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Price: list[Price] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Price.Domain',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Quantity: list[Quantity] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Quantity.Domain',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.Domain',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.Domain',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class EndDeviceControl(IdentifiedObject):
    '''
    Instructs an end device (or an end device group) to perform a specified
    action.
    '''

    drProgramLevel: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Level of a demand response program request, where 0=emergency. Note: Attribute
    is not defined on DemandResponseProgram as it is not its inherent property
    (it serves to control it).
    '''

    drProgramMandatory: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Whether a demand response program request is mandatory. Note: Attribute
    is not defined on DemandResponseProgram as it is not its inherent property
    (it serves to control it).
    '''

    issuerID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unique identifier of the business entity originating an end device control.
    '''

    issuerTrackingID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identifier assigned by the initiator (e.g. retail electric provider) of
    an end device control action to uniquely identify the demand response event,
    text message, or other subject of the control action. Can be used when
    cancelling an event or text message request or to identify the originating
    event or text message in a consequential end device event.
    '''

    priceSignal: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Price signal used as parameter for this end device control.
    '''

    reason: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason for the control action that allows to determine how to continue
    processing. For example, disconnect meter command may require different
    processing by the receiving system if it has been issued for a network-related
    reason (protection) or for a payment-related reason.
    '''

    EndDeviceAction: Optional[EndDeviceAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDeviceAction.EndDeviceControl',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End device action issued by this end device control.
    '''

    EndDeviceControlType: Optional[EndDeviceControlType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDeviceControlType.EndDeviceControls',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of this end device control.
    '''

    EndDeviceGroups: list[EndDeviceGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceGroup.EndDeviceControls',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device groups receiving commands from this end device control.
    '''

    EndDevices: list[EndDevice] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDevice.EndDeviceControls',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end devices receiving commands from this end device control.
    '''

    primaryDeviceTiming: Optional[EndDeviceTiming] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Timing for the control actions performed on the device identified in the
    end device control.
    '''

    scheduledInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if control has scheduled duration) Date and time interval the control
    has been scheduled to execute within.
    '''

    secondaryDeviceTiming: Optional[EndDeviceTiming] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Timing for the control actions performed by devices that are responding
    to event related information sent to the primary device indicated in the
    end device control. For example, load control actions performed by a PAN
    device in response to demand response event information sent to a PAN gateway
    server.
    '''

    UsagePointGroups: list[UsagePointGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePointGroup.EndDeviceControls',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage point groups receiving commands from this end device control.
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.EndDeviceControls',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage points receiving commands from this end device control.
    '''

@dataclass(repr=False)
class EndDeviceControlType(IdentifiedObject):
    '''
    Detailed description for a control produced by an end device. Values in
    attributes allow for creation of recommended codes to be used for identifying
    end device controls as follows: <type>.<domain>.<subDomain>.<eventOrAction>.
    '''

    domain: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    High-level nature of the control.
    '''

    eventOrAction: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The most specific part of this control type. It is mainly in the form of
    a verb that gives action to the control that just occurred.
    '''

    subDomain: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    More specific nature of the control, as a further sub-categorisation of
    'domain'.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of physical device from which the control was created. A value of
    zero (0) can be used when the source is unknown.
    '''

    EndDeviceControls: list[EndDeviceControl] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceControl.EndDeviceControlType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device controls of this type.
    '''

@dataclass(repr=False)
class EndDeviceEventType(IdentifiedObject):
    '''
    Detailed description for an event produced by an end device. Values in
    attributes allow for creation of recommended codes to be used for identifying
    end device events as follows: <type>.<domain>.<subDomain>.<eventOrAction>.
    '''

    domain: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    High-level nature of the event. By properly classifying events by a small
    set of domain codes, a system can more easily run reports based on the
    types of events that have occurred or been received.
    '''

    eventOrAction: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The most specific part of this event type. It is mainly in the form of
    a verb that gives action to the event that just occurred.
    '''

    subDomain: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    More specific nature of the event, as a further sub-categorisation of 'domain'.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of physical device from which the event was created. A value of zero
    (0) can be used when the source is unknown.
    '''

    EndDeviceEvents: list[EndDeviceEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceEvent.EndDeviceEventType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device events of this type.
    '''

@dataclass(repr=False)
class EndDeviceGroup(IdentifiedObject):
    '''
    Abstraction for management of group communications within a two-way AMR
    system or the data for a group of related end devices. Commands can be
    issued to all of the end devices that belong to the group using a defined
    group address and the underlying AMR communication infrastructure. A DERGroup
    and a PANDeviceGroup is an EndDeviceGroup.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of this group.
    '''

    DemandResponsePrograms: list[DemandResponseProgram] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DemandResponseProgram.EndDeviceGroups',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All demand response programs this group of end devices is enrolled in.
    '''

    DERFunction: Optional[DERFunction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DERFunction.EndDeviceGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Functions supported by the DER Group
    '''

    DERGroupDispatch: list[DERGroupDispatch] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DERGroupDispatch.EndDeviceGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An individual dispatch for a DER Group.
    '''

    DERGroupForecast: list[DERGroupForecast] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DERGroupForecast.EndDeviceGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An individual forecast for a DER Group.
    '''

    DERMonitorableParameter: list[DERMonitorableParameter] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DERMonitorableParameter.EndDeviceGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DER monitorable parameters associated with a DER Group.
    '''

    EndDeviceControls: list[EndDeviceControl] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceControl.EndDeviceGroups',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device controls sending commands to this end device group.
    '''

    EndDevices: list[EndDevice] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDevice.EndDeviceGroups',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end devices this end device group refers to.
    '''

    MeterReadSchedule: Optional[MeterReadSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReadSchedule.EndDeviceGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter read schedule that applies to the end device group
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current status information relevant to a group.
    '''

    version: Optional[Version] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    version of this group
    '''

@dataclass(repr=False)
class EnergyArea(IdentifiedObject):
    '''
    Describes an area having energy production or consumption. Specializations
    are intended to support the load allocation function as typically required
    in energy management systems or planning studies to allocate hypothesized
    load levels to individual load points for power flow analysis. Often the
    energy area can be linked to both measured and forecast load levels.
    '''

    ControlArea: Optional[ControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ControlArea.EnergyArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The control area specification that is used for the load forecast.
    '''

@dataclass(repr=False)
class LoadArea(EnergyArea):
    '''
    The class is the root or first level in a hierarchical structure for grouping
    of loads for the purpose of load flow load scaling.
    '''

    SubLoadAreas: list[SubLoadArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SubLoadArea.LoadArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The SubLoadAreas in the LoadArea.
    '''

@dataclass(repr=False)
class SubLoadArea(EnergyArea):
    '''
    The class is the second level in a hierarchical structure for grouping
    of loads for the purpose of load flow load scaling.
    '''

    LoadArea: Optional[LoadArea] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'LoadArea.SubLoadAreas',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The LoadArea where the SubLoadArea belongs.
    '''

    LoadGroups: list[LoadGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LoadGroup.SubLoadArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Loadgroups in the SubLoadArea.
    '''

@dataclass(repr=False)
class EnergySchedulingType(IdentifiedObject):
    '''
    Used to define the type of generation for scheduling purposes.
    '''

    EnergySource: list[EnergySource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergySource.EnergySchedulingType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy Source of a particular Energy Scheduling Type.
    '''

@dataclass(repr=False)
class EnvironmentalInformation(IdentifiedObject):
    '''
    Abstract class (with concrete child classes of Observation and Forecast)
    that groups phenomenon and/or environmental value sets.
    '''

    created: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The timestamp of when the forecast was created
    '''

    EnvironmentalAnalog: list[EnvironmentalAnalog] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalAnalog.EnvironmentalInformation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental analog associated with this observation or forecast.
    '''

    EnvironmentalDataProvider: Optional[EnvironmentalDataProvider] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalDataProvider.EnvironmentalInformation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental data provider supplying this environmental information.
    '''

    EnvironmentalDiscrete: list[EnvironmentalDiscrete] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalDiscrete.EnvironmentalInformation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental discrete (integer) associated with this observation or forecast.
    '''

    EnvironmentalEvent: list[EnvironmentalEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalEvent.EnvironmentalInformation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental event to which this forecast or observation relates.
    '''

    EnvironmentalPhenomenon: list[EnvironmentalPhenomenon] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalPhenomenon.EnvironmentalInformation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    EnvironmentalStringMeasurement: list[EnvironmentalStringMeasurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalStringMeasurement.EnvironmentalInformation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental string measurement associated with this forecast or observation.
    '''

@dataclass(repr=False)
class Forecast(EnvironmentalInformation):
    '''
    A forecast group of value sets and/or phenomena characteristics.
    '''

    validFor: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The interval for which the forecast is valid. For example, a forecast issued
    now for tomorrow might be valid for the next 2 hours.
    '''

@dataclass(repr=False)
class Observation(EnvironmentalInformation):
    '''
    Observed (actual non-forecast) values sets and/or phenomena characteristics.
    '''

@dataclass(repr=False)
class EnvironmentalMonitoringStation(IdentifiedObject):
    '''
    An environmental monitoring station, examples of which could be a weather
    station or a seismic monitoring station.
    '''

    dstObserved: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Whether this station is currently reporting using daylight saving time.
    Intended to aid a utility Weather Service in interpreting information coming
    from a station and has no direct relationship to the manner in which time
    is expressed in EnvironmentalValueSet.
    '''

    isNetworked: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that station is part of a network of stations used to monitor
    weather phenomena covering a large geographical area.
    '''

    timeZoneOffset: Optional[ float | Minutes ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time offset from UTC (a.k.a. GMT) configured in the station "clock",
    not (necessarily) the time zone in which the station is physically located.
    This attribute exists to support management of utility monitoring stations
    and has no direct relationship to the manner in which time is expressed
    in EnvironmentalValueSet.
    '''

    EnvironmentalAnalog: list[EnvironmentalAnalog] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalAnalog.EnvironmentalMonitoringStation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental analog measurement provided by this monitoring station.
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.EnvironmentalMonitoringStation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this monitoring station.
    '''

    ReportingCapability: list[ReportingCapability] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReportingCapability.EnvironmentalMonitoringStation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    One of the reporting capabilities of this monitoring station.
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.EnvironmentalMonitoringStation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    UsagePoint: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.EnvironmentalMonitoringStation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class EquipmentLimitSeriesComponent(IdentifiedObject):
    '''
    This represents one instance of an equipment that contributes to the calculation
    of an operational limit.
    '''

    Equipment: Optional[Equipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Equipment.EqiupmentLimitSeriesComponent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Equipment contributing toward the series limit. The reference here is to
    Equipment rather than a specific limit on the equipment so the grouiping
    can be reused for multiple limits of different types on the same instance
    of equipment.
    '''

    SeriesEquipmentDependentLimit: Optional[SeriesEquipmentDependentLimit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SeriesEquipmentDependentLimit.EquipmentLimitSeriesComponent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Calculation in which the refernce to equipment applies.
    '''

@dataclass(repr=False)
class ErpBomItemData(IdentifiedObject):
    '''
    An individual item on a bill of materials.
    '''

    DesignLocation: Optional[DesignLocation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DesignLocation.ErpBomItemDatas',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpBOM: Optional[ErpBOM] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpBOM.ErpBomItemDatas',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TypeAsset: Optional[CatalogAssetType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CatalogAssetType.ErpBomItemDatas',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpInventory(IdentifiedObject):
    '''
    Utility inventory-related information about an item or part (and not for
    description of the item and its attributes). It is used by ERP applications
    to enable the synchronization of Inventory data that exists on separate
    Item Master databases. This data is not the master data that describes
    the attributes of the item such as dimensions, weight, or unit of measure
    - it describes the item as it exists at a specific location.
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.ErpInventory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpIssueInventory(IdentifiedObject):
    '''
    Can be used to request an application to process an issue or request information
    about an issue.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TypeAsset: Optional[CatalogAssetType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CatalogAssetType.ErpInventoryIssues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TypeMaterial: Optional[TypeMaterial] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TypeMaterial.ErpIssueInventories',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpItemMaster(IdentifiedObject):
    '''
    Any unique purchased part for manufactured product tracked by ERP systems
    for a utility.
    Item, as used by the OAG, refers to the basic information about an item,
    including its attributes, cost, and locations. It does not include item
    quantities. Compare to the Inventory, which includes all quantities and
    other location-specific information.
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.ErpItemMaster',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpJournalEntry(IdentifiedObject):
    '''
    Details of an individual entry in a journal, which is to be posted to a
    ledger on the posting date.
    '''

    accountID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Account identifier for this entry.
    '''

    postingDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this entry is to be posted to the ledger.
    '''

    sourceID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The identifer of the source for this entry.
    '''

    transactionDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time journal entry was recorded.
    '''

    amount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The amount of the debit or credit for this account.
    '''

    CostTypes: list[CostType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CostType.ErpJournalEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpInvoiceLineItem: Optional[ErpInvoiceLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpInvoiceLineItem.ErpJournalEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpJournal: Optional[ErpJournal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpJournal.ErpJournalEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpLedgerEntry: Optional[ErpLedgerEntry] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpLedgerEntry.ErpJounalEntry',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPayableLineItems: list[ErpPayableLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpPayableLineItem.ErpJournalEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpRecLineItems: list[ErpRecLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpRecLineItem.ErpJournalEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpLedBudLineItem(IdentifiedObject):
    '''
    Individual entry of a given Ledger Budget, typically containing information
    such as amount, accounting date, accounting period, and is associated with
    the applicable general ledger account.
    '''

    ErpLedBudLineItem: Optional[ErpLedgerEntry] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpLedgerEntry.ErpLedgerEntry',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpLedgerBudget: Optional[ErpLedgerBudget] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpLedgerBudget.ErpLedBudLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpLedgerEntry(IdentifiedObject):
    '''
    Details of an individual entry in a ledger, which was posted from a journal
    on the posted date.
    '''

    accountID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Account identifier for this entry.
    '''

    postedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this entry was posted to the ledger.
    '''

    transactionDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time journal entry was recorded.
    '''

    accountKind: Optional[ ErpAccountKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of account for this entry.
    '''

    amount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The amount of the debit or credit for this account.
    '''

    ErpJounalEntry: Optional[ErpJournalEntry] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpJournalEntry.ErpLedgerEntry',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpLedger: Optional[ErpLedger] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpLedger.ErpLedgerEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpLedgerEntry: Optional[ErpLedBudLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpLedBudLineItem.ErpLedBudLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    UserAttributes: list[UserAttribute] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UserAttribute.ErpLedgerEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpPayableLineItem(IdentifiedObject):
    '''
    Of an ErpPayable, a line item references an ErpInvoiceLineitem or other
    source such as credit memos.
    '''

    ErpInvoiceLineItem: Optional[ErpInvoiceLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpInvoiceLineItem.ErpPayableLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpJournalEntries: list[ErpJournalEntry] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpJournalEntry.ErpPayableLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPayable: Optional[ErpPayable] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpPayable.ErpPayableLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPayments: list[ErpPayment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpPayment.ErpPayableLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpQuoteLineItem(IdentifiedObject):
    '''
    Of an ErpQuote, the item or product quoted along with quantity, price and
    other descriptive information.
    '''

    AssetModelCatalogueItem: Optional[AssetModelCatalogueItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetModelCatalogueItem.ErpQuoteLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Design: Optional[Design] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Design.ErpQuoteLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpInvoiceLineItem: Optional[ErpInvoiceLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpInvoiceLineItem.ErpQuoteLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Some utilities provide quotes to customer for services, where the customer
    accepts the quote by making a payment. An invoice is required for this
    to occur.
    '''

    ErpQuote: Optional[ErpQuote] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpQuote.ErpQuoteLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpReqLineItem: Optional[ErpReqLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpReqLineItem.ErpQuoteLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpRecDelvLineItem(IdentifiedObject):
    '''
    Of an ErpReceiveDelivery, this is an individually received good or service
    by the Organisation receiving goods or services. It may be used to indicate
    receipt of goods in conjunction with a purchase order line item.
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.ErpRecDeliveryItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpInvoiceLineItem: Optional[ErpInvoiceLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpInvoiceLineItem.ErpRecDelvLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPOLineItem: Optional[ErpPOLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpPOLineItem.ErpRecDelLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpReceiveDelivery: Optional[ErpReceiveDelivery] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpReceiveDelivery.ErpRecDelvLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpRecLineItem(IdentifiedObject):
    '''
    Individual entry of an ErpReceivable, it is a particular transaction representing
    an invoice, credit memo or debit memo to a customer.
    '''

    ErpInvoiceLineItem: Optional[ErpInvoiceLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpInvoiceLineItem.ErpRecLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpJournalEntries: list[ErpJournalEntry] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpJournalEntry.ErpRecLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPayments: list[ErpPayment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpPayment.ErpRecLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpReceivable: Optional[ErpReceivable] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpReceivable.ErpRecLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpReqLineItem(IdentifiedObject):
    '''
    Information that describes a requested item and its attributes.
    '''

    code: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    deliveryDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    quantity: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Quantity of item requisitioned.
    '''

    cost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cost of material.
    '''

    ErpPOLineItem: Optional[ErpPOLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpPOLineItem.ErpReqLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpQuoteLineItem: Optional[ErpQuoteLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpQuoteLineItem.ErpReqLineItem',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpRequisition: Optional[ErpRequisition] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpRequisition.ErpReqLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TypeAsset: Optional[CatalogAssetType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CatalogAssetType.ErpReqLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TypeMaterial: Optional[TypeMaterial] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TypeMaterial.ErpReqLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpSiteLevelData(IdentifiedObject):
    '''
    For a utility, general information that describes physical locations of
    organizations or the location codes and their meanings. This enables ERP
    applications to ensure that the physical location identifiers are synchronized
    between the business applications.
    '''

@dataclass(repr=False)
class Fault(IdentifiedObject):
    '''
    Abnormal condition causing current flow through conducting equipment, such
    as caused by equipment failure or short circuits from objects not typically
    modelled (for example, a tree falling on a line).
    '''

    occurredDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date and time at which the fault occurred.
    '''

    kind: Optional[ PhaseConnectedFaultKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The kind of phase fault.
    '''

    phases: Optional[ PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The phases participating in the fault. The fault connections into these
    phases are further specified by the type of fault.
    '''

    FaultCauseTypes: list[FaultCauseType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FaultCauseType.Faults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All types of fault cause.
    '''

    FaultyEquipment: Optional[Equipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Equipment.Faults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Equipment carrying this fault.
    '''

    impedance: Optional[FaultImpedance] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fault impedance. Its usage is described by 'kind'.
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.Fault',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this fault.
    '''

    Outage: Optional[Outage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Outage.Faults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Outage associated with this fault.
    '''

@dataclass(repr=False)
class EquipmentFault(Fault):
    '''
    A fault applied at the terminal, external to the equipment. This class
    is not used to specify faults internal to the equipment.
    '''

    Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.EquipmentFaults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminal connecting to the bus to which the fault is applied.
    '''

@dataclass(repr=False)
class LineFault(Fault):
    '''
    A fault that occurs on an AC line segment at some point along the length.
    '''

    lengthFromTerminal1: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The length to the place where the fault is located starting from terminal
    with sequence number 1 of the faulted line segment.
    '''

    ACLineSegment: Optional[ACLineSegment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.LineFaults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The line segment of this line fault.
    '''

@dataclass(repr=False)
class FaultCauseType(IdentifiedObject):
    '''
    Type of cause of the fault.
    '''

    ConfigurationEvent: list[ConfigurationEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConfigurationEvent.FaultCauseType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All configuration events created for this fault cause type.
    '''

    Faults: list[Fault] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Fault.FaultCauseTypes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All faults with this cause type.
    '''

@dataclass(repr=False)
class FieldDispatchHistory(IdentifiedObject):
    '''
    The history of field dispatch statuses for this work.
    '''

    Crew: Optional[Crew] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Crew.FieldDispatchHistory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The crew that has this field dispatch history.
    '''

    FieldDispatchStep: list[FieldDispatchStep] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FieldDispatchStep.FieldDispatchHistory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The field dispatch step that has the field dispatch history.
    '''

    PlannedOutage: Optional[PlannedOutage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PlannedOutage.FieldDispatchHistory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The planned outage that has the field dispatch history.
    '''

    UnplannedOutage: Optional[UnplannedOutage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UnplannedOutage.FieldDispatchHistory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unplanned outage that has the field dispatch history.
    '''

@dataclass(repr=False)
class FinancialInfo(IdentifiedObject):
    '''
    Various current financial properties associated with a particular asset.
    Historical properties may be determined by ActivityRecords associated with
    the asset.
    '''

    account: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The account to which this actual material item is charged.
    '''

    costDescription: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Description of the cost.
    '''

    costType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of cost to which this Material Item belongs.
    '''

    plantTransferDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time asset's financial value was put in plant for regulatory accounting
    purposes (e.g., for rate base calculations). This is sometime referred
    to as the "in-service date".
    '''

    purchaseDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time asset was purchased.
    '''

    purchaseOrderNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Purchase order identifier.
    '''

    valueDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time at which the financial value was last established.
    '''

    warrantyEndDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time warranty on asset expires.
    '''

    actualPurchaseCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The actual purchase cost of this particular asset.
    '''

    financialValue: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value of asset as of 'valueDateTime'.
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.FinancialInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The asset to which this financial information relates.
    '''

    quantity: Optional[IntegerQuantity] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The quantity of the asset if per unit length, for example conductor.
    '''

@dataclass(repr=False)
class FossilFuel(IdentifiedObject):
    '''
    The fossil fuel consumed by the non-nuclear thermal generating unit. For
    example, coal, oil, gas, etc. These are the specific fuels that the generating
    unit can consume.
    '''

    fuelHeatContent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The amount of heat per weight (or volume) of the given type of fuel.
    '''

    fossilFuelType: Optional[ FuelType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of fossil fuel, such as coal, oil, or gas.
    '''

    fuelCost: Optional[ float | CostPerHeatUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The cost in terms of heat value for the given type of fuel.
    '''

    fuelDispatchCost: Optional[ float | CostPerHeatUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The cost of fuel used for economic dispatching which includes: fuel cost,
    transportation cost, and incremental maintenance cost.
    '''

    fuelEffFactor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The efficiency factor for the fuel (per unit) in terms of the effective
    energy absorbed.
    '''

    fuelHandlingCost: Optional[ float | CostPerHeatUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Handling and processing cost associated with this fuel.
    '''

    fuelMixture: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Relative amount of the given type of fuel, when multiple fuels are being
    consumed.
    '''

    fuelSulfur: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The fuel's fraction of pollution credit per unit of heat content.
    '''

    highBreakpointP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The active power output level of the unit at which the given type of fuel
    is switched on. This fuel (e.g., oil) is sometimes used to supplement the
    base fuel (e.g., coal) at high active power output levels.
    '''

    lowBreakpointP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The active power output level of the unit at which the given type of fuel
    is switched off. This fuel (e.g., oil) is sometimes used to stabilize the
    base fuel (e.g., coal) at low active power output levels.
    '''

    FuelAllocationSchedules: list[FuelAllocationSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FuelAllocationSchedule.FossilFuel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A fuel allocation schedule shall have a fossil fuel.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.FossilFuels',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have one or more fossil fuels.
    '''

@dataclass(repr=False)
class Gate(IdentifiedObject):
    '''
    Logical gate than support logical operation based on the input.
    '''

@dataclass(repr=False)
class GenericConstraints(IdentifiedObject):
    '''
    Generic constraints can represent secure areas, voltage profile, transient
    stability and voltage collapse limits.
    The generic constraints can be one of the following forms:
    a) Thermal MW limit constraints type
    b) Group line flow constraint type
    '''

@dataclass(repr=False)
class GeographicalRegion(IdentifiedObject):
    '''
    A geographical region of a power system network model.
    '''

    Regions: list[SubGeographicalRegion] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SubGeographicalRegion.Region',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All sub-geographical regions within this geographical region.
    '''

@dataclass(repr=False)
class Hazard(IdentifiedObject):
    '''
    An object or a condition that is a danger for causing loss or perils to
    an asset and/or people.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of this hazard.
    '''

    Incident: Optional[Incident] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Incident.Hazard',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of this hazard.
    '''

    TroubleTicket: Optional[TroubleTicket] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleTicket.Hazard',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AssetLocationHazard(Hazard):
    '''
    Potential hazard related to the location of an asset. Examples are trees
    growing under overhead power lines, a park being located by a substation
    (i.e., children climb fence to recover a ball), a lake near an overhead
    distribution line (fishing pole/line contacting power lines), dangerous
    neighbour, etc.
    '''

    kind: Optional[ AssetHazardKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of hazard.
    '''

    Locations: list[Location] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Location.Hazards',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The location of this hazard.
    '''

@dataclass(repr=False)
class IncidentHazard(Hazard):
    '''
    Hazardous situation associated with an incident. Examples are line down,
    gas leak, fire, etc.
    '''

    Incident: Optional[Incident] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Incident.IncidentHazard',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Incident associated with this hazard.
    '''

    TroubleTicket: Optional[TroubleTicket] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleTicket.IncidentHazard',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Trouble ticket associated with this hazard.
    '''

@dataclass(repr=False)
class ICCPInformationMessage(IdentifiedObject):
    '''
    This class represents the TASE.2 Information Message Object. The IdentifiedObject.name
    attribute must be non-null. The value of the attribute shall be used as
    the TASE.2 Information Reference, as specified by 60870-6-503.
    '''

    localReference: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Local Reference attribute specifies a value agreed upon between sender
    and receiver of the Information Message. It further identifies the Information
    Message.
    '''

    scope: Optional[ ICCPScopeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates if the Point is global scoped (e.g. VCC) or accessible only to
    the Bilateral table peer (e.g. ICC).
    '''

    TASE2BilateralTable: list[TASE2BilateralTable] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TASE2BilateralTable.ICCPInformationMessage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Bilateral table agreement that includes the informational message.
    '''

@dataclass(repr=False)
class IOPoint(IdentifiedObject):
    '''
    The class describe a measurement or control value. The purpose is to enable
    having attributes and associations common for measurement and control.
    '''

    BilateralToIOPoint: list[ProvidedBilateralPoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProvidedBilateralPoint.IOPoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Bilateral ICCP point for the measurement or control.
    '''

    IOPointSource: Optional[IOPointSource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IOPointSource.IOPoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Local merasurement value source for an ICCP point.
    '''

@dataclass(repr=False)
class Control(IOPoint):
    '''
    Control is used for supervisory/device control. It represents control outputs
    that are used to change the state in a process, e.g. close or open breaker,
    a set point value or a raise lower command.
    '''

    controlType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the type of Control. For example, this specifies if the Control
    represents BreakerOpen, BreakerClose, GeneratorVoltageSetPoint, GeneratorRaise,
    GeneratorLower, etc.
    '''

    operationInProgress: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates that a client is currently sending control commands that has
    not completed.
    '''

    timeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The last time a control output was sent.
    '''

    unitMultiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit multiplier of the controlled quantity.
    '''

    unitSymbol: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit of measure of the controlled quantity.
    '''

    ControlAction: Optional[ControlAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ControlAction.Control',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The control action that is performed on the control
    '''

    PowerSystemResource: Optional[PowerSystemResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.Controls',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Regulating device governed by this control output.
    '''

    RemoteControl: Optional[RemoteControl] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RemoteControl.Control',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The remote point controlling the physical actuator.
    '''

@dataclass(repr=False)
class AccumulatorReset(Control):
    '''
    This command resets the counter value to zero.
    '''

    AccumulatorValue: Optional[AccumulatorValue] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AccumulatorValue.AccumulatorReset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The accumulator value that is reset by the command.
    '''

@dataclass(repr=False)
class AnalogControl(Control):
    '''
    An analog control used for supervisory control.
    '''

    maxValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal value range maximum for any of the Control.value. Used for scaling,
    e.g. in bar graphs.
    '''

    minValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal value range minimum for any of the Control.value. Used for scaling,
    e.g. in bar graphs.
    '''

    AnalogValue: Optional[AnalogValue] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AnalogValue.AnalogControl',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The MeasurementValue that is controlled.
    '''

@dataclass(repr=False)
class RaiseLowerCommand(AnalogControl):
    '''
    An analog control that increases or decreases a set point value with pulses.
    Unless otherwise specified, one pulse moves the set point by one.
    '''

    ValueAliasSet: Optional[ValueAliasSet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ValueAliasSet.RaiseLowerCommands',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ValueAliasSet used for translation of a Control value to a name.
    '''

@dataclass(repr=False)
class SetPoint(AnalogControl):
    '''
    An analog control that issues a set point value.
    '''

    normalValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal value for Control.value e.g. used for percentage scaling.
    '''

    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value representing the actuator output.
    '''

@dataclass(repr=False)
class Command(Control):
    '''
    A Command is a discrete control used for supervisory control.
    '''

    normalValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal value for Control.value e.g. used for percentage scaling.
    '''

    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value representing the actuator output.
    '''

    DiscreteValue: Optional[DiscreteValue] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DiscreteValue.Command',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The MeasurementValue that is controlled.
    '''

    ValueAliasSet: Optional[ValueAliasSet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ValueAliasSet.Commands',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ValueAliasSet used for translation of a Control value to a name.
    '''

@dataclass(repr=False)
class MeasurementValue(IOPoint):
    '''
    The current state for a measurement. A state value is an instance of a
    measurement from a specific source. Measurements can be associated with
    many state values, each representing a different source for the measurement.
    '''

    timeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time when the value was last updated.
    '''

    sensorAccuracy: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The limit, expressed as a percentage of the sensor maximum, that errors
    will not exceed when the sensor is used under reference conditions.
    '''

    CalculationMethodHierarchy: Optional[CalculationMethodHierarchy] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CalculationMethodHierarchy.MeasurementValue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPerson: Optional[OldPerson] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OldPerson.MeasurementValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MeasurementValueQuality: Optional[MeasurementValueQuality] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeasurementValueQuality.MeasurementValue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A MeasurementValue has a MeasurementValueQuality associated with it.
    '''

    MeasurementValueSource: Optional[MeasurementValueSource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeasurementValueSource.MeasurementValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A reference to the type of source that updates the MeasurementValue, e.g.
    SCADA, CCLink, manual, etc. User conventions for the names of sources are
    contained in the introduction to IEC 61970-301.
    '''

    ProcedureDataSet: list[ProcedureDataSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProcedureDataSet.MeasurementValue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Procedure data set that applies to this mesurement value.
    '''

    RemoteSource: Optional[RemoteSource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RemoteSource.MeasurementValue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Link to the physical telemetered point associated with this measurement.
    '''

@dataclass(repr=False)
class AccumulatorValue(MeasurementValue):
    '''
    AccumulatorValue represents an accumulated (counted) MeasurementValue.
    '''

    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value to supervise. The value is positive.
    '''

    Accumulator: Optional[Accumulator] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Accumulator.AccumulatorValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement to which this value is connected.
    '''

    AccumulatorReset: Optional[AccumulatorReset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AccumulatorReset.AccumulatorValue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The command that resets the accumulator value.
    '''

@dataclass(repr=False)
class AnalogValue(MeasurementValue):
    '''
    AnalogValue represents an analog MeasurementValue.
    '''

    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value to supervise.
    '''

    Analog: Optional[Analog] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Analog.AnalogValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement to which this value is connected.
    '''

    AnalogControl: Optional[AnalogControl] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AnalogControl.AnalogValue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Control variable associated with the MeasurementValue.
    '''

@dataclass(repr=False)
class BaseReading(MeasurementValue):
    '''
    Common representation for reading values. Note that a reading value may
    have multiple qualities, as produced by various systems ('ReadingQuality.source').
    '''

    reportedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (used only when there are detailed auditing requirements) Date and time
    at which the reading was first delivered to the metering system.
    '''

    source: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    System that originally supplied the reading (e.g., customer, AMI system,
    handheld reading system, another enterprise system, etc.).
    '''

    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value of this reading.
    '''

    ReadingQualities: list[ReadingQuality] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReadingQuality.Reading',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All qualities of this reading.
    '''

    timePeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start and end of the period for those readings whose type has a time attribute
    such as 'billing', seasonal' or 'forTheSpecifiedPeriod'.
    '''

@dataclass(repr=False)
class IntervalReading(BaseReading):
    '''
    Data captured at regular intervals of time. Interval data could be captured
    as incremental data, absolute data, or relative data. The source for the
    data is usually a tariff quantity or an engineering quantity. Data is typically
    captured in time-tagged, uniform, fixed-length intervals of 5 min, 10 min,
    15 min, 30 min, or 60 min.
    Note: Interval Data is sometimes also called "Interval Data Readings" (IDR).
    '''

    IntervalBlocks: list[IntervalBlock] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IntervalBlock.IntervalReadings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All blocks containing this interval reading.
    '''

@dataclass(repr=False)
class Reading(BaseReading):
    '''
    Specific value measured by a meter or other asset, or calculated by a system.
    Each Reading is associated with a specific ReadingType.
    '''

    position: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A sequential value representing the relative position within a given time
    interval.
    '''

    valueMissing: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The indication of whether or not the quantity of this reading is missing.
    '''

    reason: Optional[ ReadingReasonKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason for this reading being taken.
    '''

    MeterReadings: list[MeterReading] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeterReading.Readings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All meter readings (sets of values) containing this reading value.
    '''

    ReadingType: Optional[ReadingType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReadingType.Readings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type information for this reading value.
    '''

@dataclass(repr=False)
class DiscreteValue(MeasurementValue):
    '''
    DiscreteValue represents a discrete MeasurementValue.
    '''

    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value to supervise.
    '''

    Command: Optional[Command] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Command.DiscreteValue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Control variable associated with the MeasurementValue.
    '''

    Discrete: Optional[Discrete] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Discrete.DiscreteValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement to which this value is connected.
    '''

@dataclass(repr=False)
class StringMeasurementValue(MeasurementValue):
    '''
    StringMeasurementValue represents a measurement value of type string.
    '''

    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value to supervise.
    '''

    StringMeasurement: Optional[StringMeasurement] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StringMeasurement.StringMeasurementValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement to which this value is connected.
    '''

@dataclass(repr=False)
class EnvironmentalCodedValue(StringMeasurementValue):
    '''
    An environmental value described using a coded value. A triplicate of enumerated
    values representing intensity, coverage, type of weather is used. These
    may be concatenated into the string value.
    '''

    coverageKind: Optional[ CoverageCodeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Code representing the coverage of the weather condition.
    '''

    intensityKind: Optional[ IntensityCodeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Code representing the intensity of the weather condition.
    '''

    probabilityPercent: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Probability of weather condition occurring during the time interval expressed
    as a percentage. Applicable only when weather condition is related to a
    forecast (not an observation).
    '''

    weatherKind: Optional[ WeatherCodeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Code representing the type of weather condition.
    '''

@dataclass(repr=False)
class IncrementalDatasetArg(IdentifiedObject):
    '''
    A generic model operation argument referencing an incremental change description.
    '''

    IncrementalDataset: Optional[ChangeSet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ChangeSet.IncrementalDatasetArg',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    IncrementalDatasetArgDescription: Optional[IncrementalDatasetArgDescription] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IncrementalDatasetArgDescription.IncrementalDatasetArg',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class IncrementalDatasetArgDescription(IdentifiedObject):
    '''
    '''

    IncrementalDatasetArg: list[IncrementalDatasetArg] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IncrementalDatasetArg.IncrementalDatasetArgDescription',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The incremental dataset used for this argument instance.
    '''

@dataclass(repr=False)
class LaborItem(IdentifiedObject):
    '''
    Labor used for work order.
    '''

@dataclass(repr=False)
class LandProperty(IdentifiedObject):
    '''
    Information about a particular piece of (land) property such as its use.
    Ownership of the property may be determined through associations to Organisations
    and/or ErpPersons.
    '''

    externalRecordReference: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reference allocated by the governing organisation (such as municipality)
    to this piece of land that has a formal reference to Surveyor General's
    records. The governing organisation is specified in associated Organisation.
    '''

    demographicKind: Optional[ DemographicKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Demographics around the site.
    '''

    kind: Optional[ LandPropertyKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of (land) property, categorised according to its main functional use
    from the utility's perspective.
    '''

    AssetContainers: list[AssetContainer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetContainer.LandProperties',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpOrganisationRoles: list[PropertyOrganisationRole] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PropertyOrganisationRole.LandProperty',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpPersonRoles: list[PersonPropertyRole] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PersonPropertyRole.LandProperty',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpSiteLevelDatas: list[ErpSiteLevelData] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpSiteLevelData.LandProperty',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    LocationGrants: list[LocationGrant] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LocationGrant.LandProperty',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All location grants this land property has.
    '''

    Locations: list[Location] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Location.LandProperties',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The spatail description of a piece of property.
    '''

    RightOfWays: list[RightOfWay] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RightOfWay.LandProperties',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All rights of way this land property has.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Limit(IdentifiedObject):
    '''
    Specifies one limit value for a Measurement. A Measurement typically has
    several limits that are kept together by the LimitSet class. The actual
    meaning and use of a Limit instance (i.e., if it is an alarm or warning
    limit or if it is a high or low limit) is not captured in the Limit class.
    However the name of a Limit instance may indicate both meaning and use.
    '''

    Procedures: list[Procedure] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Procedure.Limits',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AccumulatorLimit(Limit):
    '''
    Limit values for Accumulator measurements.
    '''

    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value to supervise against. The value is positive.
    '''

    LimitSet: Optional[AccumulatorLimitSet] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AccumulatorLimitSet.Limits',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The set of limits.
    '''

@dataclass(repr=False)
class AnalogLimit(Limit):
    '''
    Limit values for Analog measurements.
    '''

    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value to supervise against.
    '''

    LimitSet: Optional[AnalogLimitSet] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AnalogLimitSet.Limits',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The set of limits.
    '''

@dataclass(repr=False)
class ViolationLimit(Limit):
    '''
    A type of limit that indicates if it is enforced and, through association,
    the organisation responsible for setting the limit.
    '''

@dataclass(repr=False)
class LimitDependency(IdentifiedObject):
    '''
    A limit calculation model used to compute an operational limit based on
    external input such as temperature. These are intended to be shared among
    operational limits with the same calculation form that apply to a piece
    of equipment..
    '''

    Equipment: Optional[Equipment] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Equipment.LimitDependencyModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The equipment for which this limit dependency model is organized under.
    '''

    OperationalLimit: list[OperationalLimit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalLimit.LimitDependencyModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operational limits to which this limit dependency model applies.
    '''

@dataclass(repr=False)
class LimitScalingLimit(LimitDependency):
    '''
    Specifies an operational limit is calculated by scaling another operational
    limit.
    '''

    limitScalingPercent: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The associated source limit is scaled by this value to compute the limit
    of the dependency model.
    '''

    SourceOperationalLimit: Optional[OperationalLimit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperationalLimit.LimitScalingLimit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class SeriesEquipmentDependentLimit(LimitDependency):
    '''
    Limit based on most restrictive series equipment limit.
    A specification of of equipment that determines the calculated operational
    limit values based upon other equipment and their ratings. The most restrictive
    limit connected in series within the group is used. The physical connection
    based on switch status for example may also impact which elements in the
    group are considered. Any equipment in the group that are presently connected
    in series with the equipment of the directly associated operational limit
    are used. This provides a means to indicate which potentially series equipment
    limits are considered for a computed operational limit. The operational
    limit of the same operational limit type is assumed to be used from the
    grouped equipment. It is also possible to make assumptions or calculations
    regarding how flow might split if the equipment is not simply in series.
    '''

    EquipmentLimitSeriesComponent: list[EquipmentLimitSeriesComponent] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EquipmentLimitSeriesComponent.SeriesEquipmentDependentLimit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Equipment linkages that participates in the limit calculation.
    '''

@dataclass(repr=False)
class LimitSet(IdentifiedObject):
    '''
    Specifies a set of Limits that are associated with a Measurement. A Measurement
    may have several LimitSets corresponding to seasonal or other changing
    conditions. The condition is captured in the name and description attributes.
    The same LimitSet may be used for several Measurements. In particular percentage
    limits are used this way.
    '''

    isPercentageLimits: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tells if the limit values are in percentage of normalValue or the specified
    Unit for Measurements and Controls.
    '''

@dataclass(repr=False)
class AccumulatorLimitSet(LimitSet):
    '''
    An AccumulatorLimitSet specifies a set of Limits that are associated with
    an Accumulator measurement.
    '''

    Limits: list[AccumulatorLimit] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AccumulatorLimit.LimitSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The limit values used for supervision of Measurements.
    '''

    Measurements: list[Accumulator] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Accumulator.LimitSets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Measurements using the LimitSet.
    '''

@dataclass(repr=False)
class AnalogLimitSet(LimitSet):
    '''
    An AnalogLimitSet specifies a set of Limits that are associated with an
    Analog measurement.
    '''

    Limits: list[AnalogLimit] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AnalogLimit.LimitSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The limit values used for supervision of Measurements.
    '''

    Measurements: list[Analog] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Analog.LimitSets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Measurements using the LimitSet.
    '''

@dataclass(repr=False)
class LoadDynamics(IdentifiedObject):
    '''
    Load whose behaviour is described by reference to a standard model <font
    color="#0f0f0f">or by definition of a user-defined model.</font>
    A standard feature of dynamic load behaviour modelling is the ability to
    associate the same behaviour to multiple energy consumers by means of a
    single load definition. The load model is always applied to individual
    bus loads (energy consumers).
    '''

    EnergyConsumer: list[EnergyConsumer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyConsumer.LoadDynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy consumer to which this dynamics load model applies.
    '''

@dataclass(repr=False)
class LoadGroup(IdentifiedObject):
    '''
    The class is the third level in a hierarchical structure for grouping of
    loads for the purpose of load flow load scaling.
    '''

    SubLoadArea: Optional[SubLoadArea] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubLoadArea.LoadGroups',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The SubLoadArea where the Loadgroup belongs.
    '''

@dataclass(repr=False)
class ConformLoadGroup(LoadGroup):
    '''
    A group of loads conforming to an allocation pattern.
    '''

    ConformLoadSchedules: list[ConformLoadSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConformLoadSchedule.ConformLoadGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ConformLoadSchedules in the ConformLoadGroup.
    '''

    EnergyConsumers: list[ConformLoad] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConformLoad.LoadGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conform loads assigned to this ConformLoadGroup.
    '''

@dataclass(repr=False)
class NonConformLoadGroup(LoadGroup):
    '''
    Loads that do not follow a daily and seasonal load variation pattern.
    '''

    EnergyConsumers: list[NonConformLoad] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NonConformLoad.LoadGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conform loads assigned to this ConformLoadGroup.
    '''

    NonConformLoadSchedules: list[NonConformLoadSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NonConformLoadSchedule.NonConformLoadGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The NonConformLoadSchedules in the NonConformLoadGroup.
    '''

@dataclass(repr=False)
class LoadResponseCharacteristic(IdentifiedObject):
    '''
    Models the characteristic response of the load demand due to changes in
    system conditions such as voltage and frequency. It is not related to demand
    response.
    If LoadResponseCharacteristic.exponentModel is True, the exponential voltage
    or frequency dependent models are specified and used as to calculate active
    and reactive power components of the load model.
    The equations to calculate active and reactive power components of the
    load model are internal to the power flow calculation, hence they use different
    quantities depending on the use case of the data exchange.
    The equations for exponential voltage dependent load model injected power
    are:
    pInjection= Pnominal* (Voltage/cim:BaseVoltage.nominalVoltage) ** cim:LoadResponseCharacteristic.pVoltageExponent
    qInjection= Qnominal* (Voltage/cim:BaseVoltage.nominalVoltage) ** cim:LoadResponseCharacteristic.qVoltageExponent
    Where:
    1) * means "multiply" and ** is "raised to power of";
    2) Pnominal and Qnominal represent the active power and reactive power
    at nominal voltage as any load described by the voltage exponential model
    shall be given at nominal voltage. This means that EnergyConsumer.p and
    EnergyConsumer.q are at nominal voltage.
    3) After power flow is solved:
    -pInjection and qInjection correspond to SvPowerflow.p and SvPowerflow.q
    respectively.
    - Voltage corresponds to SvVoltage.v at the TopologicalNode where the load
    is connected.
    '''

    exponentModel: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates the exponential voltage dependency model is to be used. If false,
    the coefficient model is to be used.
    The exponential voltage dependency model consist of the attributes:
    - pVoltageExponent
    - qVoltageExponent
    - pFrequencyExponent
    - qFrequencyExponent.
    The coefficient model consist of the attributes:
    - pConstantImpedance
    - pConstantCurrent
    - pConstantPower
    - qConstantImpedance
    - qConstantCurrent
    - qConstantPower.
    The sum of pConstantImpedance, pConstantCurrent and pConstantPower shall
    equal 1.
    The sum of qConstantImpedance, qConstantCurrent and qConstantPower shall
    equal 1.
    '''

    pConstantCurrent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Portion of active power load modelled as constant current.
    '''

    pConstantImpedance: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Portion of active power load modelled as constant impedance.
    '''

    pConstantPower: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Portion of active power load modelled as constant power.
    '''

    pFrequencyExponent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Exponent of per unit frequency effecting active power.
    '''

    pVoltageExponent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Exponent of per unit voltage effecting real power.
    '''

    qConstantCurrent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Portion of reactive power load modelled as constant current.
    '''

    qConstantImpedance: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Portion of reactive power load modelled as constant impedance.
    '''

    qConstantPower: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Portion of reactive power load modelled as constant power.
    '''

    qFrequencyExponent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Exponent of per unit frequency effecting reactive power.
    '''

    qVoltageExponent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Exponent of per unit voltage effecting reactive power.
    '''

    EnergyConsumer: list[EnergyConsumer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyConsumer.LoadResponse',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The set of loads that have the response characteristics.
    '''

@dataclass(repr=False)
class Location(IdentifiedObject):
    '''
    The place, scene, or point of something where someone or something has
    been, is, and/or will be at a given moment in time. It can be defined with
    one or more position points (coordinates) in a given coordinate system.
    '''

    direction: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Direction that allows field crews to quickly find a given
    asset. For a given location, such as a street address, this is the relative
    direction in which to find the asset. For example, a streetlight may be
    located at the 'NW' (northwest) corner of the customer's site, or a usage
    point may be located on the second floor of an apartment building.
    '''

    geoInfoReference: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Reference to geographical information source, often external
    to the utility.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Classification by utility's corporate standards and practices, relative
    to the location itself (e.g., geographical, functional accounting, etc.,
    not a given property that happens to exist at that location).
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All assets at this location.
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConfigurationEvent.ChangedLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All configuration events created for this location.
    '''

    CoordinateSystem: Optional[CoordinateSystem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CoordinateSystem.Locations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coordinate system used to describe position points of this location.
    '''

    Crew: list[Crew] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Crew.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The crew that is assigned to this locaton.
    '''

    Crews: list[OldCrew] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OldCrew.Locations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    electronicAddress: Optional[ElectronicAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Electronic address.
    '''

    EnvironmentalLocationKind: list[EnvironmentalLocationType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalLocationType.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of environmental location which this location is.
    '''

    EnvironmentalMonitoringStation: list[EnvironmentalMonitoringStation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalMonitoringStation.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Monitoring station located at this location.
    '''

    Fault: list[Fault] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Fault.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All faults at this location.
    '''

    Hazards: list[AssetLocationHazard] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetLocationHazard.Locations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All asset hazards at this location.
    '''

    Incident: Optional[Incident] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Incident.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Incident at this location.
    '''

    LandProperties: list[LandProperty] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LandProperty.Locations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    mainAddress: Optional[StreetAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Main address of the location.
    '''

    Measurements: list[Measurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Measurement.Locations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All measurements at this location.
    '''

    OutageOrder: Optional[OutageOrder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OutageOrder.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage order at this location.
    '''

    phone1: Optional[TelephoneNumber] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phone number.
    '''

    phone2: Optional[TelephoneNumber] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Additional phone number.
    '''

    PositionPoints: list[PositionPoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PositionPoint.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Sequence of position points describing this location, expressed in coordinate
    system 'Location.CoordinateSystem'.
    '''

    PowerSystemResources: list[PowerSystemResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PowerSystemResource.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All power system resources at this location.
    '''

    Routes: list[Route] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Route.Locations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    secondaryAddress: Optional[StreetAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Secondary address of the location. For example, PO Box address may have
    different ZIP code than that in the 'mainAddress'.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of this location.
    '''

    SwitchingOrder: Optional[SwitchingOrder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingOrder.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching order at this location.
    '''

    TroubleOrder: Optional[TroubleOrder] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleOrder.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The trouble order at this location
    '''

    TroubleTicket: Optional[TroubleTicket] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleTicket.Location',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class UsagePointLocation(Location):
    '''
    Location of an individual usage point.
    '''

    accessMethod: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Method for the service person to access this usage point location. For
    example, a description of where to obtain a key if the facility is unmanned
    and secured.
    '''

    remark: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Remarks about this location.
    '''

    siteAccessProblem: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Problems previously encountered when visiting or performing work at this
    location. Examples include: bad dog, violent customer, verbally abusive
    occupant, obstructions, safety hazards, etc.
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.UsagePointLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage points at this location.
    '''

@dataclass(repr=False)
class WorkLocation(Location):
    '''
    Information about a particular location for various forms of work.
    '''

    BaseWorks: list[BaseWork] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BaseWork.WorkLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All works/tasks at this location.
    '''

    DesignLocations: list[DesignLocation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DesignLocation.WorkLocations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    OneCallRequest: Optional[OneCallRequest] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OneCallRequest.WorkLocations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ServiceLocation(WorkLocation):
    '''
    A real estate location, commonly referred to as premises.
    '''

    accessMethod: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Method for the service person to access this service location. For example,
    a description of where to obtain a key if the facility is unmanned and
    secured.
    '''

    needsInspection: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if inspection is needed of facilities at this service location. This
    could be requested by a customer, due to suspected tampering, environmental
    concerns (e.g., a fire in the vicinity), or to correct incompatible data.
    '''

    siteAccessProblem: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Problems previously encountered when visiting or performing work on this
    location. Examples include: bad dog, violent customer, verbally abusive
    occupant, obstructions, safety hazards, etc.
    '''

    Asset: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.ServiceLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All assets that exist at the service location
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAgreement.ServiceLocations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All customer agreements regulating this service location.
    '''

    EndDevices: list[EndDevice] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDevice.ServiceLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end devices that measure the service delivered to this service location.
    '''

    ServiceRequest: list[ServiceRequest] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ServiceRequest.ServiceLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All service requests for the service location
    '''

    TroubleTicket: list[TroubleTicket] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TroubleTicket.ServiceLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ticket called in by the customer that describes the trouble
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.ServiceLocation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage points delivering service (of the same type) to this service
    location.
    '''

@dataclass(repr=False)
class MajorChargeGroup(IdentifiedObject):
    '''
    A Major Charge Group is the same as Invoice Type which provides the highest
    level of grouping for charge types configuration. Examples: Market, FERC,
    RMR.
    '''

@dataclass(repr=False)
class Market(IdentifiedObject):
    '''
    Market (e.g. Day Ahead Market, Real Time Market) with a description of
    the Market operation control parameters.
    '''

    actualEnd: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market ending time - actual market end
    '''

    actualStart: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market starting time - actual market start
    '''

    dst: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if daylight savings time (DST) is in effect.
    '''

    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market end time.
    '''

    localTimeZone: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Local time zone.
    '''

    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market start time.
    '''

    status: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market Status
    'OPEN', 'CLOSED', 'CLEARED', 'BLOCKED'
    '''

    timeIntervalLength: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Trading time interval length.
    '''

    tradingDay: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market trading date
    '''

    tradingPeriod: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Trading period that describes the market, possibilities could be for an
    Energy Market:
    Day
    Hour
    For a CRR Market:
    Year
    Month
    Season
    '''

@dataclass(repr=False)
class CRRMarket(Market):
    '''
    Model that describes the Congestion Revenue Rights Auction Market.
    '''

    labelID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    labelID - an ID for a set of apnodes/pnodes used in a CRR market
    '''

@dataclass(repr=False)
class EnergyMarket(Market):
    '''
    Energy and Ancillary Market (e.g. Energy, Spinning Reserve, Non-Spinning
    Reserve) with a description of the Market operation control parameters.
    '''

    Bids: list[Bid] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Bid.EnergyMarket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketResults: Optional[MarketResults] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketResults.EnergyMarket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResources: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.EnergyMarkets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RTO: Optional[RTO] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RTO.EnergyMarkets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Settlements: list[Settlement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Settlement.EnergyMarket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MarketActualEvent(IdentifiedObject):
    '''
    This class represents the actual instance of an event.
    '''

    eventComments: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Free format comments for the event, for any purpose needed.
    '''

    eventEndTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End time of the event.
    '''

    eventStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start time of the event.
    '''

    eventType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Actual event type.
    '''

    eventStatus: Optional[ MarketEventStatusKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Event status, e.g. active, canceled, expired, etc.
    '''

    MarketRun: Optional[MarketRun] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketRun.MarketActualEvent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market run triggered by this actual event. For example, the DA market run
    is triggered by the actual open bid submission event and terminated by
    the actual execution and completion of the DA market run captured by the
    runState of the MarketRun.
    '''

    PlannedMarketEvent: Optional[PlannedMarketEvent] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PlannedMarketEvent.MarketActualEvent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Planned event executed by this actual event.
    '''

@dataclass(repr=False)
class DistributedResourceActualEvent(MarketActualEvent):
    '''
    A demand response event is created when there is a need to call upon resources
    to respond to demand adjustment requests. These events are created by ISO/RTO
    system operations and managed by a demand response management system (DRMS).
    These events may or may not be coordinated with the Market Events and a
    defined Energy Market. The event will call for the deployment of a number
    of registered resources, or for deployment of resources within a zone (an
    organizational area within the power system that contains a number of resources).
    '''

    totalPowerAdjustment: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total active power adjustment (e.g. load reduction) requested for this
    demand response event.
    '''

@dataclass(repr=False)
class MarketPerson(IdentifiedObject):
    '''
    General purpose information for name and other information to contact people.
    '''

    category: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Category of this person relative to utility operations, classified according
    to the utility's corporate standards and practices. Examples include employee,
    contractor, agent, not affiliated, etc.
    This field is not used to indicate whether this person is a customer of
    the utility. Often an employee or contractor is also a customer. Customer
    information is gained with relationship to Organisation and CustomerData.
    In similar fashion, this field does not indicate the various roles this
    person may fill as part of utility operations.
    '''

    firstName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Person's first name.
    '''

    governmentID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unique identifier for person relative to its governing authority, for example
    a federal tax identifier (such as a Social Security number in the United
    States).
    '''

    lastName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Person's last (family, sir) name.
    '''

    mName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Middle name(s) or initial(s).
    '''

    prefix: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A prefix or title for the person's name, such as Miss, Mister, Doctor,
    etc.
    '''

    specialNeed: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Special service needs for the person (contact) are described; examples
    include life support, etc.
    '''

    suffix: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A suffix for the person's name, such as II, III, etc.
    '''

    userID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The user name for the person; required to log in.
    '''

    electronicAddressAlternate: Optional[ElectronicAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Alternate Electronic address.
    '''

    electronicAddressPrimary: Optional[ElectronicAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Primary Electronic address.
    '''

    landlinePhone: Optional[TelephoneNumber] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Landline phone number.
    '''

    MarketParticipant: list[MarketParticipant] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketParticipant.MarketPerson',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketSkills: list[MarketSkill] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketSkill.MarketPerson',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    mobilePhone: Optional[TelephoneNumber] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Mobile phone number.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MarketPlan(IdentifiedObject):
    '''
    This class identifies a set of planned markets.
    '''

    tradingDay: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Planned market trading day.
    '''

@dataclass(repr=False)
class MarketProduct(IdentifiedObject):
    '''
    A product traded by an RTO (e.g. energy, 10 minute spinning reserve). Ancillary
    service product examples include: Regulation, Regulation Up, Regulation
    Down, Spinning Reserve, Non-Spinning Reserve, etc.
    '''

    rampInterval: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Ramping time interval for the specific market product type specified by
    marketProductType attribute. For example, if marketProductType = EN (from
    enumeration MarketProductType), then the rampInterval is the ramping time
    interval for Energy.
    '''

    marketProductType: Optional[ MarketProductType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market product type examples:
    EN (Energy)
    RU (Regulation Up)
    RD (Regulation Dn)
    SR (Spinning Reserve)
    NR (Non-Spinning Reserve)
    RC (RUC)
    '''

    Market: Optional[Market] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Market.MarketProducts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketRegionResults: Optional[MarketRegionResults] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketRegionResults.MarketProduct',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MarketQualificationRequirement(IdentifiedObject):
    '''
    Certain skills are required and shall be certified in order for a person
    (typically a member of a crew) to be qualified to work on types of equipment.
    '''

    effectiveDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Effective date of the privilege, terminate date of the privilege, or effective
    date of the application for the organization
    '''

    expirationDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the terminate date of the application for the organization
    The specific organization can no longer access the application as of the
    terminate date
    '''

    qualificationID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Qualification identifier.
    '''

    status: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The status of the privilege. Shows the status of the user´s qualification.
    The current statuses are: 1=New, 2=Active, 3=Refused, 4=Terminated, 5=Withdrawn
    and it is subject to update.
    '''

    statusType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the name of the status of the qualification and is used to display
    the status of the user's or organization's status.
    '''

    MarketSkills: list[MarketSkill] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketSkill.MarketQualificationRequirements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MarketRun(IdentifiedObject):
    '''
    This class represents an actual instance of a planned market. For example,
    a Day Ahead market opens with the Bid Submission, ends with the closing
    of the Bid Submission. The market run represent the whole process. MarketRuns
    can be defined for markets such as Day Ahead Market, Real Time Market,
    Hour Ahead Market, Week Ahead Market, etc.
    '''

    marketApprovalTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Approved time for case. Identifies the time that the dispatcher approved
    a specific real time unit dispatch case
    '''

    marketApprovedStatus: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Set to true when the plan is approved by authority and becomes the official
    plan for the day ahead market. Identifies the approved case for the market
    for the specified time interval.
    '''

    marketEndTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The end time defined as the end of the market, market end time.
    '''

    marketStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The start time defined as the beginning of the market, market start time.
    '''

    reportedState: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the state of market run activity as reported by market systems
    to the market definition services.
    '''

    runState: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the state controlled by market defintion service.
    Possible values could be but not limited by: Open, Close.
    '''

    executionType: Optional[ ExecutionType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The execution type; Day Ahead, Intra Day, Real Time Pre-Dispatch, Real
    Time Dispatch
    '''

    marketType: Optional[ MarketType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The market type, Day Ahead Market or Real Time Market.
    '''

    Market: Optional[Market] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Market.MarketRun',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PlannedMarket: Optional[PlannedMarket] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PlannedMarket.MarketRun',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A planned market could have multiple market runs for the reason that a
    planned market could have a rerun.
    '''

@dataclass(repr=False)
class MarketStatementLineItem(IdentifiedObject):
    '''
    An individual line item on an ISO settlement statement.
    '''

@dataclass(repr=False)
class MaterialItem(IdentifiedObject):
    '''
    The physical consumable supply used for work and other purposes. It includes
    items such as nuts, bolts, brackets, glue, etc.
    '''

@dataclass(repr=False)
class Measurement(IdentifiedObject):
    '''
    A Measurement represents any measured, calculated or non-measured non-calculated
    quantity. Any piece of equipment may contain Measurements, e.g. a substation
    may have temperature measurements and door open indications, a transformer
    may have oil temperature and tank pressure measurements, a bay may contain
    a number of power flow measurements and a Breaker may contain a switch
    status measurement.
    The PSR - Measurement association is intended to capture this use of Measurement
    and is included in the naming hierarchy based on EquipmentContainer. The
    naming hierarchy typically has Measurements as leaves, e.g. Substation-VoltageLevel-Bay-Switch-Measurement.
    Some Measurements represent quantities related to a particular sensor location
    in the network, e.g. a voltage transformer (VT) or potential transformer
    (PT) at a busbar or a current transformer (CT) at the bar between a breaker
    and an isolator. The sensing position is not captured in the PSR - Measurement
    association. Instead it is captured by the Measurement - Terminal association
    that is used to define the sensing location in the network topology. The
    location is defined by the connection of the Terminal to ConductingEquipment.
    If both a Terminal and PSR are associated, and the PSR is of type ConductingEquipment,
    the associated Terminal should belong to that ConductingEquipment instance.
    When the sensor location is needed both Measurement-PSR and Measurement-Terminal
    are used. The Measurement-Terminal association is never used alone.
    '''

    measurementType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the type of measurement. For example, this specifies if the measurement
    represents an indoor temperature, outdoor temperature, bus voltage, line
    flow, etc.
    When the measurementType is set to "Specialization", the type of Measurement
    is defined in more detail by the specialized class which inherits from
    Measurement.
    '''

    phases: Optional[ PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates to which phases the measurement applies and avoids the need to
    use 'measurementType' to also encode phase information (which would explode
    the types). The phase information in Measurement, along with 'measurementType'
    and 'phases' uniquely defines a Measurement for a device, based on normal
    network phase. Their meaning will not change when the computed energizing
    phasing is changed due to jumpers or other reasons.
    If the attribute is missing three phases (ABC) shall be assumed.
    '''

    unitMultiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit multiplier of the measured quantity.
    '''

    unitSymbol: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit of measure of the measured quantity.
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.Measurements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset that has a measurement
    '''

    CalculationMethodHierarchy: Optional[CalculationMethodHierarchy] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CalculationMethodHierarchy.Measurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Calculation method hierarchy which applies to this analog.
    '''

    Locations: list[Location] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Location.Measurements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this measurement.
    '''

    MeasurementAction: Optional[MeasurementAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeasurementAction.Measurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The measurement action that is performed on the measurement
    '''

    MeasurementCalculatorInput: list[MeasurementCalculatorInput] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeasurementCalculatorInput.Measurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PinMeasurement: list[PinMeasurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PinMeasurement.Measurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PowerSystemResource: Optional[PowerSystemResource] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.Measurements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The power system resource that contains the measurement.
    '''

    Procedures: list[Procedure] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Procedure.Measurements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurements are specified in types of documents, such as procedures.
    '''

    ProtectiveActionAdjustment: list[ProtectiveActionAdjustment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectiveActionAdjustment.Measurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Terminal: Optional[ACDCTerminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACDCTerminal.Measurements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    One or more measurements may be associated with a terminal in the network.
    '''

@dataclass(repr=False)
class Accumulator(Measurement):
    '''
    Accumulator represents an accumulated (counted) Measurement, e.g. an energy
    value.
    '''

    maxValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal value range maximum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''

    AccumulatorValues: list[AccumulatorValue] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AccumulatorValue.Accumulator',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The values connected to this measurement.
    '''

    LimitSets: list[AccumulatorLimitSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AccumulatorLimitSet.Measurements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A measurement may have zero or more limit ranges defined for it.
    '''

@dataclass(repr=False)
class Analog(Measurement):
    '''
    Analog represents an analog Measurement.
    '''

    maxValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal value range maximum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''

    minValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal value range minimum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''

    normalValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal measurement value, e.g., used for percentage calculations.
    '''

    positiveFlowIn: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true then this measurement is an active power, reactive power or current
    with the convention that a positive value measured at the Terminal means
    power is flowing into the related PowerSystemResource.
    '''

    AnalogValues: list[AnalogValue] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AnalogValue.Analog',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The values connected to this measurement.
    '''

    LimitSets: list[AnalogLimitSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AnalogLimitSet.Measurements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A measurement may have zero or more limit ranges defined for it.
    '''

@dataclass(repr=False)
class AssetAnalog(Analog):
    '''
    Definition of type of analog useful in asset domain.
    '''

    detectionLimit: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Detection limit of related analog value if different from detection limit
    of test standard or if there is no test standard. The detection limit (also
    known as lower limit of detection or limit of detection (LOD), is the lowest
    quantity of a substance that can be distinguished from the absence of that
    substance (a blank value) within a stated confidence limit (generally 1%).
    '''

    precision: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Precision of related analog value if different from precision of test standard
    or if there is no test standard. Precision is a measure of how closely
    individual measurements agree with one another. Expressed as 'plus or minus'
    the value of this attribute.
    '''

    reportingTemperature: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reporting temperature of related analog value if different from reporting
    temperature of test standard or if there is no test standard. Reporting
    temperature is what gas volumes are normalized to. Different reporting
    temperatures are used by different sources. For example, ASTM specifies
    0°C, whereas IEC specifies 20°C. Online monitors often have their own unique
    reporting temperatures.
    '''

    TestStandard: Optional[TestStandard] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TestStandard.AssetAnalog',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The lab test standard to which this asset health analog is related.
    '''

@dataclass(repr=False)
class EnvironmentalAnalog(Analog):
    '''
    Analog (float) measurement of relevance in the environmental domain.
    '''

    ClassificationCondition: Optional[ClassificationCondition] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ClassificationCondition.EnvironmentalAnalog',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Classification condition which this analog helps define.
    '''

    EnvironmentalInformation: Optional[EnvironmentalInformation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalInformation.EnvironmentalAnalog',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Observation or forecast with which this environmental analog measurement
    is associated.
    '''

    EnvironmentalMonitoringStation: Optional[EnvironmentalMonitoringStation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalMonitoringStation.EnvironmentalAnalog',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Monitoring station which provides this environmental analog measurement.
    '''

    ReportingCapability: Optional[ReportingCapability] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReportingCapability.EnvironmentalAnalog',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reporting capability this environmental value set helps define.
    '''

@dataclass(repr=False)
class AtmosphericAnalog(EnvironmentalAnalog):
    '''
    Analog (float) measuring an atmospheric condition.
    '''

    kind: Optional[ AtmosphericAnalogKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of atmospheric analog.
    '''

@dataclass(repr=False)
class GeosphericAnalog(EnvironmentalAnalog):
    '''
    Analog (float) measuring a geospheric condition.
    '''

    kind: Optional[ GeosphericAnalogKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of geospheric analog.
    '''

@dataclass(repr=False)
class HydrosphericAnalog(EnvironmentalAnalog):
    '''
    Analog (float) measuring a hydrospheric condition.
    '''

    kind: Optional[ HydrosphericAnalogKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of hydrospheric analog.
    '''

@dataclass(repr=False)
class SpaceAnalog(EnvironmentalAnalog):
    '''
    Analog (float) measuring a space (extra-terrestrial) condition.
    '''

    kind: Optional[ SpaceAnalogKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of space analog.
    '''

@dataclass(repr=False)
class Discrete(Measurement):
    '''
    Discrete represents a discrete Measurement, i.e. a Measurement representing
    discrete values, e.g. a Breaker position.
    '''

    maxValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal value range maximum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''

    minValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal value range minimum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''

    normalValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal measurement value, e.g., used for percentage calculations.
    '''

    DiscreteValues: list[DiscreteValue] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DiscreteValue.Discrete',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The values connected to this measurement.
    '''

    ValueAliasSet: Optional[ValueAliasSet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ValueAliasSet.Discretes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ValueAliasSet used for translation of a MeasurementValue.value to a
    name.
    '''

@dataclass(repr=False)
class AssetDiscrete(Discrete):
    '''
    Definition of type of discrete useful in asset domain.
    '''

    TestStandard: Optional[TestStandard] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TestStandard.AssetDiscrete',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The lab test standard to which this asset health discrete is related.
    '''

@dataclass(repr=False)
class EnvironmentalDiscrete(Discrete):
    '''
    Discrete (integer) measurement of relevance in the environmental domain.
    '''

    kind: Optional[ EnvironmentalDiscreteKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of environmental discrete (integer).
    '''

    EnvironmentalInformation: Optional[EnvironmentalInformation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalInformation.EnvironmentalDiscrete',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Observation or forecast with which this environmental discrete (integer)
    is associated.
    '''

@dataclass(repr=False)
class MktMeasurement(Measurement):
    '''
    Subclass of IEC61970:Meas:Measurement.
    '''

    ByTiePoint: Optional[TiePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TiePoint.ByMktMeasurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A measurement is made on the B side of a tie point
    '''

    DynamicSchedule: list[DynamicSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DynamicSchedule.MktMeasurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ForTiePoint: Optional[TiePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TiePoint.ForMktMeasurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A measurement is made on the A side of a tie point
    '''

    Pnode: Optional[Pnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Pnode.MktMeasurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Allows Pnode an association to aggregated resources external DC ties or
    psuedo tie measurements.
    '''

    ViolationLimit: list[ViolationLimit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ViolationLimit.MktMeasurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class StringMeasurement(Measurement):
    '''
    StringMeasurement represents a measurement with values of type string.
    '''

    StringMeasurementValues: list[StringMeasurementValue] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'StringMeasurementValue.StringMeasurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The values connected to this measurement.
    '''

@dataclass(repr=False)
class AssetStringMeasurement(StringMeasurement):
    '''
    Definition of type of string measurement useful in asset domain.
    '''

    kind: Optional[ AssetStringKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of string useful in asset domain.
    '''

    TestStandard: Optional[TestStandard] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TestStandard.AssetString',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Test standard which describes this asset string measurement.
    '''

@dataclass(repr=False)
class EnvironmentalStringMeasurement(StringMeasurement):
    '''
    String measurement of relevance in the environmental domain.
    '''

    ClassificationCondition: Optional[ClassificationCondition] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ClassificationCondition.EnvironmentalStringMeasurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Classification condition which this string measurement helps define.
    '''

    EnvironmentalInformation: Optional[EnvironmentalInformation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalInformation.EnvironmentalStringMeasurement',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Observation or forecast with which this environmental string is associated.
    '''

@dataclass(repr=False)
class MeasurementCalculator(IdentifiedObject):
    '''
    Result of a calculation of one or more measurement.
    '''

    kind: Optional[ CalculationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Calculation operation executed on the operants.
    '''

    MeasurementCalculatorInput: list[MeasurementCalculatorInput] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeasurementCalculatorInput.MeasurementCalculator',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used in the calculation.
    '''

    PinMeasurement: list[PinMeasurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PinMeasurement.MeasurementCalculator',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MeasurementCalculatorInput(IdentifiedObject):
    '''
    Input to measurement calculation. Support Analog, Discrete and Accumulator.
    '''

    absoluteValue: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, use the absolute value for the calculation.
    '''

    order: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive number that defines the order of the operant in the calculation.
    0 = default. The order is not relevant (e.g. summation).
    '''

    Measurement: Optional[Measurement] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Measurement.MeasurementCalculatorInput',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement used as input to a calculation.
    '''

    MeasurementCalculator: Optional[MeasurementCalculator] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeasurementCalculator.MeasurementCalculatorInput',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MeasurementValueSource(IdentifiedObject):
    '''
    MeasurementValueSource describes the alternative sources updating a MeasurementValue.
    User conventions for how to use the MeasurementValueSource attributes are
    defined in IEC 61970-301.
    '''

    MeasurementValues: list[MeasurementValue] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeasurementValue.MeasurementValueSource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The MeasurementValues updated by the source.
    '''

@dataclass(repr=False)
class IOPointSource(MeasurementValueSource):
    '''
    Indicates the point source for an IO Point.
    '''

    IOPoint: list[IOPoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IOPoint.IOPointSource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    ICCP point for a local measurement value source.
    '''

@dataclass(repr=False)
class Medium(IdentifiedObject):
    '''
    A substance that either (1) provides the means of transmission of a force
    or effect, such as hydraulic fluid, or (2) is used for a surrounding or
    enveloping substance, such as oil in a transformer or circuit breaker.
    '''

    kind: Optional[ MediumKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of this medium.
    '''

    volumeSpec: Optional[ float | Volume ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The volume of the medium specified for this application. Note that the
    actual volume is a type of measurement associated witht the asset.
    '''

    Asset: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.Medium',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Medium with which this asset is filled.
    '''

    Specification: Optional[Specification] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Specification.Mediums',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MeterMultiplier(IdentifiedObject):
    '''
    Multiplier applied at the meter.
    '''

    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Multiplier value.
    '''

    kind: Optional[ MeterMultiplierKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of multiplier.
    '''

    Meter: Optional[Meter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Meter.MeterMultipliers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter applying this multiplier.
    '''

@dataclass(repr=False)
class MeterReading(IdentifiedObject):
    '''
    Set of values obtained from the meter.
    '''

    isCoincidentTrigger: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, this meter reading is the meter reading for which other coincident
    meter readings are requested or provided.
    '''

    CustomerAgreement: Optional[CustomerAgreement] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerAgreement.MeterReadings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (could be deprecated in the future) Customer agreement for this meter reading.
    '''

    EndDeviceEvents: list[EndDeviceEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceEvent.MeterReading',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device events associated with this set of measured values.
    '''

    IntervalBlocks: list[IntervalBlock] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IntervalBlock.MeterReading',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All interval blocks contained in this meter reading.
    '''

    Meter: Optional[Meter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Meter.MeterReadings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter providing this reading.
    '''

    Readings: list[Reading] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reading.MeterReadings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All reading values contained within this meter reading.
    '''

    UsagePoint: Optional[UsagePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UsagePoint.MeterReadings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Usage point from which this meter reading (set of values) has been obtained.
    '''

    valuesInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time interval of the data items contained within this meter reading.
    '''

@dataclass(repr=False)
class MetrologyRequirement(IdentifiedObject):
    '''
    A specification of the metering requirements for a particular point within
    a network.
    '''

    reason: Optional[ ReadingReasonKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason for this metrology requirement being specified.
    '''

    ReadingTypes: list[ReadingType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReadingType.MetrologyRequirements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All reading types required to be collected by this metrology requirement.
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.MetrologyRequirements',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage points having this metrology requirement.
    '''

@dataclass(repr=False)
class MiscCostItem(IdentifiedObject):
    '''
    Various cost items that are not associated with compatible units. Examples
    include rental equipment, labor, materials, contractor costs, permits -
    anything not covered in a CU.
    '''

    account: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This drives the accounting treatment for this misc. item.
    '''

    costType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The cost type for accounting, such as material, labor, vehicle, contractor,
    equipment, overhead.
    '''

    externalRefID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    External reference identifier (e.g. purchase order number, serial number)
    .
    '''

    costPerUnit: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The cost per unit for this misc. item.
    '''

@dataclass(repr=False)
class MutualCoupling(IdentifiedObject):
    '''
    This class represents the zero sequence line mutual coupling.
    '''

    b0ch: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence mutual coupling shunt (charging) susceptance, uniformly distributed,
    of the entire line section.
    '''

    distance11: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Distance to the start of the coupled region from the first line's terminal
    having sequence number equal to 1.
    '''

    distance12: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Distance to the end of the coupled region from the first line's terminal
    with sequence number equal to 1.
    '''

    distance21: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Distance to the start of coupled region from the second line's terminal
    with sequence number equal to 1.
    '''

    distance22: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Distance to the end of coupled region from the second line's terminal with
    sequence number equal to 1.
    '''

    g0ch: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence mutual coupling shunt (charging) conductance, uniformly distributed,
    of the entire line section.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence branch-to-branch mutual impedance coupling, resistance.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence branch-to-branch mutual impedance coupling, reactance.
    '''

    First_Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.HasFirstMutualCoupling',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The starting terminal for the calculation of distances along the first
    branch of the mutual coupling. Normally MutualCoupling would only be used
    for terminals of AC line segments. The first and second terminals of a
    mutual coupling should point to different AC line segments.
    '''

    Second_Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.HasSecondMutualCoupling',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The starting terminal for the calculation of distances along the second
    branch of the mutual coupling.
    '''

@dataclass(repr=False)
class NetworkModelProjectChange(IdentifiedObject):
    '''
    Network model project change described by versions of an associated change
    set. Has persistent identity over multiple versions of the associated change
    set.
    '''

    NetworkModelProjectChangeVersion: list[NetworkModelProjectChangeVersion] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NetworkModelProjectChangeVersion.NetworkModelProjectChange',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A specific version of the network model project change.
    '''

@dataclass(repr=False)
class NetworkModelProjectChangeVersion(IdentifiedObject):
    '''
    Describes the status and the planned implementation of the associated change
    set into the as-built model. New instances of this class with new identity
    are instantiated upon changes to the content of this class or changes to
    the associated change set. Instances of this class are considered immutable.
    The case audit trail can reference this immutable data to exactly reproduce
    a case.
    '''

    comment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A user provided comment describing the changes in this version from the
    previous version.
    '''

    effectiveDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date/time the change set is included in the model.
    '''

    timeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date/time this version was finalized and thus made immutable.
    '''

    ChangeSet: Optional[ChangeSet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ChangeSet.NetworkModelProjectChangeVersion',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The details of model changes for this project. The change set should have
    a new identifier if it changes.
    '''

    NetworkModelProjectChange: Optional[NetworkModelProjectChange] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectChange.NetworkModelProjectChangeVersion',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The persistent network model project change to which this version applies.
    '''

    NetworkModelProjectState: Optional[NetworkModelProjectState] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectState.NetworkModelProjectChangeVersion',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The state of this network model project version.
    '''

    SupercededBy: Optional[NetworkModelProjectChangeVersion] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectChangeVersion.Supercedes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The project version that will supercede this project version.
    '''

    Supercedes: Optional[NetworkModelProjectChangeVersion] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectChangeVersion.SupercededBy',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Project version that is being superceded.
    '''

@dataclass(repr=False)
class NetworkModelProjectStage(IdentifiedObject):
    '''
    '''

    changesetVersion: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    commissionedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    plannedCommissionedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ChangeSets: list[ChangeSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ChangeSet.NMProjectStage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DenpendecyDependingStage: list[AnnotatedProjectDependency] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AnnotatedProjectDependency.DependingStage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DependencyDependentOnStage: Optional[AnnotatedProjectDependency] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AnnotatedProjectDependency.DependentOnStage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class NetworkModelProjectState(IdentifiedObject):
    '''
    A network model project version state. States are agreed upon by the exchange
    community. Examples are "approved", "proposed", "withdrawn", "committed"
    etc.
    '''

    NetworkModelProjectChangeVersion: list[NetworkModelProjectChangeVersion] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NetworkModelProjectChangeVersion.NetworkModelProjectState',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The change versions that are at this state.
    '''

@dataclass(repr=False)
class NodeConstraintTerm(IdentifiedObject):
    '''
    To be used only to constrain a quantity that cannot be associated with
    a terminal. For example, a registered generating unit that is not electrically
    connected to the network.
    '''

    MktConnectivityNode: Optional[MktConnectivityNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MktConnectivityNode.NodeConstraintTerm',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class OperatingParticipant(IdentifiedObject):
    '''
    An operator of multiple power system resource objects. Note multple operating
    participants may operate the same power system resource object. This can
    be used for modeling jointly owned units where each owner operates as a
    contractual share.
    '''

    OperatingShare: list[OperatingShare] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperatingShare.OperatingParticipant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operating shares of this operating participant. An operating participant
    can be resused for any number of power system resources.
    '''

@dataclass(repr=False)
class OperationalLimit(IdentifiedObject):
    '''
    A value and normal value associated with a specific kind of limit.
    The sub class value and normalValue attributes vary inversely to the associated
    OperationalLimitType.acceptableDuration (acceptableDuration for short).
    If a particular piece of equipment has multiple operational limits of the
    same kind (apparent power, current, etc.), the limit with the greatest
    acceptableDuration shall have the smallest limit value and the limit with
    the smallest acceptableDuration shall have the largest limit value. Note:
    A large current can only be allowed to flow through a piece of equipment
    for a short duration without causing damage, but a lesser current can be
    allowed to flow for a longer duration.
    '''

    LimitDependencyModel: list[LimitDependency] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LimitDependency.OperationalLimit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The limit dependency models which are used to calculate this limit. If
    no limit dependencies are specified then the native limit value is used.
    '''

    LimitScalingLimit: list[LimitScalingLimit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LimitScalingLimit.SourceOperationalLimit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    OperationalLimitSet: Optional[OperationalLimitSet] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperationalLimitSet.OperationalLimitValue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The limit set to which the limit values belong.
    '''

    OperationalLimitType: Optional[OperationalLimitType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperationalLimitType.OperationalLimit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The limit type associated with this limit.
    '''

@dataclass(repr=False)
class ActivePowerLimit(OperationalLimit):
    '''
    Limit on active power flow.
    '''

    normalValue: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The normal value of active power limit. The attribute shall be a positive
    value or zero.
    '''

    value: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value of active power limit. The attribute shall be a positive value or
    zero.
    '''

@dataclass(repr=False)
class ApparentPowerLimit(OperationalLimit):
    '''
    Apparent power limit.
    '''

    normalValue: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The normal apparent power limit. The attribute shall be a positive value
    or zero.
    '''

    value: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The apparent power limit. The attribute shall be a positive value or zero.
    '''

@dataclass(repr=False)
class CurrentLimit(OperationalLimit):
    '''
    Operational limit on current.
    '''

    normalValue: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The normal value for limit on current flow. The attribute shall be a positive
    value or zero.
    '''

    value: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Limit on current flow. The attribute shall be a positive value or zero.
    '''

@dataclass(repr=False)
class VoltageLimit(OperationalLimit):
    '''
    Operational limit applied to voltage.
    The use of operational VoltageLimit is preferred instead of limits defined
    at VoltageLevel. The operational VoltageLimits are used, if present.
    '''

    normalValue: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The normal limit on voltage. High or low limit nature of the limit depends
    upon the properties of the operational limit type. The attribute shall
    be a positive value or zero.
    '''

    value: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Limit on voltage. High or low limit nature of the limit depends upon the
    properties of the operational limit type. The attribute shall be a positive
    value or zero.
    '''

@dataclass(repr=False)
class OperationalLimitSet(IdentifiedObject):
    '''
    A set of limits associated with equipment. Sets of limits might apply to
    a specific temperature, or season for example. A set of limits may contain
    different severities of limit levels that would apply to the same equipment.
    The set may contain limits of different types such as apparent power and
    current limits or high and low voltage limits that are logically applied
    together as a set.
    '''

    Equipment: Optional[Equipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Equipment.OperationalLimitSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The equipment to which the limit set applies.
    '''

    OperationalLimitValue: list[OperationalLimit] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalLimit.OperationalLimitSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Values of equipment limits.
    '''

    Terminal: Optional[ACDCTerminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACDCTerminal.OperationalLimitSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminal where the operational limit set apply.
    '''

@dataclass(repr=False)
class OperationalLimitType(IdentifiedObject):
    '''
    The operational meaning of a category of limits.
    '''

    isInfiniteDuration: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Defines if the operational limit type has infinite duration. If true, the
    limit has infinite duration. If false, the limit has definite duration
    which is defined by the attribute acceptableDuration.
    '''

    acceptableDuration: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The nominal acceptable duration of the limit. Limits are commonly expressed
    in terms of the time limit for which the limit is normally acceptable.
    The actual acceptable duration of a specific limit may depend on other
    local factors such as temperature or wind speed. The attribute has meaning
    only if the flag isInfiniteDuration is set to false, hence it shall not
    be exchanged when isInfiniteDuration is set to true.
    '''

    direction: Optional[ OperationalLimitDirectionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The direction of the limit.
    '''

    OperationalLimit: list[OperationalLimit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalLimit.OperationalLimitType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operational limits associated with this type of limit.
    '''

    SourceOperationalLimitTypeScaling: list[OperatonalLimitTypeScaling] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperatonalLimitTypeScaling.SourceOperationalLimitType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TargetOperationalLimitmTypeScaling: Optional[OperatonalLimitTypeScaling] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperatonalLimitTypeScaling.TargetOperationalLimit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Organisation(IdentifiedObject):
    '''
    Organisation that might have roles as utility, contractor, supplier, manufacturer,
    customer, etc.
    '''

    electronicAddress: Optional[ElectronicAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Electronic address.
    '''

    ParentOrganisation: Optional[ParentOrganization] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ParentOrganization.Organisation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Parent organisation of this organisation.
    '''

    phone1: Optional[TelephoneNumber] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phone number.
    '''

    phone2: Optional[TelephoneNumber] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Additional phone number.
    '''

    postalAddress: Optional[StreetAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Postal address, potentially different than 'streetAddress' (e.g., another
    city).
    '''

    Roles: list[OrganisationRole] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OrganisationRole.Organisation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All roles of this organisation.
    '''

    streetAddress: Optional[StreetAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Street address.
    '''

    SwitchingPlanRequest: list[SwitchingPlanRequest] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchingPlanRequest.RequestingOrganization',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching plan requested by the requesting organization
    '''

@dataclass(repr=False)
class ControlAreaOperator(Organisation):
    '''
    Operates the Control Area. Approves and implements energy transactions.
    Verifies both Inter-Control Area and Intra-Control Area transactions for
    the power system before granting approval (and implementing) the transactions.
    '''

    ControlledBy: Optional[HostControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HostControlArea.Controls',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A ControlAreaCompany controls a ControlArea.
    '''

@dataclass(repr=False)
class CustomerConsumer(Organisation):
    '''
    The energy buyer in the energy marketplace.
    '''

@dataclass(repr=False)
class MarketParticipant(Organisation):
    '''
    An identification of a party acting in a electricity market business process.
    This class is used to identify organizations that can participate in market
    management and/or market operations.
    '''

    Bid: list[Bid] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Bid.MarketParticipant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.MarketParticipant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketPerson: list[MarketPerson] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketPerson.MarketParticipant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketRole: list[MarketRole] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketRole.MarketParticipant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.MarketParticipant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SchedulingCoordinator: list[SchedulingCoordinator] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SchedulingCoordinator.MarketParticipant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.MarketParticipant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class RTO(MarketParticipant):
    '''
    Regional transmission operator.
    '''

    AggregateNode: list[AggregateNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AggregateNode.RTO',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    EnergyMarkets: list[EnergyMarket] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyMarket.RTO',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktConnectivityNode: list[MktConnectivityNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktConnectivityNode.RTO',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Pnodes: list[Pnode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Pnode.RTO',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SubControlArea: list[SubControlArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SubControlArea.RTO',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class SchedulingCoordinator(MarketParticipant):
    '''
    Market participants could be represented by Scheduling Coordinators (SCs)
    that are registered with the RTO/ISO. One participant could register multiple
    SCs with the RTO/ISO. Many market participants can do business with the
    RTO/ISO using a single SC. One SC could schedule multiple generators. A
    load scheduling point could be used by multiple SCs. Each SC could schedule
    load at multiple scheduling points. An inter-tie scheduling point can be
    used by multiple SCs. Each SC can schedule interchange at multiple inter-tie
    scheduling points.
    '''

    creditStartEffectiveDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date that the scheduling coordinator becomes creditworthy.
    '''

    lastModified: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication of the last time this scheduling coordinator information was
    modified.
    '''

    qualificationStatus: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Scheduling coordinator qualification status, Qualified, Not Qualified,
    or Disqualified.
    '''

    scid: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the short name or Scheduling Coordinator ID field.
    '''

    creditFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flag to indicate creditworthiness (Y, N)
    '''

@dataclass(repr=False)
class ParentOrganization(Organisation):
    '''
    '''

    Organisation: list[Organisation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Organisation.ParentOrganisation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Organisation that is part of this parent organisation.
    '''

@dataclass(repr=False)
class OrganisationRole(IdentifiedObject):
    '''
    Identifies a way in which an organisation may participate in the utility
    enterprise (e.g., customer, manufacturer, etc).
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConfigurationEvent.ChangedOrganisationRole',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All configuration events created for this organisation role.
    '''

    Organisation: Optional[Organisation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Organisation.Roles',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Organisation having this role.
    '''

@dataclass(repr=False)
class AssetOrganisationRole(OrganisationRole):
    '''
    Role an organisation plays with respect to asset.
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.OrganisationRoles',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All assets for this organisation role.
    '''

@dataclass(repr=False)
class AssetOwner(AssetOrganisationRole):
    '''
    Owner of the asset.
    '''

    Ownerships: list[Ownership] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Ownership.AssetOwner',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All ownerships of this owner.
    '''

@dataclass(repr=False)
class AssetTestLab(AssetOrganisationRole):
    '''
    Test lab that performs various types of testing related to assets.
    '''

    LabTestDataSet: list[LabTestDataSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LabTestDataSet.AssetTestLab',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A set of lab test results produced by this test lab.
    '''

@dataclass(repr=False)
class AssetTestSampleTaker(AssetOrganisationRole):
    '''
    Identity of person/organization that took sample.
    '''

    Specimen: list[Specimen] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Specimen.AssetTestSampleTaker',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specimen taken by this sample taker.
    '''

@dataclass(repr=False)
class AssetUser(AssetOrganisationRole):
    '''
    Organisation that is a user of the asset.
    '''

@dataclass(repr=False)
class Maintainer(AssetOrganisationRole):
    '''
    Organisation that maintains assets.
    '''

@dataclass(repr=False)
class Customer(OrganisationRole):
    '''
    Organisation receiving services from service supplier.
    '''

    locale: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Locale designating language to use in communications with this customer.
    '''

    pucNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Public utilities commission (PUC) identification number.
    '''

    specialNeed: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if customer organisation has special service needs such as life support,
    hospitals, etc.
    '''

    vip: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (deprecated) (use 'priority' instead) True if this is an important customer.
    Importance is for matters different than those in 'specialNeed' attribute.
    '''

    kind: Optional[ CustomerKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of customer.
    '''

    Customer: Optional[Customer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Customer.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All customers related to the primary customer. This may support customer
    hierarchies. (this can be used to support some form of customer containment)
    '''

    CustomerAccounts: list[CustomerAccount] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAccount.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All accounts of this customer.
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAgreement.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All agreements of this customer.
    '''

    CustomerNotifications: list[CustomerNotification] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerNotification.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All notifications required by this customer.
    '''

    EndDevices: list[EndDevice] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDevice.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end devices of this customer.
    '''

    ErpPersons: list[OldPerson] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OldPerson.CustomerData',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    OutagePlan: Optional[OutagePlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OutagePlan.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage plan that identifies the customers that are affected.
    '''

    Person: list[Person] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Person.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The person representing the customer
    '''

    PlannedOutageNotification: list[PlannedOutageNotification] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PlannedOutageNotification.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The notification of the planned outage
    '''

    priority: Optional[Priority] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority of the customer.
    '''

    ServiceRequest: list[ServiceRequest] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ServiceRequest.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All service requests for the customer
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of this customer.
    '''

    TroubleTickets: list[TroubleTicket] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TroubleTicket.Customer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All trouble tickets for this customer.
    '''

    Works: list[Work] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Work.Customers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All the works performed for this customer.
    '''

@dataclass(repr=False)
class EnvironmentalDataAuthority(OrganisationRole):
    '''
    An entity defining classifications or categories of environmental information,
    like phenomena or alerts.
    '''

    AlertTypeList: list[AlertTypeList] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AlertTypeList.EnvironmentalDataAuthority',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A specific version of a list of alerts published by this environmental
    data authority.
    '''

    PhenomenonClassification: list[PhenomenonClassification] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PhenomenonClassification.EnvironmentalDataAuthority',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phenomenon classification defined by this environmental data authority.
    '''

@dataclass(repr=False)
class EnvironmentalDataProvider(OrganisationRole):
    '''
    Entity providing environmental data. Could be an observed weather data
    provider, an entity providing forecasts, an authority providing alerts,
    etc.
    '''

    EnvironmentalAlert: list[EnvironmentalAlert] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalAlert.EnvironmentalDataProvider',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Alert issued by this environmental data provider.
    '''

    EnvironmentalInformation: list[EnvironmentalInformation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalInformation.EnvironmentalDataProvider',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental information provided by this environmental data provider.
    '''

@dataclass(repr=False)
class Manufacturer(OrganisationRole):
    '''
    Organisation that manufactures asset products.
    '''

    ProductAssetModels: list[ProductAssetModel] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProductAssetModel.Manufacturer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All asset models by this manufacturer.
    '''

@dataclass(repr=False)
class MarketRole(OrganisationRole):
    '''
    The external intended behavior played by a party within the electricity
    market.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The kind of market roles that can be played by parties for given domains
    within the electricity market. Types are flexible using dataType of string
    for free-entry of role types.
    '''

    MarketParticipant: list[MarketParticipant] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketParticipant.MarketRole',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PropertyOrganisationRole(OrganisationRole):
    '''
    Role an organisation plays with respect to property (for example, the organisation
    may be the owner, renter, occupier, taxiing authority, etc.).
    '''

    LandProperty: list[LandProperty] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LandProperty.ErpOrganisationRoles',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ServiceSupplier(OrganisationRole):
    '''
    Organisation that provides services to customers.
    '''

    issuerIdentificationNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unique transaction reference prefix number issued to an entity by the International
    Organization for Standardization for the purpose of tagging onto electronic
    financial transactions, as defined in ISO/IEC 7812-1 and ISO/IEC 7812-2.
    '''

    kind: Optional[ SupplierKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of supplier.
    '''

    BankAccounts: list[BankAccount] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BankAccount.ServiceSupplier',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All BackAccounts this ServiceSupplier owns.
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAgreement.ServiceSupplier',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All customer agreements of this service supplier.
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.ServiceSupplier',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage points this service supplier utilises to deliver a service.
    '''

@dataclass(repr=False)
class OverheadCost(IdentifiedObject):
    '''
    Overhead cost applied to work order.
    '''

@dataclass(repr=False)
class Ownership(IdentifiedObject):
    '''
    Ownership of e.g. asset.
    '''

    share: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Share of this ownership.
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.Ownerships',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset that is object of this ownership.
    '''

    AssetOwner: Optional[AssetOwner] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetOwner.Ownerships',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset owner that is subject in this ownership.
    '''

@dataclass(repr=False)
class PSRType(IdentifiedObject):
    '''
    Classifying instances of the same class, e.g. overhead and underground
    ACLineSegments. This classification mechanism is intended to provide flexibility
    outside the scope of this document, i.e. provide customisation that is
    non standard.
    '''

    PowerSystemResources: list[PowerSystemResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PowerSystemResource.PSRType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power system resources classified with this power system resource type.
    '''

@dataclass(repr=False)
class MktPSRType(PSRType):
    '''
    The type of a power system resource.
    '''

    psrType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The coded type of a power system resource.
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.MktPSRType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PerLengthLineParameter(IdentifiedObject):
    '''
    Common type for per-length electrical catalogues describing line parameters.
    '''

    WireAssemblyInfo: Optional[WireAssemblyInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WireAssemblyInfo.PerLengthLineParameter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A WireAssemblyInfo is used to compute the PerLengthParameter data in the
    Wires package
    '''

@dataclass(repr=False)
class PerLengthDCLineParameter(PerLengthLineParameter):
    '''
    Common type for per-length electrical catalogues describing DC line parameters.
    '''

    capacitance: Optional[ float | CapacitancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Capacitance per unit of length of the DC line segment; significant for
    cables only.
    '''

    inductance: Optional[ float | InductancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Inductance per unit of length of the DC line segment.
    '''

    resistance: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance per length of the DC line segment.
    '''

    DCLineSegments: list[DCLineSegment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCLineSegment.PerLengthParameter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All line segments described by this set of per-length parameters.
    '''

@dataclass(repr=False)
class PerLengthImpedance(PerLengthLineParameter):
    '''
    Common type for per-length impedance electrical catalogues.
    '''

    ACLineSegments: list[ACLineSegment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ACLineSegment.PerLengthImpedance',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All line segments described by this per-length impedance.
    '''

@dataclass(repr=False)
class PerLengthPhaseImpedance(PerLengthImpedance):
    '''
    Impedance and admittance parameters per unit length for n-wire unbalanced
    lines, in matrix form.
    '''

    conductorCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of phase, neutral, and other wires retained. Constrains the number
    of matrix elements and the phase codes that can be used with this matrix.
    '''

    PhaseImpedanceData: list[PhaseImpedanceData] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PhaseImpedanceData.PhaseImpedance',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All data that belong to this conductor phase impedance.
    '''

@dataclass(repr=False)
class PerLengthSequenceImpedance(PerLengthImpedance):
    '''
    Sequence impedance and admittance parameters per unit length, for transposed
    lines of 1, 2, or 3 phases. For 1-phase lines, define x=x0=xself. For 2-phase
    lines, define x=xs-xm and x0=xs+xm.
    '''

    b0ch: Optional[ float | SusceptancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence shunt (charging) susceptance, per unit of length.
    '''

    bch: Optional[ float | SusceptancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) susceptance, per unit of length.
    '''

    g0ch: Optional[ float | ConductancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence shunt (charging) conductance, per unit of length.
    '''

    gch: Optional[ float | ConductancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) conductance, per unit of length.
    '''

    r: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series resistance, per unit of length.
    '''

    r0: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series resistance, per unit of length.
    '''

    x: Optional[ float | ReactancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series reactance, per unit of length.
    '''

    x0: Optional[ float | ReactancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series reactance, per unit of length.
    '''

@dataclass(repr=False)
class Person(IdentifiedObject):
    '''
    General purpose information for name and other information to contact people.
    '''

    firstName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Person's first name.
    '''

    lastName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Person's last (family, sir) name.
    '''

    mName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Middle name(s) or initial(s).
    '''

    prefix: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A prefix or title for the person's name, such as Miss, Mister, Doctor,
    etc.
    '''

    specialNeed: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Special service needs for the person (contact) are described; examples
    include life support, etc.
    '''

    suffix: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A suffix for the person's name, such as II, III, etc.
    '''

    Customer: list[Customer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Customer.Person',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The customer represented by the person
    '''

    electronicAddress: Optional[ElectronicAddress] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Electronic address.
    '''

    landlinePhone: Optional[TelephoneNumber] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Landline phone number.
    '''

    mobilePhone: Optional[TelephoneNumber] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Mobile phone number.
    '''

    Roles: list[PersonRole] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PersonRole.Person',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All roles of this person.
    '''

@dataclass(repr=False)
class OldPerson(Person):
    '''
    General purpose information for name and other information to contact people.
    '''

@dataclass(repr=False)
class PersonPropertyRole(IdentifiedObject):
    '''
    The role of a person relative to a given piece of property. Examples of
    roles include: owner, renter, contractor, etc.
    '''

    LandProperty: Optional[LandProperty] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'LandProperty.ErpPersonRoles',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PersonRole(IdentifiedObject):
    '''
    '''

    Appointments: list[Appointment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Appointment.Persons',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All appointments for this person.
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConfigurationEvent.ChangedPersonRole',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All configuration events created for this person role.
    '''

    Person: Optional[Person] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Person.Roles',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Person having this role.
    '''

@dataclass(repr=False)
class DocumentPersonRole(PersonRole):
    '''
    Person role with respect to documents.
    '''

@dataclass(repr=False)
class Approver(DocumentPersonRole):
    '''
    Person who accepted/signed or rejected the document.
    '''

    Documents: list[Document] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Document.Approver',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All documents for this approver.
    '''

@dataclass(repr=False)
class Author(DocumentPersonRole):
    '''
    Person who created document or activity record.
    '''

    ActivityRecords: list[ActivityRecord] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ActivityRecord.Author',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All activity records with this author.
    '''

    Documents: list[Document] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Document.Author',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All documents of this this author.
    '''

@dataclass(repr=False)
class Editor(DocumentPersonRole):
    '''
    Person who modified the document.
    '''

    Documents: list[Document] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Document.Editor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All documents for this editor.
    '''

@dataclass(repr=False)
class Issuer(DocumentPersonRole):
    '''
    Person who issued the document and is responsible for its content.
    '''

    Documents: list[Document] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Document.Issuer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All documents for this issuer.
    '''

@dataclass(repr=False)
class OperationPersonRole(PersonRole):
    '''
    Person role in the context of utility operations.
    '''

@dataclass(repr=False)
class CrewMember(OperationPersonRole):
    '''
    Member of a crew.
    '''

    Crew: Optional[Crew] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Crew.CrewMembers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Crew to which this crew member belongs.
    '''

@dataclass(repr=False)
class FieldSafetySupervisor(CrewMember):
    '''
    Crew member on work site responsible for all local safety measures for
    the work crew doing maintenance, construction and repair in a substation
    or on a power line/cable.
    '''

@dataclass(repr=False)
class Operator(OperationPersonRole):
    '''
    Control room operator.
    '''

    Incidents: list[Incident] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Incident.Owner',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All incidents owned by this operator.
    '''

    SwitchingSteps: list[SwitchingAction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchingAction.Operator',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All switching steps this operator is responsible for.
    '''

@dataclass(repr=False)
class OperationsSafetySupervisor(Operator):
    '''
    Operator with responsibility that the work in high voltage installation
    is executed in a safe manner and according to safety regulation.
    '''

    IssuedSafetyDocuments: list[SafetyDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SafetyDocument.IssuedBySupervisor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All safety documents issued by this supervisor.
    '''

    ReleasedSafetyDocuments: list[SafetyDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SafetyDocument.ReleasedToSupervisor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All safety documents released to this supervisor.
    '''

@dataclass(repr=False)
class TroubleReporter(OperationPersonRole):
    '''
    Type of Person reporting the Trouble - Customer, First Responder, Passer-by,
    etc.
    '''

    troubleReporterType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of person reporting the trouble
    '''

    TroubleTicket: list[TroubleTicket] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TroubleTicket.TroubleReporter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PhaseTapChangerTable(IdentifiedObject):
    '''
    Describes a tabular curve for how the phase angle difference and impedance
    varies with the tap step.
    '''

    PhaseTapChangerTablePoint: list[PhaseTapChangerTablePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PhaseTapChangerTablePoint.PhaseTapChangerTable',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The points of this table.
    '''

    PhaseTapChangerTabular: list[PhaseTapChangerTabular] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PhaseTapChangerTabular.PhaseTapChangerTable',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The phase tap changers to which this phase tap table applies.
    '''

@dataclass(repr=False)
class PhenomenonClassification(IdentifiedObject):
    '''
    A pre-defined phenomenon classification as defined by a particular authority.
    '''

    ClassificationCondition: list[ClassificationCondition] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ClassificationCondition.PhenomenonClassification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Condition contributing to the classification of this phenomenon.
    '''

    EnvironmentalDataAuthority: Optional[EnvironmentalDataAuthority] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalDataAuthority.PhenomenonClassification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Authority defining this environmental phenomenon.
    '''

    EnvironmentalPhenomenon: list[EnvironmentalPhenomenon] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalPhenomenon.PhenomenonClassification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PinMeasurement(IdentifiedObject):
    '''
    Gate input pin that is associated with a Measurement or a calculation of
    Measurement.
    '''

@dataclass(repr=False)
class PinTerminal(IdentifiedObject):
    '''
    Value associated with Terminal is used as compare.
    '''

@dataclass(repr=False)
class PlannedMarketEvent(IdentifiedObject):
    '''
    This class represents planned events. Used to model the various planned
    events in a market (closing time, clearing time, etc.)
    '''

    eventType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Planned event type.
    '''

    plannedTime: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is relative time so that this attribute can be used by more than one
    planned market. For example the bid submission is 10am everyday.
    '''

@dataclass(repr=False)
class Pnode(IdentifiedObject):
    '''
    A pricing node is directly associated with a connectivity node. It is a
    pricing location for which market participants submit their bids, offers,
    buy/sell CRRs, and settle.
    '''

    isPublic: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, this Pnode is public (prices are published for DA/RT and FTR markets),
    otherwise it is private (location is not usable by market for bidding/FTRs/transactions).
    '''

    AggregateNode: list[AggregateNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AggregateNode.Pnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktMeasurement: list[MktMeasurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktMeasurement.Pnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Allows Measurements to be associated to Pnodes.
    '''

    PnodeResults: list[PnodeResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PnodeResults.Pnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResources: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.Pnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A registered resource injects power at one or more connectivity nodes related
    to a pnode
    '''

    SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.Pnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AggregatedPnode(Pnode):
    '''
    An aggregated pricing node is a specialized type of pricing node used to
    model items such as System Zone, Default Price Zone, Custom Price Zone,
    Control Area, Aggregated Generation, Aggregated Particpating Load, Aggregated
    Non-Participating Load, Trading Hub, Designated Control Area(DCA) Zone.
    '''

    apnodeType: Optional[ ApnodeType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Aggregate Price Node Types
    '''

    participationCategory: Optional[ ParticipationCategoryMPM ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Designated Control Area participation in LMP price measurement
    'Y' - Participates in both Local Market Power Mitigation (LMPM) and System
    Market Power Mitigation (SMPM)
    'N' - Not included in LMP price measures
    'S' - Participatesin SMPM price measures
    'L' - Participatesin LMPM price measures
    '''

    GenDistributionFactor: list[GenDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'GenDistributionFactor.AggregatedPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    LoadDistributionFactor: list[LoadDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LoadDistributionFactor.AggregatedPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktCombinedCyclePlant: list[MktCombinedCyclePlant] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktCombinedCyclePlant.AggregatedPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MPMTestResults: list[MPMTestResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MPMTestResults.AggregatedPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MPMTestThreshold: list[MPMTestThreshold] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MPMTestThreshold.AggregatedPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PnodeDistributionFactor: list[PnodeDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PnodeDistributionFactor.AggregatedPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TACArea: list[TACArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TACArea.AggregatedPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TradingHubValues: list[TradingHubValues] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TradingHubValues.AggregatedPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class CongestionArea(AggregatedPnode):
    '''
    Designated Congestion Area Definition (DCA).
    '''

    IndividualPnode: list[IndividualPnode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IndividualPnode.CongestionArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class IndividualPnode(Pnode):
    '''
    Individual pricing node based on Pnode.
    '''

    CongestionArea: list[CongestionArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CongestionArea.IndividualPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    GenDistributionFactor: Optional[GenDistributionFactor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GenDistributionFactor.IndividualPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    LoadDistributionFactor: Optional[LoadDistributionFactor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'LoadDistributionFactor.IndividualPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktConnectivityNode: Optional[MktConnectivityNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MktConnectivityNode.IndividualPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PnodeDistributionFactor: list[PnodeDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PnodeDistributionFactor.IndividualPnode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PowerSystemResource(IdentifiedObject):
    '''
    A power system resource (PSR) can be an item of equipment such as a switch,
    an equipment container containing many individual items of equipment such
    as a substation, or an organisational entity such as sub-control area.
    Power system resources can have measurements associated.
    '''

    AssetDatasheet: Optional[AssetInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetInfo.PowerSystemResources',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Datasheet information for this power system resource.
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.PowerSystemResources',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All assets represented by this power system resource. For example, multiple
    conductor assets are electrically modelled as a single AC line segment.
    '''

    Clearances: list[ClearanceDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ClearanceDocument.TaggedPSRs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All clearances applicable to this power system resource.
    '''

    ConfigurationEvent: list[ConfigurationEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConfigurationEvent.PowerSystemResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All configuration events created for this Power System resource.
    '''

    Controls: list[Control] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Control.PowerSystemResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The controller outputs used to actually govern a regulating device, e.g.
    the magnetization of a synchronous machine or capacitor bank breaker actuator.
    '''

    GenericAction: list[GenericAction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'GenericAction.PowerSystemResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The generic action that is performed on the power system resource
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.PowerSystemResources',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this power system resource.
    '''

    Measurements: list[Measurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Measurement.PowerSystemResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The measurements associated with this power system resource.
    '''

    OperatingShare: list[OperatingShare] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperatingShare.PowerSystemResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operating shares of this power system resource.
    '''

    OperationalTags: list[OperationalTag] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalTag.PowerSystemResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All operational tags placed on this power system resource.
    '''

    PSREvents: list[PSREvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PSREvent.PowerSystemResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All events associated with this power system resource.
    '''

    PSRType: Optional[PSRType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PSRType.PowerSystemResources',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Custom classification for this power system resource.
    '''

    ReportingGroup: list[ReportingGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReportingGroup.PowerSystemResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reporting groups to which this power system resource belongs.
    '''

    VerificationAction: list[VerificationAction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'VerificationAction.PowerSystemResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The verification action that is performed on the power system resource
    '''

@dataclass(repr=False)
class ACLineSegmentPhase(PowerSystemResource):
    '''
    Represents a single wire of an alternating current line segment.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number designation for this line segment phase. Each line segment phase
    within a line segment should have a unique sequence number. This is useful
    for unbalanced modelling to bind the mathematical model (PhaseImpedanceData
    of PerLengthPhaseImpedance) with the connectivity model (this class) and
    the physical model (WirePosition) without tight coupling.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The phase connection of the wire at both ends.
    '''

    ACLineSegment: Optional[ACLineSegment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.ACLineSegmentPhases',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The line segment to which the phase belongs.
    '''

    WireInfo: Optional[WireInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WireInfo.ACLineSegmentPhase',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Wire information contributing to this AC line segment phase information.
    '''

@dataclass(repr=False)
class AirCompressor(PowerSystemResource):
    '''
    Combustion turbine air compressor which is an integral part of a compressed
    air energy storage (CAES) plant.
    '''

    airCompressorRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rating of the CAES air compressor.
    '''

    CAESPlant: Optional[CAESPlant] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CAESPlant.AirCompressor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An air compressor may be a member of a compressed air energy storage plant.
    '''

    CombustionTurbine: Optional[CombustionTurbine] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CombustionTurbine.AirCompressor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A CAES air compressor is driven by combustion turbine.
    '''

@dataclass(repr=False)
class CAESPlant(PowerSystemResource):
    '''
    Compressed air energy storage plant.
    '''

    energyStorageCapacity: Optional[ float | RealEnergy ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The rated energy storage capacity. The attribute shall be a positive value.
    '''

    ratedCapacityP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The CAES plant's gross rated generating capacity. The attribute shall be
    a positive value.
    '''

    AirCompressor: Optional[AirCompressor] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AirCompressor.CAESPlant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An air compressor may be a member of a compressed air energy storage plant.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.CAESPlant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may be a member of a compressed air energy storage
    plant.
    '''

@dataclass(repr=False)
class CogenerationPlant(PowerSystemResource):
    '''
    A set of thermal generating units for the production of electrical energy
    and process steam (usually from the output of the steam turbines). The
    steam sendout is typically used for industrial purposes or for municipal
    heating and cooling.
    '''

    cogenHPSendoutRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The high pressure steam sendout.
    '''

    cogenHPSteamRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The high pressure steam rating.
    '''

    cogenLPSendoutRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The low pressure steam sendout.
    '''

    cogenLPSteamRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The low pressure steam rating.
    '''

    ratedP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The rated output active power of the cogeneration plant.
    The attribute shall be a positive value.
    '''

    SteamSendoutSchedule: Optional[SteamSendoutSchedule] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SteamSendoutSchedule.CogenerationPlant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A cogeneration plant has a steam sendout schedule.
    '''

    ThermalGeneratingUnits: list[ThermalGeneratingUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ThermalGeneratingUnit.CogenerationPlant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may be a member of a cogeneration plant.
    '''

@dataclass(repr=False)
class CombinedCyclePlant(PowerSystemResource):
    '''
    A set of combustion turbines and steam turbines where the exhaust heat
    from the combustion turbines is recovered to make steam for the steam turbines,
    resulting in greater overall plant efficiency.
    '''

    combCyclePlantRating: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The combined cycle plant's active power output rating.
    '''

    ThermalGeneratingUnits: list[ThermalGeneratingUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ThermalGeneratingUnit.CombinedCyclePlant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may be a member of a combined cycle plant.
    '''

@dataclass(repr=False)
class MktCombinedCyclePlant(CombinedCyclePlant):
    '''
    Subclass of Production: CombinedCyclePlant from IEC 61970 package.
    A set of combustion turbines and steam turbines where the exhaust heat
    from the combustion turbines is recovered to make steam for the steam turbines,
    resulting in greater overall plant efficiency.
    '''

@dataclass(repr=False)
class CommunicationLink(PowerSystemResource):
    '''
    The connection to remote units is through one or more communication links.
    Reduntant links may exist. The CommunicationLink class inherits PowerSystemResource.
    The intention is to allow CommunicationLinks to have Measurements. These
    Measurements can be used to model link status as operational, out of service,
    unit failure etc.
    '''

    BilateralExchangeActor: Optional[BilateralExchangeActor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BilateralExchangeActor.CommunicationLink',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    ICCP data provider or consumer using communication addressing for a Bilateral
    table.
    '''

    RemoteUnits: list[RemoteUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RemoteUnit.CommunicationLinks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    RTUs may be attached to communication links.
    '''

@dataclass(repr=False)
class IPAccessPoint(CommunicationLink):
    '''
    Internet Protocol Access Point – used to represent an addressing structure
    is based upon an Internet Protocol (IP) address.
    '''

    address: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is the dotted decimal IP Address resolve the IP address. The format is
    controlled by the value of the addressType.
    '''

    gateway: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is the dotted decimal IPAddress of the first hop router. Format is controlled
    by the addressType.
    '''

    subnet: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the IP subnet mask which controls the local vs non-local routing.
    '''

    addressType: Optional[ IPAddressKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    IP address type.
    '''

@dataclass(repr=False)
class TCPAccessPoint(IPAccessPoint):
    '''
    Allows addressing and behavioural information regarding the use of TCP
    by ICCP links.
    '''

    keepAliveTime: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates the default interval at which TCP will check if the TCP connection
    is still valid.
    '''

    port: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This value is only needed to be specified for called nodes (e.g. those
    that respond to a TCP.Open request).
    This value specifies the TCP port to be used. Well known and "registered"
    ports are preferred and can be found at:
    http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml
    For IEC 60870-6 TASE.2 (e.g. ICCP) and IEC 61850, the value used shall
    be 102 for non-TLS protected exchanges. The value shall be 3782 for TLS
    transported ICCP and 61850 exchanges.
    '''

@dataclass(repr=False)
class ISOUpperLayer(TCPAccessPoint):
    '''
    Is a set of configure addressing information that is required since ICCP
    utilizes addressing other than a TCP port.
    '''

    aeInvoke: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is part of the Application Entity addressing as specified by ISO Addressing.
    '''

    aeQual: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is the AE qualifier and represents further application level addressing
    information.
    '''

    apInvoke: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is a further application level OSI addressing parameter.
    '''

    apTitle: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is a sequence of integer strings separated by ".". The value, in conjunction
    with other application addressing attributes (e.g. other APs) are used
    to select a specific application (e.g. the ICCP application entity) per
    the OSI reference model. The sequence, and its values, represent a namespace
    whose values are governed by ISO/IEC 7498-3.
    '''

    osiPsel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is the addressing selector for OSI presentation addressing.
    '''

    osiSsel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is the OSI session layer addressing information.
    '''

    osiTsel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is the OSI Transport Layer addressing information.
    '''

@dataclass(repr=False)
class ConnectivityNodeContainer(PowerSystemResource):
    '''
    A base class for all objects that may contain connectivity nodes or topological
    nodes.
    '''

    ConnectivityNodes: list[ConnectivityNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConnectivityNode.ConnectivityNodeContainer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Connectivity nodes which belong to this connectivity node container.
    '''

    TopologicalNode: list[TopologicalNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TopologicalNode.ConnectivityNodeContainer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The topological nodes which belong to this connectivity node container.
    '''

@dataclass(repr=False)
class EquipmentContainer(ConnectivityNodeContainer):
    '''
    A modelling construct to provide a root class for containing equipment.
    '''

    AdditionalGroupedEquipment: list[Equipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Equipment.AdditionalEquipmentContainer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The additonal contained equipment. The equipment belong to the equipment
    container. The equipment is contained in another equipment container, but
    also grouped with this equipment container. Examples include when a switch
    contained in a substation is also desired to be grouped with a line contianer
    or when a switch is included in a secondary substation and also grouped
    in a feeder.
    '''

    Equipments: list[Equipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Equipment.EquipmentContainer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Contained equipment.
    '''

@dataclass(repr=False)
class Bay(EquipmentContainer):
    '''
    A collection of power system resources (within a given substation) including
    conducting equipment, protection relays, measurements, and telemetry. A
    bay typically represents a physical grouping related to modularization
    of equipment.
    '''

    bayEnergyMeasFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates the presence/absence of energy measurements.
    '''

    bayPowerMeasFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates the presence/absence of active/reactive power measurements.
    '''

    breakerConfiguration: Optional[ BreakerConfiguration ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Breaker configuration.
    '''

    busBarConfiguration: Optional[ BusbarConfiguration ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Busbar configuration.
    '''

    Circuit: Optional[Circuit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Circuit.EndBay',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Substation: Optional[Substation] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Substation.Bays',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Substation containing the bay.
    '''

    VoltageLevel: Optional[VoltageLevel] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'VoltageLevel.Bays',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The voltage level containing this bay.
    '''

@dataclass(repr=False)
class DCEquipmentContainer(EquipmentContainer):
    '''
    A modelling construct to provide a root class for containment of DC as
    well as AC equipment. The class differ from the EquipmentContaner for AC
    in that it may also contain DCNode-s. Hence it can contain both AC and
    DC equipment.
    '''

    DCNodes: list[DCNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCNode.DCEquipmentContainer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DC nodes contained in the DC equipment container.
    '''

    DCTopologicalNode: list[DCTopologicalNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCTopologicalNode.DCEquipmentContainer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The topological nodes which belong to this connectivity node container.
    '''

@dataclass(repr=False)
class DCConverterUnit(DCEquipmentContainer):
    '''
    Indivisible operative unit comprising all equipment between the point of
    common coupling on the AC side and the point of common coupling – DC side,
    essentially one or more converters, together with one or more converter
    transformers, converter control equipment, essential protective and switching
    devices and auxiliaries, if any, used for conversion.
    '''

    operationMode: Optional[ DCConverterOperatingModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operating mode of an HVDC bipole (bipolar, monopolar metallic return,
    etc).
    '''

    Substation: Optional[Substation] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Substation.DCConverterUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The containing substation of the DC converter unit.
    '''

@dataclass(repr=False)
class DCLine(DCEquipmentContainer):
    '''
    Overhead lines and/or cables connecting two or more HVDC substations.
    '''

    Region: Optional[SubGeographicalRegion] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubGeographicalRegion.DCLines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The SubGeographicalRegion containing the DC line.
    '''

@dataclass(repr=False)
class Feeder(EquipmentContainer):
    '''
    A collection of equipment for organizational purposes, used for grouping
    distribution resources.
    The organization a feeder does not necessarily reflect connectivity or
    current operation state.
    '''

    NamingSecondarySubstation: list[Substation] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Substation.NamingFeeder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The secondary substations that are normally energized from the feeder.
    Used for naming purposes. Should be consistent with the other associations
    for energizing terminal specification and the feeder energization specification.
    '''

    NormalEnergizedSubstation: list[Substation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Substation.NormalEnergizingFeeder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The substations that are normally energized by the feeder.
    '''

    NormalEnergizingSubstation: Optional[Substation] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Substation.NormalEnergizedFeeder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The substation that nominally energizes the feeder. Also used for naming
    purposes.
    '''

    NormalHeadTerminal: list[Terminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Terminal.NormalHeadFeeder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The normal head terminal or terminals of the feeder.
    '''

@dataclass(repr=False)
class Line(EquipmentContainer):
    '''
    Contains equipment beyond a substation belonging to a power transmission
    line.
    '''

    Region: Optional[SubGeographicalRegion] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubGeographicalRegion.Lines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The sub-geographical region of the line.
    '''

@dataclass(repr=False)
class Circuit(Line):
    '''
    '''

    EndBay: list[Bay] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Bay.Circuit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    EndTerminal: list[Terminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Terminal.Circuit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MktLine(Line):
    '''
    Subclass for IEC61970:Wires:Line.
    '''

    Flowgate: list[Flowgate] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Flowgate.MktLine',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TransmissionRightOfWay: Optional[TransmissionRightOfWay] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransmissionRightOfWay.MktLine',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Plant(EquipmentContainer):
    '''
    A Plant is a collection of equipment for purposes of generation.
    '''

@dataclass(repr=False)
class Substation(EquipmentContainer):
    '''
    A collection of equipment for purposes other than generation or utilization,
    through which electric energy in bulk is passed for the purposes of switching
    or modifying its characteristics.
    '''

    Bays: list[Bay] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Bay.Substation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Bays contained in the substation.
    '''

    DCConverterUnit: list[DCConverterUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCConverterUnit.Substation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DC converter unit belonging of the substation.
    '''

    NamingFeeder: Optional[Feeder] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Feeder.NamingSecondarySubstation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The primary feeder that normally energizes the secondary substation. Used
    for naming purposes. Either this association or the substation to subgeographical
    region should be used for hierarchical containment specification.
    '''

    NormalEnergizedFeeder: list[Feeder] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Feeder.NormalEnergizingSubstation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The normal energized feeders of the substation. Also used for naming purposes.
    '''

    NormalEnergizingFeeder: list[Feeder] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Feeder.NormalEnergizedSubstation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The feeders that potentially energize the downstream substation. Should
    be consistent with the associations that describe the naming hierarchy.
    '''

    Region: Optional[SubGeographicalRegion] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubGeographicalRegion.Substations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The SubGeographicalRegion containing the substation.
    '''

    VoltageLevels: list[VoltageLevel] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'VoltageLevel.Substation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The voltage levels within this substation.
    '''

@dataclass(repr=False)
class VoltageLevel(EquipmentContainer):
    '''
    A collection of equipment at one common system voltage forming a switchgear.
    The equipment typically consists of breakers, busbars, instrumentation,
    control, regulation and protection devices as well as assemblies of all
    these.
    '''

    highVoltageLimit: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The bus bar's high voltage limit.
    The limit applies to all equipment and nodes contained in a given VoltageLevel.
    It is not required that it is exchanged in pair with lowVoltageLimit. It
    is preferable to use operational VoltageLimit, which prevails, if present.
    '''

    lowVoltageLimit: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The bus bar's low voltage limit.
    The limit applies to all equipment and nodes contained in a given VoltageLevel.
    It is not required that it is exchanged in pair with highVoltageLimit.
    It is preferable to use operational VoltageLimit, which prevails, if present.
    '''

    BaseVoltage: Optional[BaseVoltage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BaseVoltage.VoltageLevel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The base voltage used for all equipment within the voltage level.
    '''

    Bays: list[Bay] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Bay.VoltageLevel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The bays within this voltage level.
    '''

    Substation: Optional[Substation] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Substation.VoltageLevels',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The substation of the voltage level.
    '''

@dataclass(repr=False)
class EquivalentNetwork(ConnectivityNodeContainer):
    '''
    A class that groups electrical equivalents, including internal nodes, of
    a network that has been reduced. The ConnectivityNodes contained in the
    equivalent are intended to reflect internal nodes of the equivalent. The
    boundary Connectivity nodes where the equivalent connects outside itself
    are not contained by the equivalent.
    '''

    EquivalentEquipments: list[EquivalentEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EquivalentEquipment.EquivalentNetwork',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The associated reduced equivalents.
    '''

@dataclass(repr=False)
class ControlArea(PowerSystemResource):
    '''
    A control area is a grouping of generating units and/or loads and a cutset
    of tie lines (as terminals) which may be used for a variety of purposes
    including automatic generation control, power flow solution area interchange
    control specification, and input to load forecasting. All generation and
    load within the area defined by the terminals on the border are considered
    in the area interchange control. Note that any number of overlapping control
    area specifications can be superimposed on the physical model. The following
    general principles apply to ControlArea:
    1. The control area orientation for net interchange is positive for an
    import, negative for an export.
    2. The control area net interchange is determined by summing flows in Terminals.
    The Terminals are identified by creating a set of TieFlow objects associated
    with a ControlArea object. Each TieFlow object identifies one Terminal.
    3. In a single network model, a tie between two control areas must be modelled
    in both control area specifications, such that the two representations
    of the tie flow sum to zero.
    4. The normal orientation of Terminal flow is positive for flow into the
    conducting equipment that owns the Terminal. (i.e. flow from a bus into
    a device is positive.) However, the orientation of each flow in the control
    area specification must align with the control area convention, i.e. import
    is positive. If the orientation of the Terminal flow referenced by a TieFlow
    is positive into the control area, then this is confirmed by setting TieFlow.positiveFlowIn
    flag TRUE. If not, the orientation must be reversed by setting the TieFlow.positiveFlowIn
    flag FALSE.
    '''

    netInterchange: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The specified positive net interchange into the control area, i.e. positive
    sign means flow into the area.
    '''

    pTolerance: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power net interchange tolerance. The attribute shall be a positive
    value or zero.
    '''

    type: Optional[ ControlAreaTypeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The primary type of control area definition used to determine if this is
    used for automatic generation control, for planning interchange control,
    or other purposes. A control area specified with primary type of automatic
    generation control could still be forecast and used as an interchange area
    in power flow analysis.
    '''

    ControlAreaGeneratingUnit: list[ControlAreaGeneratingUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ControlAreaGeneratingUnit.ControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The generating unit specifications for the control area.
    '''

    EnergyArea: Optional[EnergyArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergyArea.ControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The energy area that is forecast from this control area specification.
    '''

    TieFlow: list[TieFlow] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TieFlow.ControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The tie flows associated with the control area.
    '''

@dataclass(repr=False)
class EnergyConsumerPhase(PowerSystemResource):
    '''
    A single phase of an energy consumer.
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power of the load. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''

    pfixed: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power of the load that is a fixed quantity. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    '''

    pfixedPct: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fixed active power as per cent of load group fixed active power. Load sign
    convention is used, i.e. positive sign means flow out from a node.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase of this energy consumer component. If the energy consumer is wye
    connected, the connection is from the indicated phase to the central ground
    or neutral point. If the energy consumer is delta connected, the phase
    indicates an energy consumer connected from the indicated phase to the
    next logical non-neutral phase.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power of the load. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''

    qfixed: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power of the load that is a fixed quantity. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    '''

    qfixedPct: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fixed reactive power as per cent of load group fixed reactive power. Load
    sign convention is used, i.e. positive sign means flow out from a node.
    '''

    EnergyConsumer: Optional[EnergyConsumer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergyConsumer.EnergyConsumerPhase',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The energy consumer to which this phase belongs.
    '''

@dataclass(repr=False)
class EnergyGroup(PowerSystemResource):
    '''
    '''

    isSlack: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class EnergySourcePhase(PowerSystemResource):
    '''
    Represents the single phase information of an unbalanced energy source.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase of this energy source component. If the energy source wye connected,
    the connection is from the indicated phase to the central ground or neutral
    point. If the energy source is delta connected, the phase indicates an
    energy source connected from the indicated phase to the next logical non-neutral
    phase.
    '''

    EnergySource: Optional[EnergySource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergySource.EnergySourcePhase',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The energy sourceto which the phase belongs.
    '''

@dataclass(repr=False)
class Equipment(PowerSystemResource):
    '''
    The parts of a power system that are physical devices, electronic or mechanical.
    '''

    aggregate: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The aggregate flag provides an alternative way of representing an aggregated
    (equivalent) element. It is applicable in cases when the dedicated classes
    for equivalent equipment do not have all of the attributes necessary to
    represent the required level of detail. In case the flag is set to “true”
    the single instance of equipment represents multiple pieces of equipment
    that have been modelled together as an aggregate equivalent obtained by
    a network reduction procedure. Examples would be power transformers or
    synchronous machines operating in parallel modelled as a single aggregate
    power transformer or aggregate synchronous machine.
    The attribute is not used for EquivalentBranch, EquivalentShunt and EquivalentInjection.
    '''

    inService: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the availability of the equipment. True means the equipment is
    available for topology processing, which determines if the equipment is
    energized or not. False means that the equipment is treated by network
    applications as if it is not in the model.
    '''

    networkAnalysisEnabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The equipment is enabled to participate in network analysis. If unspecified,
    the value is assumed to be true.
    '''

    normallyInService: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the availability of the equipment under normal operating conditions.
    True means the equipment is available for topology processing, which determines
    if the equipment is energized or not. False means that the equipment is
    treated by network applications as if it is not in the model.
    '''

    AdditionalEquipmentContainer: list[EquipmentContainer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EquipmentContainer.AdditionalGroupedEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Additional equipment container beyond the primary equipment container.
    The equipment is contained in another equipment container, but also grouped
    with this equipment container.
    '''

    ContingencyEquipment: list[ContingencyEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ContingencyEquipment.Equipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The contingency equipments in which this equipment participates.
    '''

    EqiupmentLimitSeriesComponent: list[EquipmentLimitSeriesComponent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EquipmentLimitSeriesComponent.Equipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Equipment limit series calculation component to which this equipment contributes.
    '''

    EquipmentContainer: Optional[EquipmentContainer] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EquipmentContainer.Equipments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Container of this equipment.
    '''

    Faults: list[Fault] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Fault.FaultyEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All faults on this equipment.
    '''

    LimitDependencyModel: list[LimitDependency] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LimitDependency.Equipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Limit dependencymodels organized under this equipment as a means for organizing
    the model in a tree view.
    '''

    OperationalLimitSet: list[OperationalLimitSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalLimitSet.Equipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operational limit sets associated with this equipment.
    '''

    OperationalRestrictions: list[OperationalRestriction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalRestriction.Equipments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All operational restrictions for this equipment.
    '''

    Outages: list[Outage] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Outage.Equipments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All outages in which this equipment is involved.
    '''

    ProtectiveActionEquipment: list[ProtectiveActionEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectiveActionEquipment.Equipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Protective action is controlling equipment. This can be direct signals
    from the control center, or emulation of action done by protection equipment.
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.Equipments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage points connected to the electrical grid through this equipment.
    '''

    WeatherStation: list[WeatherStation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WeatherStation.Equipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AuxiliaryEquipment(Equipment):
    '''
    AuxiliaryEquipment describe equipment that is not performing any primary
    functions but support for the equipment performing the primary function.
    AuxiliaryEquipment is attached to primary equipment via an association
    with Terminal.
    '''

    Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.AuxiliaryEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Terminal at the equipment where the AuxiliaryEquipment is attached.
    '''

@dataclass(repr=False)
class FaultIndicator(AuxiliaryEquipment):
    '''
    A FaultIndicator is typically only an indicator (which may or may not be
    remotely monitored), and not a piece of equipment that actually initiates
    a protection event. It is used for FLISR (Fault Location, Isolation and
    Restoration) purposes, assisting with the dispatch of crews to "most likely"
    part of the network (i.e. assists with determining circuit section where
    the fault most likely happened).
    '''

@dataclass(repr=False)
class Sensor(AuxiliaryEquipment):
    '''
    This class describe devices that transform a measured quantity into signals
    that can be presented at displays, used in control or be recorded.
    '''

@dataclass(repr=False)
class CurrentTransformer(Sensor):
    '''
    Instrument transformer used to measure electrical qualities of the circuit
    that is being protected and/or monitored. Typically used as current transducer
    for the purpose of metering or protection. A typical secondary current
    rating would be 5A.
    '''

    accuracyClass: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    CT accuracy classification.
    '''

    ctClass: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    CT classification; i.e. class 10P.
    '''

    usage: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Intended usage of the CT; i.e. metering, protection.
    '''

    accuracyLimit: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percent of rated current for which the CT remains accurate within specified
    limits.
    '''

    coreBurden: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power burden of the CT core.
    '''

@dataclass(repr=False)
class PostLineSensor(Sensor):
    '''
    A sensor used mainly in overhead distribution networks as the source of
    both current and voltage measurements.
    '''

@dataclass(repr=False)
class PotentialTransformer(Sensor):
    '''
    Instrument transformer (also known as Voltage Transformer) used to measure
    electrical qualities of the circuit that is being protected and/or monitored.
    Typically used as voltage transducer for the purpose of metering, protection,
    or sometimes auxiliary substation supply. A typical secondary voltage rating
    would be 120V.
    '''

    accuracyClass: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    PT accuracy classification.
    '''

    nominalRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Nominal ratio between the primary and secondary voltage.
    '''

    ptClass: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Potential transformer (PT) classification covering burden.
    '''

    type: Optional[ PotentialTransformerKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Potential transformer construction type.
    '''

@dataclass(repr=False)
class SurgeArrester(AuxiliaryEquipment):
    '''
    Shunt device, installed on the network, usually in the proximity of electrical
    equipment in order to protect the said equipment against transient voltage
    transients caused by lightning or switching activity.
    '''

@dataclass(repr=False)
class WaveTrap(AuxiliaryEquipment):
    '''
    Line traps are devices that impede high frequency power line carrier signals
    yet present a negligible impedance at the main power frequency.
    '''

@dataclass(repr=False)
class CompositeSwitch(Equipment):
    '''
    A model of a set of individual Switches normally enclosed within the same
    cabinet and possibly with interlocks that restrict the combination of switch
    positions. These are typically found in medium voltage distribution networks.
    A CompositeSwitch could represent a Ring-Main-Unit (RMU), or pad-mounted
    switchgear, with primitive internal devices such as an internal bus-bar
    plus 3 or 4 internal switches each of which may individually be open or
    closed. A CompositeSwitch and a set of contained Switches can also be used
    to represent a multi-position switch e.g. a switch that can connect a circuit
    to Ground, Open or Busbar.
    '''

    compositeSwitchType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An alphanumeric code that can be used as a reference to extra information
    such as the description of the interlocking scheme if any.
    '''

    Switches: list[Switch] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Switch.CompositeSwitch',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switches contained in this Composite switch.
    '''

@dataclass(repr=False)
class ConductingEquipment(Equipment):
    '''
    The parts of the AC power system that are designed to carry current or
    that are conductively connected through terminals.
    '''

    BaseVoltage: Optional[BaseVoltage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BaseVoltage.ConductingEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Base voltage of this conducting equipment. Use only when there is no voltage
    level container used and only one base voltage applies. For example, not
    used for transformers.
    '''

    GroundingAction: Optional[GroundAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GroundAction.GroundedEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Action involving grounding operation on this conducting equipment.
    '''

    JumpingAction: Optional[JumperAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'JumperAction.JumpedEquipments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Jumper action involving jumping operation on this conducting equipment.
    '''

    Outage: Optional[Outage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Outage.OutageIsolationEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage that is isolated by the outage isolation equipment.
    '''

    ProtectionEquipments: list[ProtectionEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectionEquipment.ConductingEquipments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Protection equipment used to protect specific conducting equipment.
    '''

    ProtectiveActionAdjustment: list[ProtectiveActionAdjustment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectiveActionAdjustment.ConductingEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operating condition to the Conducting Equipment is changed when protective
    action adjustment is activated. For ShuntCompensator or other conducting
    equipment that operates on discrete values (integer), the values given
    in float will be rounded.
    '''

    SvStatus: list[SvStatus] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SvStatus.ConductingEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The status state variable associated with this conducting equipment.
    '''

    Terminals: list[Terminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Terminal.ConductingEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conducting equipment have terminals that may be connected to other conducting
    equipment terminals via connectivity nodes or topological nodes.
    '''

@dataclass(repr=False)
class ACDCConverter(ConductingEquipment):
    '''
    A unit with valves for three phases, together with unit control equipment,
    essential protective and switching devices, DC storage capacitors, phase
    reactors and auxiliaries, if any, used for conversion.
    '''

    numberOfValves: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of valves in the converter. Used in loss calculations.
    '''

    baseS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Base apparent power of the converter pole. The attribute shall be a positive
    value.
    '''

    idc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Converter DC current, also called Id. It is converter’s state variable,
    result from power flow.
    '''

    idleLoss: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power loss in pole at no power transfer. It is converter’s configuration
    data used in power flow. The attribute shall be a positive value.
    '''

    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum active power limit. The value is overwritten by values of VsCapabilityCurve,
    if present.
    '''

    maxUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum voltage on the DC side at which the converter should operate.
    It is converter’s configuration data used in power flow. The attribute
    shall be a positive value.
    '''

    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum active power limit. The value is overwritten by values of VsCapabilityCurve,
    if present.
    '''

    minUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum voltage on the DC side at which the converter should operate.
    It is converter’s configuration data used in power flow. The attribute
    shall be a positive value.
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power at the point of common coupling. Load sign convention is used,
    i.e. positive sign means flow out from a node.
    Starting value for a steady state solution in the case a simplified power
    flow model is used.
    '''

    poleLossP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The active power loss at a DC Pole
    = idleLoss + switchingLoss*|Idc| + resitiveLoss*Idc^2.
    For lossless operation Pdc=Pac.
    For rectifier operation with losses Pdc=Pac-lossP.
    For inverter operation with losses Pdc=Pac+lossP.
    It is converter’s state variable used in power flow. The attribute shall
    be a positive value.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power at the point of common coupling. Load sign convention is
    used, i.e. positive sign means flow out from a node.
    Starting value for a steady state solution in the case a simplified power
    flow model is used.
    '''

    ratedUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated converter DC voltage, also called UdN. The attribute shall be a positive
    value. It is converter’s configuration data used in power flow. For instance
    a bipolar HVDC link with value 200 kV has a 400kV difference between the
    dc lines.
    '''

    resistiveLoss: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    It is converter’s configuration data used in power flow. Refer to poleLossP.
    The attribute shall be a positive value.
    '''

    switchingLoss: Optional[ float | ActivePowerPerCurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching losses, relative to the base apparent power 'baseS'. Refer to
    poleLossP. The attribute shall be a positive value.
    '''

    targetPpcc: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Real power injection target in AC grid, at point of common coupling. Load
    sign convention is used, i.e. positive sign means flow out from a node.
    '''

    targetUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Target value for DC voltage magnitude. The attribute shall be a positive
    value.
    '''

    uc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Line-to-line converter voltage, the voltage at the AC side of the valve.
    It is converter’s state variable, result from power flow. The attribute
    shall be a positive value.
    '''

    udc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Converter voltage at the DC side, also called Ud. It is converter’s state
    variable, result from power flow. The attribute shall be a positive value.
    '''

    valveU0: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Valve threshold voltage, also called Uvalve. Forward voltage drop when
    the valve is conducting. Used in loss calculations, i.e. the switchLoss
    depend on numberOfValves * valveU0.
    '''

    DCTerminals: list[ACDCConverterDCTerminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ACDCConverterDCTerminal.DCConductingEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A DC converter have DC converter terminals. A converter has two DC converter
    terminals.
    '''

    PccTerminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.ConverterDCSides',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Point of common coupling terminal for this converter DC side. It is typically
    the terminal on the power transformer (or switch) closest to the AC network.
    '''

@dataclass(repr=False)
class CsConverter(ACDCConverter):
    '''
    DC side of the current source converter (CSC).
    The firing angle controls the dc voltage at the converter, both for rectifier
    and inverter. The difference between the dc voltages of the rectifier and
    inverter determines the dc current. The extinction angle is used to limit
    the dc voltage at the inverter, if needed, and is not used in active power
    control. The firing angle, transformer tap position and number of connected
    filters are the primary means to control a current source dc line. Higher
    level controls are built on top, e.g. dc voltage, dc current and active
    power. From a steady state perspective it is sufficient to specify the
    wanted active power transfer (ACDCConverter.targetPpcc) and the control
    functions will set the dc voltage, dc current, firing angle, transformer
    tap position and number of connected filters to meet this. Therefore attributes
    targetAlpha and targetGamma are not applicable in this case.
    The reactive power consumed by the converter is a function of the firing
    angle, transformer tap position and number of connected filter, which can
    be approximated with half of the active power. The losses is a function
    of the dc voltage and dc current.
    The attributes minAlpha and maxAlpha define the range of firing angles
    for rectifier operation between which no discrete tap changer action takes
    place. The range is typically 10-18 degrees.
    The attributes minGamma and maxGamma define the range of extinction angles
    for inverter operation between which no discrete tap changer action takes
    place. The range is typically 17-20 degrees.
    '''

    alpha: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Firing angle that determines the dc voltage at the converter dc terminal.
    Typical value between 10 degrees and 18 degrees for a rectifier. It is
    converter’s state variable, result from power flow. The attribute shall
    be a positive value.
    '''

    gamma: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Extinction angle. It is used to limit the dc voltage at the inverter if
    needed. Typical value between 17 degrees and 20 degrees for an inverter.
    It is converter’s state variable, result from power flow. The attribute
    shall be a positive value.
    '''

    maxAlpha: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum firing angle. It is converter’s configuration data used in power
    flow. The attribute shall be a positive value.
    '''

    maxGamma: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum extinction angle. It is converter’s configuration data used in
    power flow. The attribute shall be a positive value.
    '''

    maxIdc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum direct current (Id) on the DC side at which the converter should
    operate. It is converter’s configuration data use in power flow. The attribute
    shall be a positive value.
    '''

    minAlpha: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum firing angle. It is converter’s configuration data used in power
    flow. The attribute shall be a positive value.
    '''

    minGamma: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum extinction angle. It is converter’s configuration data used in
    power flow. The attribute shall be a positive value.
    '''

    minIdc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum direct current (Id) on the DC side at which the converter should
    operate. It is converter’s configuration data used in power flow. The attribute
    shall be a positive value.
    '''

    operatingMode: Optional[ CsOperatingModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates whether the DC pole is operating as an inverter or as a rectifier.
    It is converter’s control variable used in power flow.
    '''

    pPccControl: Optional[ CsPpccControlKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of active power control.
    '''

    ratedIdc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated converter DC current, also called IdN. The attribute shall be a positive
    value. It is converter’s configuration data used in power flow.
    '''

    targetAlpha: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Target firing angle. It is converter’s control variable used in power flow.
    It is only applicable for rectifier if continuous tap changer control is
    used. Allowed values are within the range minAlpha&lt;=targetAlpha&lt;=maxAlpha.
    The attribute shall be a positive value.
    '''

    targetGamma: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Target extinction angle. It is converter’s control variable used in power
    flow. It is only applicable for inverter if continuous tap changer control
    is used. Allowed values are within the range minGamma&lt;=targetGamma&lt;=maxGamma.
    The attribute shall be a positive value.
    '''

    targetIdc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    DC current target value. It is converter’s control variable used in power
    flow. The attribute shall be a positive value.
    '''

    CSCDynamics: Optional[CSCDynamics] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CSCDynamics.CSConverter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current source converter dynamics model used to describe dynamic behaviour
    of this converter.
    '''

@dataclass(repr=False)
class VsConverter(ACDCConverter):
    '''
    DC side of the voltage source converter (VSC).
    '''

    maxModulationIndex: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum quotient between the AC converter voltage (Uc) and DC voltage
    (Ud). A factor typically less than 1. It is converter’s configuration data
    used in power flow.
    '''

    targetPowerFactorPcc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power factor target at the AC side, at point of common coupling. The attribute
    shall be a positive value.
    '''

    targetPWMfactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Magnitude of pulse-modulation factor. The attribute shall be a positive
    value.
    '''

    delta: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Angle between VsConverter.uv and ACDCConverter.uc. It is converter’s state
    variable used in power flow. The attribute shall be a positive value or
    zero.
    '''

    droop: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Droop constant. The pu value is obtained as D [kV/MW] x Sb / Ubdc. The
    attribute shall be a positive value.
    '''

    droopCompensation: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Compensation constant. Used to compensate for voltage drop when controlling
    voltage at a distant bus. The attribute shall be a positive value.
    '''

    maxValveCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum current through a valve. It is converter’s configuration data.
    '''

    pPccControl: Optional[ VsPpccControlKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of control of real power and/or DC voltage.
    '''

    qPccControl: Optional[ VsQpccControlKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of reactive power control.
    '''

    qShare: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power sharing factor among parallel converters on Uac control.
    The attribute shall be a positive value or zero.
    '''

    targetPhasePcc: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase target at AC side, at point of common coupling. The attribute shall
    be a positive value.
    '''

    targetQpcc: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power injection target in AC grid, at point of common coupling.
    Load sign convention is used, i.e. positive sign means flow out from a
    node.
    '''

    targetUpcc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage target in AC grid, at point of common coupling. The attribute shall
    be a positive value.
    '''

    uv: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Line-to-line voltage on the valve side of the converter transformer. It
    is converter’s state variable, result from power flow. The attribute shall
    be a positive value.
    '''

    CapabilityCurve: Optional[VsCapabilityCurve] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'VsCapabilityCurve.VsConverterDCSides',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Capability curve of this converter.
    '''

    VSCDynamics: Optional[VSCDynamics] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'VSCDynamics.VsConverter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage source converter dynamics model used to describe dynamic behaviour
    of this converter.
    '''

@dataclass(repr=False)
class Clamp(ConductingEquipment):
    '''
    A Clamp is a galvanic connection at a line segment where other equipment
    is connected. A Clamp does not cut the line segment.
    A Clamp is ConductingEquipment and has one Terminal with an associated
    ConnectivityNode. Any other ConductingEquipment can be connected to the
    Clamp ConnectivityNode.
    '''

    lengthFromTerminal1: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The length to the place where the clamp is located starting from side one
    of the line segment, i.e. the line segment terminal with sequence number
    equal to 1.
    '''

    ACLineSegment: Optional[ACLineSegment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.Clamp',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The line segment to which the clamp is connected.
    '''

    ClampAction: Optional[ClampAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ClampAction.Clamp',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The clamp action that is performed on the clamp
    '''

    JumperAction: Optional[JumperAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'JumperAction.Clamp',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Action taken with this jumper.
    '''

@dataclass(repr=False)
class Conductor(ConductingEquipment):
    '''
    Combination of conducting material with consistent electrical characteristics,
    building a single electrical system, used to carry current between points
    in the power system.
    '''

    length: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Segment length for calculating line section capabilities.
    '''

@dataclass(repr=False)
class ACLineSegment(Conductor):
    '''
    A wire or combination of wires, with consistent electrical characteristics,
    building a single electrical system, used to carry alternating current
    between points in the power system.
    For symmetrical, transposed three phase lines, it is sufficient to use
    attributes of the line segment, which describe impedances and admittances
    for the entire length of the segment. Additionally impedances can be computed
    by using length and associated per length impedances.
    The BaseVoltage at the two ends of ACLineSegments in a Line shall have
    the same BaseVoltage.nominalVoltage. However, boundary lines may have slightly
    different BaseVoltage.nominalVoltages and variation is allowed. Larger
    voltage difference in general requires use of an equivalent branch.
    '''

    b0ch: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence shunt (charging) susceptance, uniformly distributed, of the
    entire line section.
    '''

    bch: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) susceptance, uniformly distributed,
    of the entire line section. This value represents the full charging over
    the full length of the line.
    '''

    g0ch: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence shunt (charging) conductance, uniformly distributed, of the
    entire line section.
    '''

    gch: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) conductance, uniformly distributed,
    of the entire line section.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series resistance of the entire line section.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series resistance of the entire line section.
    '''

    shortCircuitEndTemperature: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum permitted temperature at the end of SC for the calculation of minimum
    short-circuit currents. Used for short circuit data exchange according
    to IEC 60909.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series reactance of the entire line section.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series reactance of the entire line section.
    '''

    ACLineSegmentPhases: list[ACLineSegmentPhase] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ACLineSegmentPhase.ACLineSegment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The line segment phases which belong to the line segment.
    '''

    Clamp: list[Clamp] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Clamp.ACLineSegment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The clamps connected to the line segment.
    '''

    Cut: list[Cut] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Cut.ACLineSegment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cuts applied to the line segment.
    '''

    LineFaults: list[LineFault] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LineFault.ACLineSegment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The line faults of the line segment.
    '''

    LineGroundingAction: Optional[GroundAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GroundAction.AlongACLineSegment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Ground action involving clamp usage (for the case when the ground is applied
    along the line segment instead of at its terminals).
    '''

    LineJumpingAction: Optional[JumperAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'JumperAction.ACLineSegments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Jumper action involving clamp usage (for the case when the jumper is applied
    along the line segment instead of at its terminals).
    '''

    PerLengthImpedance: Optional[PerLengthImpedance] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PerLengthImpedance.ACLineSegments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Per-length impedance of this line segment.
    '''

    WireSpacingInfo: Optional[WireSpacingInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WireSpacingInfo.ACLineSegment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The wire spacing information that applies to this AC line segment
    '''

@dataclass(repr=False)
class MktACLineSegment(ACLineSegment):
    '''
    Subclass of IEC 61970:Wires:ACLineSegment.
    '''

@dataclass(repr=False)
class WireSegment(Conductor):
    '''
    A two terminal and power conducting device of negligible impedance and
    length represented as zero impedance device that can be used to connect
    auxiliary equipment to its terminals.
    '''

    WireSegmentPhases: list[WireSegmentPhase] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WireSegmentPhase.WireSegment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The wire segment phases which belong to the wire segment.
    '''

@dataclass(repr=False)
class Connector(ConductingEquipment):
    '''
    A conductor, or group of conductors, with negligible impedance, that serve
    to connect other conducting equipment within a single substation and are
    modelled with a single logical terminal.
    '''

@dataclass(repr=False)
class BusbarSection(Connector):
    '''
    A conductor, or group of conductors, with negligible impedance, that serve
    to connect other conducting equipment within a single substation.
    Voltage measurements are typically obtained from voltage transformers that
    are connected to busbar sections. A bus bar section may have many physical
    terminals but for analysis is modelled with exactly one logical terminal.
    '''

    ipMax: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum allowable peak short-circuit current of busbar (Ipmax in IEC 60909-0).
    Mechanical limit of the busbar in the substation itself. Used for short
    circuit data exchange according to IEC 60909.
    '''

    VoltageControlZone: Optional[VoltageControlZone] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'VoltageControlZone.BusbarSection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A VoltageControlZone is controlled by a designated BusbarSection.
    '''

@dataclass(repr=False)
class Junction(Connector):
    '''
    A point where one or more conducting equipments are connected with zero
    resistance.
    '''

@dataclass(repr=False)
class EarthFaultCompensator(ConductingEquipment):
    '''
    A conducting equipment used to represent a connection to ground which is
    typically used to compensate earth faults. An earth fault compensator device
    modelled with a single terminal implies a second terminal solidly connected
    to ground. If two terminals are modelled, the ground is not assumed and
    normal connection rules apply.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Nominal resistance of device.
    '''

@dataclass(repr=False)
class GroundingImpedance(EarthFaultCompensator):
    '''
    A fixed impedance device used for grounding.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactance of device.
    '''

@dataclass(repr=False)
class PetersenCoil(EarthFaultCompensator):
    '''
    A variable impedance device normally used to offset line charging during
    single line faults in an ungrounded section of network.
    '''

    mode: Optional[ PetersenCoilModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The mode of operation of the Petersen coil.
    '''

    nominalU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The nominal voltage for which the coil is designed.
    '''

    offsetCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The offset current that the Petersen coil controller is operating from
    the resonant point. This is normally a fixed amount for which the controller
    is configured and could be positive or negative. Typically 0 to 60 A depending
    on voltage and resonance conditions.
    '''

    positionCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The control current used to control the Petersen coil also known as the
    position current. Typically in the range of 20 mA to 200 mA.
    '''

    xGroundMax: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum reactance.
    '''

    xGroundMin: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum reactance.
    '''

    xGroundNominal: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The nominal reactance. This is the operating point (normally over compensation)
    that is defined based on the resonance point in the healthy network condition.
    The impedance is calculated based on nominal voltage divided by position
    current.
    '''

@dataclass(repr=False)
class EnergyConnection(ConductingEquipment):
    '''
    A connection of energy generation or consumption on the power system model.
    '''

@dataclass(repr=False)
class EnergyConsumer(EnergyConnection):
    '''
    Generic user of energy - a point of consumption on the power system model.
    EnergyConsumer.pfixed, .qfixed, .pfixedPct and .qfixedPct have meaning
    only if there is no LoadResponseCharacteristic associated with EnergyConsumer
    or if LoadResponseCharacteristic.exponentModel is set to False.
    '''

    customerCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of individual customers represented by this demand.
    '''

    grounded: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used for Yn and Zn connections. True if the neutral is solidly grounded.
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power of the load. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''

    pfixed: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power of the load that is a fixed quantity and does not vary as
    load group value varies. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    '''

    pfixedPct: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fixed active power as a percentage of load group fixed active power. Used
    to represent the time-varying components. Load sign convention is used,
    i.e. positive sign means flow out from a node.
    '''

    phaseConnection: Optional[ PhaseShuntConnectionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of phase connection, such as wye or delta.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power of the load. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''

    qfixed: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power of the load that is a fixed quantity and does not vary as
    load group value varies. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    '''

    qfixedPct: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fixed reactive power as a percentage of load group fixed reactive power.
    Used to represent the time-varying components. Load sign convention is
    used, i.e. positive sign means flow out from a node.
    '''

    EnergyConsumerAction: Optional[EnergyConsumerAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergyConsumerAction.EnergyConsumer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The energy consumer action that is performed on the energy consumer
    '''

    EnergyConsumerPhase: list[EnergyConsumerPhase] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyConsumerPhase.EnergyConsumer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The individual phase models for this energy consumer.
    '''

    LoadDynamics: Optional[LoadDynamics] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'LoadDynamics.EnergyConsumer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Load dynamics model used to describe dynamic behaviour of this energy consumer.
    '''

    LoadResponse: Optional[LoadResponseCharacteristic] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'LoadResponseCharacteristic.EnergyConsumer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The load response characteristic of this load. If missing, this load is
    assumed to be constant power.
    '''

    PowerCutZone: Optional[PowerCutZone] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerCutZone.EnergyConsumers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The energy consumer is assigned to this power cut zone.
    '''

@dataclass(repr=False)
class ConformLoad(EnergyConsumer):
    '''
    ConformLoad represent loads that follow a daily load change pattern where
    the pattern can be used to scale the load with a system load.
    '''

    LoadGroup: Optional[ConformLoadGroup] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ConformLoadGroup.EnergyConsumers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Group of this ConformLoad.
    '''

@dataclass(repr=False)
class NonConformLoad(EnergyConsumer):
    '''
    NonConformLoad represents loads that do not follow a daily load change
    pattern and whose changes are not correlated with the daily load change
    pattern.
    '''

    LoadGroup: Optional[NonConformLoadGroup] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NonConformLoadGroup.EnergyConsumers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Group of this ConformLoad.
    '''

@dataclass(repr=False)
class StationSupply(EnergyConsumer):
    '''
    Station supply with load derived from the station output.
    '''

@dataclass(repr=False)
class EnergySource(EnergyConnection):
    '''
    A generic equivalent for an energy supplier on a transmission or distribution
    voltage level.
    '''

    activePower: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    High voltage source active injection. Load sign convention is used, i.e.
    positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''

    nominalVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase-to-phase nominal voltage.
    '''

    pMax: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the maximum active power that can be produced by the source. Load
    sign convention is used, i.e. positive sign means flow out from a TopologicalNode
    (bus) into the conducting equipment.
    '''

    pMin: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the minimum active power that can be produced by the source. Load
    sign convention is used, i.e. positive sign means flow out from a TopologicalNode
    (bus) into the conducting equipment.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence Thevenin resistance.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence Thevenin resistance.
    '''

    reactivePower: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    High voltage source reactive injection. Load sign convention is used, i.e.
    positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''

    rn: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence Thevenin resistance.
    '''

    voltageAngle: Optional[ float | AngleRadians ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase angle of a-phase open circuit used when voltage characteristics need
    to be imposed at the node associated with the terminal of the energy source,
    such as when voltages and angles from the transmission level are used as
    input to the distribution network. The attribute shall be a positive value
    or zero.
    '''

    voltageMagnitude: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase-to-phase open circuit voltage magnitude used when voltage characteristics
    need to be imposed at the node associated with the terminal of the energy
    source, such as when voltages and angles from the transmission level are
    used as input to the distribution network. The attribute shall be a positive
    value or zero.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence Thevenin reactance.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence Thevenin reactance.
    '''

    xn: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence Thevenin reactance.
    '''

    EnergySchedulingType: Optional[EnergySchedulingType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergySchedulingType.EnergySource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy Scheduling Type of an Energy Source.
    '''

    EnergySourceAction: Optional[EnergySourceAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergySourceAction.EnergySource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Action taken with this energy source.
    '''

    EnergySourcePhase: list[EnergySourcePhase] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergySourcePhase.EnergySource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The individual phase information of the energy source.
    '''

@dataclass(repr=False)
class RegulatingCondEq(EnergyConnection):
    '''
    A type of conducting equipment that can regulate a quantity (i.e. voltage
    or flow) at a specific point in the network.
    '''

    controlEnabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the regulation status of the equipment. True is regulating, false
    is not regulating.
    '''

    RegulatingControl: Optional[RegulatingControl] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegulatingControl.RegulatingCondEq',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The regulating control scheme in which this equipment participates.
    '''

@dataclass(repr=False)
class ExternalNetworkInjection(RegulatingCondEq):
    '''
    This class represents the external network and it is used for IEC 60909
    calculations.
    '''

    ikSecond: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates whether initial symmetrical short-circuit current and power have
    been calculated according to IEC (Ik"). Used only if short circuit calculations
    are done according to superposition method.
    '''

    maxR0ToX0Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum ratio of zero sequence resistance of Network Feeder to its zero
    sequence reactance (R(0)/X(0) max). Used for short circuit data exchange
    according to IEC 60909.
    '''

    maxR1ToX1Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum ratio of positive sequence resistance of Network Feeder to its
    positive sequence reactance (R(1)/X(1) max). Used for short circuit data
    exchange according to IEC 60909.
    '''

    maxZ0ToZ1Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum ratio of zero sequence impedance to its positive sequence impedance
    (Z(0)/Z(1) max). Used for short circuit data exchange according to IEC
    60909.
    '''

    minR0ToX0Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates whether initial symmetrical short-circuit current and power have
    been calculated according to IEC (Ik"). Used for short circuit data exchange
    according to IEC 6090.
    '''

    minR1ToX1Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum ratio of positive sequence resistance of Network Feeder to its
    positive sequence reactance (R(1)/X(1) min). Used for short circuit data
    exchange according to IEC 60909.
    '''

    minZ0ToZ1Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum ratio of zero sequence impedance to its positive sequence impedance
    (Z(0)/Z(1) min). Used for short circuit data exchange according to IEC
    60909.
    '''

    referencePriority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority of unit for use as powerflow voltage phase angle reference bus
    selection. 0 = don t care (default) 1 = highest priority. 2 is less than
    1 and so on.
    '''

    governorSCD: Optional[ float | ActivePowerPerFrequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power Frequency Bias. This is the change in power injection divided by
    the change in frequency and negated. A positive value of the power frequency
    bias provides additional power injection upon a drop in frequency.
    '''

    maxInitialSymShCCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum initial symmetrical short-circuit currents (Ik" max) in A (Ik"
    = Sk"/(SQRT(3) Un)). Used for short circuit data exchange according to
    IEC 60909.
    '''

    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum active power of the injection.
    '''

    maxQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum reactive power limit. It is used for modelling of infeed for load
    flow exchange and not for short circuit modelling.
    '''

    minInitialSymShCCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum initial symmetrical short-circuit currents (Ik" min) in A (Ik"
    = Sk"/(SQRT(3) Un)). Used for short circuit data exchange according to
    IEC 60909.
    '''

    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum active power of the injection.
    '''

    minQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum reactive power limit. It is used for modelling of infeed for load
    flow exchange and not for short circuit modelling.
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for steady state solutions.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for steady state solutions.
    '''

    voltageFactor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage factor in pu, which was used to calculate short-circuit current
    Ik" and power Sk". Used only if short circuit calculations are done according
    to superposition method.
    '''

@dataclass(repr=False)
class FrequencyConverter(RegulatingCondEq):
    '''
    A device to convert from one frequency to another (e.g., frequency F1 to
    F2) comprises a pair of FrequencyConverter instances. One converts from
    F1 to DC, the other converts the DC to F2.
    '''

    frequency: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Frequency on the AC side.
    '''

    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum active power on the DC side at which the frequency converter
    should operate.
    '''

    maxU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum voltage on the DC side at which the frequency converter should
    operate.
    '''

    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum active power on the DC side at which the frequency converter
    should operate.
    '''

    minU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum voltage on the DC side at which the frequency converter should
    operate.
    '''

@dataclass(repr=False)
class PowerElectronicsConnection(RegulatingCondEq):
    '''
    A connection to the AC network for energy production or consumption that
    uses power electronics rather than rotating machines.
    '''

    maxIFault: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum fault current this device will contribute, in per-unit of rated
    current, before the converter protection will trip or bypass.
    '''

    maxQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum reactive power limit. This is the maximum (nameplate) limit for
    the unit.
    '''

    minQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum reactive power limit for the unit. This is the minimum (nameplate)
    limit for the unit.
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Equivalent resistance (RG) of generator. RG is considered for the calculation
    of all currents, except for the calculation of the peak current ip. Used
    for short circuit data exchange according to IEC 60909.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence resistance of the synchronous machine.
    '''

    ratedS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Nameplate apparent power rating for the unit.
    The attribute shall have a positive value.
    '''

    ratedU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage (nameplate data, Ur in IEC 60909-0). It is primarily used
    for short circuit data exchange according to IEC 60909.
    The attribute shall be a positive value.
    '''

    rn: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence Thevenin resistance.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence Thevenin reactance.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence Thevenin reactance.
    '''

    xn: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence Thevenin reactance.
    '''

    PowerElectronicsConnectionPhase: list[PowerElectronicsConnectionPhase] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PowerElectronicsConnectionPhase.PowerElectronicsConnection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The individual phases models for the power electronics connection.
    '''

    PowerElectronicsUnit: list[PowerElectronicsUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PowerElectronicsUnit.PowerElectronicsConnection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An AC network connection may have several power electronics units connecting
    through it.
    '''

    WindTurbineType3or4Dynamics: Optional[WindTurbineType3or4Dynamics] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3or4Dynamics.PowerElectronicsConnection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The wind turbine type 3 or type 4 dynamics model associated with this power
    electronics connection.
    '''

@dataclass(repr=False)
class RotatingMachine(RegulatingCondEq):
    '''
    A rotating machine which may be used as a generator or motor.
    '''

    ratedPowerFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power factor (nameplate data). It is primarily used for short circuit data
    exchange according to IEC 60909. The attribute cannot be a negative value.
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''

    ratedS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Nameplate apparent power rating for the unit.
    The attribute shall have a positive value.
    '''

    ratedU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage (nameplate data, Ur in IEC 60909-0). It is primarily used
    for short circuit data exchange according to IEC 60909.
    The attribute shall be a positive value.
    '''

    GeneratingUnit: Optional[GeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.RotatingMachine',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A synchronous machine may operate as a generator and as such becomes a
    member of a generating unit.
    '''

    HydroPump: Optional[HydroPump] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HydroPump.RotatingMachine',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The synchronous machine drives the turbine which moves the water from a
    low elevation to a higher elevation. The direction of machine rotation
    for pumping may or may not be the same as for generating.
    '''

@dataclass(repr=False)
class AsynchronousMachine(RotatingMachine):
    '''
    A rotating machine whose shaft rotates asynchronously with the electrical
    field. Also known as an induction machine with no external connection to
    the rotor windings, e.g. squirrel-cage induction machine.
    '''

    converterFedDrive: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates whether the machine is a converter fed drive. Used for short
    circuit data exchange according to IEC 60909.
    '''

    iaIrRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Ratio of locked-rotor current to the rated current of the motor (Ia/Ir).
    Used for short circuit data exchange according to IEC 60909.
    '''

    polePairNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of pole pairs of stator. Used for short circuit data exchange according
    to IEC 60909.
    '''

    reversible: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates for converter drive motors if the power can be reversible. Used
    for short circuit data exchange according to IEC 60909.
    '''

    rxLockedRotorRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Locked rotor ratio (R/X). Used for short circuit data exchange according
    to IEC 60909.
    '''

    asynchronousMachineType: Optional[ AsynchronousMachineKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates the type of Asynchronous Machine (motor or generator).
    '''

    efficiency: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Efficiency of the asynchronous machine at nominal operation as a percentage.
    Indicator for converter drive motors. Used for short circuit data exchange
    according to IEC 60909.
    '''

    nominalFrequency: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Nameplate data indicates if the machine is 50 Hz or 60 Hz.
    '''

    nominalSpeed: Optional[ float | RotationSpeed ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Nameplate data. Depends on the slip and number of pole pairs.
    '''

    ratedMechanicalPower: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated mechanical power (Pr in IEC 60909-0). Used for short circuit data
    exchange according to IEC 60909.
    '''

    rr1: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Damper 1 winding resistance.
    '''

    rr2: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Damper 2 winding resistance.
    '''

    tpo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transient rotor time constant (greater than tppo).
    '''

    tppo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Sub-transient rotor time constant (greater than 0).
    '''

    xlr1: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Damper 1 winding leakage reactance.
    '''

    xlr2: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Damper 2 winding leakage reactance.
    '''

    xm: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Magnetizing reactance.
    '''

    xp: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transient reactance (unsaturated) (greater than or equal to xpp).
    '''

    xpp: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Sub-transient reactance (unsaturated).
    '''

    xs: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Synchronous reactance (greater than xp).
    '''

    AsynchronousMachineDynamics: Optional[AsynchronousMachineDynamics] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AsynchronousMachineDynamics.AsynchronousMachine',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asynchronous machine dynamics model used to describe dynamic behaviour
    of this asynchronous machine.
    '''

@dataclass(repr=False)
class SynchronousMachine(RotatingMachine):
    '''
    An electromechanical device that operates with shaft rotating synchronously
    with the network. It is a single machine operating either as a generator
    or synchronous condenser or pump.
    '''

    coolantCondition: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Temperature or pressure of coolant medium.
    '''

    earthing: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates whether or not the generator is earthed. Used for short circuit
    data exchange according to IEC 60909.
    '''

    mu: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Factor to calculate the breaking current (Section 4.5.2.1 in IEC 60909-0).
    Used only for single fed short circuit on a generator (Section 4.3.4.2.
    in IEC 60909-0).
    '''

    referencePriority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority of unit for use as powerflow voltage phase angle reference bus
    selection. 0 = don t care (default) 1 = highest priority. 2 is less than
    1 and so on.
    '''

    aVRToManualLag: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time delay required when switching from Automatic Voltage Regulation (AVR)
    to Manual for a lagging MVAr violation.
    '''

    aVRToManualLead: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time delay required when switching from Automatic Voltage Regulation (AVR)
    to Manual for a leading MVAr violation.
    '''

    baseQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Default base reactive power value. This value represents the initial reactive
    power that can be used by any application function.
    '''

    condenserP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power consumed when in condenser mode operation.
    '''

    coolantType: Optional[ CoolantType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Method of cooling the machine.
    '''

    earthingStarPointR: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generator star point earthing resistance (Re). Used for short circuit data
    exchange according to IEC 60909.
    '''

    earthingStarPointX: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generator star point earthing reactance (Xe). Used for short circuit data
    exchange according to IEC 60909.
    '''

    ikk: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Steady-state short-circuit current (in A for the profile) of generator
    with compound excitation during 3-phase short circuit.
    - Ikk=0: Generator with no compound excitation.
    - Ikk&lt;&gt;0: Generator with compound excitation.
    Ikk is used to calculate the minimum steady-state short-circuit current
    for generators with compound excitation.
    (4.6.1.2 in IEC 60909-0:2001).
    Used only for single fed short circuit on a generator. (4.3.4.2. in IEC
    60909-0:2001).
    '''

    manualToAVR: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time delay required when switching from Manual to Automatic Voltage Regulation.
    This value is used in the accelerating power reference frame for powerflow
    solutions.
    '''

    maxQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum reactive power limit. This is the maximum (nameplate) limit for
    the unit.
    '''

    maxU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum voltage limit for the unit.
    '''

    minQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum reactive power limit for the unit.
    '''

    minU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum voltage limit for the unit.
    '''

    operatingMode: Optional[ SynchronousMachineOperatingMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current mode of operation.
    '''

    qPercent: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Part of the coordinated reactive control that comes from this machine.
    The attribute is used as a participation factor not necessarily summing
    up to 100% for the participating devices in the control.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Equivalent resistance (RG) of generator. RG is considered for the calculation
    of all currents, except for the calculation of the peak current ip. Used
    for short circuit data exchange according to IEC 60909.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence resistance of the synchronous machine.
    '''

    r2: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence resistance.
    '''

    satDirectSubtransX: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Direct-axis subtransient reactance saturated, also known as Xd"sat.
    '''

    satDirectSyncX: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Direct-axes saturated synchronous reactance (xdsat); reciprocal of short-circuit
    ration. Used for short circuit data exchange, only for single fed short
    circuit on a generator. (4.3.4.2. in IEC 60909-0:2001).
    '''

    satDirectTransX: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Saturated Direct-axis transient reactance. The attribute is primarily used
    for short circuit calculations according to ANSI.
    '''

    shortCircuitRotorType: Optional[ ShortCircuitRotorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of rotor, used by short circuit applications, only for single fed
    short circuit according to IEC 60909.
    '''

    type: Optional[ SynchronousMachineKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Modes that this synchronous machine can operate in.
    '''

    voltageRegulationRange: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Range of generator voltage regulation (PG in IEC 60909-0) used for calculation
    of the impedance correction factor KG defined in IEC 60909-0.
    This attribute is used to describe the operating voltage of the generating
    unit.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence reactance of the synchronous machine.
    '''

    x2: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence reactance.
    '''

    InitialReactiveCapabilityCurve: Optional[ReactiveCapabilityCurve] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The default reactive capability curve for use by a synchronous machine.
    '''

    PrimeMovers: list[PrimeMover] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PrimeMover.SynchronousMachines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Prime movers that drive this SynchronousMachine.
    '''

    ReactiveCapabilityCurves: list[ReactiveCapabilityCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReactiveCapabilityCurve.SynchronousMachines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All available reactive capability curves for this synchronous machine.
    '''

    SynchronousMachineDynamics: Optional[SynchronousMachineDynamics] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachineDynamics.SynchronousMachine',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Synchronous machine dynamics model used to describe dynamic behaviour of
    this synchronous machine.
    '''

@dataclass(repr=False)
class ShuntCompensator(RegulatingCondEq):
    '''
    A shunt capacitor or reactor or switchable bank of shunt capacitors or
    reactors. A section of a shunt compensator is an individual capacitor or
    reactor. A negative value for bPerSection indicates that the compensator
    is a reactor. ShuntCompensator is a single terminal device. Ground is implied.
    '''

    grounded: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used for Yn and Zn connections. True if the neutral is solidly grounded.
    '''

    maximumSections: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum number of sections that may be switched in.
    '''

    normalSections: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The normal number of sections switched in. The value shall be between zero
    and ShuntCompensator.maximumSections.
    '''

    sections: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Shunt compensator sections in use. Starting value for steady state solution.
    The attribute shall be a positive value or zero. Non integer values are
    allowed to support continuous variables. The reasons for continuous value
    are to support study cases where no discrete shunt compensators has yet
    been designed, a solutions where a narrow voltage band force the sections
    to oscillate or accommodate for a continuous solution as input.
    For LinearShuntConpensator the value shall be between zero and ShuntCompensator.maximumSections.
    At value zero the shunt compensator conductance and admittance is zero.
    Linear interpolation of conductance and admittance between the previous
    and next integer section is applied in case of non-integer values.
    For NonlinearShuntCompensator-s shall only be set to one of the NonlinearShuntCompenstorPoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPoint-s.
    '''

    switchOnCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switch on count since the capacitor count was last reset or initialized.
    '''

    switchOnDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date and time when the capacitor bank was last switched on.
    '''

    aVRDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An automatic voltage regulation delay (AVRDelay) which is the time delay
    from a change in voltage to when the capacitor is allowed to change state.
    This filters out temporary changes in voltage.
    '''

    nomU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The voltage at which the nominal reactive power may be calculated. This
    should normally be within 10% of the voltage at which the capacitor is
    connected to the network.
    '''

    phaseConnection: Optional[ PhaseShuntConnectionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of phase connection, such as wye or delta.
    '''

    voltageSensitivity: Optional[ float | VoltagePerReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage sensitivity required for the device to regulate the bus voltage,
    in voltage/reactive power.
    '''

    ShuntCompensatorAction: Optional[ShuntCompensatorAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ShuntCompensatorAction.ShuntCompensator',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The shunt compensator action that is performed on the shunt compensator
    '''

    ShuntCompensatorPhase: list[ShuntCompensatorPhase] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ShuntCompensatorPhase.ShuntCompensator',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The individual phases models for the shunt compensator.
    '''

    SvShuntCompensatorSections: list[SvShuntCompensatorSections] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SvShuntCompensatorSections.ShuntCompensator',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The state for the number of shunt compensator sections in service.
    '''

@dataclass(repr=False)
class LinearShuntCompensator(ShuntCompensator):
    '''
    A linear shunt compensator has banks or sections with equal admittance
    values.
    '''

    b0PerSection: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence shunt (charging) susceptance per section.
    '''

    bPerSection: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) susceptance per section.
    '''

    g0PerSection: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence shunt (charging) conductance per section.
    '''

    gPerSection: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) conductance per section.
    '''

@dataclass(repr=False)
class NonlinearShuntCompensator(ShuntCompensator):
    '''
    A non linear shunt compensator has bank or section admittance values that
    differ. The attributes g, b, g0 and b0 of the associated NonlinearShuntCompensatorPoint
    describe the total conductance and admittance of a NonlinearShuntCompensatorPoint
    at a section number specified by NonlinearShuntCompensatorPoint.sectionNumber.
    '''

    NonlinearShuntCompensatorPoints: list[NonlinearShuntCompensatorPoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NonlinearShuntCompensatorPoint.NonlinearShuntCompensator',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All points of the non-linear shunt compensator.
    '''

@dataclass(repr=False)
class StaticVarCompensator(RegulatingCondEq):
    '''
    A facility for providing variable and controllable shunt reactive power.
    The SVC typically consists of a stepdown transformer, filter, thyristor-controlled
    reactor, and thyristor-switched capacitor arms.
    The SVC may operate in fixed MVar output mode or in voltage control mode.
    When in voltage control mode, the output of the SVC will be proportional
    to the deviation of voltage at the controlled bus from the voltage setpoint.
    The SVC characteristic slope defines the proportion. If the voltage at
    the controlled bus is equal to the voltage setpoint, the SVC MVar output
    is zero.
    '''

    capacitiveRating: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Capacitive reactance at maximum capacitive reactive power. Shall always
    be positive.
    '''

    inductiveRating: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Inductive reactance at maximum inductive reactive power. Shall always be
    negative.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''

    slope: Optional[ float | VoltagePerReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The characteristics slope of an SVC defines how the reactive power output
    changes in proportion to the difference between the regulated bus voltage
    and the voltage setpoint.
    The attribute shall be a positive value or zero.
    '''

    sVCControlMode: Optional[ SVCControlMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    SVC control mode.
    '''

    voltageSetPoint: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactive power output of the SVC is proportional to the difference
    between the voltage at the regulated bus and the voltage setpoint. When
    the regulated bus voltage is equal to the voltage setpoint, the reactive
    power output is zero.
    '''

    StaticVarCompensatorDynamics: Optional[StaticVarCompensatorDynamics] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StaticVarCompensatorDynamics.StaticVarCompensator',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Static Var Compensator dynamics model used to describe dynamic behaviour
    of this Static Var Compensator.
    '''

@dataclass(repr=False)
class EquivalentEquipment(ConductingEquipment):
    '''
    The class represents equivalent objects that are the result of a network
    reduction. The class is the base for equivalent objects of different types.
    '''

    EquivalentNetwork: Optional[EquivalentNetwork] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EquivalentNetwork.EquivalentEquipments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The equivalent where the reduced model belongs.
    '''

@dataclass(repr=False)
class EquivalentBranch(EquivalentEquipment):
    '''
    The class represents equivalent branches. In cases where a transformer
    phase shift is modelled and the EquivalentBranch is spanning the same nodes,
    the impedance quantities for the EquivalentBranch shall consider the needed
    phase shift.
    '''

    negativeR12: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence series resistance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''

    negativeR21: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence series resistance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''

    negativeX12: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence series reactance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''

    negativeX21: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence series reactance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    Usage: EquivalentBranch is a result of network reduction prior to the data
    exchange.
    '''

    positiveR12: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series resistance from terminal sequence 1 to terminal
    sequence 2 . Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''

    positiveR21: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series resistance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''

    positiveX12: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series reactance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''

    positiveX21: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series reactance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series resistance of the reduced branch.
    '''

    r21: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance from terminal sequence 2 to terminal sequence 1 .Used for steady
    state power flow. This attribute is optional and represent unbalanced network
    such as off-nominal phase shifter. If only EquivalentBranch.r is given,
    then EquivalentBranch.r21 is assumed equal to EquivalentBranch.r.
    Usage rule : EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series reactance of the reduced branch.
    '''

    x21: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactance from terminal sequence 2 to terminal sequence 1. Used for steady
    state power flow. This attribute is optional and represents an unbalanced
    network such as off-nominal phase shifter. If only EquivalentBranch.x is
    given, then EquivalentBranch.x21 is assumed equal to EquivalentBranch.x.
    Usage rule: EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''

    zeroR12: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series resistance from terminal sequence 1 to terminal sequence
    2. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''

    zeroR21: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series resistance from terminal sequence 2 to terminal sequence
    1. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''

    zeroX12: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series reactance from terminal sequence 1 to terminal sequence
    2. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''

    zeroX21: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series reactance from terminal sequence 2 to terminal sequence
    1. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''

@dataclass(repr=False)
class EquivalentInjection(EquivalentEquipment):
    '''
    This class represents equivalent injections (generation or load). Voltage
    regulation is allowed only at the point of connection.
    '''

    regulationCapability: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies whether or not the EquivalentInjection has the capability to
    regulate the local voltage. If true the EquivalentInjection can regulate.
    If false the EquivalentInjection cannot regulate. ReactiveCapabilityCurve
    can only be associated with EquivalentInjection if the flag is true.
    '''

    regulationStatus: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the regulation status of the EquivalentInjection. True is regulating.
    False is not regulating.
    '''

    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum active power of the injection.
    '''

    maxQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum reactive power of the injection. Used for modelling of infeed for
    load flow exchange. Not used for short circuit modelling. If maxQ and minQ
    are not used ReactiveCapabilityCurve can be used.
    '''

    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum active power of the injection.
    '''

    minQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum reactive power of the injection. Used for modelling of infeed for
    load flow exchange. Not used for short circuit modelling. If maxQ and minQ
    are not used ReactiveCapabilityCurve can be used.
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Equivalent active power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for steady state solutions.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Equivalent reactive power injection. Load sign convention is used, i.e.
    positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence resistance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence resistance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''

    r2: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence resistance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''

    regulationTarget: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The target voltage for voltage regulation. The attribute shall be a positive
    value.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence reactance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence reactance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''

    x2: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Negative sequence reactance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''

    ReactiveCapabilityCurve: Optional[ReactiveCapabilityCurve] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReactiveCapabilityCurve.EquivalentInjection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactive capability curve used by this equivalent injection.
    '''

@dataclass(repr=False)
class EquivalentShunt(EquivalentEquipment):
    '''
    The class represents equivalent shunts.
    '''

    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt susceptance.
    '''

    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt conductance.
    '''

@dataclass(repr=False)
class Ground(ConductingEquipment):
    '''
    A point where the system is grounded used for connecting conducting equipment
    to ground. The power system model can have any number of grounds.
    '''

    GroundAction: Optional[GroundAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GroundAction.Ground',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Action taken with this ground.
    '''

@dataclass(repr=False)
class PowerTransformer(ConductingEquipment):
    '''
    An electrical device consisting of two or more coupled windings, with or
    without a magnetic core, for introducing mutual coupling between electric
    circuits. Transformers can be used to control voltage and phase shift (active
    power flow).
    A power transformer may be composed of separate transformer tanks that
    need not be identical.
    A power transformer can be modelled with or without tanks and is intended
    for use in both balanced and unbalanced representations. A power transformer
    typically has two terminals, but may have one (grounding), three or more
    terminals.
    The inherited association ConductingEquipment.BaseVoltage should not be
    used. The association from TransformerEnd to BaseVoltage should be used
    instead.
    '''

    isPartOfGeneratorUnit: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates whether the machine is part of a power station unit. Used for
    short circuit data exchange according to IEC 60909. It has an impact on
    how the correction factors are calculated for transformers, since the transformer
    is not necessarily part of a synchronous machine and generating unit. It
    is not always possible to derive this information from the model. This
    is why the attribute is necessary.
    '''

    operationalValuesConsidered: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    It is used to define if the data (other attributes related to short circuit
    data exchange) defines long term operational conditions or not. Used for
    short circuit data exchange according to IEC 60909.
    '''

    vectorGroup: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Vector group of the transformer for protective relaying, e.g., Dyn1. For
    unbalanced transformers, this may not be simply determined from the constituent
    winding connections and phase angle displacements.
    The vectorGroup string consists of the following components in the order
    listed: high voltage winding connection, mid voltage winding connection
    (for three winding transformers), phase displacement clock number from
    0 to 11, low voltage winding connection
    phase displacement clock number from 0 to 11. The winding connections are
    D (delta), Y (wye), YN (wye with neutral), Z (zigzag), ZN (zigzag with
    neutral), A (auto transformer). Upper case means the high voltage, lower
    case mid or low. The high voltage winding always has clock position 0 and
    is not included in the vector group string. Some examples: YNy0 (two winding
    wye to wye with no phase displacement), YNd11 (two winding wye to delta
    with 330 degrees phase displacement), YNyn0d5 (three winding transformer
    wye with neutral high voltage, wye with neutral mid voltage and no phase
    displacement, delta low voltage with 150 degrees displacement).
    Phase displacement is defined as the angular difference between the phasors
    representing the voltages between the neutral point (real or imaginary)
    and the corresponding terminals of two windings, a positive sequence voltage
    system being applied to the high-voltage terminals, following each other
    in alphabetical sequence if they are lettered, or in numerical sequence
    if they are numbered: the phasors are assumed to rotate in a counter-clockwise
    sense.
    '''

    beforeShCircuitHighestOperatingCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The highest operating current (Ib in IEC 60909-0) before short circuit
    (depends on network configuration and relevant reliability philosophy).
    It is used for calculation of the impedance correction factor KT defined
    in IEC 60909-0.
    '''

    beforeShCircuitHighestOperatingVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The highest operating voltage (Ub in IEC 60909-0) before short circuit.
    It is used for calculation of the impedance correction factor KT defined
    in IEC 60909-0. This is worst case voltage on the low side winding (3.7.1
    of IEC 60909:2001). Used to define operating conditions.
    '''

    beforeShortCircuitAnglePf: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The angle of power factor before short circuit (phib in IEC 60909-0). It
    is used for calculation of the impedance correction factor KT defined in
    IEC 60909-0. This is the worst case power factor. Used to define operating
    conditions.
    '''

    highSideMinOperatingU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum operating voltage (uQmin in IEC 60909-0) at the high voltage
    side (Q side) of the unit transformer of the power station unit. A value
    well established from long-term operating experience of the system. It
    is used for calculation of the impedance correction factor KG defined in
    IEC 60909-0.
    '''

    PowerTransformerEnd: list[PowerTransformerEnd] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PowerTransformerEnd.PowerTransformer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ends of this power transformer.
    '''

    TransformerTanks: list[TransformerTank] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerTank.PowerTransformer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All transformers that belong to this bank.
    '''

@dataclass(repr=False)
class MktPowerTransformer(PowerTransformer):
    '''
    Subclass of IEC61970:Wires:PowerTransformer.
    '''

    EndAFlow: Optional[BranchEndFlow] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BranchEndFlow.MktPowerTransformerEndAFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    EndBFlow: Optional[BranchEndFlow] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BranchEndFlow.MktPowerTransformerEndBFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Flowgate: list[Flowgate] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Flowgate.MktPowerTransformer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class SeriesCompensator(ConductingEquipment):
    '''
    A Series Compensator is a series capacitor or reactor or an AC transmission
    line without charging susceptance. It is a two terminal device.
    '''

    varistorPresent: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Describe if a metal oxide varistor (mov) for over voltage protection is
    configured in parallel with the series compensator. It is used for short
    circuit calculations.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence resistance.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence resistance.
    '''

    varistorRatedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum current the varistor is designed to handle at specified duration.
    It is used for short circuit calculations and exchanged only if SeriesCompensator.varistorPresent
    is true.
    The attribute shall be a positive value.
    '''

    varistorVoltageThreshold: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The dc voltage at which the varistor starts conducting. It is used for
    short circuit calculations and exchanged only if SeriesCompensator.varistorPresent
    is true.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence reactance.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence reactance.
    '''

@dataclass(repr=False)
class MktSeriesCompensator(SeriesCompensator):
    '''
    Subclass of IEC 61970:Wires:SeriesCompensator.
    '''

    EndAFlow: Optional[BranchEndFlow] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BranchEndFlow.MktSeriresCompensatorEndAFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    EndBFlow: Optional[BranchEndFlow] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BranchEndFlow.MktSeriesCompensatorEndBFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Switch(ConductingEquipment):
    '''
    A generic device designed to close, or open, or both, one or more electric
    circuits. All switches are two terminal devices including grounding switches.
    The ACDCTerminal.connected at the two sides of the switch shall not be
    considered for assessing switch connectivity, i.e. only Switch.open, .normalOpen
    and .locked are relevant.
    '''

    locked: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the switch is locked. The resulting switch state is a combination
    of locked and Switch.open attributes as follows:
    <ul>
    <li>locked=true and Switch.open=true. The resulting state is open and locked;</li>
    <li>locked=false and Switch.open=true. The resulting state is open;</li>
    <li>locked=false and Switch.open=false. The resulting state is closed.</li>
    </ul>
    '''

    normalOpen: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The attribute is used in cases when no Measurement for the status value
    is present. If the Switch has a status measurement the Discrete.normalValue
    is expected to match with the Switch.normalOpen.
    '''

    open: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The attribute tells if the switch is considered open when used as input
    to topology processing.
    '''

    retained: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Branch is retained in the topological solution. The flow through retained
    switches will normally be calculated in power flow.
    '''

    switchOnCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switch on count since the switch was last reset or initialized.
    '''

    switchOnDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date and time when the switch was last switched on.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum continuous current carrying capacity in amps governed by the
    device material and construction.
    The attribute shall be a positive value.
    '''

    CompositeSwitch: Optional[CompositeSwitch] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CompositeSwitch.Switches',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Composite switch to which this Switch belongs.
    '''

    ConnectDisconnectFunctions: list[ConnectDisconnectFunction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConnectDisconnectFunction.Switches',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SvSwitch: list[SvSwitch] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SvSwitch.Switch',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switch state associated with the switch.
    '''

    SwitchAction: Optional[SwitchAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchAction.OperatedSwitch',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Action changing status of this switch.
    '''

    SwitchPhase: list[SwitchPhase] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchPhase.Switch',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The individual switch phases for the switch.
    '''

    SwitchSchedules: list[SwitchSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchSchedule.Switch',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A Switch can be associated with SwitchSchedules.
    '''

@dataclass(repr=False)
class Cut(Switch):
    '''
    A cut separates a line segment into two parts. The cut appears as a switch
    inserted between these two parts and connects them together. As the cut
    is normally open there is no galvanic connection between the two line segment
    parts. But it is possible to close the cut to get galvanic connection.
    The cut terminals are oriented towards the line segment terminals with
    the same sequence number. Hence the cut terminal with sequence number equal
    to 1 is oriented to the line segment's terminal with sequence number equal
    to 1.
    The cut terminals also act as connection points for jumpers and other equipment,
    e.g. a mobile generator. To enable this, connectivity nodes are placed
    at the cut terminals. Once the connectivity nodes are in place any conducting
    equipment can be connected at them.
    '''

    lengthFromTerminal1: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The length to the place where the cut is located starting from side one
    of the cut line segment, i.e. the line segment Terminal with sequenceNumber
    equal to 1.
    '''

    ACLineSegment: Optional[ACLineSegment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.Cut',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The line segment to which the cut is applied.
    '''

    CutAction: Optional[CutAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CutAction.Cut',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Action taken with this cut.
    '''

@dataclass(repr=False)
class Disconnector(Switch):
    '''
    A manually operated or motor operated mechanical switching device used
    for changing the connections in a circuit, or for isolating a circuit or
    equipment from a source of power. It is required to open or close circuits
    when negligible current is broken or made.
    '''

@dataclass(repr=False)
class Fuse(Switch):
    '''
    An overcurrent protective device with a circuit opening fusible part that
    is heated and severed by the passage of overcurrent through it. A fuse
    is considered a switching device because it breaks current.
    '''

@dataclass(repr=False)
class GroundDisconnector(Switch):
    '''
    A manually operated or motor operated mechanical switching device used
    for isolating a circuit or equipment from ground.
    '''

@dataclass(repr=False)
class Jumper(Switch):
    '''
    A short section of conductor with negligible impedance which can be manually
    removed and replaced if the circuit is de-energized. Note that zero-impedance
    branches can potentially be modelled by other equipment types.
    '''

    JumperAction: Optional[JumperAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'JumperAction.Jumper',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Action taken with this jumper.
    '''

@dataclass(repr=False)
class ProtectedSwitch(Switch):
    '''
    A ProtectedSwitch is a switching device that can be operated by ProtectionEquipment.
    '''

    breakingCapacity: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum fault current a breaking device can break safely under prescribed
    conditions of use.
    '''

    OperatedByProtectionEquipment: list[ProtectionEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectionEquipment.ProtectedSwitches',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Protection equipments that operate this ProtectedSwitch.
    '''

    RecloseSequences: list[RecloseSequence] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RecloseSequence.ProtectedSwitch',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A breaker may have zero or more automatic reclosures after a trip occurs.
    '''

@dataclass(repr=False)
class Breaker(ProtectedSwitch):
    '''
    A mechanical switching device capable of making, carrying, and breaking
    currents under normal circuit conditions and also making, carrying for
    a specified time, and breaking currents under specified abnormal circuit
    conditions e.g. those of short circuit.
    '''

    inTransitTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The transition time from open to close.
    '''

@dataclass(repr=False)
class DisconnectingCircuitBreaker(Breaker):
    '''
    A circuit breaking device including disconnecting function, eliminating
    the need for separate disconnectors.
    '''

@dataclass(repr=False)
class LoadBreakSwitch(ProtectedSwitch):
    '''
    A mechanical switching device capable of making, carrying, and breaking
    currents under normal operating conditions.
    '''

@dataclass(repr=False)
class Recloser(ProtectedSwitch):
    '''
    Pole-mounted fault interrupter with built-in phase and ground relays, current
    transformer (CT), and supplemental controls.
    '''

@dataclass(repr=False)
class Sectionaliser(Switch):
    '''
    Automatic switch that will lock open to isolate a faulted section. It may,
    or may not, have load breaking capability. Its primary purpose is to provide
    fault sectionalising at locations where the fault current is either too
    high, or too low, for proper coordination of fuses.
    '''

@dataclass(repr=False)
class DCConductingEquipment(Equipment):
    '''
    The parts of the DC power system that are designed to carry current or
    that are conductively connected through DC terminals.
    '''

    ratedUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated DC device voltage. The attribute shall be a positive value. It is
    configuration data used in power flow.
    '''

    DCTerminals: list[DCTerminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCTerminal.DCConductingEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A DC conducting equipment has DC terminals.
    '''

    ProtectiveActionAdjustment: list[ProtectiveActionAdjustment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectiveActionAdjustment.DCConductingEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class DCBusbar(DCConductingEquipment):
    '''
    A busbar within a DC system.
    '''

@dataclass(repr=False)
class DCChopper(DCConductingEquipment):
    '''
    Low resistance equipment used in the internal DC circuit to balance voltages.
    It has typically positive and negative pole terminals and a ground.
    '''

@dataclass(repr=False)
class DCGround(DCConductingEquipment):
    '''
    A ground within a DC system.
    '''

    inductance: Optional[ float | Inductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Inductance to ground.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance to ground.
    '''

@dataclass(repr=False)
class DCLineSegment(DCConductingEquipment):
    '''
    A wire or combination of wires not insulated from one another, with consistent
    electrical characteristics, used to carry direct current between points
    in the DC region of the power system.
    '''

    capacitance: Optional[ float | Capacitance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Capacitance of the DC line segment. Significant for cables only.
    '''

    inductance: Optional[ float | Inductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Inductance of the DC line segment. Negligible compared with DCSeriesDevice
    used for smoothing.
    '''

    length: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Segment length for calculating line section capabilities.
    '''

    resistance: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance of the DC line segment.
    '''

    PerLengthParameter: Optional[PerLengthDCLineParameter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PerLengthDCLineParameter.DCLineSegments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Set of per-length parameters for this line segment.
    '''

@dataclass(repr=False)
class DCSeriesDevice(DCConductingEquipment):
    '''
    A series device within the DC system, typically a reactor used for filtering
    or smoothing. Needed for transient and short circuit studies.
    '''

    inductance: Optional[ float | Inductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Inductance of the device.
    '''

    resistance: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance of the DC device.
    '''

@dataclass(repr=False)
class DCShunt(DCConductingEquipment):
    '''
    A shunt device within the DC system, typically used for filtering. Needed
    for transient and short circuit studies.
    '''

    capacitance: Optional[ float | Capacitance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Capacitance of the DC shunt.
    '''

    resistance: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance of the DC device.
    '''

@dataclass(repr=False)
class DCSwitch(DCConductingEquipment):
    '''
    A switch within the DC system.
    '''

@dataclass(repr=False)
class DCBreaker(DCSwitch):
    '''
    A breaker within a DC system.
    '''

@dataclass(repr=False)
class DCDisconnector(DCSwitch):
    '''
    A disconnector within a DC system.
    '''

@dataclass(repr=False)
class GeneratingUnit(Equipment):
    '''
    A single or set of synchronous machines for converting mechanical power
    into alternating-current power. For example, individual machines within
    a set may be defined for scheduling purposes while a single control signal
    is derived for the set. In this case there would be a GeneratingUnit for
    each member of the set and an additional GeneratingUnit corresponding to
    the set.
    '''

    longPF: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generating unit long term economic participation factor.
    '''

    normalPF: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generating unit economic participation factor. The sum of the participation
    factors across generating units does not have to sum to one. It is used
    for representing distributed slack participation factor. The attribute
    shall be a positive value or zero.
    '''

    penaltyFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Defined as: 1 / ( 1 - Incremental Transmission Loss); with the Incremental
    Transmission Loss expressed as a plus or minus value. The typical range
    of penalty factors is (0.9 to 1.1).
    '''

    shortPF: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generating unit short term economic participation factor.
    '''

    tieLinePF: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generating unit economic participation factor.
    '''

    allocSpinResP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The planned unused capacity (spinning reserve) which can be used to support
    emergency load.
    '''

    autoCntrlMarginP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The planned unused capacity which can be used to support automatic control
    overruns.
    '''

    baseP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For dispatchable units, this value represents the economic active power
    basepoint, for units that are not dispatchable, this value represents the
    fixed generation value. The value shall be between the operating low and
    high limits.
    '''

    controlDeadband: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit control error deadband. When a unit's desired active power change
    is less than this deadband, then no control pulses will be sent to the
    unit.
    '''

    controlPulseHigh: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pulse high limit which is the largest control pulse that the unit can respond
    to.
    '''

    controlPulseLow: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pulse low limit which is the smallest control pulse that the unit can respond
    to.
    '''

    controlResponseRate: Optional[ float | ActivePowerChangeRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit response rate which specifies the active power change for a control
    pulse of one second in the most responsive loading level of the unit.
    '''

    efficiency: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The efficiency of the unit in converting mechanical energy, from the prime
    mover, into electrical energy.
    '''

    genControlMode: Optional[ GeneratorControlMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit control mode.
    '''

    genControlSource: Optional[ GeneratorControlSource ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The source of controls for a generating unit. Defines the control status
    of the generating unit.
    '''

    governorMPL: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Governor motor position limit.
    '''

    governorSCD: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Governor Speed Changer Droop. This is the change in generator power output
    divided by the change in frequency normalized by the nominal power of the
    generator and the nominal frequency and expressed in percent and negated.
    A positive value of speed change droop provides additional generator output
    upon a drop in frequency.
    '''

    highControlLimit: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    High limit for secondary (AGC) control.
    '''

    initialP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Default initial active power which is used to store a powerflow result
    for the initial active power for this unit in this network configuration.
    '''

    lowControlLimit: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Low limit for secondary (AGC) control.
    '''

    lowerRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The normal maximum rate the generating unit active power output can be
    lowered by control actions.
    '''

    maxEconomicP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum high economic active power limit, that should not exceed the maximum
    operating active power limit.
    '''

    maximumAllowableSpinningReserve: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum allowable spinning reserve. Spinning reserve will never be considered
    greater than this value regardless of the current operating point.
    '''

    maxOperatingP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the maximum operating active power limit the dispatcher can enter
    for this unit.
    '''

    minEconomicP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Low economic active power limit that shall be greater than or equal to
    the minimum operating active power limit.
    '''

    minimumOffTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum time interval between unit shutdown and startup.
    '''

    minOperatingP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the minimum operating active power limit the dispatcher can enter
    for this unit.
    '''

    modelDetail: Optional[ int | Classification ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Detail level of the generator model data.
    '''

    nominalP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The nominal power of the generating unit. Used to give precise meaning
    to percentage based attributes such as the governor speed change droop
    (governorSCD attribute).
    The attribute shall be a positive value equal to or less than RotatingMachine.ratedS.
    '''

    raiseRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The normal maximum rate the generating unit active power output can be
    raised by control actions.
    '''

    ratedGrossMaxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit's gross rated maximum capacity (book value).
    The attribute shall be a positive value.
    '''

    ratedGrossMinP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The gross rated minimum generation level which the unit can safely operate
    at while delivering power to the transmission grid.
    The attribute shall be a positive value.
    '''

    ratedNetMaxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The net rated maximum capacity determined by subtracting the auxiliary
    power used to operate the internal plant machinery from the rated gross
    maximum capacity.
    The attribute shall be a positive value.
    '''

    startupCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The initial startup cost incurred for each start of the GeneratingUnit.
    '''

    startupTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time it takes to get the unit on-line, from the time that the prime mover
    mechanical power is applied.
    '''

    totalEfficiency: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The efficiency of the unit in converting the fuel into electrical energy.
    '''

    variableCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The variable cost component of production per unit of ActivePower.
    '''

    ControlAreaGeneratingUnit: list[ControlAreaGeneratingUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ControlAreaGeneratingUnit.GeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    ControlArea specifications for this generating unit.
    '''

    GenUnitOpCostCurves: list[GenUnitOpCostCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'GenUnitOpCostCurve.GeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A generating unit may have one or more cost curves, depending upon fuel
    mixture and fuel cost.
    '''

    GenUnitOpSchedule: Optional[GenUnitOpSchedule] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GenUnitOpSchedule.GeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A generating unit may have an operating schedule, indicating the planned
    operation of the unit.
    '''

    GrossToNetActivePowerCurves: list[GrossToNetActivePowerCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'GrossToNetActivePowerCurve.GeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A generating unit may have a gross active power to net active power curve,
    describing the losses and auxiliary power requirements of the unit.
    '''

    RotatingMachine: list[RotatingMachine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RotatingMachine.GeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A synchronous machine may operate as a generator and as such becomes a
    member of a generating unit.
    '''

@dataclass(repr=False)
class HydroGeneratingUnit(GeneratingUnit):
    '''
    A generating unit whose prime mover is a hydraulic turbine (e.g., Francis,
    Pelton, Kaplan).
    '''

    dropHeight: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The height water drops from the reservoir mid-point to the turbine.
    '''

    energyConversionCapability: Optional[ HydroEnergyConversionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy conversion capability for generating.
    '''

    hydroUnitWaterCost: Optional[ float | CostPerVolume ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The equivalent cost of water that drives the hydro turbine.
    '''

    turbineType: Optional[ HydroTurbineKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of turbine.
    '''

    HydroGeneratingEfficiencyCurves: list[HydroGeneratingEfficiencyCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'HydroGeneratingEfficiencyCurve.HydroGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A hydro generating unit has an efficiency curve.
    '''

    HydroPowerPlant: Optional[HydroPowerPlant] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HydroPowerPlant.HydroGeneratingUnits',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hydro generating unit belongs to a hydro power plant.
    '''

    PenstockLossCurve: Optional[PenstockLossCurve] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PenstockLossCurve.HydroGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A hydro generating unit has a penstock loss curve.
    '''

    TailbayLossCurve: list[TailbayLossCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TailbayLossCurve.HydroGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A hydro generating unit has a tailbay loss curve.
    '''

@dataclass(repr=False)
class MktGeneratingUnit(GeneratingUnit):
    '''
    Subclass of IEC61970:Production:GeneratingUnit.
    '''

    GeneratingUnitDynamicValues: list[GeneratingUnitDynamicValues] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'GeneratingUnitDynamicValues.MktGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class NuclearGeneratingUnit(GeneratingUnit):
    '''
    A nuclear generating unit.
    '''

@dataclass(repr=False)
class SolarGeneratingUnit(GeneratingUnit):
    '''
    A solar thermal generating unit, connected to the grid by means of a rotating
    machine. This class does not represent photovoltaic (PV) generation.
    '''

@dataclass(repr=False)
class ThermalGeneratingUnit(GeneratingUnit):
    '''
    A generating unit whose prime mover could be a steam turbine, combustion
    turbine, or diesel engine.
    '''

    oMCost: Optional[ float | CostPerHeatUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Operating and maintenance cost for the thermal unit.
    '''

    CAESPlant: Optional[CAESPlant] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CAESPlant.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may be a member of a compressed air energy storage
    plant.
    '''

    CogenerationPlant: Optional[CogenerationPlant] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CogenerationPlant.ThermalGeneratingUnits',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may be a member of a cogeneration plant.
    '''

    CombinedCyclePlant: Optional[CombinedCyclePlant] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CombinedCyclePlant.ThermalGeneratingUnits',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may be a member of a combined cycle plant.
    '''

    EmissionCurves: list[EmissionCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EmissionCurve.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have one or more emission curves.
    '''

    EmmissionAccounts: list[EmissionAccount] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EmissionAccount.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have one or more emission allowance accounts.
    '''

    FossilFuels: list[FossilFuel] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FossilFuel.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have one or more fossil fuels.
    '''

    FuelAllocationSchedules: list[FuelAllocationSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FuelAllocationSchedule.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have one or more fuel allocation schedules.
    '''

    HeatInputCurve: Optional[HeatInputCurve] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HeatInputCurve.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have a heat input curve.
    '''

    HeatRateCurve: Optional[HeatRateCurve] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HeatRateCurve.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have a heat rate curve.
    '''

    IncrementalHeatRateCurve: Optional[IncrementalHeatRateCurve] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IncrementalHeatRateCurve.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have an incremental heat rate curve.
    '''

    ShutdownCurve: Optional[ShutdownCurve] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ShutdownCurve.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have a shutdown curve.
    '''

    StartupModel: Optional[StartupModel] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StartupModel.ThermalGeneratingUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have a startup model.
    '''

@dataclass(repr=False)
class WindGeneratingUnit(GeneratingUnit):
    '''
    A wind driven generating unit, connected to the grid by means of a rotating
    machine. May be used to represent a single turbine or an aggregation.
    '''

    windGenUnitType: Optional[ WindGenUnitKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The kind of wind generating unit.
    '''

@dataclass(repr=False)
class HydroPump(Equipment):
    '''
    A synchronous motor-driven pump, typically associated with a pumped storage
    plant.
    '''

    pumpDischAtMaxHead: Optional[ float | VolumeFlowRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The pumping discharge under maximum head conditions, usually at full gate.
    '''

    pumpDischAtMinHead: Optional[ float | VolumeFlowRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The pumping discharge under minimum head conditions, usually at full gate.
    '''

    pumpPowerAtMaxHead: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The pumping power under maximum head conditions, usually at full gate.
    '''

    pumpPowerAtMinHead: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The pumping power under minimum head conditions, usually at full gate.
    '''

    HydroPowerPlant: Optional[HydroPowerPlant] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HydroPowerPlant.HydroPumps',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hydro pump may be a member of a pumped storage plant or a pump for
    distributing water.
    '''

    HydroPumpOpSchedule: Optional[HydroPumpOpSchedule] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HydroPumpOpSchedule.HydroPump',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hydro pump has a pumping schedule over time, indicating when pumping
    is to occur.
    '''

    RotatingMachine: Optional[RotatingMachine] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RotatingMachine.HydroPump',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The synchronous machine drives the turbine which moves the water from a
    low elevation to a higher elevation. The direction of machine rotation
    for pumping may or may not be the same as for generating.
    '''

@dataclass(repr=False)
class PowerElectronicsUnit(Equipment):
    '''
    A generating unit or battery or aggregation that connects to the AC network
    using power electronics rather than rotating machines.
    '''

    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum active power limit. This is the maximum (nameplate) limit for the
    unit.
    '''

    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum active power limit. This is the minimum (nameplate) limit for the
    unit.
    '''

    PowerElectronicsConnection: Optional[PowerElectronicsConnection] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerElectronicsConnection.PowerElectronicsUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A power electronics unit has a connection to the AC network.
    '''

@dataclass(repr=False)
class BatteryUnit(PowerElectronicsUnit):
    '''
    An electrochemical energy storage device.
    '''

    batteryState: Optional[ BatteryStateKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The current state of the battery (charging, full, etc.).
    '''

    ratedE: Optional[ float | RealEnergy ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Full energy storage capacity of the battery. The attribute shall be a positive
    value.
    '''

    storedE: Optional[ float | RealEnergy ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Amount of energy currently stored. The attribute shall be a positive value
    or zero and lower than BatteryUnit.ratedE.
    '''

@dataclass(repr=False)
class PhotoVoltaicUnit(PowerElectronicsUnit):
    '''
    A photovoltaic device or an aggregation of such devices.
    '''

@dataclass(repr=False)
class PowerElectronicsWindUnit(PowerElectronicsUnit):
    '''
    A wind generating unit that connects to the AC network with power electronics
    rather than rotating machines or an aggregation of such units.
    '''

@dataclass(repr=False)
class ProtectionEquipment(Equipment):
    '''
    An electrical device designed to respond to input conditions in a prescribed
    manner and after specified conditions are met to cause contact operation
    or similar abrupt change in associated electric control circuits, or simply
    to display the detected condition. Protection equipment is associated with
    conducting equipment and usually operate circuit breakers.
    '''

    highLimit: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum allowable value.
    '''

    lowLimit: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum allowable value.
    '''

    powerDirectionFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Direction same as positive active power flow value.
    '''

    relayDelayTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time delay from detection of abnormal conditions to relay operation.
    '''

    unitMultiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit multiplier of the value.
    '''

    unitSymbol: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit of measure of the value.
    '''

    ConductingEquipments: list[ConductingEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConductingEquipment.ProtectionEquipments',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Protection equipment may be used to protect specific conducting equipment.
    '''

    ProtectedSwitches: list[ProtectedSwitch] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectedSwitch.OperatedByProtectionEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Protected switches operated by this ProtectionEquipment.
    '''

    ProtectiveAction: list[ProtectiveAction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectiveAction.ProtectionEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Protective action can emulate the action done by one or more protection
    equipment. In a node breaker model were protective equipment is model this
    association will be used.
    '''

@dataclass(repr=False)
class CurrentRelay(ProtectionEquipment):
    '''
    A device that checks current flow values in any direction or designated
    direction.
    '''

    inverseTimeFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Set true if the current relay has inverse time characteristic.
    '''

    currentLimit1: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current limit number one 1 for inverse time pickup.
    '''

    currentLimit2: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current limit number 2 for inverse time pickup.
    '''

    currentLimit3: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current limit number 3 for inverse time pickup.
    '''

    timeDelay1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Inverse time delay number 1 for current limit number 1.
    '''

    timeDelay2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Inverse time delay number 2 for current limit number 2.
    '''

    timeDelay3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Inverse time delay number 3 for current limit number 3.
    '''

@dataclass(repr=False)
class SynchrocheckRelay(ProtectionEquipment):
    '''
    A device that operates when two AC circuits are within the desired limits
    of frequency, phase angle, and voltage, to permit or to cause the paralleling
    of these two circuits. Used to prevent the paralleling of non-synchronous
    topological islands.
    '''

    maxAngleDiff: Optional[ float | AngleRadians ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum allowable voltage vector phase angle difference across the
    open device.
    '''

    maxFreqDiff: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum allowable frequency difference across the open device.
    '''

    maxVoltDiff: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum allowable difference voltage across the open device.
    '''

@dataclass(repr=False)
class TransformerTank(Equipment):
    '''
    An assembly of two or more coupled windings that transform electrical power
    between voltage levels. These windings are bound on a common core and placed
    in the same tank. Transformer tank can be used to model both single-phase
    and 3-phase transformers.
    '''

    PowerTransformer: Optional[PowerTransformer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerTransformer.TransformerTanks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Bank this transformer belongs to.
    '''

    TransformerObservations: list[TransformerObservation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerObservation.Transformer',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TransformerTankEnds: list[TransformerTankEnd] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerTankEnd.TransformerTank',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All windings of this transformer.
    '''

@dataclass(repr=False)
class Flowgate(PowerSystemResource):
    '''
    A flowgate, is single or group of transmission elements intended to model
    MW flow impact relating to transmission limitations and transmission service
    usage.
    '''

    direction: Optional[ InterTieDirection ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The direction of the flowgate, export or import
    '''

    exportMWRating: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Export MW rating
    '''

    importMWRating: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Import MW rating
    '''

    CongestionRevenueRight: Optional[CongestionRevenueRight] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CongestionRevenueRight.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ConstraintResults: list[ConstraintResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConstraintResults.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ContractDistributionFactor: list[ContractDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ContractDistributionFactor.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    FlowgateRelief: list[FlowgateRelief] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FlowgateRelief.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    FlowgateValue: list[FlowgateValue] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FlowgateValue.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    From_SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.From_Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    FTRs: list[FTR] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FTR.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    GeneratingUnitDynamicValues: list[GeneratingUnitDynamicValues] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'GeneratingUnitDynamicValues.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    GenericConstraints: Optional[GenericConstraints] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GenericConstraints.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    HostControlArea: Optional[HostControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HostControlArea.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    InterTie: list[SchedulingPoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SchedulingPoint.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    InterTieResults: list[InterTieResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'InterTieResults.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktLine: list[MktLine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktLine.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktPowerTransformer: list[MktPowerTransformer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktPowerTransformer.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktTerminal: list[MktTerminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktTerminal.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredInterTie: list[RegisteredInterTie] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredInterTie.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SecurityConstraints: Optional[SecurityConstraints] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SecurityConstraints.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    To_SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.To_Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TranmissionRightEntitlement: list[TransmissionInterfaceRightEntitlement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransmissionInterfaceRightEntitlement.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TransmissionCapacity: list[TransmissionCapacity] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransmissionCapacity.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ViolationLimits: list[ViolationLimit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ViolationLimit.Flowgate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class HostControlArea(PowerSystemResource):
    '''
    A HostControlArea has a set of tie points and a set of generator controls
    (i.e., AGC). It also has a total load, including transmission and distribution
    losses.
    '''

    frequencyBiasFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The control area's frequency bias factor, in MW/0.1 Hz, for automatic generation
    control (AGC)
    '''

    areaControlMode: Optional[ AreaControlMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The area's present control mode: (CF = constant frequency) or (CTL = constant
    tie-line) or (TLB = tie-line bias) or (OFF = off control)
    '''

    freqSetPoint: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The present power system frequency set point for automatic generation control
    '''

    AdjacentCASet: Optional[AdjacentCASet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AdjacentCASet.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    BidSelfSched: list[BidSelfSched] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BidSelfSched.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    CnodeDistributionFactor: list[CnodeDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CnodeDistributionFactor.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Controls: Optional[ControlAreaOperator] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ControlAreaOperator.ControlledBy',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A ControlAreaCompany controls a ControlArea.
    '''

    Flowgate: list[Flowgate] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Flowgate.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    LossClearingResults: list[LossClearingResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LossClearingResults.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RTO: Optional[RTO] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RTO.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SubControlAreas: list[SubControlArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SubControlArea.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The interchange area may operate as a control area
    '''

    SysLoadDistribuFactor: list[SysLoadDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SysLoadDistributionFactor.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TransferInterface: list[TransferInterface] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransferInterface.HostControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class HydroPowerPlant(PowerSystemResource):
    '''
    A hydro power station which can generate or pump. When generating, the
    generator turbines receive water from an upper reservoir. When pumping,
    the pumps receive their water from a lower reservoir.
    '''

    penstockType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type and configuration of hydro plant penstock(s).
    '''

    surgeTankCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A code describing the type (or absence) of surge tank that is associated
    with the hydro power plant.
    '''

    dischargeTravelDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Water travel delay from tailbay to next downstream hydro power station.
    '''

    genRatedP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hydro plant's generating rating active power for rated head conditions.
    The attribute shall be a positive value.
    '''

    hydroPlantStorageType: Optional[ HydroPlantStorageKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of hydro power plant water storage.
    '''

    plantDischargeCapacity: Optional[ float | VolumeFlowRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total plant discharge capacity.
    '''

    plantRatedHead: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The plant's rated gross head.
    The attribute shall be a positive value.
    '''

    pumpRatedP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hydro plant's pumping rating active power for rated head conditions.
    The attribute shall be a positive value.
    '''

    surgeTankCrestLevel: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The level at which the surge tank spills.
    '''

    GenSourcePumpDischargeReservoir: Optional[Reservoir] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Reservoir.UpstreamFromHydroPowerPlants',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generators are supplied water from or pumps discharge water to an upstream
    reservoir.
    '''

    HydroGeneratingUnits: list[HydroGeneratingUnit] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'HydroGeneratingUnit.HydroPowerPlant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hydro generating unit belongs to a hydro power plant.
    '''

    HydroPumps: list[HydroPump] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'HydroPump.HydroPowerPlant',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hydro pump may be a member of a pumped storage plant or a pump for
    distributing water.
    '''

    Reservoir: Optional[Reservoir] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Reservoir.HydroPowerPlants',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generators discharge water to or pumps are supplied water from a downstream
    reservoir.
    '''

@dataclass(repr=False)
class PowerCutZone(PowerSystemResource):
    '''
    An area or zone of the power system which is used for load shedding purposes.
    '''

    cutLevel1: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    First level (amount) of load to cut as a percentage of total zone load.
    '''

    cutLevel2: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Second level (amount) of load to cut as a percentage of total zone load.
    '''

    EnergyConsumers: list[EnergyConsumer] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyConsumer.PowerCutZone',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy consumer is assigned to the power cut zone.
    '''

@dataclass(repr=False)
class PowerElectronicsConnectionPhase(PowerSystemResource):
    '''
    A single phase of a power electronics connection.
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive sign
    means flow into the equipment from the network.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase of this energy producer component. If the energy producer is wye
    connected, the connection is from the indicated phase to the central ground
    or neutral point. If the energy producer is delta connected, the phase
    indicates an energy producer connected from the indicated phase to the
    next logical non-neutral phase.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow into the equipment from the network.
    '''

    PowerElectronicsConnection: Optional[PowerElectronicsConnection] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerElectronicsConnection.PowerElectronicsConnectionPhase',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power electronics connection of this power electronics connection phase.
    '''

@dataclass(repr=False)
class PrimeMover(PowerSystemResource):
    '''
    The machine used to develop mechanical energy used to drive a generator.
    '''

    primeMoverRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rating of prime mover.
    '''

    SynchronousMachines: list[SynchronousMachine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SynchronousMachine.PrimeMovers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Synchronous machines this Prime mover drives.
    '''

@dataclass(repr=False)
class CombustionTurbine(PrimeMover):
    '''
    A prime mover that is typically fuelled by gas or light oil.
    '''

    heatRecoveryFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flag that is set to true if the combustion turbine is associated with a
    heat recovery boiler.
    '''

    ambientTemp: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Default ambient temperature to be used in modelling applications.
    '''

    auxPowerVersusFrequency: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Off-nominal frequency effect on turbine auxiliaries. Per unit reduction
    in auxiliary active power consumption versus per unit reduction in frequency
    (from rated frequency).
    '''

    auxPowerVersusVoltage: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Off-nominal voltage effect on turbine auxiliaries. Per unit reduction in
    auxiliary active power consumption versus per unit reduction in auxiliary
    bus voltage (from a specified voltage level).
    '''

    capabilityVersusFrequency: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Off-nominal frequency effect on turbine capability. Per unit reduction
    in unit active power capability versus per unit reduction in frequency
    (from rated frequency).
    '''

    powerVariationByTemp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Per unit change in power per (versus) unit change in ambient temperature.
    '''

    referenceTemp: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reference temperature at which the output of the turbine was defined.
    '''

    timeConstant: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time constant for the turbine.
    '''

    AirCompressor: Optional[AirCompressor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AirCompressor.CombustionTurbine',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A CAES air compressor is driven by combustion turbine.
    '''

    CTTempActivePowerCurve: Optional[CTTempActivePowerCurve] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CTTempActivePowerCurve.CombustionTurbine',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A combustion turbine may have an active power versus ambient temperature
    relationship.
    '''

    HeatRecoveryBoiler: Optional[HeatRecoveryBoiler] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HeatRecoveryBoiler.CombustionTurbines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A combustion turbine may have a heat recovery boiler for making steam.
    '''

@dataclass(repr=False)
class HydroTurbine(PrimeMover):
    '''
    A water driven prime mover. Typical turbine types are: Francis, Kaplan,
    and Pelton.
    '''

    gateRateLimit: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Gate rate limit.
    '''

    gateUpperLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Gate upper limit.
    '''

    maxHeadMaxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum efficiency active power at maximum head conditions.
    '''

    minHeadMaxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum efficiency active power at minimum head conditions.
    '''

    speedRating: Optional[ float | RotationSpeed ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated speed in number of revolutions. The attribute shall be a positive
    value.
    '''

    speedRegulation: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Speed regulation.
    '''

    transientDroopTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transient droop time constant.
    '''

    transientRegulation: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transient regulation.
    '''

    turbineRating: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated turbine active power. The attribute shall be a positive value.
    '''

    turbineType: Optional[ HydroTurbineKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of turbine.
    '''

    waterStartingTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Water starting time.
    '''

@dataclass(repr=False)
class SteamTurbine(PrimeMover):
    '''
    Steam turbine.
    '''

    shaft1PowerHP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fraction of power from shaft 1 high pressure turbine output.
    '''

    shaft1PowerIP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fraction of power from shaft 1 intermediate pressure turbine output.
    '''

    shaft1PowerLP1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fraction of power from shaft 1 first low pressure turbine output.
    '''

    shaft1PowerLP2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fraction of power from shaft 1 second low pressure turbine output.
    '''

    shaft2PowerHP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fraction of power from shaft 2 high pressure turbine output.
    '''

    shaft2PowerIP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fraction of power from shaft 2 intermediate pressure turbine output.
    '''

    shaft2PowerLP1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fraction of power from shaft 2 first low pressure turbine output.
    '''

    shaft2PowerLP2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fraction of power from shaft 2 second low pressure turbine output.
    '''

    crossoverTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Crossover time constant.
    '''

    reheater1TC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    First reheater time constant.
    '''

    reheater2TC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Second reheater time constant.
    '''

    steamChestTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Steam chest time constant.
    '''

    SteamSupplys: list[SteamSupply] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SteamSupply.SteamTurbines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Steam turbines may have steam supplied by a steam supply.
    '''

@dataclass(repr=False)
class RegisteredResource(PowerSystemResource):
    '''
    A resource that is registered through the market participant registration
    system. Examples include generating unit, load, and non-physical generator
    or load.
    '''

    commercialOpDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resource Commercial Operation Date.
    '''

    dispatchable: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Dispatchable: indicates whether the resource is dispatchable. This implies
    that the resource intends to submit Energy bids/offers or Ancillary Services
    bids/offers, or self-provided schedules.
    '''

    lastModified: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication of the last time this item was modified/versioned.
    '''

    maxBaseSelfSchedQty : Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum base self schedule quantity.
    '''

    maxOnTime: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum on time after start up.
    '''

    minOffTime: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum off time after shut down.
    '''

    minOnTime: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum on time after start up.
    '''

    ACAFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that this resource is associated with an Adjacent Control Area.
    '''

    ASSPOptimizationFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that the resource participates in the optimization process by
    default.
    '''

    contingencyAvailFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Contingent operating reserve availiability (Yes/No). Resource is availiable
    to participate with capacity in contingency dispatch.
    '''

    ECAFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that this resource is associated with an Embedded Control area.
    '''

    flexibleOfferFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flexible offer flag (Y/N).
    '''

    hourlyPredispatch: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates need to dispatch before the start of the operating hour. Only
    relevant in Real-Time Market. Applies to generation, intertie and participating
    load resource. Value (Y/N).
    '''

    isAggregatedRes: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A flag to indicate if a resource is an aggregated resource.
    '''

    LMPMFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    LMPM flag: indicates whether the resource is subject to the LMPM test (Yes/No).
    '''

    marketParticipationFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market Participation flag: indicates whether the resource participate in
    the market.
    '''

    minDispatchTime: Optional[ float | Hours ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum number of consecutive hours a resource shall be dispatched if bid
    is accepted.
    '''

    mustOfferFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Must offer flag: indicates whether the unit is subject to the must offer
    provisions (Y/N).
    '''

    nonMarket: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flag to indicate that the Resource is not participating in the Market Operations.
    '''

    pointOfDeliveryFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that the registered resource is a Point of Delivery (YES) resource
    which implies there is a POD Loss Factor.
    '''

    priceSetFlagDA: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Price setting flag: indicates whether a resource is capable of setting
    the Market Clearing Price (Y) for the DA market, and if not, indicates
    whether the resource shall submit bids for energy at $ 0 (S) or not (N).
    Initially in the RegisteredGenerator class. It was moved to the RegisteredResource
    class for the participating load dispatch purpose.
    '''

    priceSetFlagRT: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Price setting flag: indicates whether a resource is capable of setting
    the Market Clearing Price (Y) for the RT market, and if not, indicates
    whether the resource shall submit bids for energy at $ 0 (S) or not (N).
    Initially in the RegisteredGenerator class. It was moved to the RegisteredResource
    class for the participating load dispatch purpose.
    '''

    registrationStatus: Optional[ ResourceRegistrationStatus ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Registration Status of resource - Active, Mothballed, Planned, or Decommissioned.
    '''

    resourceAdequacyFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that this resource participates in the resource adequacy function.
    '''

    SMPMFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    SMPM flag: indicates whether the resource is subject to the SMPM test (Yes/No).
    '''

    AdjacentCASet: Optional[AdjacentCASet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AdjacentCASet.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AggregateNode: Optional[AggregateNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AggregateNode.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An AggregateNode may be associated with up to many RegisteredResources.
    '''

    ControlAreaDesignation: list[ControlAreaDesignation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ControlAreaDesignation.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DefaultBid: Optional[DefaultBid] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DefaultBid.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Domain: list[Domain] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Domain.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    EnergyMarkets: list[EnergyMarket] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyMarket.RegisteredResources',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    HostControlArea: Optional[HostControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HostControlArea.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Instructions: list[Instructions] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Instructions.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketParticipant: Optional[MarketParticipant] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketParticipant.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktConnectivityNode: Optional[MktConnectivityNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MktConnectivityNode.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Pnode: Optional[Pnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Pnode.RegisteredResources',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A registered resource injects power at one or more connectivity nodes related
    to a pnode
    '''

    Reason: list[Reason] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reason.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ResourceCapacity: list[ResourceCapacity] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ResourceCapacity.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ResourceCertification: list[ResourceCertification] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ResourceCertification.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ResourceGroups: list[ResourceGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ResourceGroup.RegisteredResources',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ResourceVerifiableCosts.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SubControlArea: list[SubControlArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SubControlArea.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.RegisteredResource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class RegisteredGenerator(RegisteredResource):
    '''
    Model of a generator that is registered to participate in the market.
    '''

@dataclass(repr=False)
class RegisteredInterTie(RegisteredResource):
    '''
    This class represents the inter tie resource.
    '''

@dataclass(repr=False)
class RegisteredLoad(RegisteredResource):
    '''
    Model of a load that is registered to participate in the market.
    RegisteredLoad is used to model any load that is served by the wholesale
    market directly. RegisteredLoads may be dispatchable or non-dispatchable
    and may or may not have bid curves. Examples of RegisteredLoads would include:
    distribution company load, energy retailer load, large bulk power system
    connected facility load.
    Loads that are served indirectly, for example - through an energy retailer
    or a vertical utility, should be modeled as RegisteredDistributedResources.
    Examples of RegisteredDistributedResources would include: distribution
    level storage, distribution level generation and distribution level demand
    response.
    '''

@dataclass(repr=False)
class RegulatingControl(PowerSystemResource):
    '''
    Specifies a set of equipment that works together to control a power system
    quantity such as voltage or flow.
    Remote bus voltage control is possible by specifying the controlled terminal
    located at some place remote from the controlling equipment.
    The specified terminal shall be associated with the connectivity node of
    the controlled point. The most specific subtype of RegulatingControl shall
    be used in case such equipment participate in the control, e.g. TapChangerControl
    for tap changers.
    For flow control, load sign convention is used, i.e. positive sign means
    flow out from a TopologicalNode (bus) into the conducting equipment.
    The attribute minAllowedTargetValue and maxAllowedTargetValue are required
    in the following cases:
    - For a power generating module operated in power factor control mode to
    specify maximum and minimum power factor values;
    - Whenever it is necessary to have an off center target voltage for the
    tap changer regulator. For instance, due to long cables to off shore wind
    farms and the need to have a simpler setup at the off shore transformer
    platform, the voltage is controlled from the land at the connection point
    for the off shore wind farm. Since there usually is a voltage rise along
    the cable, there is typical and overvoltage of up 3-4 kV compared to the
    on shore station. Thus in normal operation the tap changer on the on shore
    station is operated with a target set point, which is in the lower parts
    of the dead band.
    The attributes minAllowedTargetValue and maxAllowedTargetValue are not
    related to the attribute targetDeadband and thus they are not treated as
    an alternative of the targetDeadband. They are needed due to limitations
    in the local substation controller. The attribute targetDeadband is used
    to prevent the power flow from move the tap position in circles (hunting)
    that is to be used regardless of the attributes minAllowedTargetValue and
    maxAllowedTargetValue.
    '''

    enabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The flag tells if regulation is enabled.
    '''

    maxAllowedTargetValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum allowed target value (RegulatingControl.targetValue).
    '''

    minAllowedTargetValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum allowed target value (RegulatingControl.targetValue).
    '''

    targetDeadband: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is a deadband used with discrete control to avoid excessive update
    of controls like tap changers and shunt compensator banks while regulating.
    The units of those appropriate for the mode. The attribute shall be a positive
    value or zero. If RegulatingControl.discrete is set to "false", the RegulatingControl.targetDeadband
    is to be ignored.
    Note that for instance, if the targetValue is 100 kV and the targetDeadband
    is 2 kV the range is from 99 to 101 kV.
    '''

    targetValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The target value specified for case input. This value can be used for the
    target value without the use of schedules. The value has the units appropriate
    to the mode attribute.
    '''

    mode: Optional[ RegulatingControlModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The regulating control mode presently available. This specification allows
    for determining the kind of regulation without need for obtaining the units
    from a schedule.
    '''

    monitoredPhase: Optional[ PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase voltage controlling this regulator, measured at regulator location.
    '''

    targetValueUnitMultiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specify the multiplier for used for the targetValue.
    '''

    ProtectiveActionRegulation: list[ProtectiveActionRegulation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectiveActionRegulation.RegulatingControl',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Enable/disable a regulating control or set new target value.
    '''

    RegulatingCondEq: list[RegulatingCondEq] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegulatingCondEq.RegulatingControl',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The equipment that participates in this regulating control scheme.
    '''

    RegulationSchedule: list[RegulationSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegulationSchedule.RegulatingControl',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Schedule for this regulating control.
    '''

    Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.RegulatingControl',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminal associated with this regulating control. The terminal is associated
    instead of a node, since the terminal could connect into either a topological
    node or a connectivity node. Sometimes it is useful to model regulation
    at a terminal of a bus bar object.
    '''

@dataclass(repr=False)
class ShuntCompensatorControl(RegulatingControl):
    '''
    Distribution capacitor bank control settings.
    '''

    branchDirect: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For VAR, amp, or power factor locally controlled shunt impedances, the
    flow direction: in, out.
    '''

    localOffLevel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Upper control setting.
    '''

    localOnLevel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Lower control setting.
    '''

    localOverride: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the locally controlled capacitor has voltage override capability.
    '''

    maxSwitchOperationCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    IdmsShuntImpedanceData.maxNumSwitchOps.
    '''

    normalOpen: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if open is normal status for a fixed capacitor bank, otherwise normal
    status is closed.
    '''

    regBranch: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For VAR, amp, or power factor locally controlled shunt impedances, the
    index of the regulation branch.
    '''

    regBranchEnd: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For VAR, amp, or power factor locally controlled shunt impedances, the
    end of the branch that is regulated. The field has the following values:
    from side, to side, and tertiary (only if the branch is a transformer).
    '''

    vRegLineLine: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if regulated voltages are measured line to line, otherwise they are
    measured line to ground.
    '''

    cellSize: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The size of the individual units that make up the bank.
    '''

    controlKind: Optional[ ShuntImpedanceControlKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of control (if any).
    '''

    highVoltageOverride: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For locally controlled shunt impedances which have a voltage override feature,
    the high voltage override value. If the voltage is above this value, the
    shunt impedance will be turned off regardless of the other local controller
    settings.
    '''

    localControlKind: Optional[ ShuntImpedanceLocalControlKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of local controller.
    '''

    lowVoltageOverride: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For locally controlled shunt impedances which have a voltage override feature,
    the low voltage override value. If the voltage is below this value, the
    shunt impedance will be turned on regardless of the other local controller
    settings.
    '''

    regBranchKind: Optional[ RegulationBranchKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (For VAR, amp, or power factor locally controlled shunt impedances) Kind
    of regulation branch.
    '''

    sensingPhaseCode: Optional[ PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phases that are measured for controlling the device.
    '''

    switchOperationCycle: Optional[ float | Hours ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time interval between consecutive switching operations.
    '''

    ShuntCompensatorInfo: Optional[ShuntCompensatorInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ShuntCompensatorInfo.ShuntCompensatorControl',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class TapChangerControl(RegulatingControl):
    '''
    Describes behaviour specific to tap changers, e.g. how the voltage at the
    end of a line varies with the load level and compensation of the voltage
    drop by tap adjustment.
    '''

    lineDropCompensation: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the line drop compensation is to be applied.
    '''

    limitVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum allowed regulated voltage on the PT secondary, regardless of line
    drop compensation. Sometimes referred to as first-house protection.
    '''

    lineDropR: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Line drop compensator resistance setting for normal (forward) power flow.
    '''

    lineDropX: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Line drop compensator reactance setting for normal (forward) power flow.
    '''

    reverseLineDropR: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Line drop compensator resistance setting for reverse power flow.
    '''

    reverseLineDropX: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Line drop compensator reactance setting for reverse power flow.
    '''

    TapChanger: list[TapChanger] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TapChanger.TapChangerControl',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The tap changers that participates in this regulating tap control scheme.
    '''

@dataclass(repr=False)
class RemoteUnit(PowerSystemResource):
    '''
    A remote unit can be an RTU, IED, substation control system, control centre,
    etc. The communication with the remote unit can be through various standard
    protocols (e.g. IEC 61870, IEC 61850) or non standard protocols (e.g. DNP,
    RP570, etc.). A remote unit contains remote data points that might be telemetered,
    collected or calculated. The RemoteUnit class inherits PowerSystemResource.
    The intention is to allow RemoteUnits to have Measurements. These Measurements
    can be used to model unit status as operational, out of service, unit failure,
    etc.
    '''

    remoteUnitType: Optional[ RemoteUnitType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of remote unit.
    '''

    CommunicationLinks: list[CommunicationLink] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CommunicationLink.RemoteUnits',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    RTUs may be attached to communication links.
    '''

    RemotePoints: list[RemotePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RemotePoint.RemoteUnit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Remote points this Remote unit contains.
    '''

@dataclass(repr=False)
class Reservoir(PowerSystemResource):
    '''
    A water storage facility within a hydro system, including: ponds, lakes,
    lagoons, and rivers. The storage is usually behind some type of dam.
    '''

    energyStorageRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reservoir's energy storage rating in energy for given head conditions.
    '''

    riverOutletWorks: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    River outlet works for riparian right releases or other purposes.
    '''

    spillwayCapacity: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The flow capacity of the spillway in cubic meters per second.
    '''

    spillWayGateType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of spillway gate, including parameters.
    '''

    activeStorageCapacity: Optional[ float | Volume ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Storage volume between the full supply level and the normal minimum operating
    level.
    '''

    fullSupplyLevel: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Full supply level, above which water will spill. This can be the spillway
    crest level or the top of closed gates.
    '''

    grossCapacity: Optional[ float | Volume ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total capacity of reservoir.
    '''

    normalMinOperateLevel: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal minimum operating level below which the penstocks will draw air.
    '''

    spillTravelDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The spillway water travel delay to the next downstream reservoir.
    '''

    spillwayCrestLength: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The length of the spillway crest.
    '''

    spillwayCrestLevel: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Spillway crest level above which water will spill.
    '''

    HydroPowerPlants: list[HydroPowerPlant] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'HydroPowerPlant.Reservoir',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generators discharge water to or pumps are supplied water from a downstream
    reservoir.
    '''

    InflowForecasts: list[InflowForecast] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'InflowForecast.Reservoir',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A reservoir may have a "natural" inflow forecast.
    '''

    LevelVsVolumeCurves: list[LevelVsVolumeCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LevelVsVolumeCurve.Reservoir',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A reservoir may have a level versus volume relationship.
    '''

    SpillsFromReservoir: Optional[Reservoir] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Reservoir.SpillsIntoReservoirs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A reservoir may spill into a downstream reservoir.
    '''

    SpillsIntoReservoirs: list[Reservoir] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reservoir.SpillsFromReservoir',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A reservoir may spill into a downstream reservoir.
    '''

    TargetLevelSchedule: Optional[TargetLevelSchedule] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TargetLevelSchedule.Reservoir',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A reservoir may have a water level target schedule.
    '''

    UpstreamFromHydroPowerPlants: list[HydroPowerPlant] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'HydroPowerPlant.GenSourcePumpDischargeReservoir',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Generators are supplied water from or pumps discharge water to an upstream
    reservoir.
    '''

@dataclass(repr=False)
class ShuntCompensatorPhase(PowerSystemResource):
    '''
    Single phase of a multi-phase shunt compensator when its attributes might
    be different per phase.
    '''

    maximumSections: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum number of sections that may be switched in for this phase.
    '''

    normalSections: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For the capacitor phase, the normal number of sections switched in. The
    value shall be between zero and ShuntCompensatorPhase.maximumSections.
    '''

    sections: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Shunt compensator sections in use. Starting value for steady state solution.
    The attribute shall be a positive value or zero. Non integer values are
    allowed to support continuous variables. The reasons for continuous value
    are to support study cases where no discrete shunt compensators has yet
    been designed, a solutions where a narrow voltage band force the sections
    to oscillate or accommodate for a continuous solution as input.
    For LinearShuntConpensator the value shall be between zero and ShuntCompensatorPhase.maximumSections.
    At value zero the shunt compensator conductance and admittance is zero.
    Linear interpolation of conductance and admittance between the previous
    and next integer section is applied in case of non-integer values.
    For NonlinearShuntCompensator-s shall only be set to one of the NonlinearShuntCompenstorPhasePoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPhasePoint-s.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase of this shunt compensator component. If the shunt compensator is
    wye connected, the connection is from the indicated phase to the central
    ground or neutral point. If the shunt compensator is delta connected, the
    phase indicates a shunt compensator connected from the indicated phase
    to the next logical non-neutral phase.
    '''

    ShuntCompensator: Optional[ShuntCompensator] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ShuntCompensator.ShuntCompensatorPhase',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Shunt compensator of this shunt compensator phase.
    '''

@dataclass(repr=False)
class LinearShuntCompensatorPhase(ShuntCompensatorPhase):
    '''
    A per phase linear shunt compensator has banks or sections with equal admittance
    values.
    '''

    bPerSection: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Susceptance per section of the phase if shunt compensator is wye connected.
    Susceptance per section phase to phase if shunt compensator is delta connected.
    '''

    gPerSection: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conductance per section for this phase if shunt compensator is wye connected.
    Conductance per section phase to phase if shunt compensator is delta connected.
    '''

@dataclass(repr=False)
class NonlinearShuntCompensatorPhase(ShuntCompensatorPhase):
    '''
    A per phase non linear shunt compensator has bank or section admittance
    values that differ. The attributes g and b of the associated NonlinearShuntCompensatorPhasePoint
    describe the total conductance and admittance of a NonlinearShuntCompensatorPhasePoint
    at a section number specified by NonlinearShuntCompensatorPhasePoint.sectionNumber.
    '''

    NonlinearShuntCompensatorPhasePoints: list[NonlinearShuntCompensatorPhasePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NonlinearShuntCompensatorPhasePoint.NonlinearShuntCompensatorPhase',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All points of the non-linear shunt compensator phase.
    '''

@dataclass(repr=False)
class SteamSupply(PowerSystemResource):
    '''
    Steam supply for steam turbine.
    '''

    steamSupplyRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rating of steam supply.
    '''

    SteamTurbines: list[SteamTurbine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SteamTurbine.SteamSupplys',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Steam turbines may have steam supplied by a steam supply.
    '''

@dataclass(repr=False)
class BWRSteamSupply(SteamSupply):
    '''
    Boiling water reactor used as a steam supply to a steam turbine.
    '''

    integralGain: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Integral gain.
    '''

    pressureSetpointGA: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure setpoint gain adjuster.
    '''

    proportionalGain: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Proportional gain.
    '''

    rodPatternConstant: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Constant associated with rod pattern.
    '''

    highPowerLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    High power limit.
    '''

    inCoreThermalTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    In-core thermal time constant.
    '''

    lowerLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Initial lower limit.
    '''

    lowPowerLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Low power limit.
    '''

    pressureLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure limit.
    '''

    pressureSetpointTC1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure setpoint time constant.
    '''

    pressureSetpointTC2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure setpoint time constant.
    '''

    rfAux1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''

    rfAux2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''

    rfAux3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''

    rfAux4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''

    rfAux5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''

    rfAux6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''

    rfAux7: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''

    rfAux8: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''

    rodPattern: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rod pattern.
    '''

    upperLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Initial upper limit.
    '''

@dataclass(repr=False)
class FossilSteamSupply(SteamSupply):
    '''
    Fossil fuelled boiler (e.g., coal, oil, gas).
    '''

    controlErrorBiasP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power error bias ratio.
    '''

    controlIC: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Integral constant.
    '''

    controlPC: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Proportional constant.
    '''

    controlPEB: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure error bias ratio.
    '''

    controlTC: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time constant.
    '''

    feedWaterIG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Feedwater integral gain ratio.
    '''

    feedWaterPG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Feedwater proportional gain ratio.
    '''

    maxErrorRateP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power maximum error rate limit.
    '''

    minErrorRateP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power minimum error rate limit.
    '''

    pressureCtrlDG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure control derivative gain ratio.
    '''

    pressureCtrlIG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure control integral gain ratio.
    '''

    pressureCtrlPG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure control proportional gain ratio.
    '''

    pressureFeedback: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure feedback indicator.
    '''

    superHeater1Capacity: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Drum/primary superheater capacity.
    '''

    superHeater2Capacity: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Secondary superheater capacity.
    '''

    superHeaterPipePD: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Superheater pipe pressure drop constant.
    '''

    auxPowerVersusFrequency: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Off nominal frequency effect on auxiliary real power. Per unit active power
    variation versus per unit frequency variation.
    '''

    auxPowerVersusVoltage: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Off nominal voltage effect on auxiliary real power. Per unit active power
    variation versus per unit voltage variation.
    '''

    boilerControlMode: Optional[ BoilerControlMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The control mode of the boiler.
    '''

    controlPED: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure error deadband.
    '''

    feedWaterTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Feedwater time constant ratio.
    '''

    fuelDemandLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fuel demand limit.
    '''

    fuelSupplyDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fuel delay.
    '''

    fuelSupplyTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fuel supply time constant.
    '''

    mechPowerSensorLag: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Mechanical power sensor lag.
    '''

    throttlePressureSP: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Throttle pressure setpoint.
    '''

@dataclass(repr=False)
class DrumBoiler(FossilSteamSupply):
    '''
    Drum boiler.
    '''

    drumBoilerRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rating of drum boiler in steam units.
    '''

@dataclass(repr=False)
class HeatRecoveryBoiler(FossilSteamSupply):
    '''
    The heat recovery system associated with combustion turbines in order to
    produce steam for combined cycle plants.
    '''

    steamSupplyRating2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The steam supply rating in kilopounds per hour, if dual pressure boiler.
    '''

    CombustionTurbines: list[CombustionTurbine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CombustionTurbine.HeatRecoveryBoiler',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A combustion turbine may have a heat recovery boiler for making steam.
    '''

@dataclass(repr=False)
class Subcritical(FossilSteamSupply):
    '''
    Once-through subcritical boiler.
    '''

@dataclass(repr=False)
class Supercritical(FossilSteamSupply):
    '''
    Once-through supercritical boiler.
    '''

@dataclass(repr=False)
class PWRSteamSupply(SteamSupply):
    '''
    Pressurized water reactor used as a steam supply to a steam turbine.
    '''

    coldLegFBLagTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cold leg feedback lag time constant.
    '''

    coldLegFBLeadTC1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cold leg feedback lead time constant.
    '''

    coldLegFBLeadTC2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cold leg feedback lead time constant.
    '''

    coldLegFG1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cold leg feedback gain 1.
    '''

    coldLegFG2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cold leg feedback gain 2.
    '''

    coldLegLagTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cold leg lag time constant.
    '''

    coreHTLagTC1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Core heat transfer lag time constant.
    '''

    coreHTLagTC2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Core heat transfer lag time constant.
    '''

    coreNeutronicsEffTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Core neutronics effective time constant.
    '''

    coreNeutronicsHT: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Core neutronics and heat transfer.
    '''

    feedbackFactor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Feedback factor.
    '''

    hotLegLagTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Hot leg lag time constant.
    '''

    hotLegSteamGain: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Hot leg steam gain.
    '''

    hotLegToColdLegGain: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Hot leg to cold leg gain.
    '''

    pressureCG: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pressure control gain.
    '''

    steamFlowFG: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Steam flow feedback gain.
    '''

    steamPressureDropLagTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Steam pressure drop lag time constant.
    '''

    steamPressureFG: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Steam pressure feedback gain.
    '''

    throttlePressureFactor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Throttle pressure factor.
    '''

    throttlePressureSP: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Throttle pressure setpoint.
    '''

@dataclass(repr=False)
class SubControlArea(PowerSystemResource):
    '''
    An area defined for the purpose of tracking interchange with surrounding
    areas via tie points; may or may not serve as a control area.
    '''

    areaShortName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market area short name, which is the regulation zone. It references AGC
    regulation zone name.
    '''

    constantCoefficient: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Loss estimate constant coefficient
    '''

    linearCoefficient: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Loss estimate linear coefficient
    '''

    maxSelfSchedMW: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum amount of self schedule MWs allowed for an embedded control area.
    '''

    minSelfSchedMW: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum amount of self schedule MW allowed for an embedded control area.
    '''

    quadraticCoefficient: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Loss estimate quadratic coefficient
    '''

    embeddedControlArea: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used in conjunction with the InternalCA flag. If the InternalCA flag is
    YES, this flag does not apply. If the InternaCA flag is NO, this flag provides
    an indication of AdjacentCA (NO) or Embedded CA (YES).
    '''

    internalCA: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A Yes/No indication that this control area is contained internal to the
    system.
    '''

    localCA: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that this control area is the local control area.
    '''

    AdjacentCASet: Optional[AdjacentCASet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AdjacentCASet.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AggregateNode: list[AggregateNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AggregateNode.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AreaReserveSpecification: Optional[AreaReserveSpec] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AreaReserveSpec.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    BidSelfSched: list[BidSelfSched] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BidSelfSched.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    CnodeDistributionFactor: list[CnodeDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CnodeDistributionFactor.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ControlAreaDesignation: list[ControlAreaDesignation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ControlAreaDesignation.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Export_EnergyTransactions: list[EnergyTransaction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyTransaction.Export_SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy is transferred between interchange areas
    '''

    ExPostLossResults: list[ExPostLossResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ExPostLossResults.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    From_Flowgate: list[Flowgate] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Flowgate.From_SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    GeneralClearingResults: list[GeneralClearingResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'GeneralClearingResults.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    HostControlArea: Optional[HostControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HostControlArea.SubControlAreas',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The interchange area may operate as a control area
    '''

    Import_EnergyTransactions: list[EnergyTransaction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnergyTransaction.Import_SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy is transferred between interchange areas
    '''

    InadvertentAccount: list[InadvertentAccount] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'InadvertentAccount.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A control area can have one or more net inadvertent interchange accounts
    '''

    LossClearingResults: list[LossClearingResults] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LossClearingResults.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Pnode: list[Pnode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Pnode.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Receive_DynamicSchedules: list[DynamicSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DynamicSchedule.Receive_SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A control area can receive dynamic schedules from other control areas
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RTO: Optional[RTO] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RTO.SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Send_DynamicSchedules: list[DynamicSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DynamicSchedule.Send_SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A control area can send dynamic schedules to other control areas
    '''

    SideA_TieLines: list[TieLine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TieLine.SideA_SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The SubControlArea is on the A side of a collection of metered points which
    define the SubControlArea's boundary for a ControlAreaOperator or CustomerConsumer.
    '''

    SideB_TieLines: list[TieLine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TieLine.SideB_SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The SubControlArea is on the B side of a collection of metered points which
    define the SubControlArea's boundary for a ControlAreaOperator or CustomerConsumer.
    '''

    To_Flowgate: list[Flowgate] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Flowgate.To_SubControlArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class SwitchPhase(PowerSystemResource):
    '''
    Single phase of a multi-phase switch when its attributes might be different
    per phase.
    '''

    closed: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The attribute tells if the switch is considered closed when used as input
    to topology processing.
    '''

    normalOpen: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used in cases when no Measurement for the status value is present. If the
    SwitchPhase has a status measurement the Discrete.normalValue is expected
    to match with this value.
    '''

    phaseSide1: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase of this SwitchPhase on the side with terminal sequence number equal
    to 1. Should be a phase contained in that terminal’s phases attribute.
    '''

    phaseSide2: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase of this SwitchPhase on the side with terminal sequence number equal
    to 2. Should be a phase contained in that terminal’s Terminal.phases attribute.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum continuous current carrying capacity in amps governed by the
    device material and construction.
    The attribute shall be a positive value.
    '''

    Switch: Optional[Switch] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Switch.SwitchPhase',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switch of the switch phase.
    '''

@dataclass(repr=False)
class TapChanger(PowerSystemResource):
    '''
    Mechanism for changing transformer winding tap positions.
    '''

    controlEnabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the regulation status of the equipment. True is regulating, false
    is not regulating.
    '''

    highStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Highest possible tap step position, advance from neutral.
    The attribute shall be greater than lowStep.
    '''

    lowStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Lowest possible tap step position, retard from neutral.
    '''

    ltcFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies whether or not a TapChanger has load tap changing capabilities.
    '''

    neutralStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The neutral tap step position for this winding.
    The attribute shall be equal to or greater than lowStep and equal or less
    than highStep.
    It is the step position where the voltage is neutralU when the other terminals
    of the transformer are at the ratedU. If there are other tap changers on
    the transformer those taps are kept constant at their neutralStep.
    '''

    normalStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The tap step position used in "normal" network operation for this winding.
    For a "Fixed" tap changer indicates the current physical tap setting.
    The attribute shall be equal to or greater than lowStep and equal to or
    less than highStep.
    '''

    step: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tap changer position.
    Starting step for a steady state solution. Non integer values are allowed
    to support continuous tap variables. The reasons for continuous value are
    to support study cases where no discrete tap changer has yet been designed,
    a solution where a narrow voltage band forces the tap step to oscillate
    or to accommodate for a continuous solution as input.
    The attribute shall be equal to or greater than lowStep and equal to or
    less than highStep.
    '''

    initialDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For an LTC, the delay for initial tap changer operation (first step change).
    '''

    neutralU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage at which the winding operates at the neutral tap setting. It is
    the voltage at the terminal of the PowerTransformerEnd associated with
    the tap changer when all tap changers on the transformer are at their neutralStep
    position. Normally neutralU of the tap changer is the same as ratedU of
    the PowerTransformerEnd, but it can differ in special cases such as when
    the tapping mechanism is separate from the winding more common on lower
    voltage transformers.
    This attribute is not relevant for PhaseTapChangerAsymmetrical, PhaseTapChangerSymmetrical
    and PhaseTapChangerLinear.
    '''

    subsequentDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For an LTC, the delay for subsequent tap changer operation (second and
    later step changes).
    '''

    SvTapStep: Optional[SvTapStep] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SvTapStep.TapChanger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The tap step state associated with the tap changer.
    '''

    TapChangerControl: Optional[TapChangerControl] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TapChangerControl.TapChanger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The regulating control scheme in which this tap changer participates.
    '''

    TapSchedules: list[TapSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TapSchedule.TapChanger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A TapChanger can have TapSchedules.
    '''

@dataclass(repr=False)
class PhaseTapChanger(TapChanger):
    '''
    A transformer phase shifting tap model that controls the phase angle difference
    across the power transformer and potentially the active power flow through
    the power transformer. This phase tap model may also impact the voltage
    magnitude.
    '''

    TransformerEnd: Optional[TransformerEnd] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEnd.PhaseTapChanger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer end to which this phase tap changer belongs.
    '''

@dataclass(repr=False)
class PhaseTapChangerLinear(PhaseTapChanger):
    '''
    Describes a tap changer with a linear relation between the tap step and
    the phase angle difference across the transformer. This is a mathematical
    model that is an approximation of a real phase tap changer.
    The phase angle is computed as stepPhaseShiftIncrement times the tap position.
    The voltage magnitude of both sides is the same.
    '''

    stepPhaseShiftIncrement: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase shift per step position. A positive value indicates a positive angle
    variation from the Terminal at the PowerTransformerEnd, where the TapChanger
    is located, into the transformer.
    The actual phase shift increment might be more accurately computed from
    the symmetrical or asymmetrical models or a tap step table lookup if those
    are available.
    '''

    xMax: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactance depends on the tap position according to a "u" shaped curve.
    The maximum reactance (xMax) appears at the low and high tap positions.
    Depending on the “u” curve the attribute can be either higher or lower
    than PowerTransformerEnd.x.
    '''

    xMin: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactance depends on the tap position according to a "u" shaped curve.
    The minimum reactance (xMin) appears at the mid tap position. PowerTransformerEnd.x
    shall be consistent with PhaseTapChangerLinear.xMin and PhaseTapChangerNonLinear.xMin.
    In case of inconsistency, PowerTransformerEnd.x shall be used.
    '''

@dataclass(repr=False)
class PhaseTapChangerNonLinear(PhaseTapChanger):
    '''
    The non-linear phase tap changer describes the non-linear behaviour of
    a phase tap changer. This is a base class for the symmetrical and asymmetrical
    phase tap changer models. The details of these models can be found in IEC
    61970-301.
    '''

    voltageStepIncrement: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The voltage step increment on the out of phase winding (the PowerTransformerEnd
    where the TapChanger is located) specified in percent of rated voltage
    of the PowerTransformerEnd. A positive value means a positive voltage variation
    from the Terminal at the PowerTransformerEnd, where the TapChanger is located,
    into the transformer.
    When the increment is negative, the voltage decreases when the tap step
    increases.
    '''

    xMax: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactance depends on the tap position according to a "u" shaped curve.
    The maximum reactance (xMax) appears at the low and high tap positions.
    Depending on the “u” curve the attribute can be either higher or lower
    than PowerTransformerEnd.x.
    '''

    xMin: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactance depend on the tap position according to a "u" shaped curve.
    The minimum reactance (xMin) appear at the mid tap position. PowerTransformerEnd.x
    shall be consistent with PhaseTapChangerLinear.xMin and PhaseTapChangerNonLinear.xMin.
    In case of inconsistency, PowerTransformerEnd.x shall be used.
    '''

@dataclass(repr=False)
class PhaseTapChangerAsymmetrical(PhaseTapChangerNonLinear):
    '''
    Describes the tap model for an asymmetrical phase shifting transformer
    in which the difference voltage vector adds to the in-phase winding. The
    out-of-phase winding is the transformer end where the tap changer is located.
    The angle between the in-phase and out-of-phase windings is named the winding
    connection angle. The phase shift depends on both the difference voltage
    magnitude and the winding connection angle.
    '''

    windingConnectionAngle: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The phase angle between the in-phase winding and the out-of -phase winding
    used for creating phase shift. The out-of-phase winding produces what is
    known as the difference voltage. Setting this angle to 90 degrees is not
    the same as a symmetrical transformer. The attribute can only be multiples
    of 30 degrees. The allowed range is -150 degrees to 150 degrees excluding
    0.
    '''

@dataclass(repr=False)
class PhaseTapChangerSymmetrical(PhaseTapChangerNonLinear):
    '''
    Describes a symmetrical phase shifting transformer tap model in which the
    voltage magnitude of both sides is the same. The difference voltage magnitude
    is the base in an equal-sided triangle where the sides corresponds to the
    primary and secondary voltages. The phase angle difference corresponds
    to the top angle and can be expressed as twice the arctangent of half the
    total difference voltage.
    '''

@dataclass(repr=False)
class PhaseTapChangerTabular(PhaseTapChanger):
    '''
    Describes a tap changer with a table defining the relation between the
    tap step and the phase angle difference across the transformer.
    '''

    PhaseTapChangerTable: Optional[PhaseTapChangerTable] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PhaseTapChangerTable.PhaseTapChangerTabular',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The phase tap changer table for this phase tap changer.
    '''

@dataclass(repr=False)
class RatioTapChanger(TapChanger):
    '''
    A tap changer that changes the voltage ratio impacting the voltage magnitude
    but not the phase angle across the transformer.
    Angle sign convention (general): Positive value indicates a positive phase
    shift from the winding where the tap is located to the other winding (for
    a two-winding transformer).
    '''

    stepVoltageIncrement: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tap step increment, in per cent of rated voltage of the power transformer
    end, per step position.
    When the increment is negative, the voltage decreases when the tap step
    increases.
    '''

    tculControlMode: Optional[ TransformerControlMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the regulation control mode (voltage or reactive) of the RatioTapChanger.
    '''

    RatioTapChangerTable: Optional[RatioTapChangerTable] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RatioTapChangerTable.RatioTapChanger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The tap ratio table for this ratio tap changer.
    '''

    TransformerEnd: Optional[TransformerEnd] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEnd.RatioTapChanger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer end to which this ratio tap changer belongs.
    '''

@dataclass(repr=False)
class TransmissionRightOfWay(PowerSystemResource):
    '''
    A collection of transmission lines that are close proximity to each other.
    '''

@dataclass(repr=False)
class VoltageControlZone(PowerSystemResource):
    '''
    An area of the power system network which is defined for secondary voltage
    control purposes. A voltage control zone consists of a collection of substations
    with a designated bus bar section whose voltage will be controlled.
    '''

    BusbarSection: Optional[BusbarSection] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BusbarSection.VoltageControlZone',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A VoltageControlZone is controlled by a designated BusbarSection.
    '''

    RegulationSchedule: Optional[RegulationSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegulationSchedule.VoltageControlZones',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A VoltageControlZone may have a voltage regulation schedule.
    '''

@dataclass(repr=False)
class WeatherStation(PowerSystemResource):
    '''
    This represents a source of ambient temperature.
    '''

    Equipment: list[Equipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Equipment.WeatherStation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class WireSegmentPhase(PowerSystemResource):
    '''
    Represents a single wire of an alternating current wire segment.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number designation for this wire segment phase. Each wire segment phase
    within a wire segment should have a unique sequence number.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The phase connection of the wire at both ends.
    '''

    WireSegment: Optional[WireSegment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WireSegment.WireSegmentPhases',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The wire segment to which the phase belongs.
    '''

@dataclass(repr=False)
class Process(IdentifiedObject):
    '''
    The formal specification of a set of business transactions having the same
    business goal.
    '''

    classificationType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The classification mechanism used to group a set of objects together within
    a business process. The grouping may be of a detailed or a summary nature.
    '''

    processType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The kind of business process.
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.Process',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ProductAssetModel(IdentifiedObject):
    '''
    Asset model by a specific manufacturer.
    '''

    catalogueNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Catalogue number for asset model.
    '''

    drawingNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Drawing number for asset model.
    '''

    instructionManual: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reference manual or instruction book for this asset model.
    '''

    modelNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Manufacturer's model number.
    '''

    modelVersion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Version number for product model, which indicates vintage of the product.
    '''

    styleNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Style number of asset model.
    '''

    corporateStandardKind: Optional[ CorporateStandardKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of corporate standard for this asset model.
    '''

    overallLength: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Overall length of this asset model.
    '''

    usageKind: Optional[ AssetModelUsageKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Intended usage for this asset model.
    '''

    weightTotal: Optional[ float | Mass ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total manufactured weight of asset.
    '''

    Asset: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.ProductAssetModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An asset of this model.
    '''

    AssetInfo: Optional[AssetInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetInfo.ProductAssetModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset information (nameplate) for this product asset model.
    '''

    AssetModelCatalogueItems: list[AssetModelCatalogueItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetModelCatalogueItem.AssetModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    CatalogAssetType: Optional[CatalogAssetType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CatalogAssetType.ProductAssetModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Catalog asset type to which this product asset model conforms.
    '''

    Manufacturer: Optional[Manufacturer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Manufacturer.ProductAssetModels',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Manufacturer of this asset model.
    '''

    OperationalRestrictions: list[OperationalRestriction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalRestriction.ProductAssetModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All operational restrictions applying to this asset model.
    '''

@dataclass(repr=False)
class ProductBid(IdentifiedObject):
    '''
    Component of a bid that pertains to one market product.
    '''

@dataclass(repr=False)
class PropertyUnit(IdentifiedObject):
    '''
    Unit of property for reporting purposes.
    '''

@dataclass(repr=False)
class ProtectiveAction(IdentifiedObject):
    '''
    A protective action for supporting the integrity of the power system.
    '''

    enabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The status of the class set by operation or by signal. Optional field that
    will override other status fields.
    '''

    normalEnabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The default/normal value used when other active signal/values are missing.
    '''

    GateComCondition: Optional[Gate] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Gate.ProtectiveActionCom',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    GateEnabledCondition: Optional[Gate] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Gate.ProtectiveActionEnabled',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Association to a Gate that through a gate logic and input pin defines enabling
    of the ProtectiveAction.
    '''

    ProtectionEquipment: Optional[ProtectionEquipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ProtectionEquipment.ProtectiveAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ProtectiveActionCollection: Optional[ProtectiveActionCollection] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ProtectiveActionCollection.ProtectiveAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ProtectiveActionAdjustment(ProtectiveAction):
    '''
    Protective actions on non-switching equipment. The operating condition
    is adjusted.
    '''

    byValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The adjustment is given in value of the active value.
    '''

    reduce: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the adjusted value is an reduction. Other wise it is an increase
    in the value.
    '''

    setValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The adjustment is given by a new active value.
    '''

    byPercentage: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The adjustment is given in percent of the active value.
    '''

    kind: Optional[ ProtectiveActionAdjustmentKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Defines the kind of adjustment that should be done. With this value the
    correct attribute containing the value needs to be used.
    '''

    ConductingEquipment: Optional[ConductingEquipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ConductingEquipment.ProtectiveActionAdjustment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    ConductingEquipment whose operating condition is changed when this protective
    action adjustment gets activated.
    '''

    DCConductingEquipment: Optional[DCConductingEquipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DCConductingEquipment.ProtectiveActionAdjustment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operating condition to the Conducting Equipment is changed when protective
    action adjustment is activated.
    '''

    Measurement: Optional[Measurement] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Measurement.ProtectiveActionAdjustment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The measurement is used to control the operation of an equipment.
    '''

@dataclass(repr=False)
class ProtectiveActionEquipment(ProtectiveAction):
    '''
    Protective action to put an Equipment in-service/out-of-service.
    '''

    inService: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true the equipment is put in-service, otherwise out-of-service.
    '''

    Equipment: Optional[Equipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Equipment.ProtectiveActionEquipment',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ProtectiveActionRegulation(ProtectiveAction):
    '''
    Protective action to change regulation to Equipment.
    '''

@dataclass(repr=False)
class ProtectiveActionCollection(IdentifiedObject):
    '''
    A collection of protective actions to protect the integrity of the power
    system.
    '''

    ProtectiveAction: list[ProtectiveAction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProtectiveAction.ProtectiveActionCollection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Set of ProtectiveAction belonging to a ProtectiveActionCollection.
    '''

    StageTrigger: list[StageTrigger] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'StageTrigger.ProtectiveActionCollection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    When condition to the StageTrigger is met, the actions in the ProtectiveActionCollection
    are activated/triggered.
    '''

@dataclass(repr=False)
class ProvidedBilateralPoint(IdentifiedObject):
    '''
    Allows declaration of ICCP points to be provided through a Bilateral Table
    agreement.
    '''

    BilateralExchangeActor: Optional[BilateralExchangeActor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BilateralExchangeActor.ProvidedBilateralIOPoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Remote peer that will receive ICCP information in a Bilateral table.
    '''

    IOPoint: Optional[IOPoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IOPoint.BilateralToIOPoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement or control for the bilateral ICCP point.
    '''

@dataclass(repr=False)
class ICCPProvidedPoint(ProvidedBilateralPoint):
    '''
    The IdentifiedObject.name attribute must have a value. The name attribute
    shall be used as the DataValue name used for the exchange.
    '''

    accessPriviledge: Optional[ ICCPAccessPrivilegeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Provides information regarding the access privileges allowed to the ICCP
    Point.
    '''

    pointQuality: Optional[ ICCPQualityKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the type of ICCP quality that will be conveyed as part of the
    ICCP Point.
    '''

    pointType: Optional[ ICCPPointKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates the ICCP Point type that is to be conveyed.
    A CIM AccumlatorValue shall be mapped to an ICCP real.
    A CIM AnalogValue shall be mapped to an ICCP real.
    A CIM DiscreteValue shall be mapped to either an ICCP real, state, stateSupplemental,
    or either protection event type.
    A CIM StringMeasurementValue does not have a standardized mapping.
    '''

    scope: Optional[ ICCPScopeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates if the Point is global scoped (e.g. VCC) or accessible only to
    the Bilateral table peer (e.g. ICC).
    '''

@dataclass(repr=False)
class QualificationRequirement(IdentifiedObject):
    '''
    Certain skills are required and must be certified in order for a person
    (typically a member of a crew) to be qualified to work on types of equipment.
    '''

@dataclass(repr=False)
class RatioTapChangerTable(IdentifiedObject):
    '''
    Describes a curve for how the voltage magnitude and impedance varies with
    the tap step.
    '''

    RatioTapChanger: list[RatioTapChanger] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RatioTapChanger.RatioTapChangerTable',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ratio tap changer of this tap ratio table.
    '''

    RatioTapChangerTablePoint: list[RatioTapChangerTablePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RatioTapChangerTablePoint.RatioTapChangerTable',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Points of this table.
    '''

@dataclass(repr=False)
class ReadingQualityType(IdentifiedObject):
    '''
    Detailed description for a quality of a reading value, produced by an end
    device or a system. Values in attributes allow for creation of the recommended
    codes to be used for identifying reading value quality codes as follows:
    <systemId>.<category>.<subCategory>.
    '''

    category: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    High-level nature of the reading value quality.
    '''

    subCategory: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    More specific nature of the reading value quality, as a further sub-categorisation
    of 'category'.
    '''

    systemId: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identification of the system which has declared the issue with the data
    or provided commentary on the data.
    '''

    ReadingQualities: list[ReadingQuality] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReadingQuality.ReadingQualityType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All reading qualities of this type.
    '''

@dataclass(repr=False)
class ReadingType(IdentifiedObject):
    '''
    Detailed description for a type of a reading value. Values in attributes
    allow for the creation of recommended codes to be used for identifying
    reading value types as follows: <macroPeriod>.<aggregate>.<measuringPeriod>.<accumulation>.<flowDirection>.<commodity>.<measurementKind>.<interharmonic.numerator>.<interharmonic.denominator>.<argument.numerator>.<argument.denominator>.<tou>.<cpp>.<consumptionTier>.<phases>.<multiplier>.<unit>.<currency>.
    '''

    consumptionTier: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    In case of common flat-rate pricing for power, in which all purchases are
    at a given rate, 'consumptionTier'=0. Otherwise, the value indicates the
    consumption tier, which can be used in conjunction with TOU or CPP pricing.
    Consumption tier pricing refers to the method of billing in which a certain
    "block" of energy is purchased/sold at one price, after which the next
    block of energy is purchased at another price, and so on, all throughout
    a defined period. At the start of the defined period, consumption is initially
    zero, and any usage is measured against the first consumption tier ('consumptionTier'=1).
    If this block of energy is consumed before the end of the period, energy
    consumption moves to be reconed against the second consumption tier ('consumptionTier'=2),
    and so on. At the end of the defined period, the consumption accumulator
    is reset, and usage within the 'consumptionTier'=1 restarts.
    '''

    cpp: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Critical peak period (CPP) bucket the reading value is attributed to. Value
    0 means not applicable. Even though CPP is usually considered a specialised
    form of time of use 'tou', this attribute is defined explicitly for flexibility.
    '''

    tou: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time of use (TOU) bucket the reading value is attributed to. Value 0 means
    not applicable.
    '''

    accumulation: Optional[ AccumulationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Accumulation behaviour of a reading over time, usually 'measuringPeriod',
    to be used with individual endpoints (as opposed to 'macroPeriod' and 'aggregate'
    that are used to describe aggregations of data from individual endpoints).
    '''

    aggregate: Optional[ AggregateKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Salient attribute of the reading data aggregated from individual endpoints.
    This is mainly used to define a mathematical operation carried out over
    'macroPeriod', but may also be used to describe an attribute of the data
    when the 'macroPeriod' is not defined.
    '''

    commodity: Optional[ CommodityKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Commodity being measured.
    '''

    currency: Optional[ Currency ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Metering-specific currency.
    '''

    flowDirection: Optional[ FlowDirectionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Flow direction for a reading where the direction of flow of the commodity
    is important (for electricity measurements this includes current, energy,
    power, and demand).
    '''

    macroPeriod: Optional[ MacroPeriodKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time period of interest that reflects how the reading is viewed or captured
    over a long period of time.
    '''

    measurementKind: Optional[ MeasurementKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identifies "what" is being measured, as refinement of 'commodity'. When
    combined with 'unit', it provides detail to the unit of measure. For example,
    'energy' with a unit of measure of 'kWh' indicates to the user that active
    energy is being measured, while with 'kVAh' or 'kVArh', it indicates apparent
    energy and reactive energy, respectively. 'power' can be combined in a
    similar way with various power units of measure: Distortion power ('distortionVoltAmperes')
    with 'kVA' is different from 'power' with 'kVA'.
    '''

    measuringPeriod: Optional[ MeasuringPeriodKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time attribute inherent or fundamental to the reading value (as opposed
    to 'macroPeriod' that supplies an "adjective" to describe aspects of a
    time period with regard to the measurement). It refers to the way the value
    was originally measured and not to the frequency at which it is reported
    or presented. For example, an hourly interval of consumption data would
    have value 'hourly' as an attribute. However in the case of an hourly sampled
    voltage value, the meterReadings schema would carry the 'hourly' interval
    size information.
    It is common for meters to report demand in a form that is measured over
    the course of a portion of an hour, while enterprise applications however
    commonly assume the demand (in kW or kVAr) normalised to 1 hour. The system
    that receives readings directly from the meter therefore shall perform
    this transformation before publishing readings for use by the other enterprise
    systems. The scalar used is chosen based on the block size (not any sub-interval
    size).
    '''

    multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Metering-specific multiplier.
    '''

    phases: Optional[ PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Metering-specific phase code.
    '''

    unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Metering-specific unit.
    '''

    argument: Optional[RationalNumber] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Argument used to introduce numbers into the unit of measure description
    where they are needed (e.g., 4 where the measure needs an argument such
    as CEMI(n=4)). Most arguments used in practice however will be integers
    (i.e., 'denominator'=1).
    Value 0 in 'numerator' and 'denominator' means not applicable.
    '''

    Channel: Optional[Channel] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Channel.ReadingType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Channel reporting/collecting register values with this type information.
    '''

    ConsumptionTariffIntervals: list[ConsumptionTariffInterval] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConsumptionTariffInterval.ReadingType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All tariff intervals with consumption described by this reading type.
    '''

    interharmonic: Optional[ReadingInterharmonic] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication of a "harmonic" or "interharmonic" basis for the measurement.
    Value 0 in 'numerator' and 'denominator' means not applicable.
    '''

    IntervalBlocks: list[IntervalBlock] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IntervalBlock.ReadingType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All blocks containing interval reading values with this type information.
    '''

    MeterReadSchedule: Optional[MeterReadSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReadSchedule.ReadingType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter read schedule for which the reading type applies
    '''

    MetrologyRequirements: list[MetrologyRequirement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MetrologyRequirement.ReadingTypes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All metrology requirements that require this reading type to be collected.
    '''

    PendingCalculation: Optional[PendingCalculation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PendingCalculation.ReadingType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pending calculation that produced this reading type.
    '''

    Readings: list[Reading] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reading.ReadingType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All reading values with this type information.
    '''

@dataclass(repr=False)
class Receipt(IdentifiedObject):
    '''
    Record of total receipted payment from customer.
    '''

@dataclass(repr=False)
class RecloseSequence(IdentifiedObject):
    '''
    A reclose sequence (open and close) is defined for each possible reclosure
    of a breaker.
    '''

    recloseStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates the ordinal position of the reclose step relative to other steps
    in the sequence.
    '''

    recloseDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates the time lapse before the reclose step will execute a reclose.
    '''

    ProtectedSwitch: Optional[ProtectedSwitch] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ProtectedSwitch.RecloseSequences',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A breaker may have zero or more automatic reclosures after a trip occurs.
    '''

@dataclass(repr=False)
class Reconditioning(IdentifiedObject):
    '''
    Reconditioning information for an asset.
    '''

    dateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this reconditioning (or a major overhaul) has been performed.
    '''

    Asset: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.Reconditionings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PowerRatings: list[CoolingPowerRating] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CoolingPowerRating.Reconditionings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TransformerObservations: list[TransformerObservation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerObservation.Reconditioning',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Register(IdentifiedObject):
    '''
    A device that indicates or records units of the commodity or other quantity
    measured.
    '''

    isVirtual: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the data it produces is calculated or measured by a device other
    than a physical end device/meter. Otherwise, any data streams it produces
    are measured by the hardware of the end device/meter itself.
    '''

    leftDigitCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of digits (dials on a mechanical meter) to the left of the decimal
    place; default is normally 5.
    '''

    rightDigitCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of digits (dials on a mechanical meter) to the right of the decimal
    place.
    '''

    touTierName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name used for the time of use tier (also known as bin or bucket). For example,
    "peak", "off-peak", "TOU Category A", etc.
    '''

    Channels: list[Channel] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Channel.Register',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All channels that collect/report values from this register.
    '''

    EndDeviceFunction: Optional[EndDeviceFunction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDeviceFunction.Registers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End device function metering quantities displayed by this register.
    '''

    touTier: Optional[TimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Clock time interval for register to beging/cease accumulating time of usage
    (e.g., start at 8:00 am, stop at 5:00 pm).
    '''

    UsagePoint: Optional[UsagePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UsagePoint.Register',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Usage Point, when metered, has these registers.
    '''

@dataclass(repr=False)
class ReliabilityInfo(IdentifiedObject):
    '''
    Information regarding the experienced and expected reliability of a specific
    asset, type of asset, or asset model.
    '''

@dataclass(repr=False)
class RemoteInputSignal(IdentifiedObject):
    '''
    Supports connection to a terminal associated with a remote bus from which
    an input signal of a specific type is coming.
    '''

@dataclass(repr=False)
class RemotePoint(IdentifiedObject):
    '''
    For an RTU, remote points correspond to telemetered values or control outputs.
    Other units (e.g. control centres) usually also contain calculated values.
    '''

    RemoteUnit: Optional[RemoteUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RemoteUnit.RemotePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Remote unit this point belongs to.
    '''

@dataclass(repr=False)
class RemoteControl(RemotePoint):
    '''
    Remote controls are outputs that are sent by the remote unit to actuators
    in the process.
    '''

    actuatorMaximum: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum set point value accepted by the remote control point.
    '''

    actuatorMinimum: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum set point value accepted by the remote control point.
    '''

    remoteControlled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Set to true if the actuator is remotely controlled.
    '''

    Control: Optional[Control] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Control.RemoteControl',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Control for the RemoteControl point.
    '''

@dataclass(repr=False)
class RemoteSource(RemotePoint):
    '''
    Remote sources are state variables that are telemetered or calculated within
    the remote unit.
    '''

    deadband: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The smallest change in value to be reported.
    '''

    sensorMaximum: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum value the telemetry item can return.
    '''

    sensorMinimum: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum value the telemetry item can return.
    '''

    scanInterval: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time interval between scans.
    '''

    MeasurementValue: Optional[MeasurementValue] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeasurementValue.RemoteSource',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Link to the physical telemetered point associated with this measurement.
    '''

@dataclass(repr=False)
class ReportingGroup(IdentifiedObject):
    '''
    A reporting group is used for various ad-hoc groupings used for reporting.
    '''

    BusNameMarker: list[BusNameMarker] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BusNameMarker.ReportingGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The bus name markers that belong to this reporting group.
    '''

    PowerSystemResource: list[PowerSystemResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PowerSystemResource.ReportingGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Power system resources which belong to this reporting group.
    '''

    ReportingSuperGroup: Optional[ReportingSuperGroup] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReportingSuperGroup.ReportingGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reporting super group to which this reporting group belongs.
    '''

    TopologicalNode: list[TopologicalNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TopologicalNode.ReportingGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The topological nodes that belong to the reporting group.
    '''

@dataclass(repr=False)
class ReportingSuperGroup(IdentifiedObject):
    '''
    A reporting super group, groups reporting groups for a higher level report.
    '''

    ReportingGroup: list[ReportingGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ReportingGroup.ReportingSuperGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reporting groups that are grouped under this super group.
    '''

@dataclass(repr=False)
class ResourceGroup(IdentifiedObject):
    '''
    A logical grouping of resources that are used to model location of types
    of requirements for ancillary services such as spinning reserve zones,
    regulation zones, etc.
    '''

@dataclass(repr=False)
class Route(IdentifiedObject):
    '''
    Route that is followed, for example by service crews.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Classification by utility's work management standards and practices.
    '''

    Crews: list[OldCrew] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OldCrew.Route',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Locations: list[Location] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Location.Routes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ScheduledEvent(IdentifiedObject):
    '''
    An event to trigger one or more activities, such as reading a meter, recalculating
    a bill, requesting work, when generating units must be scheduled for maintenance,
    when a transformer is scheduled to be refurbished, etc.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of scheduled event.
    '''

    duration: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Duration of the scheduled event, for example, the time to ramp between
    values.
    '''

    Assets: list[Asset] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Asset.ScheduledEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Assets associated with the scheduled event.
    '''

    ScheduledEventData: Optional[ScheduledEventData] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ScheduledEventData.ScheduledEvents',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specification for this scheduled event.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current status information relevant to a scheduled event
    '''

@dataclass(repr=False)
class ScheduledLimitValue(IdentifiedObject):
    '''
    A limit that is applicable during a scheduled time period.
    '''

@dataclass(repr=False)
class SchedulingPoint(IdentifiedObject):
    '''
    Connection to other organizations at the boundary of the ISO/RTO.
    '''

@dataclass(repr=False)
class Seal(IdentifiedObject):
    '''
    Physically controls access to AssetContainers.
    '''

    appliedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this seal has been applied.
    '''

    sealNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (reserved word) Seal number.
    '''

    condition: Optional[ SealConditionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Condition of seal.
    '''

    kind: Optional[ SealKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of seal.
    '''

    AssetContainer: Optional[AssetContainer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetContainer.Seals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Asset container to which this seal is applied.
    '''

@dataclass(repr=False)
class Season(IdentifiedObject):
    '''
    A specified time period of the year.
    '''

    endDate: Optional[ MonthDay ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date season ends.
    '''

    startDate: Optional[ MonthDay ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date season starts.
    '''

    ScheduledLimits: list[ScheduledLimitValue] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ScheduledLimitValue.Season',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The scheduled limits associated with the season.
    '''

    SeasonDayTypeSchedules: list[SeasonDayTypeSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SeasonDayTypeSchedule.Season',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Schedules that use this Season.
    '''

@dataclass(repr=False)
class SecurityConstraints(IdentifiedObject):
    '''
    Typical for regional transmission operators (RTOs), these constraints include
    transmission as well as generation group constraints identified in both
    base case and critical contingency cases.
    '''

@dataclass(repr=False)
class ServiceCategory(IdentifiedObject):
    '''
    Category of service provided to the customer.
    '''

    kind: Optional[ ServiceKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of service.
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConfigurationEvent.ChangedServiceCategory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All configuration events created for this service category.
    '''

    CustomerAgreements: list[CustomerAgreement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CustomerAgreement.ServiceCategory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All customer agreements with this service category.
    '''

    PricingStructures: list[PricingStructure] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PricingStructure.ServiceCategory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All pricing structures applicable to this service category.
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.ServiceCategory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage points that deliver this category of service.
    '''

@dataclass(repr=False)
class ServiceMultiplier(IdentifiedObject):
    '''
    Multiplier applied at the usage point.
    '''

    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Multiplier value.
    '''

    kind: Optional[ ServiceMultiplierKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of multiplier.
    '''

    UsagePoint: Optional[UsagePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UsagePoint.ServiceMultipliers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Usage point applying this multiplier.
    '''

@dataclass(repr=False)
class Specimen(IdentifiedObject):
    '''
    Sample or specimen of a material (fluid or solid).
    '''

    specimenID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identifier of specimen used in inspection or test.
    '''

    specimenSampleDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time sample specimen taken.
    '''

    specimenToLabDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time the specimen was received by the lab.
    '''

    ambientTemperatureAtSampling: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Operating ambient temperature (in °C).
    '''

    humidityAtSampling: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Operating ambient humidity (in percent).
    '''

    AssetTestSampleTaker: Optional[AssetTestSampleTaker] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AssetTestSampleTaker.Specimen',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Test sampler taker who gathered this specimen.
    '''

    LabTestDataSet: list[LabTestDataSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LabTestDataSet.Specimen',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Results from lab testing done on specimen.
    '''

@dataclass(repr=False)
class OilSpecimen(Specimen):
    '''
    '''

    oilSampleTakenFrom: Optional[ OilSampleLocation ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location from which oil sample taken.
    '''

    oilSampleTemperature: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Oil sample temperature.
    '''

    oilTemperatureSource: Optional[ OilTemperatureSource ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Source of oil temperature.
    '''

    sampleContainer: Optional[ SampleContainerType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of sample container.
    '''

@dataclass(repr=False)
class Stage(IdentifiedObject):
    '''
    Stage of a remedial action scheme.
    '''

@dataclass(repr=False)
class StageTrigger(IdentifiedObject):
    '''
    Condition that is triggered either by TriggerCondition of by gate condition
    within a stage and has remedial action-s.
    '''

    armed: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The status of the class set by operation or by signal. Optional field that
    will override other status fields.
    '''

    normalArmed: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The default/normal value used when other active signal/values are missing.
    '''

    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority of trigger. 0 = don t care (default) 1 = highest priority. 2 is
    less than 1 and so on. A trigger with the highest priority will trigger
    first.
    '''

    GateArmed: Optional[Gate] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Gate.StageTriggerArmed',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Association to a Gate that through a gate logic and input pin defines arming
    of the StageTrigger.
    '''

    GateComCondition: Optional[Gate] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Gate.StageTriggerCom',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For the StageTrigger to active the set of protective actions the condition
    for communication needs to be met (true).
    '''

    GateTrigger: Optional[Gate] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Gate.StageTrigger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Gate result that trigger the StageTrigger and thereby executing the
    a set of protective actions.
    '''

    ProtectiveActionCollection: Optional[ProtectiveActionCollection] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ProtectiveActionCollection.StageTrigger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Stage: Optional[Stage] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Stage.StageTrigger',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class StartupModel(IdentifiedObject):
    '''
    Unit start up characteristics depending on how long the unit has been off
    line.
    '''

    startupDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date and time of the most recent generating unit startup.
    '''

    startupPriority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Startup priority within control area where lower numbers indicate higher
    priorities. More than one unit in an area may be assigned the same priority.
    '''

    fixedMaintCost: Optional[ float | CostRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fixed maintenance cost.
    '''

    hotStandbyHeat: Optional[ float | HeatRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The amount of heat input per time unit required for hot standby operation.
    '''

    incrementalMaintCost: Optional[ float | CostPerEnergyUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Incremental maintenance cost.
    '''

    minimumDownTime: Optional[ float | Hours ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum number of hours the unit must be down before restart.
    '''

    minimumRunTime: Optional[ float | Hours ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum number of hours the unit must be operating before being allowed
    to shut down.
    '''

    riskFactorCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The opportunity cost associated with the return in monetary unit. This
    represents the restart's "share" of the unit depreciation and risk of an
    event which would damage the unit.
    '''

    startupCost: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total miscellaneous start up costs.
    '''

    stbyAuxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit's auxiliary active power consumption to maintain standby mode.
    '''

    StartIgnFuelCurve: Optional[StartIgnFuelCurve] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StartIgnFuelCurve.StartupModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit's startup model may have a startup ignition fuel curve.
    '''

    StartMainFuelCurve: Optional[StartMainFuelCurve] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StartMainFuelCurve.StartupModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit's startup model may have a startup main fuel curve.
    '''

    StartRampCurve: Optional[StartRampCurve] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StartRampCurve.StartupModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit's startup model may have a startup ramp curve.
    '''

    ThermalGeneratingUnit: Optional[ThermalGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.StartupModel',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A thermal generating unit may have a startup model.
    '''

@dataclass(repr=False)
class StaticVarCompensatorDynamics(IdentifiedObject):
    '''
    Static var compensator whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''

    StaticVarCompensator: Optional[StaticVarCompensator] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StaticVarCompensator.StaticVarCompensatorDynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Static Var Compensator to which Static Var Compensator dynamics model applies.
    '''

@dataclass(repr=False)
class StatisticalCalculation(IdentifiedObject):
    '''
    Description of statistical calculation performed.
    '''

    calculationMode: Optional[ CalculationModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Calculation mode.
    '''

    calculationTechnique: Optional[ CalculationTechniqueKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of statistical calculation, specifying how the measurement value is
    calculated.
    '''

    CalculationMethodOrder: list[CalculationMethodOrder] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CalculationMethodOrder.StatisicalCalculation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The order in which this statistical calculation is done.
    '''

@dataclass(repr=False)
class SubGeographicalRegion(IdentifiedObject):
    '''
    A subset of a geographical region of a power system network model.
    '''

    DCLines: list[DCLine] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DCLine.Region',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DC lines in this sub-geographical region.
    '''

    Lines: list[Line] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Line.Region',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The lines within the sub-geographical region.
    '''

    Region: Optional[GeographicalRegion] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'GeographicalRegion.Regions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The geographical region which this sub-geographical region is within.
    '''

    Substations: list[Substation] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Substation.Region',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The substations in this sub-geographical region.
    '''

@dataclass(repr=False)
class SwitchOperationSummary(IdentifiedObject):
    '''
    Up-to-date, of-record summary of switch operation information, distilled
    from a variety of sources (real-time data or real-time data historian,
    field inspections, etc.) of use to asset health analytics.
    '''

    lifetimeFaultOperations: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total breaker fault operations to date.
    '''

    lifetimeMotorStarts: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total motor starts to date.
    '''

    lifetimeTotalOperations: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total breaker operations to date (including fault and non-fault).
    '''

    mostRecentFaultOperationDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date of most recent breaker fault operation.
    '''

    mostRecentMotorStartDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date of most recent motor start.
    '''

    mostRecentOperationDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date of most recent breaker operation (fault or non-fault).
    '''

    Breaker: Optional[Asset] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Asset.BreakerOperation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Breaker asset to which this operation information applies.
    '''

@dataclass(repr=False)
class SwitchingAction(IdentifiedObject):
    '''
    Atomic switching action.
    '''

    executedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Actual date and time of this switching step.
    '''

    issuedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time when the crew was given the instruction to execute the action;
    not applicable if the action is performed by operator remote control.
    '''

    plannedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Planned date and time of this switching step.
    '''

    phases: Optional[ PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phases of the Switching Action
    '''

    Crew: list[Crew] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Crew.SwitchingAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The crew that is assigned to the switching action.
    '''

    Operator: Optional[Operator] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Operator.SwitchingSteps',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Operator responsible for this switching step.
    '''

    SwitchingEvent: Optional[SwitchingEvent] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingEvent.SwitchingAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching event that the switching action is performed on
    '''

    SwitchingPlan: Optional[SwitchingPlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingPlan.SwitchingAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching plan that is associated with the switching actions.
    '''

    SwitchingStep: Optional[SwitchingStep] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingStep.SwitchingAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching step that is associated to the switching action.
    '''

@dataclass(repr=False)
class ClampAction(SwitchingAction):
    '''
    Action on Clamp as a switching step
    '''

    kind: Optional[ TempEquipActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching action to perform
    '''

    Clamp: Optional[Clamp] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Clamp.ClampAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The clamp that the clamp action is performed on
    '''

@dataclass(repr=False)
class ClearanceAction(SwitchingAction):
    '''
    Action on clearance document as a switching step.
    '''

    kind: Optional[ ClearanceActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Clearance action to perform.
    '''

    Clearance: Optional[ClearanceDocument] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ClearanceDocument.ClearanceAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Clearance associated with this clearance action.
    '''

@dataclass(repr=False)
class ControlAction(SwitchingAction):
    '''
    Control executed as a switching step.
    '''

    analogValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The analog value used for the analog control, the raise/lower control and
    the set point control
    '''

    discreteValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The integer value used for the command or the accumulator reset.
    '''

    Control: Optional[Control] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Control.ControlAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The control that the control action is performed on.
    '''

@dataclass(repr=False)
class CutAction(SwitchingAction):
    '''
    Action on cut as a switching step.
    '''

    kind: Optional[ TempEquipActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching action to perform.
    '''

    Cut: Optional[Cut] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Cut.CutAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cut on which this action is taken.
    '''

@dataclass(repr=False)
class EnergyConsumerAction(SwitchingAction):
    '''
    Action to connect or disconnect the Energy Consumer from its Terminal
    '''

    kind: Optional[ TempEquipActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching action to perform
    '''

    EnergyConsumer: Optional[EnergyConsumer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergyConsumer.EnergyConsumerAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The energy consumer that the energy consumer action is performed on
    '''

@dataclass(repr=False)
class EnergySourceAction(SwitchingAction):
    '''
    Action on energy source as a switching step.
    '''

    kind: Optional[ TempEquipActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching action to perform.
    '''

    EnergySource: Optional[EnergySource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergySource.EnergySourceAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Energy source on which this action is taken.
    '''

@dataclass(repr=False)
class GenericAction(SwitchingAction):
    '''
    An arbitrary switching step.
    '''

    PowerSystemResource: Optional[PowerSystemResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.GenericAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The power system resource that the generic action is performed on
    '''

@dataclass(repr=False)
class GroundAction(SwitchingAction):
    '''
    Action on ground as a switching step.
    '''

    kind: Optional[ TempEquipActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching action to perform.
    '''

    AlongACLineSegment: Optional[ACLineSegment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.LineGroundingAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The line segment that this ground action will affect. This is the only
    way to access relationship to clamp in case the ground needs to be placed
    along the line segment.
    '''

    Ground: Optional[Ground] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Ground.GroundAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Ground on which this action is taken.
    '''

    GroundedEquipment: Optional[ConductingEquipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ConductingEquipment.GroundingAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Equipment being grounded with this operation. In case of placing a ground
    anywhere along a line segment, you must use the clamp (to get the distance
    from one terminal), so use the explicit relation with line segment. In
    all other cases (including placing the ground at a line segment terminal),
    reference to one or more conducting equipment is sufficient.
    '''

@dataclass(repr=False)
class JumperAction(SwitchingAction):
    '''
    Action on jumper as a switching step.
    '''

    kind: Optional[ TempEquipActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching action to perform.
    '''

    ACLineSegments: list[ACLineSegment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ACLineSegment.LineJumpingAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The line segment that this jumper action will affect. This is the only
    way to access relationship to clamp in case the jumper needs to connect
    along the line segment.
    '''

    Clamp: Optional[Clamp] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Clamp.JumperAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Clamp on which this action is taken.
    '''

    JumpedEquipments: list[ConductingEquipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConductingEquipment.JumpingAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conducting equipment is affected when the jumper action connects one or
    both ends of a jumper to the conducting equipment. If the jumper action
    involves placing one or both ends of a jumper anywhere along a line segment,
    you must use the clamp (to get the distance from one terminal), using the
    explicit relation with clamp. In the case of placing one or both ends of
    the jumper at a line segment terminal, reference to one or more line segments
    is sufficient.
    '''

    Jumper: Optional[Jumper] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Jumper.JumperAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Jumper on which this action is taken.
    '''

@dataclass(repr=False)
class MeasurementAction(SwitchingAction):
    '''
    Measurement taken as a switching step.
    '''

    Measurement: Optional[Measurement] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Measurement.MeasurementAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The measurement that the measurement action is performed on
    '''

@dataclass(repr=False)
class ShuntCompensatorAction(SwitchingAction):
    '''
    '''

    kind: Optional[ TempEquipActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching action to perform
    '''

    ShuntCompensator: Optional[ShuntCompensator] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ShuntCompensator.ShuntCompensatorAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The shunt compensator that the shunt compensator action is performed on
    '''

@dataclass(repr=False)
class SwitchAction(SwitchingAction):
    '''
    Action on switch as a switching step.
    '''

    kind: Optional[ SwitchActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching action to perform.
    '''

    OperatedSwitch: Optional[Switch] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Switch.SwitchAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switch that is the object of this switch action.
    '''

    PlannedOutage: Optional[Outage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Outage.PlannedSwitchActions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Planned outage for whose scope this switch action applies.
    '''

@dataclass(repr=False)
class TagAction(SwitchingAction):
    '''
    Action on operation tag as a switching step.
    '''

    kind: Optional[ TagActionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of tag action.
    '''

    OperationalTag: Optional[OperationalTag] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperationalTag.TagAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tag associated with this tag action.
    '''

@dataclass(repr=False)
class VerificationAction(SwitchingAction):
    '''
    Verification of a switch position or other condition as a switching step
    '''

    verificationCondition: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    freeform description of the condition to be verified
    '''

    PowerSystemResource: Optional[PowerSystemResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.VerificationAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The power system resource that the verification action is performed on
    '''

@dataclass(repr=False)
class SynchronousMachineDynamics(IdentifiedObject):
    '''
    Synchronous machine whose behaviour is described by reference to a standard
    model expressed in one of the following forms:
    - simplified (or classical), where a group of generators or motors is not
    modelled in detail;
    - detailed, in equivalent circuit form;
    - detailed, in time constant reactance form; or
    <font color="#0f0f0f">- by definition of a user-defined model.</font>
    <font color="#0f0f0f">It is a common practice to represent small generators
    by a negative load rather than by a dynamic generator model when performing
    dynamics simulations. In this case, a SynchronousMachine in the static
    model is not represented by anything in the dynamics model, instead it
    is treated as an ordinary load.</font>
    <font color="#0f0f0f">Parameter details:</font>
    <ol>
    <li><font color="#0f0f0f">Synchronous machine parameters such as <i>Xl,
    Xd, Xp</i> etc. are actually used as inductances in the models,</font>
    but are commonly referred to as reactances since, at nominal frequency,
    the PU values are the same. However, some references use the symbol <i>L</i>
    instead of <i>X</i>.</li>
    </ol>
    '''

    SynchronousMachine: Optional[SynchronousMachine] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachine.SynchronousMachineDynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Synchronous machine to which synchronous machine dynamics model applies.
    '''

@dataclass(repr=False)
class TACArea(IdentifiedObject):
    '''
    Transmission Access Charge Area. Charges assessed, on behalf of the Participating
    Transmission Owner, to parties who require access to the controlled grid.
    '''

    AggregatedPnode: list[AggregatedPnode] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AggregatedPnode.TACArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AreaLoadCurve: list[AreaLoadCurve] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AreaLoadCurve.TACArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class TestStandard(IdentifiedObject):
    '''
    The precise standard used in executing a lab test, including the standard,
    and standard version, test method and variant, if needed.
    '''

    testMethod: Optional[ TestMethod ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identification of test method used if multiple methods specified by test
    standard.
    '''

    testVariant: Optional[ TestVariantKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identification of variant of test method or standard if one is specified
    by the standard.
    '''

    AssetAnalog: list[AssetAnalog] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetAnalog.TestStandard',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An asset health analog related to this lab test standard.
    '''

    AssetDiscrete: list[AssetDiscrete] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetDiscrete.TestStandard',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An asset health discrete related to this lab test standard.
    '''

    AssetString: list[AssetStringMeasurement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AssetStringMeasurement.TestStandard',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An asset health string related to this lab test standard.
    '''

    testStandardASTM: Optional[ASTMStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which ASTM standard used to determine analog value result. Applies only
    if ASTM standard used.
    '''

    testStandardCIGRE: Optional[CIGREStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which CIGRE standard used to determine analog value result. Applies only
    if CIGRE standard used.
    '''

    testStandardDIN: Optional[DINStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which DIN standard used to determine analog value result. Applies only
    if DIN standard used.
    '''

    testStandardDoble: Optional[DobleStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which Doble standard used to determine analog value result. Applies only
    if Doble standard used.
    '''

    testStandardEPA: Optional[EPAStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which EPA standard used to determine analog value result. Applies only
    if EPA standard used.
    '''

    testStandardIEC: Optional[IECStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which IEC standard used to determine analog value result. Applies only
    if IEC standard used.
    '''

    testStandardIEEE: Optional[IEEEStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which IEEE standard used to determine analog value result. Applies only
    if IEEE standard used.
    '''

    testStandardISO: Optional[ISOStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which ISO standard used to determine analog value result. Applies only
    if ISO standard used.
    '''

    testStandardLaborelec: Optional[LaborelecStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which Laborelec standard used to determine analog value result. Applies
    only if Laborelec standard used.
    '''

    testStandardTAPPI: Optional[TAPPIStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which TAPPI standard used to determine analog value result. Applies only
    if TAPPI standard used.
    '''

    testStandardUKMinistryOfDefence: Optional[UKMinistryOfDefenceStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which UK Ministry of Defence standard used to determine analog value result.
    Applies only if UK Ministry of Defence standard used.
    '''

    testStandardWEP: Optional[WEPStandard] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Which WEP standard used to determine analog value result. Applies only
    if WEP standard used.
    '''

@dataclass(repr=False)
class TieFlow(IdentifiedObject):
    '''
    Defines the structure (in terms of location and direction) of the net interchange
    constraint for a control area. This constraint may be used by either AGC
    or power flow.
    '''

    positiveFlowIn: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the sign of the tie flow associated with a control area. True
    if positive flow into the terminal (load convention) is also positive flow
    into the control area. See the description of ControlArea for further explanation
    of how TieFlow.positiveFlowIn is used.
    '''

    AltTieMeas: list[AltTieMeas] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AltTieMeas.TieFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The primary and alternate tie flow measurements associated with the tie
    flow.
    '''

    ControlArea: Optional[ControlArea] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ControlArea.TieFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The control area of the tie flows.
    '''

    Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.TieFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminal to which this tie flow belongs.
    '''

@dataclass(repr=False)
class TieLine(IdentifiedObject):
    '''
    '''

    EnergyTransaction: Optional[EnergyTransaction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnergyTransaction.TieLines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A dynamic energy transaction can act as a pseudo tie line.
    '''

    ParentOfA: list[ControlAreaOperator] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ControlAreaOperator.CAChildOf',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A ControlAreaOperator has a collection of tie points that ring the ControlArea,
    called a TieLine.
    '''

    ParentOfB: Optional[CustomerConsumer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerConsumer.CustChildOf',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A CustomerConsumer may ring its perimeter with metering, which can create
    a unique SubControlArea at the collection of metering points, called a
    TieLine.
    '''

    SideA_SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.SideA_TieLines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The SubControlArea is on the A side of a collection of metered points which
    define the SubControlArea's boundary for a ControlAreaOperator or CustomerConsumer.
    '''

    SideB_SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.SideB_TieLines',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The SubControlArea is on the B side of a collection of metered points which
    define the SubControlArea's boundary for a ControlAreaOperator or CustomerConsumer.
    '''

@dataclass(repr=False)
class TiePoint(IdentifiedObject):
    '''
    Site of an interface between interchange areas. The tie point can be a
    network branch (e.g., transmission line or transformer) or a switching
    device. For transmission lines, the interchange area boundary is usually
    at a designated point such as the middle of the line. Line end metering
    is then corrected for line losses.
    '''

@dataclass(repr=False)
class TimePoint(IdentifiedObject):
    '''
    A point in time within a sequence of points in time relative to a time
    schedule.
    '''

    dateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Absolute date and time for this time point. For calendar-based time point,
    it is typically manually entered, while for interval-based or sequence-based
    time point it is derived.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if sequence-based) Relative sequence number for this time point.
    '''

    relativeTimeInterval: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if interval-based) A point in time relative to scheduled start time in
    'TimeSchedule.scheduleInterval.start'.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of this time point.
    '''

    TimeSchedule: Optional[TimeSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TimeSchedule.TimePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time schedule owning this time point.
    '''

    window: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interval defining the window of time for which this time point is valid.
    '''

@dataclass(repr=False)
class TimeSeries(IdentifiedObject):
    '''
    A set of regular time-ordered measurements or values of quantitative nature
    of an individual or collective phenomenon taken at successive, in most
    cases equidistant, periods / points of time.
    '''

    businessType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The identification of the nature of the time series.
    '''

    cancelledTS: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An indicator stating that the TimeSeries, identified by the mRID, is cancelled
    as well as all the values sent in a previous version of the TimeSeries
    in a previous document.
    '''

    curveType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The coded representation of the type of curve being described.
    '''

    objectAggregation: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identification of the object that is the common denominator used to aggregate
    a time series.
    '''

    product: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of the product such as Power, energy, reactive power, transport
    capacity that is the subject of the time series.
    '''

    version: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Version of the time series.
    '''

    AttributeInstanceComponent: list[AttributeInstanceComponent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AttributeInstanceComponent.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Auction: list[Auction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Auction.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ConstraintDuration: list[ConstraintDuration] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConstraintDuration.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DateAndOrTime: list[DateAndOrTime] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DateAndOrTime.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Domain: list[Domain] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Domain.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    EnvironmentalMonitoringStation: list[EnvironmentalMonitoringStation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalMonitoringStation.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    FlowDirection: list[FlowDirection] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FlowDirection.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketEvaluationPoint: list[MarketEvaluationPoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketEvaluationPoint.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketObjectStatus: list[MarketObjectStatus] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketObjectStatus.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketParticipant: list[MarketParticipant] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketParticipant.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktPSRType: list[MktPSRType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktPSRType.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Period: list[Period] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Period.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Point: list[Point] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Point.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Price: list[Price] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Price.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Quantity: list[Quantity] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Quantity.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Reason: list[Reason] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reason.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Unit: list[Unit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Unit.TimeSeries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class BidTimeSeries(TimeSeries):
    '''
    The formal specification of specific characteristics related to a bid.
    '''

    blockBid: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that the values in the period are considered as a whole. They
    cannot be changed or subdivided.
    '''

    direction: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The coded identification of the energy flow.
    '''

    divisible: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An indication whether or not each element of the bid may be partially accepted
    or not.
    '''

    exclusiveBidsIdentification: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unique identification associated with all linked tenders.
    The identification of a set of tenders that are linked together signifying
    that only one can be accepted.
    This identification is defined by the tenderer and must be unique for a
    given auction.
    '''

    linkedBidsIdentification: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unique identification associated with all linked bids.
    '''

    minimumActivationQuantity: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum quantity of energy that can be activated at a given time interval.
    '''

    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The numeric local priority given to a bid. Lower numeric values will have
    higher priority.
    '''

    status: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The information about the status of the bid, such as "shared", "restricted",
    ...
    '''

    stepIncrementQuantity: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum increment that can be applied for an increase in an activation
    request.
    '''

@dataclass(repr=False)
class Series(TimeSeries):
    '''
    A set of similar physical or conceptual objects defined for the same period
    or point of time.
    '''

    lastUpdateDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date of the last update related to this market object.
    '''

    methodType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of method used in the business process related to this Series, e.g.
    metering method.
    '''

    registrationDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For a market object, the date of registration of a contract, e.g. the date
    of change of supplier for a customer.
    '''

@dataclass(repr=False)
class TopologicalIsland(IdentifiedObject):
    '''
    An electrically connected subset of the network. Topological islands can
    change as the current network state changes, e.g. due to:
    - disconnect switches or breakers changing state in a SCADA/EMS.
    - manual creation, change or deletion of topological nodes in a planning
    tool.
    Only energised TopologicalNode-s shall be part of the topological island.
    '''

    AngleRefTopologicalNode: Optional[TopologicalNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.AngleRefTopologicalIsland',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The angle reference for the island. Normally there is one TopologicalNode
    that is selected as the angle reference for each island. Other reference
    schemes exist, so the association is typically optional.
    '''

    TopologicalNodes: list[TopologicalNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TopologicalNode.TopologicalIsland',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A topological node belongs to a topological island.
    '''

@dataclass(repr=False)
class TopologicalNode(IdentifiedObject):
    '''
    For a detailed substation model a topological node is a set of connectivity
    nodes that, in the current network state, are connected together through
    any type of closed switches, including jumpers. Topological nodes change
    as the current network state changes (i.e., switches, breakers, etc. change
    state).
    For a planning model, switch statuses are not used to form topological
    nodes. Instead they are manually created or deleted in a model builder
    tool. Topological nodes maintained this way are also called "busses".
    '''

    pInjection: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The active power injected into the bus at this location in addition to
    injections from equipment. Positive sign means injection into the TopologicalNode
    (bus).
    Starting value for a steady state solution.
    '''

    qInjection: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactive power injected into the bus at this location in addition to
    injections from equipment. Positive sign means injection into the TopologicalNode
    (bus).
    Starting value for a steady state solution.
    '''

    AngleRefTopologicalIsland: Optional[TopologicalIsland] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TopologicalIsland.AngleRefTopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The island for which the node is an angle reference. Normally there is
    one angle reference node for each island.
    '''

    BaseVoltage: Optional[BaseVoltage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BaseVoltage.TopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The base voltage of the topological node.
    '''

    BusNameMarker: list[BusNameMarker] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BusNameMarker.TopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    BusnameMarkers that may refer to a pre defined TopologicalNode.
    '''

    ConnectivityNodeContainer: Optional[ConnectivityNodeContainer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ConnectivityNodeContainer.TopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The connectivity node container to which the topological node belongs.
    '''

    ConnectivityNodes: list[ConnectivityNode] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConnectivityNode.TopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The connectivity nodes combine together to form this topological node.
    May depend on the current state of switches in the network.
    '''

    ReportingGroup: Optional[ReportingGroup] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReportingGroup.TopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reporting group to which the topological node belongs.
    '''

    SvInjection: list[SvInjection] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SvInjection.TopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The injection flows state variables associated with the topological node.
    '''

    SvVoltage: list[SvVoltage] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SvVoltage.TopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The state voltage associated with the topological node.
    '''

    Terminal: list[Terminal] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Terminal.TopologicalNode',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminals associated with the topological node. This can be used as
    an alternative to the connectivity node path to terminal, thus making it
    unnecessary to model connectivity nodes in some cases. Note that if connectivity
    nodes are in the model, this association would probably not be used as
    an input specification.
    '''

    TopologicalIsland: Optional[TopologicalIsland] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TopologicalIsland.TopologicalNodes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A topological node belongs to a topological island.
    '''

@dataclass(repr=False)
class Transaction(IdentifiedObject):
    '''
    The record of details of payment for service or token sale.
    '''

    diverseReference: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Formal reference for use with diverse payment (traffic fine for example).
    '''

    donorReference: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reference to the entity that is the source of 'amount' (for example: customer
    for token purchase; or supplier for free issue token).
    '''

    receiverReference: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reference to the entity that is the recipient of 'amount' (for example,
    supplier for service charge payment; or tax receiver for VAT).
    '''

    reversedId: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if 'kind' is transactionReversal) Reference to the original transaction
    that is being reversed by this transaction.
    '''

    kind: Optional[ TransactionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of transaction.
    '''

    serviceUnitsEnergy: Optional[ float | RealEnergy ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Actual amount of service units that is being paid for.
    '''

    serviceUnitsError: Optional[ float | RealEnergy ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of service units not reflected in 'serviceUnitsEnergy' due to process
    rounding or truncating errors.
    '''

    AuxiliaryAccount: Optional[AuxiliaryAccount] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AuxiliaryAccount.PaymentTransactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Auxiliary account for this payment transaction.
    '''

    CashierShift: Optional[CashierShift] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CashierShift.Transactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cashier shift during which this transaction was recorded.
    '''

    CustomerAccount: Optional[CustomerAccount] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerAccount.PaymentTransactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer account for this payment transaction.
    '''

    line: Optional[LineDetail] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transaction amount, rounding, date and note for this transaction line.
    '''

    Meter: Optional[Meter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Meter.VendingTransactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter for this vending transaction.
    '''

    PricingStructure: Optional[PricingStructure] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PricingStructure.Transactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pricing structure applicable for this transaction.
    '''

    Receipt: Optional[Receipt] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Receipt.Transactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The receipted payment for which this transaction has been recorded.
    '''

    UserAttributes: list[UserAttribute] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UserAttribute.Transaction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All snapshots of meter parameters recorded at the time of this transaction.
    Use 'name' and 'value.value' attributes to specify name and value of a
    parameter from meter.
    '''

    VendorShift: Optional[VendorShift] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'VendorShift.Transactions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Vendor shift during which this transaction was recorded.
    '''

@dataclass(repr=False)
class TransferInterface(IdentifiedObject):
    '''
    A Transfer Interface is made up of branches such as transmission lines
    and transformers.
    '''

@dataclass(repr=False)
class TransformerCoreAdmittance(IdentifiedObject):
    '''
    The transformer core admittance. Used to specify the core admittance of
    a transformer in a manner that can be shared among power transformers.
    '''

    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Magnetizing branch susceptance (B mag). The value can be positive or negative.
    '''

    b0: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence magnetizing branch susceptance.
    '''

    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Magnetizing branch conductance (G mag).
    '''

    g0: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence magnetizing branch conductance.
    '''

    TransformerEnd: list[TransformerEnd] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerEnd.CoreAdmittance',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All transformer ends having this core admittance.
    '''

    TransformerEndInfo: Optional[TransformerEndInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.CoreAdmittance',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer end datasheet used to calculate this core admittance.
    '''

@dataclass(repr=False)
class TransformerEnd(IdentifiedObject):
    '''
    A conducting connection point of a power transformer. It corresponds to
    a physical transformer winding terminal. In earlier CIM versions, the TransformerWinding
    class served a similar purpose, but this class is more flexible because
    it associates to terminal but is not a specialization of ConductingEquipment.
    '''

    endNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number for this transformer end, corresponding to the end's order in the
    power transformer vector group or phase angle clock number. Highest voltage
    winding should be 1. Each end within a power transformer should have a
    unique subsequent end number. Note the transformer end number need not
    match the terminal sequence number.
    '''

    grounded: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (for Yn and Zn connections) True if the neutral is solidly grounded.
    '''

    bmagSat: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Core shunt magnetizing susceptance in the saturation region.
    '''

    magBaseU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reference voltage at which the magnetizing saturation measurements
    were made.
    '''

    magSatFlux: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Core magnetizing saturation curve knee flux level.
    '''

    rground: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (for Yn and Zn connections) Resistance part of neutral impedance where
    'grounded' is true.
    '''

    xground: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (for Yn and Zn connections) Reactive part of neutral impedance where 'grounded'
    is true.
    '''

    BaseVoltage: Optional[BaseVoltage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BaseVoltage.TransformerEnds',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Base voltage of the transformer end. This is essential for PU calculation.
    '''

    CoreAdmittance: Optional[TransformerCoreAdmittance] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerCoreAdmittance.TransformerEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Core admittance of this transformer end, representing magnetising current
    and core losses. The full values of the transformer should be supplied
    for one transformer end only.
    '''

    FromMeshImpedance: list[TransformerMeshImpedance] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerMeshImpedance.FromTransformerEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All mesh impedances between this 'to' and other 'from' transformer ends.
    '''

    FromWindingInsulations: list[WindingInsulation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WindingInsulation.FromWinding',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PhaseTapChanger: Optional[PhaseTapChanger] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PhaseTapChanger.TransformerEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase tap changer associated with this transformer end.
    '''

    RatioTapChanger: Optional[RatioTapChanger] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RatioTapChanger.TransformerEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Ratio tap changer associated with this transformer end.
    '''

    StarImpedance: Optional[TransformerStarImpedance] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerStarImpedance.TransformerEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (accurate for 2- or 3-winding transformers only) Pi-model impedances of
    this transformer end. By convention, for a two winding transformer, the
    full values of the transformer should be entered on the high voltage end
    (endNumber=1).
    '''

    Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.TransformerEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Terminal of the power transformer to which this transformer end belongs.
    '''

    ToMeshImpedance: list[TransformerMeshImpedance] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerMeshImpedance.ToTransformerEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All mesh impedances between this 'from' and other 'to' transformer ends.
    '''

    ToWindingInsulations: list[WindingInsulation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WindingInsulation.ToWinding',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PowerTransformerEnd(TransformerEnd):
    '''
    A PowerTransformerEnd is associated with each Terminal of a PowerTransformer.
    The impedance values r, r0, x, and x0 of a PowerTransformerEnd represents
    a star equivalent as follows.
    1) for a two Terminal PowerTransformer the high voltage (TransformerEnd.endNumber=1)
    PowerTransformerEnd has non zero values on r, r0, x, and x0 while the low
    voltage (TransformerEnd.endNumber=2) PowerTransformerEnd has zero values
    for r, r0, x, and x0. Parameters are always provided, even if the PowerTransformerEnds
    have the same rated voltage. In this case, the parameters are provided
    at the PowerTransformerEnd which has TransformerEnd.endNumber equal to
    1.
    2) for a three Terminal PowerTransformer the three PowerTransformerEnds
    represent a star equivalent with each leg in the star represented by r,
    r0, x, and x0 values.
    3) For a three Terminal transformer each PowerTransformerEnd shall have
    g, g0, b and b0 values corresponding to the no load losses distributed
    on the three PowerTransformerEnds. The total no load loss shunt impedances
    may also be placed at one of the PowerTransformerEnds, preferably the end
    numbered 1, having the shunt values on end 1. This is the preferred way.
    4) for a PowerTransformer with more than three Terminals the PowerTransformerEnd
    impedance values cannot be used. Instead use the TransformerMeshImpedance
    or split the transformer into multiple PowerTransformers.
    Each PowerTransformerEnd must be contained by a PowerTransformer. Because
    a PowerTransformerEnd (or any other object) can not be contained by more
    than one parent, a PowerTransformerEnd can not have an association to an
    EquipmentContainer (Substation, VoltageLevel, etc).
    '''

    phaseAngleClock: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Terminal voltage phase angle displacement where 360 degrees are represented
    with clock hours. The valid values are 0 to 11. For example, for the secondary
    side end of a transformer with vector group code of 'Dyn11', specify the
    connection kind as wye with neutral and specify the phase angle of the
    clock as 11. The clock value of the transformer end number specified as
    1, is assumed to be zero. Note the transformer end number is not assumed
    to be the same as the terminal sequence number.
    '''

    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Magnetizing branch susceptance (B mag). The value can be positive or negative.
    '''

    b0: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence magnetizing branch susceptance.
    '''

    connectionKind: Optional[ WindingConnection ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of connection.
    '''

    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Magnetizing branch conductance.
    '''

    g0: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence magnetizing branch conductance (star-model).
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance (star-model) of the transformer end.
    The attribute shall be equal to or greater than zero for non-equivalent
    transformers.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series resistance (star-model) of the transformer end.
    '''

    ratedS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Normal apparent power rating.
    The attribute shall be a positive value. For a two-winding transformer
    the values for the high and low voltage sides shall be identical.
    '''

    ratedU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Rated voltage: phase-phase for three-phase windings, and either phase-phase
    or phase-neutral for single-phase windings.
    A high voltage side, as given by TransformerEnd.endNumber, shall have a
    ratedU that is greater than or equal to ratedU for the lower voltage sides.
    The attribute shall be a positive value.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series reactance (star-model) of the transformer end.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series reactance of the transformer end.
    '''

    PowerTransformer: Optional[PowerTransformer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerTransformer.PowerTransformerEnd',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The power transformer of this power transformer end.
    '''

@dataclass(repr=False)
class TransformerTankEnd(TransformerEnd):
    '''
    Transformer tank end represents an individual winding for unbalanced models
    or for transformer tanks connected into a bank (and bank is modelled with
    the PowerTransformer).
    '''

    phases: Optional[ PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Describes the phases carried by a conducting equipment.
    '''

    TransformerTank: Optional[TransformerTank] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerTank.TransformerTankEnds',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer this winding belongs to.
    '''

@dataclass(repr=False)
class TransformerMeshImpedance(IdentifiedObject):
    '''
    Transformer mesh impedance (Delta-model) between transformer ends.
    The typical case is that this class describes the impedance between two
    transformer ends pair-wise, i.e. the cardinalities at both transformer
    end associations are 1. However, in cases where two or more transformer
    ends are modelled the cardinalities are larger than 1.
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance between the 'from' and the 'to' end, seen from the 'from' end.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero-sequence resistance between the 'from' and the 'to' end, seen from
    the 'from' end.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactance between the 'from' and the 'to' end, seen from the 'from' end.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero-sequence reactance between the 'from' and the 'to' end, seen from
    the 'from' end.
    '''

    FromTransformerEnd: Optional[TransformerEnd] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEnd.FromMeshImpedance',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    From end this mesh impedance is connected to. It determines the voltage
    reference.
    '''

    FromTransformerEndInfo: Optional[TransformerEndInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.FromMeshImpedances',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    'from' transformer end datasheet this mesh impedance is calculated from.
    It determines the voltage reference.
    '''

    ToTransformerEnd: list[TransformerEnd] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerEnd.ToMeshImpedance',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All transformer ends this mesh impedance is connected to.
    '''

    ToTransformerEndInfos: list[TransformerEndInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerEndInfo.ToMeshImpedances',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All 'to' transformer end datasheets this mesh impedance for 'from' transformer
    end is calculated from.
    '''

@dataclass(repr=False)
class TransformerObservation(IdentifiedObject):
    '''
    Common information captured during transformer inspections and/or diagnostics.
    Note that some properties may be measured through other means and therefore
    have measurement values in addition to the observed values recorded here.
    '''

    dga: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Dissolved Gas Analysis. Typical values are: Acceptable, Overheating, Corona,
    Sparking, Arcing.
    '''

    freqResp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Frequency Response Analysis. Typical values are: acceptable, slight movement,
    significant movement, failed, near failure. A graphic of the response diagram,
    which is a type of document, may be associated with this analysis through
    the recursive document relationship of the ProcedureDataSet.
    '''

    furfuralDP: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Overall measure of furfural in oil and mechanical strength of paper. DP,
    the degree of polymerization, is the strength of the paper. Furfural is
    a measure of furfural compounds, often expressed in parts per million.
    '''

    oilColor: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Oil Quality Analysis-Color.
    '''

    oilIFT: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Oil Quality Analysis- inter facial tension (IFT) - number-Dynes/CM.
    '''

    oilLevel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The level of oil in the transformer.
    '''

    oilNeutralizationNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Oil Quality Analysis-Neutralization Number - Number - Mg KOH.
    '''

    pumpVibration: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pump vibration, with typical values being: nominal, high.
    '''

    waterContent: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Water Content expressed in parts per million.
    '''

    bushingTemp: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Bushing temperature.
    '''

    hotSpotTemp: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Hotspot oil temperature.
    '''

    oilDielectricStrength: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Oil Quality Analysis-Dielectric Strength.
    '''

    topOilTemp: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Top oil temperature.
    '''

    BushingInsultationPFs: list[BushingInsulationPF] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BushingInsulationPF.TransformerObservation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ProcedureDataSets: list[ProcedureDataSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProcedureDataSet.TransformerObservations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Reconditioning: Optional[Reconditioning] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Reconditioning.TransformerObservations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Transformer: Optional[TransformerTank] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerTank.TransformerObservations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WindingInsulationPFs: list[WindingInsulation] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WindingInsulation.TransformerObservation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class TransformerStarImpedance(IdentifiedObject):
    '''
    Transformer star impedance (Pi-model) that accurately reflects impedance
    for transformers with 2 or 3 windings. For transformers with 4 or more
    windings, TransformerMeshImpedance class shall be used.
    For transmission networks use PowerTransformerEnd impedances (r, r0, x,
    x0, b, b0, g and g0).
    '''

    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance of the transformer end.
    '''

    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series resistance of the transformer end.
    '''

    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence series reactance of the transformer end.
    '''

    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence series reactance of the transformer end.
    '''

    TransformerEnd: list[TransformerEnd] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerEnd.StarImpedance',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All transformer ends having this star impedance.
    '''

    TransformerEndInfo: Optional[TransformerEndInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.TransformerStarImpedance',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer end datasheet used to calculate this transformer star impedance.
    '''

@dataclass(repr=False)
class TransformerTest(IdentifiedObject):
    '''
    Test result for transformer ends, such as short-circuit, open-circuit (excitation)
    or no-load test.
    '''

    basePower: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Base power at which the tests are conducted, usually equal to the rateds
    of one of the involved transformer ends.
    '''

    temperature: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Temperature at which the test is conducted.
    '''

@dataclass(repr=False)
class NoLoadTest(TransformerTest):
    '''
    No-load test results determine core admittance parameters. They include
    exciting current and core loss measurements from applying voltage to one
    winding. The excitation may be positive sequence or zero sequence. The
    test may be repeated at different voltages to measure saturation.
    '''

    energisedEndVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage applied to the winding (end) during test.
    '''

    excitingCurrent: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Exciting current measured from a positive-sequence or single-phase excitation
    test.
    '''

    excitingCurrentZero: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Exciting current measured from a zero-sequence open-circuit excitation
    test.
    '''

    loss: Optional[ float | KiloActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Losses measured from a positive-sequence or single-phase excitation test.
    '''

    lossZero: Optional[ float | KiloActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Losses measured from a zero-sequence excitation test.
    '''

    EnergisedEnd: Optional[TransformerEndInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.EnergisedEndNoLoadTests',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer end that current is applied to in this no-load test.
    '''

@dataclass(repr=False)
class OpenCircuitTest(TransformerTest):
    '''
    Open-circuit test results verify winding turn ratios and phase shifts.
    They include induced voltage and phase shift measurements on open-circuit
    windings, with voltage applied to the energised end. For three-phase windings,
    the excitation can be a positive sequence (the default) or a zero sequence.
    '''

    energisedEndStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tap step number for the energised end of the test pair.
    '''

    openEndStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tap step number for the open end of the test pair.
    '''

    energisedEndVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage applied to the winding (end) during test.
    '''

    openEndVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage measured at the open-circuited end, with the energised end set
    to rated voltage and all other ends open.
    '''

    phaseShift: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase shift measured at the open end with the energised end set to rated
    voltage and all other ends open.
    '''

    EnergisedEnd: Optional[TransformerEndInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.EnergisedEndOpenCircuitTests',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer end that current is applied to in this open-circuit test.
    '''

    OpenEnd: Optional[TransformerEndInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.OpenEndOpenCircuitTests',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer end measured for induced voltage and angle in this open-circuit
    test.
    '''

@dataclass(repr=False)
class ShortCircuitTest(TransformerTest):
    '''
    Short-circuit test results determine mesh impedance parameters. They include
    load losses and leakage impedances. For three-phase windings, the excitation
    can be a positive sequence (the default) or a zero sequence. There shall
    be at least one grounded winding.
    '''

    energisedEndStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tap step number for the energised end of the test pair.
    '''

    groundedEndStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tap step number for the grounded end of the test pair.
    '''

    current: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Short circuit current..
    '''

    leakageImpedance: Optional[ float | Impedance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Leakage impedance measured from a positive-sequence or single-phase short-circuit
    test.
    '''

    leakageImpedanceZero: Optional[ float | Impedance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Leakage impedance measured from a zero-sequence short-circuit test.
    '''

    loss: Optional[ float | KiloActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Load losses from a positive-sequence or single-phase short-circuit test.
    '''

    lossZero: Optional[ float | KiloActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Load losses from a zero-sequence short-circuit test.
    '''

    power: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Short circuit apparent power.
    '''

    voltage: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Short circuit voltage..
    '''

    EnergisedEnd: Optional[TransformerEndInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.EnergisedEndShortCircuitTests',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transformer end that voltage is applied to in this short-circuit test.
    The test voltage is chosen to induce rated current in the energised end.
    '''

    GroundedEnds: list[TransformerEndInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TransformerEndInfo.GroundedEndShortCircuitTests',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All ends short-circuited in this short-circuit test.
    '''

@dataclass(repr=False)
class TypeAssetCatalogue(IdentifiedObject):
    '''
    Catalogue of generic types of assets (TypeAsset) that may be used for design
    purposes. It is not associated with a particular manufacturer.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TypeAssets: list[CatalogAssetType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'CatalogAssetType.TypeAssetCatalogue',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class UsagePoint(IdentifiedObject):
    '''
    Logical or physical point in the network to which readings or events may
    be attributed. Used at the place where a physical or virtual meter may
    be located; however, it is not required that a meter be present.
    '''

    checkBilling: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if as a result of an inspection or otherwise, there is a reason to
    suspect that a previous billing may have been performed with erroneous
    data. Value should be reset once this potential discrepancy has been resolved.
    '''

    connectionCategory: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A code used to specify the connection category, e.g., low voltage or low
    pressure, where the usage point is defined.
    '''

    disconnectionMethod: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is an indication of how the usage point is physically connected or disconnected.
    '''

    grounded: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if grounded.
    '''

    isSdp: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, this usage point is a service delivery point, i.e., a usage point
    where the ownership of the service changes hands.
    '''

    isVirtual: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, this usage point is virtual, i.e., no physical location exists
    in the network where a meter could be located to collect the meter readings.
    For example, one may define a virtual usage point to serve as an aggregation
    of usage for all of a company's premises distributed widely across the
    distribution territory. Otherwise, the usage point is physical, i.e., there
    is a logical point in the network where a meter could be located to collect
    meter readings.
    '''

    minimalUsageExpected: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, minimal or zero usage is expected at this usage point for situations
    such as premises vacancy, logical or physical disconnect. It is used for
    readings validation and estimation.
    '''

    outageRegion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Outage region in which this usage point is located.
    '''

    phaseCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of potential phases the Usage Point supports, typically 0, 1 or
    3.
    '''

    readCycle: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cycle day on which the meter for this usage point will normally be read.
    Usually correlated with the billing cycle.
    '''

    readRoute: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identifier of the route to which this usage point is assigned for purposes
    of meter reading. Typically used to configure hand held meter reading systems
    prior to collection of reads.
    '''

    serviceDeliveryRemark: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Remarks about this usage point, for example the reason for it being rated
    with a non-nominal priority.
    '''

    servicePriority: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority of service for this usage point. Note that usage points at the
    same service location can have different priorities.
    '''

    amiBillingReady: Optional[ AmiBillingReadyKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tracks the lifecycle of the metering installation at a usage point with
    respect to readiness for billing via advanced metering infrastructure reads.
    '''

    connectionState: Optional[ UsagePointConnectedKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    State of the usage point with respect to connection to the network.
    '''

    estimatedLoad: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Estimated load.
    '''

    nominalServiceVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Nominal service voltage.
    '''

    phaseCode: Optional[ PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase code. Number of wires and specific nominal phases can be deduced
    from enumeration literal values. For example, ABCN is three-phase, four-wire,
    s12n (splitSecondary12N) is single-phase, three-wire, and s1n and s2n are
    single-phase, two-wire.
    '''

    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current flow that this usage point is configured to deliver.
    '''

    ratedPower: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Active power that this usage point is configured to deliver.
    '''

    ConfigurationEvents: list[ConfigurationEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ConfigurationEvent.ChangedUsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All configuration events created for this usage point.
    '''

    CustomerAgreement: Optional[CustomerAgreement] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerAgreement.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer agreement regulating this service delivery point.
    '''

    EndDeviceControls: list[EndDeviceControl] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceControl.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device controls sending commands to this usage point.
    '''

    EndDeviceEvents: list[EndDeviceEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceEvent.UsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device events reported for this usage point.
    '''

    EndDevices: list[EndDevice] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDevice.UsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end devices at this usage point.
    '''

    EnvironmentalMonitoringStation: Optional[EnvironmentalMonitoringStation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalMonitoringStation.UsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Equipments: list[Equipment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Equipment.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All equipment connecting this usage point to the electrical grid.
    '''

    MeterReadings: list[MeterReading] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeterReading.UsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All meter readings obtained from this usage point.
    '''

    MeterReadSchedule: Optional[MeterReadSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReadSchedule.UsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter read schedule that applies to the usage point
    '''

    MeterServiceWorkTasks: list[MeterWorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MeterWorkTask.UsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All meter service work tasks at this usage point.
    '''

    MetrologyRequirements: list[MetrologyRequirement] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MetrologyRequirement.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All metrology requirements for this usage point.
    '''

    Outage: list[Outage] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Outage.EnergizedUsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All outages at this Usage Point
    '''

    physicalConnectionCapacity: Optional[DecimalQuantity] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Quantitative information about the maximum physical capacity of the connection
    for the usage point.
    '''

    PlannedOutageNotification: list[PlannedOutageNotification] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PlannedOutageNotification.UsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The planned outage notification for the specified Usage Point.
    '''

    PricingStructures: list[PricingStructure] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PricingStructure.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All pricing structures applicable to this service delivery point (with
    prepayment meter running as a stand-alone device, with no CustomerAgreement
    or Customer).
    '''

    Register: list[Register] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Register.Usage_Point',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All registers for quantities metered at this Usage Point.
    '''

    ServiceCategory: Optional[ServiceCategory] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceCategory.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Service category delivered by this usage point.
    '''

    ServiceLocation: Optional[ServiceLocation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceLocation.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Service location where the service delivered by this usage point is consumed.
    '''

    ServiceMultipliers: list[ServiceMultiplier] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ServiceMultiplier.UsagePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All multipliers applied at this usage point.
    '''

    ServiceSupplier: Optional[ServiceSupplier] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ServiceSupplier.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    ServiceSupplier (utility) utilising this usage point to deliver a service.
    '''

    UsagePointGroups: list[UsagePointGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePointGroup.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All groups to which this usage point belongs.
    '''

    UsagePointLocation: Optional[UsagePointLocation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'UsagePointLocation.UsagePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this usage point.
    '''

@dataclass(repr=False)
class MarketEvaluationPoint(UsagePoint):
    '''
    The identification of an entity where energy products are measured or computed.
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.MarketEvaluationPoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class UsagePointGroup(IdentifiedObject):
    '''
    Abstraction for management of group communications within a two-way AMR
    system or the data for a group of related usage points. Commands can be
    issued to all of the usage points that belong to a usage point group using
    a defined group address and the underlying AMR communication infrastructure.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of this group.
    '''

    DemandResponsePrograms: list[DemandResponseProgram] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DemandResponseProgram.UsagePointGroups',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All demand response programs this usage point group is enrolled in.
    '''

    EndDeviceControls: list[EndDeviceControl] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceControl.UsagePointGroups',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All end device controls sending commands to this usage point group.
    '''

    MeterReadSchedule: Optional[MeterReadSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReadSchedule.UsagePointGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter read schedule that applies to the usage point group
    '''

    UsagePoints: list[UsagePoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'UsagePoint.UsagePointGroups',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All usage points in this group.
    '''

@dataclass(repr=False)
class VSCDynamics(IdentifiedObject):
    '''
    VSC function block whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''

    VsConverter: Optional[VsConverter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'VsConverter.VSCDynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Voltage source converter to which voltage source converter dynamics model
    applies.
    '''

@dataclass(repr=False)
class ValueAliasSet(IdentifiedObject):
    '''
    Describes the translation of a set of values into a name and is intendend
    to facilitate custom translations. Each ValueAliasSet has a name, description
    etc. A specific Measurement may represent a discrete state like Open, Closed,
    Intermediate etc. This requires a translation from the MeasurementValue.value
    number to a string, e.g. 0-&gt;"Invalid", 1-&gt;"Open", 2-&gt;"Closed",
    3-&gt;"Intermediate". Each ValueToAlias member in ValueAliasSet.Value describe
    a mapping for one particular value to a name.
    '''

    Commands: list[Command] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Command.ValueAliasSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Commands using the set for translation.
    '''

    Discretes: list[Discrete] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Discrete.ValueAliasSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Measurements using the set for translation.
    '''

    RaiseLowerCommands: list[RaiseLowerCommand] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RaiseLowerCommand.ValueAliasSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Commands using the set for translation.
    '''

    Values: list[ValueToAlias] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ValueToAlias.ValueAliasSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ValueToAlias mappings included in the set.
    '''

@dataclass(repr=False)
class ValueToAlias(IdentifiedObject):
    '''
    Describes the translation of one particular value into a name, e.g. 1 as
    "Open".
    '''

    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The value that is mapped.
    '''

    ValueAliasSet: Optional[ValueAliasSet] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ValueAliasSet.Values',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The ValueAliasSet having the ValueToAlias mappings.
    '''

@dataclass(repr=False)
class Vendor(IdentifiedObject):
    '''
    The entity that owns the point of sale and contracts with the cashier to
    receipt payments and vend tokens using the payment system. The vendor has
    a private contract with and is managed by the merchant which is a type
    of organisation. The vendor is accountable to the merchant for revenue
    collected, and the merchant is in turn accountable to the supplier.
    '''

    VendorShifts: list[VendorShift] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'VendorShift.Vendor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All vendor shifts opened and owned by this vendor.
    '''

@dataclass(repr=False)
class VendorShift(IdentifiedObject):
    '''
    The operating shift for a vendor during which the vendor may transact against
    the merchant's account. It aggregates transactions and receipts during
    the shift and periodically debits a merchant account. The totals in vendor
    shift should always be the sum of totals aggregated in all cashier shifts
    that were open under the particular vendor shift.
    '''

    posted: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, merchantDebitAmount has been debited from MerchantAccount; typically
    happens at the end of VendorShift when it closes.
    '''

    merchantDebitAmount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The amount that is to be debited from the merchant account for this vendor
    shift. This amount reflects the sum(PaymentTransaction.transactionAmount).
    '''

    MerchantAccount: Optional[MerchantAccount] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MerchantAccount.VendorShifts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Merchant account this vendor shift periodically debits (based on aggregated
    transactions).
    '''

    Receipts: list[Receipt] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Receipt.VendorShift',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All receipts recorded during this vendor shift.
    '''

    Transactions: list[Transaction] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Transaction.VendorShift',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All transactions recorded during this vendor shift.
    '''

    Vendor: Optional[Vendor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Vendor.VendorShifts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Vendor that opens and owns this vendor shift.
    '''

@dataclass(repr=False)
class VisibilityLayer(IdentifiedObject):
    '''
    Layers are typically used for grouping diagram objects according to themes
    and scales. Themes are used to display or hide certain information (e.g.,
    lakes, borders), while scales are used for hiding or displaying information
    depending on the current zoom level (hide text when it is too small to
    be read, or when it exceeds the screen size). This is also called de-cluttering.
    CIM based graphics exchange supports an m:n relationship between diagram
    objects and layers. The importing system shall convert an m:n case into
    an appropriate 1:n representation if the importing system does not support
    m:n.
    '''

    drawingOrder: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The drawing order for this layer. The higher the number, the later the
    layer and the objects within it are rendered.
    '''

    VisibleObjects: list[DiagramObject] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DiagramObject.VisibilityLayers',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A visibility layer can contain one or more diagram objects.
    '''

@dataclass(repr=False)
class WindPlantDynamics(IdentifiedObject):
    '''
    Parent class supporting relationships to wind turbines type 3 and type
    4 and wind plant IEC and user-defined wind plants including their control
    models.
    '''

    RemoteInputSignal: Optional[RemoteInputSignal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RemoteInputSignal.WindPlantDynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The remote signal with which this power plant is associated.
    '''

    WindTurbineType3or4Dynamics: list[WindTurbineType3or4Dynamics] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WindTurbineType3or4Dynamics.WindPlantDynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The wind turbine type 3 or type 4 associated with this wind plant.
    '''

@dataclass(repr=False)
class WindTurbineType3or4Dynamics(IdentifiedObject):
    '''
    Parent class supporting relationships to wind turbines type 3 and type
    4 and wind plant including their control models.
    '''

    PowerElectronicsConnection: Optional[PowerElectronicsConnection] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerElectronicsConnection.WindTurbineType3or4Dynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The power electronics connection associated with this wind turbine type
    3 or type 4 dynamics model.
    '''

    RemoteInputSignal: Optional[RemoteInputSignal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RemoteInputSignal.WindTurbineType3or4Dynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Remote input signal used by these wind turbine type 3 or type 4 models.
    '''

    WindPlantDynamics: Optional[WindPlantDynamics] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WindPlantDynamics.WindTurbineType3or4Dynamics',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The wind plant with which the wind turbines type 3 or type 4 are associated.
    '''

@dataclass(repr=False)
class WindingInsulation(IdentifiedObject):
    '''
    Winding insulation condition as a result of a test.
    '''

    insulationPFStatus: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of Winding Insulation Power Factor as of statusDate: Acceptable,
    Minor Deterioration or Moisture Absorption, Major Deterioration or Moisture
    Absorption, Failed.
    '''

    insulationResistance: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For testType, status of Winding Insulation Resistance as of statusDate.
    Typical values are: Acceptable, Questionable, Failed.
    '''

    leakageReactance: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    As of statusDate, the leakage reactance measured at the "from" winding
    with the "to" winding short-circuited and all other windings open-circuited.
    '''

    FromWinding: Optional[TransformerEnd] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEnd.FromWindingInsulations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ToWinding: Optional[TransformerEnd] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerEnd.ToWindingInsulations',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TransformerObservation: Optional[TransformerObservation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TransformerObservation.WindingInsulationPFs',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class WirePosition(IdentifiedObject):
    '''
    Identification, spacing and configuration of the wires of a conductor with
    respect to a structure.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Numbering for wires on a WireSpacingInfo. Neutrals should be numbered last.
    '''

    xCoord: Optional[ float | Displacement ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Signed horizontal distance from the wire at this position to a common reference
    point.
    '''

    yCoord: Optional[ float | Displacement ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Signed vertical distance from the wire at this position: above ground (positive
    value) or burial depth below ground (negative value).
    '''

    WirePhaseInfo: list[WirePhaseInfo] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'WirePhaseInfo.WirePosition',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Wire phase information for this wire position.
    '''

    WireSpacingInfo: Optional[WireSpacingInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WireSpacingInfo.WirePositions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Wire spacing data this wire position belongs to.
    '''

@dataclass(repr=False)
class WorkFlowStep(IdentifiedObject):
    '''
    A pre-defined set of work steps for a given type of work.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used to define dependencies of each work flow step, which is for the instance
    of WorkTask associated with a given instance of WorkFlow.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Work: Optional[Work] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Work.WorkFlowSteps',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    WorkTasks: list[OldWorkTask] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OldWorkTask.WorkFlowStep',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AccountNotification(Identity):
    '''
    Notifications for move-in, move-out, delinquencies, etc.
    '''

    customerNotificationType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Notifications for move-in, move-out, delinquencies, planned outage, demand
    response programs, time of use, etc.
    '''

    methodType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    method of notification such as phone call, email, letter, door hanger,
    text message, etc.
    '''

    note: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Free form text characterizing the notification.
    '''

    time: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time of notification - this is the time the notification was sent.
    '''

    CustomerAccount: Optional[CustomerAccount] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CustomerAccount.AccountNotification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The customer account for which a notification is made
    '''

@dataclass(repr=False)
class AceTariffType(Identity):
    '''
    The Area Control Error tariff type that is applied or used.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The coded type of an ACE tariff.
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.AceTariffType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Point: list[Point] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Point.AceTariffType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Unit: list[Unit] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Unit.AceTariffType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AllocationResult(Identity):
    '''
    Models Market clearing results. Indicates market horizon, interval based.
    Used by a market quality system for billing and settlement purposes.
    '''

    intervalStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateTimeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateUser: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AllocationResultValues: list[AllocationResultValues] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AllocationResultValues.AllocationResult',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AllocationResultValues(Identity):
    '''
    Models Market clearing results in terms of price and MW values.
    '''

    aggregateType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    "1" -- "Detail",
    "2" -- "Aggregate by Market service type", in which case, the "AllocationEnergyType"
    field will not be filled;
    "3" -- "Aggregate by "AllocationEnergyType", in which case "MarketServiceType"
    will not be filled.
    '''

    allocationMwHour: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    allocationPrice: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    energyTypeCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    marketServiceType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Choices are:
    ME - Market Energy Capacity;
    SR - Spinning Reserve Capacity;
    NR - Non-Spinning Reserve Capacity;
    DAC - Day Ahead Capacity;
    DEC - Derate Capacity
    '''

    AllocationResult: Optional[AllocationResult] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AllocationResult.AllocationResultValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: Optional[RegisteredResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegisteredResource.AllocationResultValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AreaReserveSpec(Identity):
    '''
    The control area's reserve specification.
    '''

    Description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Description of the object or instance.
    '''

    lowerRegMarginReqt: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Lower regulating margin requirement in MW, the amount of generation that
    can be dropped by control in 10 minutes
    '''

    opReserveReqt: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Operating reserve requirement in MW, where operating reserve is the generating
    capability that is fully available within 30 minutes. Operating reserve
    is composed of primary reserve (t less than 10 min) and secondary reserve
    (10 less than t less than 30 min).
    '''

    primaryReserveReqt: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Primary reserve requirement in MW, where primary reserve is generating
    capability that is fully available within 10 minutes. Primary reserve is
    composed of spinning reserve and quick-start reserve.
    '''

    raiseRegMarginReqt: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Raise regulating margin requirement in MW, the amount of generation that
    can be picked up by control in 10 minutes
    '''

    spinningReserveReqt: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Spinning reserve requirement in MW, spinning reserve is generating capability
    that is presently synchronized to the network and is fully available within
    10 minutes
    '''

    SubControlArea: list[SubControlArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SubControlArea.AreaReserveSpecification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AttributeInstanceComponent(Identity):
    '''
    A class used to provide information about an attribute.
    '''

    attribute: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The identification of the formal name of an attribute.
    '''

    attributeValue: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The instance value of the attribute.
    '''

    position: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A sequential value representing a relative sequence number.
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.AttributeInstanceComponent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.AttributeInstanceComponent',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AttributeProperty(Identity):
    '''
    Property for a particular attribute that contains name and value.
    '''

@dataclass(repr=False)
class AuxiliaryCost(Identity):
    '''
    Models Market clearing results for Auxiliary costs.
    '''

    intervalStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateTimeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateUser: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    marketType: Optional[ MarketType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AuxillaryValues: list[AuxiliaryValues] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AuxiliaryValues.AuxillaryCost',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AuxiliaryObject(Identity):
    '''
    Models Auxiliary Values.
    '''

    RegisteredGenerator: Optional[RegisteredGenerator] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegisteredGenerator.AuxillaryObject',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredLoad: Optional[RegisteredLoad] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegisteredLoad.AuxillaryObject',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class AuxiliaryValues(AuxiliaryObject):
    '''
    Models Auxiliary Values.
    '''

    availUndispatchedQ: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    incrementalORAvail: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    maxExpostCapacity: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    minExpostCapacity: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    noLoadCost: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    startUpCost: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    noLoadCostEligibilityFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    startUpCostEligibilityFlag: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AuxillaryCost: Optional[AuxiliaryCost] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AuxiliaryCost.AuxillaryValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    FiveMinAuxillaryData: Optional[FiveMinAuxiliaryData] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'FiveMinAuxiliaryData.AuxillaryValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TenMinAuxillaryData: Optional[TenMinAuxiliaryData] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TenMinAuxiliaryData.AuxillaryData',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class BidDistributionFactor(Identity):
    '''
    This class allows SC to input different time intervals for distribution
    factors.
    '''

    timeIntervalEnd: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End of the time interval n which bid is valid (yyyy-mm-dd hh24: mi: ss)
    '''

    timeIntervalStart: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start of the time interval in which bid is valid (yyyy-mm-dd hh24: mi:
    ss).
    '''

    PnodeDistributionFactor: list[PnodeDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PnodeDistributionFactor.BidDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ProductBid: Optional[ProductBid] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ProductBid.BidDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class BranchEndFlow(Identity):
    '''
    Dynamic flows and ratings associated with a branch end.
    '''

    loadDumpRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Load Dump Rating for the branch
    '''

    longTermRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Long Term Rating for the branch
    '''

    mVARFlow: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The MVAR flow on the branch
    Attribute Usage: Reactive power flow at the series device, transformer,
    phase shifter, or line end
    '''

    mwFlow: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The MW flow on the branch
    Attribute Usage: Active power flow at the series device, transformer, phase
    shifter, or line end
    '''

    normalRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Normal Rating for the branch
    '''

    shortTermRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Short Term Rating for the branch
    '''

    MktACLineSegmentEndAFlow: list[MktACLineSegment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktACLineSegment.EndAFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktACLineSegmentEndBFlow: list[MktACLineSegment] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktACLineSegment.EndBFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktPowerTransformerEndAFlow: list[MktPowerTransformer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktPowerTransformer.EndAFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktPowerTransformerEndBFlow: list[MktPowerTransformer] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktPowerTransformer.EndBFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktSeriesCompensatorEndBFlow: list[MktSeriesCompensator] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktSeriesCompensator.EndBFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktSeriresCompensatorEndAFlow: list[MktSeriesCompensator] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MktSeriesCompensator.EndAFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class BranchGroupTerminal(Identity):
    '''
    A specific directed terminal flow for a branch group.
    '''

    positiveFlowIn: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The flow into the terminal is summed if set true. The flow out of the terminal
    is summed if set false.
    '''

    BranchGroup: Optional[BranchGroup] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BranchGroup.BranchGroupTerminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The branch group to which the directed branch group terminals belong.
    '''

    Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.BranchGroupTerminal',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminal to be summed.
    '''

@dataclass(repr=False)
class CalculationMethodOrder(Identity):
    '''
    The order of this calculation method in a hierarchy of calculation methods.
    '''

    order: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Order of the statistical calculation method within the calculation method
    hierarchy.
    '''

    CalculationMethodHierarchy: Optional[CalculationMethodHierarchy] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CalculationMethodHierarchy.CalculationMethodOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The calculation method hierarchy of which this order of statistical calculation
    is a member.
    '''

    StatisicalCalculation: Optional[StatisticalCalculation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'StatisticalCalculation.CalculationMethodOrder',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The statistical calculation done at this order.
    '''

@dataclass(repr=False)
class ChangeSet(Identity):
    '''
    Describes a set of changes that can be applied in different situations.
    A given registered target object MRID may only be referenced once by the
    contained change set members.
    '''

    ChangeSetMember: list[ChangeSetMember] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ChangeSetMember.Changeset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Data objects contained in the dataset.
    '''

    IncrementalDatasetArg: list[IncrementalDatasetArg] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IncrementalDatasetArg.IncrementalDataset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    NetworkModelProjectChangeVersion: list[NetworkModelProjectChangeVersion] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NetworkModelProjectChangeVersion.ChangeSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The project of the details of model changes.
    '''

    NMProjectStage: Optional[NetworkModelProjectStage] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectStage.ChangeSets',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ChangeSetMember(Identity):
    '''
    A CRUD-style data object.
    '''

    Changeset: Optional[ChangeSet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ChangeSet.ChangeSetMember',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Dataset containing the data objects.
    '''

    PropertiesObject: Optional[IdentifiedObject] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IdentifiedObject.PropertiesCIMDataObject',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The CIM object holding the properties of this dataset context. Sometimes
    properties are not required and only the reference to the registered object
    is required.
    '''

    TargetObject: Optional[IdentifiedObject] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IdentifiedObject.TargetingCIMDataObject',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The registered CIM object.
    '''

@dataclass(repr=False)
class CommodityPrice(Identity):
    '''
    The CommodityPrice class is used to define the price of a commodity during
    a given time interval. The interval may be long, e.g. a year, or very short,
    e.g. 5 minutes. There will be many instances of the CommodityPrice class
    for each instance of the CommodityDefinition to which it is associated.
    Note that there may be more than once price associated with a given interval
    and these variances are described by the association (or associations)
    with the PriceDescriptor class.
    '''

    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The price of the Commodity, expressed as a floating point value with the
    currency and unit of measure defined in the associated CommodityDefinition
    class.
    '''

    CommodityDefinition: Optional[CommodityDefinition] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'CommodityDefinition.CommodityPrice',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PnodeClearing: Optional[PnodeClearing] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PnodeClearing.CommodityPrice',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PriceDescriptor: Optional[PriceDescriptor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PriceDescriptor.CommodityPrice',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    timeIntervalPeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time interval over which the CommodityPrice is valid, using the standard
    conventions associated with the DateTimeInterval class.
    '''

@dataclass(repr=False)
class ConstraintDuration(Identity):
    '''
    Duration constraint to activate, to put in operation, to deactivate, ...
    a given event.
    '''

    duration: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The duration of the constraint.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of the constraint.
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.ConstraintDuration',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ConsumptionTariffInterval(Identity):
    '''
    One of a sequence of intervals defined in terms of consumption quantity
    of a service such as electricity, water, gas, etc. It is typically used
    in association with TariffProfile to define the steps or blocks in a step
    tariff structure, where startValue simultaneously defines the entry value
    of this step and the closing value of the previous step. Where consumption
    is >= startValue it falls within this interval and where consumption is
    < startValue it falls within the previous interval.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A sequential reference that defines the identity of this interval and its
    relative position with respect to other intervals in a sequence of intervals.
    '''

    startValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The lowest level of consumption that defines the starting point of this
    interval. The interval extends to the start of the next interval or until
    it is reset to the start of the first interval by TariffProfile.tariffCycle.
    '''

    Charges: list[Charge] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Charge.ConsumptionTariffIntervals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All charges used to define this consumption tariff interval.
    '''

    ReadingType: Optional[ReadingType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReadingType.ConsumptionTariffIntervals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reading type for 'startValue'.
    '''

    TariffProfiles: list[TariffProfile] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TariffProfile.ConsumptionTariffIntervals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All tariff profiles defined by this consumption tariff interval.
    '''

    TouTariffIntervals: list[TimeTariffInterval] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeTariffInterval.ConsumptionTariffIntervals',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All time of use tariff intervals influenced by this consumption tariff
    interval.
    '''

@dataclass(repr=False)
class ContractDistributionFactor(Identity):
    '''
    Distribution among resources at the sink point or source point.
    '''

@dataclass(repr=False)
class ControlAreaDesignation(Identity):
    '''
    Indicates Control Area associated with self-schedule.
    '''

    attained: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Attained.
    '''

    native: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Native.
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.ControlAreaDesignation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SubControlArea: list[SubControlArea] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SubControlArea.ControlAreaDesignation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class CurtailmentProfile(Identity):
    '''
    Curtailing entity must be providing at least one service to the EnergyTransaction.
    The CurtailmentProfile must be completely contained within the EnergyProfile
    timeframe for this EnergyTransaction.
    '''

@dataclass(repr=False)
class CurveData(Identity):
    '''
    Multi-purpose data points for defining a curve. The use of this generic
    class is discouraged if a more specific class can be used to specify the
    X and Y axis values along with their specific data types.
    '''

    xvalue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The data value of the X-axis variable, depending on the X-axis units.
    '''

    y1value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The data value of the first Y-axis variable, depending on the Y-axis units.
    '''

    y2value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The data value of the second Y-axis variable (if present), depending on
    the Y-axis units.
    '''

    y3value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The data value of the third Y-axis variable (if present), depending on
    the Y-axis units.
    '''

    Curve: Optional[Curve] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Curve.CurveDatas',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The curve of this curve data point.
    '''

@dataclass(repr=False)
class CustomerNotification(Identity):
    '''
    Conditions for notifying the customer about the changes in the status of
    their service (e.g., outage restore, estimated restoration time, tariff
    or service level change, etc.)
    '''

    contactType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of contact (e.g., phone, email, etc.).
    '''

    contactValue: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value of contact type (e.g., phone number, email address, etc.).
    '''

    earliestDateTimeToCall: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Earliest date time to call the customer.
    '''

    latestDateTimeToCall: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Latest date time to call the customer.
    '''

    trigger: Optional[ NotificationTriggerKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Trigger for this notification.
    '''

    Customer: Optional[Customer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Customer.CustomerNotifications',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Customer requiring this notification.
    '''

    Incident: Optional[Incident] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Incident.CustomerNotifications',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Incident as a subject of this customer notification.
    '''

    TroubleTickets: list[TroubleTicket] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TroubleTicket.Notification',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All trouble tickets with this notification.
    '''

@dataclass(repr=False)
class DERCurveData(Identity):
    '''
    The DER curve data class provides the nominal, maximum and minimum values
    for a DER Monitorable parameter for a series of time intervals defined
    by the DER DispatchSchedule.
    '''

    intervalNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The sequence number of a time interval defined by the DispatchSchedule.
    '''

    maxYValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum value of the DERMonitorableParameter during the time interval.
    '''

    minYValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum value of the DERMonitorableParameter during the time interval.
    '''

    nominalYValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The nominal value of the DERMonitorableParameter during the time interval.
    '''

    timeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The start time of the interval
    '''

    DERMonitorableParameter: Optional[DERMonitorableParameter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DERMonitorableParameter.DERCurveData',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DER monitorable parameter for which a time dependent curve has been
    created.
    '''

    DispatchSchedule: Optional[DispatchSchedule] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DispatchSchedule.DERCurveData',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The schedule used for dispatching or forecasting the values of DER monitorable
    parameters over time.
    '''

@dataclass(repr=False)
class DERFunction(Identity):
    '''
    Specifies the list of functions that are supported.
    '''

    connectDisconnect: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set to TRUE, the connect/disconnect function is supported.
    '''

    frequencyWattCurveFunction: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    maxRealPowerLimiting: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set to TRUE, the maxRealPowerLimiting function is supported.
    '''

    rampRateControl: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set to TRUE, the rampRateControl function is supported.
    '''

    reactivePowerDispatch: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set to TRUE, the reactivePowerDispatch function is supported.
    '''

    realPowerDispatch: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set to TRUE, the realPowerDispatch function is supported.
    '''

    voltageRegulation: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set to TRUE, the voltageRegulation function is supported.
    '''

    voltVarCurveFunction: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set to TRUE, the voltVARCurveFunction is supported.
    '''

    voltWattCurveFunction: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If set to TRUE, the voltWattCurveFunction is supported.
    '''

    EndDeviceGroup: Optional[EndDeviceGroup] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDeviceGroup.DER_Function',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DER Group supporting the DER functions.
    '''

@dataclass(repr=False)
class DERMonitorableParameter(Identity):
    '''
    To define the DER monitorable parameters that will be forecasted and dispatched
    for a DER Group. Each parameter is represented as a Y Value at a point
    in time or on a curve as a function of time, which is represented on the
    X axis.
    '''

    yUnitInstalledMax: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum value of the DERMonitorableParameter based on the installed
    capacity.
    '''

    yUnitInstalledMin: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum value of the DERMonitorableParameter based on the installed
    capacity.
    '''

    DERParameter: Optional[ DERParameterKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Defines the specific engineering value being forecasted or dispatched.
    '''

    flowDirection: Optional[ FlowDirectionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of flow direction for reading/measured values proper to some commodities
    such as, for example, energy, power, demand.
    '''

    yMultiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The UnitMultiplier that is applied to the DERMonitorableParameter.
    '''

    yUnit: Optional[ DERUnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DERUnitSymbol that is applied to the DERMonitorableParameter
    '''

    DERCurveData: Optional[DERCurveData] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DERCurveData.DERMonitorableParameter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the time dependent curve for a DER monitorable parameter
    '''

    DispatchSchedule: list[DispatchSchedule] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DispatchSchedule.DERMonitorableParameter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The schedule used for dispatching or forecasting the values of DER monitorable
    parameters over time.
    '''

    EndDeviceGroup: list[EndDeviceGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EndDeviceGroup.DERMonitorableParameter',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DER Group having DER monitorable parameters.
    '''

@dataclass(repr=False)
class DateAndOrTime(Identity):
    '''
    The date and/or the time.
    '''

    date: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date as "yyyy-mm-dd", which conforms with ISO 8601
    '''

    time: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time as "hh:mm:ss.sssZ", which conforms with ISO 8601.
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.DateAndOrTime',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.DateAndOrTime',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class DiagramObjectGluePoint(Identity):
    '''
    This is used for grouping diagram object points from different diagram
    objects that are considered to be glued together in a diagram even if they
    are not at the exact same coordinates.
    '''

    DiagramObjectPoints: list[DiagramObjectPoint] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DiagramObjectPoint.DiagramObjectGluePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A diagram object glue point is associated with 2 or more object points
    that are considered to be 'glued' together.
    '''

@dataclass(repr=False)
class DiagramObjectPoint(Identity):
    '''
    A point in a given space defined by 3 coordinates and associated to a diagram
    object. The coordinates may be positive or negative as the origin does
    not have to be in the corner of a diagram.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The sequence position of the point, used for defining the order of points
    for diagram objects acting as a polyline or polygon with more than one
    point. The attribute shall be a positive value.
    '''

    xPosition: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The X coordinate of this point.
    '''

    yPosition: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Y coordinate of this point.
    '''

    zPosition: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The Z coordinate of this point.
    '''

    DiagramObject: Optional[DiagramObject] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DiagramObject.DiagramObjectPoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The diagram object with which the points are associated.
    '''

    DiagramObjectGluePoint: Optional[DiagramObjectGluePoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DiagramObjectGluePoint.DiagramObjectPoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The 'glue' point to which this point is associated.
    '''

@dataclass(repr=False)
class DispatchSchedule(Identity):
    '''
    Specifies the characteristics of the time schedule over which DERMonitorableParameters
    are dispatched.
    '''

    numberOfIntervals: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used to specify the number of intervals when requesting a forecast or a
    dispatch.
    '''

    startTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The start time of the first interval in the dispatch schedule
    '''

    timeIntervalDuration: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The length of time for each interval in the dispatch schedule.
    '''

    confidence: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A value set by the system, function, algorithm or person creating a prediction
    as to how accurate the prediction is.
    '''

    curveStyleKind: Optional[ CurveStyle ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used to specify whether the values over an interval are constant (constantYValue)
    or linearly interpolated (straightLineYValues)
    '''

    timeIntervalUnit: Optional[ TimeIntervalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The unit of measure for the time axis of the dispatch schedule.
    '''

    DERCurveData: list[DERCurveData] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DERCurveData.DispatchSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Specifies the time dependent curve for a DER monitorable parameter in the
    DER dispatch schedule.
    '''

    DERMonitorableParameter: Optional[DERMonitorableParameter] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'DERMonitorableParameter.DispatchSchedule',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The DER monitorable parameter included in the DER dispatch schedule.
    '''

@dataclass(repr=False)
class DistributionFactorSet(Identity):
    '''
    A containing class that groups all the distribution factors within a market.
    This is calculated daily for DA factors and hourly for RT factors.
    '''

    intervalEndTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The end of the time interval for which requirement is defined.
    '''

    intervalStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The start of the time interval for which requirement is defined.
    '''

    marketType: Optional[ MarketType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market type.
    '''

    GenDistributionFactor: list[GenDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'GenDistributionFactor.DistributionFactorSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    LoadDistributionFactor: list[LoadDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'LoadDistributionFactor.DistributionFactorSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SysLoadDistribuFactor: list[SysLoadDistributionFactor] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SysLoadDistributionFactor.DistributionFactorSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class EndDeviceAction(Identity):
    '''
    Action/command performed by an end device on a device other than the end
    device.
    '''

    command: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Command text.
    '''

    durationIndefinite: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the action of this control is indefinite.
    '''

    startDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start date and time for action of this control.
    '''

    duration: Optional[ float | Minutes ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Amount of time the action of this control is to remain active.
    '''

    EndDeviceControl: Optional[EndDeviceControl] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDeviceControl.EndDeviceAction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End device control issuing this end device action.
    '''

@dataclass(repr=False)
class PanDemandResponse(EndDeviceAction):
    '''
    PAN control used to issue action/command to PAN devices during a demand
    response/load control event.
    '''

    cancelControlMode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Encoding of cancel control.
    '''

    cancelDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Timestamp when a canceling of the event is scheduled to start.
    '''

    cancelNow: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, a canceling of the event should start immediately.
    '''

    criticalityLevel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Level of criticality for the action of this control. The action taken by
    load control devices for an event can be solely based on this value, or
    in combination with other load control event fields supported by the device.
    '''

    enrollmentGroup: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Provides a mechanism to direct load control actions to groups of PAN devices.
    It can be used in conjunction with the PAN device types.
    '''

    avgLoadAdjustment: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used to define a maximum energy usage limit as a percentage of the client
    implementations specific average energy usage. The load adjustment percentage
    is added to 100% creating a percentage limit applied to the client implementations
    specific average energy usage. A -10% load adjustment percentage will establish
    an energy usage limit equal to 90% of the client implementations specific
    average energy usage. Each load adjustment percentage is referenced to
    the client implementations specific average energy usage. There are no
    cumulative effects.
    The range of this field is -100% to +100% with a resolution of 1. A -100%
    value equals a total load shed. A +100% value will limit the energy usage
    to the client implementations specific average energy usage.
    '''

    coolingOffset: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Requested offset to apply to the normal cooling setpoint at the time of
    the start of the event. It represents a temperature change that will be
    applied to the associated cooling set point. The temperature offsets will
    be calculated per the local temperature in the thermostat. The calculated
    temperature will be interpreted as the number of degrees to be added to
    the cooling set point. Sequential demand response events are not cumulative.
    The offset shall be applied to the normal setpoint.
    '''

    coolingSetpoint: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Requested cooling set point. Temperature set point is typically defined
    and calculated based on local temperature.
    '''

    dutyCycle: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum "on" state duty cycle as a percentage of time. For example, if
    the value is 80, the device would be in an "on" state for 80% of the time
    for the duration of the action.
    '''

    heatingOffset: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Requested offset to apply to the normal heating setpoint at the time of
    the start of the event. It represents a temperature change that will be
    applied to the associated heating set point. The temperature offsets will
    be calculated per the local temperature in the thermostat. The calculated
    temperature will be interpreted as the number of degrees to be subtracted
    from the heating set point. Sequential demand response events are not cumulative.
    The offset shall be applied to the normal setpoint.
    '''

    heatingSetpoint: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Requested heating set point. Temperature set point is typically defined
    and calculated based on local temperature.
    '''

    appliance: Optional[ControlledAppliance] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Appliance being controlled.
    '''

@dataclass(repr=False)
class PanDisplay(EndDeviceAction):
    '''
    PAN action/command used to issue the displaying of text messages on PAN
    devices.
    '''

    confirmationRequired: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the requesting entity (e.g. retail electric provider) requires
    confirmation of the successful display of the text message.
    '''

    priority: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority associated with the text message to be displayed.
    '''

    textMessage: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Text to be displayed by a PAN device.
    '''

    transmissionMode: Optional[ TransmissionModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transmission mode to be used for this PAN display control.
    '''

@dataclass(repr=False)
class PanPricing(EndDeviceAction):
    '''
    PAN action/command used to issue pricing information to a PAN device.
    '''

    providerID: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unique identifier for the commodity provider.
    '''

    PanPricingDetails: list[PanPricingDetail] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PanPricingDetail.PanPricing',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All pricing details issued by this PAN pricing command/action.
    '''

@dataclass(repr=False)
class EndDeviceEventDetail(Identity):
    '''
    Name-value pair, specific to end device events.
    '''

    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name.
    '''

    EndDeviceEvent: Optional[EndDeviceEvent] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EndDeviceEvent.EndDeviceEventDetails',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End device owning this detail.
    '''

    value: Optional[StringQuantity] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value, including unit information.
    '''

@dataclass(repr=False)
class EnergyPriceCurve(Identity):
    '''
    Relationship between a price in $(or other monetary unit) /hour (Y-axis)
    and a MW value (X-axis).
    '''

@dataclass(repr=False)
class EnergyProfile(Identity):
    '''
    Specifies the start time, stop time, level for an EnergyTransaction.
    '''

@dataclass(repr=False)
class EnvironmentalLocationType(Identity):
    '''
    Type of environmental location. Used when an environmental alert or phenomenon
    has multiple locations associated with it.
    '''

    kind: Optional[ LocationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The kind of location. Typical values might be center, extent, primary,
    secondary, etc.
    '''

    EnvironmentalAlert: list[EnvironmentalAlert] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalAlert.EnvironmentalLocationKind',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental alert applying to location of this type.
    '''

    EnvironmentalPhenomenon: list[EnvironmentalPhenomenon] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalPhenomenon.EnvironmentalLocationKind',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Environmental phenomenon for which this location is of relevance.
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.EnvironmentalLocationKind',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of this instance of ths kind of environmental location.
    '''

@dataclass(repr=False)
class EnvironmentalPhenomenon(Identity):
    '''
    The actual or forecast characteristics of an environmental phenomenon at
    a specific point in time (or during a specific time interval) that may
    have both a center and area/line location.
    '''

    EnvironmentalInformation: Optional[EnvironmentalInformation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalInformation.EnvironmentalPhenomenon',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The forecast or observation of which this phenomenon description is a part.
    '''

    EnvironmentalLocationKind: list[EnvironmentalLocationType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalLocationType.EnvironmentalPhenomenon',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location of relevance to this environmental phenomenon.
    '''

    PhenomenonClassification: Optional[PhenomenonClassification] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PhenomenonClassification.EnvironmentalPhenomenon',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The classification of this phenomenon.
    '''

    timeInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The timestamp of the phenomenon as a single point or time interval.
    '''

@dataclass(repr=False)
class AtmosphericPhenomenon(EnvironmentalPhenomenon):
    '''
    An atmospheric phenomenon with a base and altitude providing the vertical
    coverage (combined with the Location to provide three dimensional space).
    '''

    direction: Optional[ float | Bearing ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The direction the phenomenon is moving.
    '''

    maxCoverage: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum percentage coverage
    '''

    minCoverage: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum percentage coverage
    '''

    speed: Optional[ float | Speed ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The speed of the phenomenon
    '''

    altitude: Optional[RelativeDisplacement] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum altitude of the phenomenon.
    '''

    base: Optional[RelativeDisplacement] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The base altitude of the phenomenon.
    '''

@dataclass(repr=False)
class CloudCondition(AtmosphericPhenomenon):
    '''
    A classified cloud phenomenon with a type.
    '''

    kind: Optional[ CloudKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of the cloud as defined by the CloudKind enumeration.
    '''

@dataclass(repr=False)
class Cyclone(AtmosphericPhenomenon):
    '''
    A cyclone (or tropical cyclone), a rapidly-rotating storm system characterized
    by a low-pressure center, strong winds, and a spiral arrangement of thunderstorms
    that produce heavy rain.
    '''

    windForce: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Wind Force as classified on the Beaufort Scale (0-12) during the time interval.
    '''

    centralPressure: Optional[ float | Pressure ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The central pressure of the cyclone during the time interval.
    '''

    maxSurfaceWindSpeed: Optional[ float | Speed ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum surface wind speed of the cyclone during the time interval.
    '''

@dataclass(repr=False)
class Hurricane(Cyclone):
    '''
    A hurricane, a subtype of cyclone occurring in the North Atlantic Ocean
    or North-eastern Pacific Ocean whose intensity is measured using the Saffir-Simpson
    Hurricane Scale.
    '''

    category: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The hurricane's category during the time interval, using Saffir-Simpson
    Hurricane Wind Scale, a 1 to 5 rating based on a hurricane's sustained
    wind speed.
    '''

@dataclass(repr=False)
class TropicalCycloneAustralia(Cyclone):
    '''
    A tropical cyclone, a subtype of cyclone that forms to the east of 90°E
    in the Southern Hemisphere whose intensity is measured by the Australian
    tropical cyclone intensity scale.
    '''

    category: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Strength of tropical cyclone during the time interval, based on Australian
    Bureau of Meteorology Category System where:
    1 - tropical cyclone, with typical gusts over flat land 90-125 km/h
    2 - tropical cyclone, with typical gusts over flat land 125-164 km/h
    3 - severe tropical cyclone, with typical gusts over flat land 165-224
    km/h
    4 - severe tropical cyclone, with typical gusts over flat land 225-279
    km/h
    5 - severe tropical cyclone, with typical gusts over flat land greater
    than 280 km/h.
    '''

@dataclass(repr=False)
class Tornado(AtmosphericPhenomenon):
    '''
    A tornado, a violent destructive whirling wind accompanied by a funnel-shaped
    cloud that progresses in a narrow path over the land.
    '''

    fScale: Optional[ FScale ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Fujita scale (referred to as EF-scale starting in 2007) for the tornado.
    '''

    width: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Width of the tornado during the time interval.
    '''

@dataclass(repr=False)
class VolcanicAshCloud(AtmosphericPhenomenon):
    '''
    An ash cloud formed as a result of a volcanic eruption.
    '''

    density: Optional[ float | ParticulateDensity ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Particulate density of the ash cloud during the time interval.
    '''

    particleSize: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The diameter of the particles during the time interval.
    '''

@dataclass(repr=False)
class GeosphericPhenomenon(EnvironmentalPhenomenon):
    '''
    A geospheric phenomenon.
    '''

@dataclass(repr=False)
class Earthquake(GeosphericPhenomenon):
    '''
    An earthquake.
    '''

    intensity: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The intensity of the earthquake as defined by the Modified Mercalli Intensity
    (MMI) scale. Possible values are 1-12, corresponding to I-XII.
    '''

    magnitude: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The magnitude of the earthquake as defined on the Moment Magnitude (M<sub>w</sub>)
    scale, which measures the size of earthquakes in terms of the energy released.
    Must be greater than zero.
    '''

    focalDepth: Optional[RelativeDisplacement] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The depth below the earth's surface of the earthquake's focal point.
    '''

@dataclass(repr=False)
class Fire(GeosphericPhenomenon):
    '''
    A fire, often uncontrolled, covering an area of land which typically contains
    combustible vegetation. Associated location information is assumed to describe
    the total area burned as of a specified time.
    '''

@dataclass(repr=False)
class Landslide(GeosphericPhenomenon):
    '''
    A landslide, a large mass of rocks and earth that suddenly and quickly
    moves down the side of a mountain or hill.
    '''

@dataclass(repr=False)
class LightningStrike(GeosphericPhenomenon):
    '''
    A cloud-to-ground lightning strike at a particular location.
    '''

    negativePolarity: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The polarity of the strike, with T meaning negative. About 90% of all lightning
    strokes are negative strokes, meaning that they were initiated by a large
    concentration of negative charge in the cloud-base; this tends to induce
    an area of positive charge on the ground.
    '''

    errorEllipseConfidence: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Likelihood that strike fell within errorEllipse.
    '''

    errorEllipseMajorSemiAxis: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Length of major semi-axis (longest radius) of the error ellipse.
    '''

    errorEllipseMinorSemiAxis: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Length of minor semi-axis (shortest radius) of the error ellipse.
    '''

    errorEllipseOrientation: Optional[ float | Bearing ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The orientation of the major semi- axis in degrees from True North.
    '''

    peakAmplitude: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Peak current of strike.
    '''

@dataclass(repr=False)
class HydrosphericPhenomenon(EnvironmentalPhenomenon):
    '''
    A hydrospheric phenomenon.
    '''

@dataclass(repr=False)
class Flood(HydrosphericPhenomenon):
    '''
    A flood, an overflowing of a large amount of water beyond its normal confines,
    esp. over what is normally dry land.
    '''

@dataclass(repr=False)
class Tsunami(HydrosphericPhenomenon):
    '''
    A tsunami (tidal wave), a long high sea wave caused by an earthquake, submarine
    landslide, or other disturbance.
    '''

    intensity: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tsunami intensity on the Papadopoulos-Imamura tsunami intensity scale.
    Possible values are 1-12, corresponding to I-XII.
    '''

    magnitude: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Tsunami magnitude in the Tsunami Magnitude Scale (Mt). Is greater than
    zero.
    '''

@dataclass(repr=False)
class Whirlpool(HydrosphericPhenomenon):
    '''
    A whirlpool, a rapidly rotating mass of water in a river or sea into which
    objects may be drawn, typically caused by the meeting of conflicting currents.
    '''

@dataclass(repr=False)
class SpacePhenomenon(EnvironmentalPhenomenon):
    '''
    An extra-terrestrial phenomenon.
    '''

@dataclass(repr=False)
class MagneticStorm(SpacePhenomenon):
    '''
    A magnetic storm, a temporary disturbance of the earth's magnetic field,
    induced by radiation and streams of charged particles from the sun.
    '''

    changeDst: Optional[ float | MagneticField ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Change in the disturbance - storm time (Dst) index. The size of a geomagnetic
    storm is classified as:
    - moderate ( -50 nT &gt;minimum of Dst &gt; -100 nT)
    - intense (-100 nT &gt; minimum Dst &gt; -250 nT) or
    - super-storm ( minimum of Dst &lt; -250 nT).
    '''

@dataclass(repr=False)
class ErpTimeEntry(Identity):
    '''
    An individual entry on an ErpTimeSheet.
    '''

    ErpProjectAccounting: Optional[ErpProjectAccounting] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpProjectAccounting.ErpTimeEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpTimeSheet: Optional[ErpTimeSheet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ErpTimeSheet.ErpTimeEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ErpTimeSheet(Identity):
    '''
    Time sheet for employees and contractors. Note that ErpTimeSheet inherits
    the relationship to ErpPerson from Document.
    '''

    ErpTimeEntries: list[ErpTimeEntry] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpTimeEntry.ErpTimeSheet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class EstimatedRestorationTime(Identity):
    '''
    The Estimated Restoration Time (ERT) for a single outage
    '''

    ert: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    estimated time the outage will be restored
    '''

    ertSource: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    defines the source that provided the ERT value.
    '''

    confidenceKind: Optional[ ERTConfidenceKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    provides the confidence level that this ERT can be accomplished. This may
    be changed/updated as needed.
    '''

    Outage: list[Outage] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Outage.EstimatedRestorationTime',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage associated with the estimated time the power will be restored.
    '''

@dataclass(repr=False)
class ExPostLossResults(Identity):
    '''
    Model results of ex-post calculation of MW losses. Summarizes loss in two
    categories losses on the the extra high voltage transmission and total
    losses. Calculated for each subcontrol area.
    '''

    ehvLossMW: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    EHV MW losses in the company
    Attribute Usage: Information purposes - Output of LPA engine.
    '''

    totalLossMW: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total MW losses in the company
    Attribute Usage: Information purposes - Output of LPA engine.
    '''

    ExPostLoss: Optional[ExPostLoss] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ExPostLoss.ExPostLossResults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.ExPostLossResults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ExpectedEnergy(Identity):
    '''
    Model Expected Energy from Market Clearing, interval based.
    '''

    intervalStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateTimeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateUser: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ExpectedEnergyValues: list[ExpectedEnergyValues] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ExpectedEnergyValues.ExpectedEnergy',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ExpectedEnergyValues(Identity):
    '''
    Model Expected Energy from Market Clearing.
    '''

    energyTypeCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    expectedMwh: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ExpectedEnergy: Optional[ExpectedEnergy] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ExpectedEnergy.ExpectedEnergyValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: Optional[RegisteredResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegisteredResource.ExpectedEnergyValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class FieldDispatchStep(Identity):
    '''
    Details of the step in the field dispatch history.
    '''

    occurredDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The date and time at which the dispatch status occurred.
    '''

    remarks: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    freeform comments related to the dispatch to perform field work.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The sequence number of the field dispatch step within the field dispatch
    history. Begins with 1 and increments up.
    '''

    dispatchStatus: Optional[ CrewStatusKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The status of one or more crews dispatched to perform field work at one
    or more work sites
    '''

    FieldDispatchHistory: Optional[FieldDispatchHistory] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'FieldDispatchHistory.FieldDispatchStep',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The dispatch history associated with the field dispatch step
    '''

@dataclass(repr=False)
class FiveMinAuxiliaryData(Identity):
    '''
    Models 5-Minutes Auxiliary Data.
    '''

    intervalStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateTimeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateUser: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AuxillaryValues: list[AuxiliaryValues] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AuxiliaryValues.FiveMinAuxillaryData',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class FlowDirection(Identity):
    '''
    The coded identification of the direction of energy flow.
    '''

    direction: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The coded identification of the direction of energy flow.
    '''

    Point: list[Point] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Point.FlowDirection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.FlowDirection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class FlowgateRelief(Identity):
    '''
    IDC (Interchange Distribution Calulator) sends data for a TLR (Transmission
    Loading Relief).
    '''

@dataclass(repr=False)
class FlowgateValue(Identity):
    '''
    Day Ahead, Network Native Load, Economic Dispatch, values used for calculation
    of Network Native Load (NNL) Determinator process.
    '''

@dataclass(repr=False)
class GenDistributionFactor(Identity):
    '''
    This class models the generation distribution factors. This class needs
    to be used along with the AggregatedPnode and the IndividualPnode to show
    the distribution of each individual party.
    '''

@dataclass(repr=False)
class GeneralClearingResults(Identity):
    '''
    Provides the adjusted load forecast value on a load forecast zone basis.
    '''

@dataclass(repr=False)
class GeneratingUnitDynamicValues(Identity):
    '''
    Optimal Power Flow or State Estimator Unit Data for Operator Training Simulator.
    This is used for RealTime, Study and Maintenance Users.
    '''

    lossFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Loss Factor
    '''

    maximumMW: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The maximum active power generation of the unit in MW
    '''

    minimumMW: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The minimum active power generation of the unit in MW
    '''

    mVAR: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit reactive power generation in MVAR
    '''

    mw: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit active power generation in MW
    '''

    sensitivity: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit sencivity factor. The distribution factors (DFAX) for the unit
    '''

    Flowgate: Optional[Flowgate] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Flowgate.GeneratingUnitDynamicValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktGeneratingUnit: Optional[MktGeneratingUnit] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MktGeneratingUnit.GeneratingUnitDynamicValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class IEC61970CIMVersion(Identity):
    '''
    This is the IEC 61970 CIM version number assigned to this UML model.
    '''

    date: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Form is YYYY-MM-DD for example for January 5, 2009 it is 2009-01-05.
    '''

    version: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Form is IEC61970CIMXXvYY where XX is the major CIM package version and
    the YY is the minor version. For example IEC61970CIM13v18.
    '''

@dataclass(repr=False)
class InadvertentAccount(Identity):
    '''
    An account for tracking inadvertent interchange versus time for each control
    area. A control area may have more than one inadvertent account in order
    to track inadvertent over one or more specific tie points in addition to
    the usual overall net inadvertent. Separate accounts would also be used
    to track designated time periods, such as on-peak and off-peak.
    '''

@dataclass(repr=False)
class InstanceSet(Identity):
    '''
    Instance of a version of a model part. This corresponds to a payload of
    instance data.
    '''

    DatasetArg: list[DatasetArg] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DatasetArg.Dataset',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The role of a dataset in the context of an operation.
    '''

    InstanceSetMember: list[IdentifiedObject] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IdentifiedObject.InstanceSet',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Data objects contained in the dataset.
    '''

@dataclass(repr=False)
class Instructions(Identity):
    '''
    Provides the necessary information (on a resource basis) to capture the
    Startup/Shutdown instruction results. This information is relevant to the
    DA Market (RUC only) as well as the RT Market (HASP, Pre-dispatch, and
    Interval).
    '''

    bindingDOD: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Binding dispatch operating delta provides a relative delta to be applied.
    Typically used in demand response instructions. The binding<font color="#0f0f0f">DOD
    instructions are cumulative; in other words a second DOD instruction does
    not replace the previous DOD, instead the second DOD adds to the previous
    DODs.</font>
    '''

    bindingDOT: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    instructionCost: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total cost associated with changing the status of the resource.
    '''

    instructionStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Time the resource should be at Pmin (for start ups).
    Time the resource is off line.
    '''

    minStatusChangeTime: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum start up time required to bring the unit online (minutes).
    SCUC commitment period start-up time. Calculated start up time based on
    the StartUpTimeCurve provided with the Bid.
    This is a combination of StartUp time bid and Unit down time.
    Units is minutes
    '''

    updateTimeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateUser: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    bindingInstruction: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    instructionSource: Optional[ MQSInstructionSource ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    instruction source for market quality results (INS, ACT)
    '''

    instructionType: Optional[ AutomaticDispInstTypeCommitment ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicator of either a Start-Up or a Shut-Down.
    '''

    manuallyBlocked: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Manually Blocked Indicator (Yes/No). The instruction has been blocked by
    an Operator.
    '''

    updateType: Optional[ MQSCHGType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    AggregateNode: Optional[AggregateNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AggregateNode.Instruction',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    InstructionClearing: list[InstructionClearing] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'InstructionClearing.Instructions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: Optional[RegisteredResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegisteredResource.Instructions',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class InterTieResults(Identity):
    '''
    Provides the tie point specific output from the market applications. Currently,
    this is defined as the loop flow compensation MW value.
    '''

@dataclass(repr=False)
class IntervalBlock(Identity):
    '''
    Time sequence of readings of the same reading type. Contained interval
    readings may need conversion through the application of an offset and a
    scalar defined in associated pending.
    Table 548 shows all association ends of IntervalBlock with other classes.
    Table 548 – Association ends of Metering::IntervalBlock with other classes
    Associations
    name
    mult to
    type
    description
    0..*
    PendingCalculation
    0..1
    PendingCalculation
    Pending calculation to apply to interval reading values contained by this
    block (after which the resulting reading type is different than the original
    because it reflects the conversion result).
    0..*
    IntervalReadings
    0..*
    IntervalReading
    Interval reading contained in this block.
    0..*
    ReadingType
    0..1
    ReadingType
    Type information for interval reading values contained in this block.
    0..*
    MeterReading
    0..1
    MeterReading
    Meter reading containing this interval block.
    IntervalReading
    Data captured at regular intervals of time. Interval data could be captured
    as incremental data, absolute data, or relative data. The source for the
    data is usually a tariff quantity or an engineering quantity. Data is typically
    captured in time-tagged, uniform, fixed-length intervals of 5 min, 10 min,
    15 min, 30 min, or 60 min.
    Note: Interval Data is sometimes also called "Interval Data Readings" (IDR).
    '''

    IntervalReadings: list[IntervalReading] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IntervalReading.IntervalBlocks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interval reading contained in this block.
    '''

    MeterReading: Optional[MeterReading] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeterReading.IntervalBlocks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Meter reading containing this interval block.
    '''

    PendingCalculation: Optional[PendingCalculation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PendingCalculation.IntervalBlocks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pending calculation to apply to interval reading values contained by this
    block (after which the resulting reading type is different than the original
    because it reflects the conversion result).
    '''

    ReadingType: Optional[ReadingType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReadingType.IntervalBlocks',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type information for interval reading values contained in this block.
    '''

@dataclass(repr=False)
class IrregularTimePoint(Identity):
    '''
    TimePoints for a schedule where the time between the points varies.
    '''

    value1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The first value at the time. The meaning of the value is defined by the
    derived type of the associated schedule.
    '''

    value2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The second value at the time. The meaning of the value is defined by the
    derived type of the associated schedule.
    '''

    time: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The time is relative to the schedule starting time.
    '''

    IntervalSchedule: Optional[IrregularIntervalSchedule] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IrregularIntervalSchedule.TimePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    An IrregularTimePoint belongs to an IrregularIntervalSchedule.
    '''

@dataclass(repr=False)
class LoadDistributionFactor(Identity):
    '''
    This class models the load distribution factors. This class should be used
    in one of two ways:
    Use it along with the AggregatedPnode and the IndividualPnode to show the
    distriubtion of each individual party
    OR
    Use it with Mkt_EnergyConsumer to represent the current MW/Mvar distribution
    within it's parnet load group.
    '''

    pDistFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Real power (MW) load distribution factor
    '''

    qDistFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactive power (MVAr) load distribution factor
    '''

    AggregatedPnode: Optional[AggregatedPnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AggregatedPnode.LoadDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    DistributionFactorSet: list[DistributionFactorSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DistributionFactorSet.LoadDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    IndividualPnode: Optional[IndividualPnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IndividualPnode.LoadDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class LossClearingResults(Identity):
    '''
    Provides the MW loss for RUC Zones, subcontrol areas, and the total loss.
    '''

    lossMW: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    HostControlArea: Optional[HostControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HostControlArea.LossClearingResults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    LossClearing: Optional[LossClearing] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'LossClearing.LossClearingResults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RUCZone: Optional[RUCZone] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RUCZone.LossClearingResults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SubControlArea: Optional[SubControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SubControlArea.LossClearingResults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class LossProfile(Identity):
    '''
    LossProfile is associated with an EnerrgyTransaction and must be completely
    contained within the time frame of the EnergyProfile associated with this
    EnergyTransaction.
    '''

@dataclass(repr=False)
class MPMTestResults(Identity):
    '''
    Provides the outcome and margin percent (as appropriate) result data for
    the MPM tests. There are relationships to Zone for Designated Congestion
    Area Tests, CurveSchedData for bid segment tests, to the SubControlArea
    for the system wide level tests, and Pnodes for the LMPM impact tests.
    '''

@dataclass(repr=False)
class MPMTestThreshold(Identity):
    '''
    Market Power Mitigation (MPM) test thresholds for resource as well as designated
    congestion areas (DCAs).
    '''

@dataclass(repr=False)
class MarketInvoice(Identity):
    '''
    A roll up of invoice line items. The whole invoice has a due date and amount
    to be paid, with information such as customer, banks etc. being obtained
    through associations. The invoice roll up is based on individual line items
    that each contain amounts and descriptions for specific services or products.
    '''

    dueDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Calculated date upon which the Invoice amount is due.
    '''

    mailedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date on which the customer billing statement/invoice was printed/mailed.
    '''

    proForma: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if payment is to be paid by a Customer to accept a particular ErpQuote
    (with associated Design) and have work initiated, at which time an associated
    ErpInvoice should automatically be generated. EprPayment.subjectStatus
    satisfies terms specificed in the ErpQuote.
    '''

    referenceNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of an invoice to be reference by this invoice.
    '''

    transactionDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time when the invoice is issued.
    '''

    transferType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of invoice transfer.
    '''

    amount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Total amount due on this invoice based on line items and applicable adjustments.
    '''

    billMediaKind: Optional[ MktBillMediaKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of media by which the CustomerBillingInfo was delivered.
    '''

    kind: Optional[ MktAccountKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of invoice (default is 'sales').
    '''

@dataclass(repr=False)
class MarketInvoiceLineItem(Identity):
    '''
    An individual line item on an invoice.
    '''

    glAccount: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    General Ledger account code, shall be a valid combination.
    '''

    glDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time line item will be posted to the General Ledger.
    '''

    lineAmount: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Amount due for this line item.
    '''

    lineNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Line item number on invoice statement.
    '''

    lineVersion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Version number of the bill run.
    '''

    netAmount: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Net line item charge amount.
    '''

    previousAmount: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Previous line item charge amount.
    '''

    kind: Optional[ MktInvoiceLineItemKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of line item.
    '''

    billPeriod: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Bill period for the line item.
    '''

    ContainerMarketInvoiceLineItem: Optional[MarketInvoiceLineItem] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketInvoiceLineItem.ComponentMarketInvoiceLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketInvoice: Optional[MarketInvoice] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketInvoice.MarketInvoiceLineItems',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MarketLedger(Identity):
    '''
    In accounting transactions, a ledger is a book containing accounts to which
    debits and credits are posted from journals, where transactions are initially
    recorded. Journal entries are periodically posted to the ledger. Ledger
    actual represents actual amounts by account within ledger within company
    or within business area. Actual amounts may be generated in a source application
    and then loaded to a specific ledger within the enterprise general ledger
    or budget application.
    '''

@dataclass(repr=False)
class MarketLedgerEntry(Identity):
    '''
    Details of an individual entry in a ledger, which was posted from a journal
    on the posted date.
    '''

    accountID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Account identifier for this entry.
    '''

    postedDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time this entry was posted to the ledger.
    '''

    transactionDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time journal entry was recorded.
    '''

    accountKind: Optional[ MktAccountKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of account for this entry.
    '''

    amount: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The amount of the debit or credit for this account.
    '''

    MarketLedger: Optional[MarketLedger] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketLedger.MarketLedgerEntries',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of ledger entry.
    '''

@dataclass(repr=False)
class MarketObjectStatus(Identity):
    '''
    The condition or position of an object with regard to its standing.
    '''

    status: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The coded condition or position of an object with regard to its standing.
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.MarketObjectStatus',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.MarketObjectStatus',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class MarketRegionResults(Identity):
    '''
    Provides all Region Ancillary Service results for the DA and RT markets.
    The specific data is commodity type (Regulation Up, Regulation Down, Spinning
    Reserve, Non-spinning Reserve, or Total Up reserves) based for the cleared
    MW, cleared price, and total capacity required for the region.
    '''

@dataclass(repr=False)
class MarketResults(Identity):
    '''
    This class holds elements that are single values for the entire market
    time horizon. That is, for the Day Ahead market, there is 1 value for each
    element, not hourly based. Is a summary of the market run.
    '''

@dataclass(repr=False)
class Name(Identity):
    '''
    The Name class provides the means to define any number of human readable
    names for an object. A name is <b>not</b> to be used for defining inter-object
    relationships. For inter-object relationships instead use the object identification
    'mRID'.
    '''

    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Any free text that name the object.
    '''

    IdentifiedObject: Optional[IdentifiedObject] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IdentifiedObject.Names',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Identified object that this name designates.
    '''

    NameType: Optional[NameType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NameType.Names',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of this name.
    '''

@dataclass(repr=False)
class NameType(Identity):
    '''
    Type of name. Possible values for attribute 'name' are implementation dependent
    but standard profiles may specify types. An enterprise may have multiple
    IT systems each having its own local name for the same object, e.g. a planning
    system may have different names from an EMS. An object may also have different
    names within the same IT system, e.g. localName as defined in CIM version
    14. The definition from CIM14 is:
    The localName is a human readable name of the object. It is a free text
    name local to a node in a naming hierarchy similar to a file directory
    structure. A power system related naming hierarchy may be: Substation,
    VoltageLevel, Equipment etc. Children of the same parent in such a hierarchy
    have names that typically are unique among them.
    '''

    description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Description of the name type.
    '''

    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name of the name type.
    '''

    Names: list[Name] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Name.NameType',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All names of this type.
    '''

    NameTypeAuthority: Optional[NameTypeAuthority] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NameTypeAuthority.NameTypes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Authority responsible for managing names of this type.
    '''

@dataclass(repr=False)
class NameTypeAuthority(Identity):
    '''
    Authority responsible for creation and management of names of a given type;
    typically an organization or an enterprise system.
    '''

    description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Description of the name type authority.
    '''

    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name of the name type authority.
    '''

    NameTypes: list[NameType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'NameType.NameTypeAuthority',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All name types managed by this authority.
    '''

@dataclass(repr=False)
class NonlinearShuntCompensatorPhasePoint(Identity):
    '''
    A per phase non linear shunt compensator bank or section admittance value.
    The number of NonlinearShuntCompenstorPhasePoint instances associated with
    a NonlinearShuntCompensatorPhase shall be equal to ShuntCompensatorPhase.maximumSections.
    ShuntCompensator.sections shall only be set to one of the NonlinearShuntCompenstorPhasePoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPhasePoint-s.
    '''

    sectionNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The number of the section.
    '''

    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) susceptance per section.
    '''

    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) conductance per section.
    '''

    NonlinearShuntCompensatorPhase: Optional[NonlinearShuntCompensatorPhase] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NonlinearShuntCompensatorPhase.NonlinearShuntCompensatorPhasePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Non-linear shunt compensator phase owning this point.
    '''

@dataclass(repr=False)
class NonlinearShuntCompensatorPoint(Identity):
    '''
    A non linear shunt compensator bank or section admittance value. The number
    of NonlinearShuntCompenstorPoint instances associated with a NonlinearShuntCompensator
    shall be equal to ShuntCompensator.maximumSections. ShuntCompensator.sections
    shall only be set to one of the NonlinearShuntCompenstorPoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPoint-s.
    '''

    sectionNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The number of the section.
    '''

    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) susceptance per section.
    '''

    b0: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence shunt (charging) susceptance per section.
    '''

    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Positive sequence shunt (charging) conductance per section.
    '''

    g0: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero sequence shunt (charging) conductance per section.
    '''

    NonlinearShuntCompensator: Optional[NonlinearShuntCompensator] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'NonlinearShuntCompensator.NonlinearShuntCompensatorPoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Non-linear shunt compensator owning this point.
    '''

@dataclass(repr=False)
class OperatingShare(Identity):
    '''
    Specifies the operations contract relationship between a power system resource
    and a contract participant.
    '''

    percentage: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage operational ownership between the pair (power system resource
    and operating participant) associated with this share. The total percentage
    ownership for a power system resource should add to 100%.
    '''

    OperatingParticipant: Optional[OperatingParticipant] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperatingParticipant.OperatingShare',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The operating participant having this share with the associated power system
    resource.
    '''

    PowerSystemResource: Optional[PowerSystemResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.OperatingShare',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The power system resource to which the share applies.
    '''

@dataclass(repr=False)
class OperatonalLimitTypeScaling(Identity):
    '''
    One operational limit type scales values of another operational limit type
    when under the same operational limit set. This applies to any operational
    limit assigned to the target operational limit type and without other limit
    dependency models.
    '''

    scalingPercent: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The percentage scaling of the source limit to compute the target limit.
    Applys to operational limits within an operaitonal limit set when both
    source and target operational limit types exist.
    '''

    SourceOperationalLimitType: Optional[OperationalLimitType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperationalLimitType.SourceOperationalLimitTypeScaling',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TargetOperationalLimit: Optional[OperationalLimitType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'OperationalLimitType.TargetOperationalLimitmTypeScaling',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class OutageArea(Identity):
    '''
    This defines the area covered by the Outage.
    '''

    earliestReportedTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This is the reported time of the first outage report
    '''

    metersServed: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    defines the number of meters served in the defined area.
    '''

    outageAreaKind: Optional[ AreaKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    defines the type of area that has the outage - county, state, zipcode,
    etc.
    '''

    Outage: list[Outage] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Outage.OutageArea',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The outage associated with the outage area.
    '''

@dataclass(repr=False)
class PanPricingDetail(Identity):
    '''
    Detail for a single price command/action.
    '''

    alternateCostDelivered: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Alternative measure of the cost of the energy consumed. An example might
    be the emissions of CO2 for each kWh of electricity consumed providing
    a measure of the environmental cost.
    '''

    alternateCostUnit: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cost unit for the alternate cost delivered field. One example is kg of
    CO2 per unit of measure.
    '''

    currentTimeDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current time as determined by a PAN device.
    '''

    generationPriceRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Ratio of 'generationPrice' to the "normal" price chosen by the commodity
    provider.
    '''

    priceRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Ratio of 'price' to the "normal" price chosen by the commodity provider.
    '''

    priceTier: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pricing tier as chosen by the commodity provider.
    '''

    priceTierCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Maximum number of price tiers available.
    '''

    priceTierLabel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Label for price tier.
    '''

    rateLabel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Label of the current billing rate specified by commodity provider.
    '''

    registerTier: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Register tier accumulating usage information.
    '''

    unitOfMeasure: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Defines commodity as well as its base unit of measure.
    '''

    generationPrice: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Price of the commodity measured in base unit of currency per 'unitOfMeasure'.
    '''

    price: Optional[ Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Price of the commodity measured in base unit of currency per 'unitOfMeasure'.
    '''

    PanPricing: Optional[PanPricing] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PanPricing.PanPricingDetails',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    PAN pricing command/action issuing this price detail.
    '''

@dataclass(repr=False)
class PendingCalculation(Identity):
    '''
    When present, a scalar conversion that needs to be applied to every IntervalReading.value
    contained in IntervalBlock. This conversion results in a new associated
    ReadingType, reflecting the true dimensions of IntervalReading values after
    the conversion.
    '''

    multiplyBeforeAdd: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Whether scalars should be applied before adding the 'offset'.
    '''

    offset: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Offset to be added as well as multiplication using scalars.
    '''

    scalarDenominator: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if scalar is rational number) When 'IntervalReading.value' is multiplied
    by 'scalarNumerator' and divided by this value, it causes a unit of measure
    conversion to occur, resulting in the 'ReadingType.unit'.
    '''

    scalarFloat: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if scalar is floating number) When multiplied with 'IntervalReading.value',
    it causes a unit of measure conversion to occur, according to the 'ReadingType.unit'.
    '''

    scalarNumerator: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if scalar is integer or rational number) When the scalar is a simple integer,
    and this attribute is presented alone and multiplied with 'IntervalReading.value',
    it causes a unit of measure conversion to occur, resulting in the 'ReadingType.unit'.
    It is never used in conjunction with 'scalarFloat', only with 'scalarDenominator'.
    '''

    IntervalBlocks: list[IntervalBlock] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'IntervalBlock.PendingCalculation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All blocks of interval reading values to which this pending conversion
    applies.
    '''

    ReadingType: Optional[ReadingType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReadingType.PendingCalculation',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reading type resulting from this pending conversion.
    '''

@dataclass(repr=False)
class Period(Identity):
    '''
    An identification of a time interval that may have a given resolution.
    '''

    resolution: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The number of units of time that compose an individual step within a period.
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.Period',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Point: list[Point] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Point.Period',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Reason: list[Reason] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reason.Period',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    timeInterval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The start and end date and time for a given interval.
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.Period',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PhaseImpedanceData(Identity):
    '''
    Impedance and conductance matrix element values.
    The diagonal elements are described by the elements having the same toPhase
    and fromPhase value and the off diagonal elements have different toPhase
    and fromPhase values. The matrix can also be stored in symmetric lower
    triangular format using the row and column attributes, which map to ACLineSegmentPhase.sequenceNumber.
    '''

    column: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The matrix element's column number, in the range 1 to row. Only the lower
    triangle needs to be stored. This column number matches ACLineSegmentPhase.sequenceNumber.
    '''

    row: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The matrix element’s row number, in the range 1 to PerLengthPhaseImpedance.conductorCount.
    Only the lower triangle needs to be stored. This row number matches ACLineSegmentPhase.sequenceNumber.
    '''

    b: Optional[ float | SusceptancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Susceptance matrix element value, per length of unit.
    '''

    fromPhase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Refer to the class description.
    '''

    g: Optional[ float | ConductancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conductance matrix element value, per length of unit.
    '''

    r: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Resistance matrix element value, per length of unit.
    '''

    toPhase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Refer to the class description.
    '''

    x: Optional[ float | ReactancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reactance matrix element value, per length of unit.
    '''

    PhaseImpedance: Optional[PerLengthPhaseImpedance] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PerLengthPhaseImpedance.PhaseImpedanceData',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Conductor phase impedance to which this data belongs.
    '''

@dataclass(repr=False)
class PlannedMarket(Identity):
    '''
    Represent a planned market. For example a planned DA/HA/RT market.
    '''

    marketEndTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market end time.
    '''

    marketStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market start time.
    '''

    marketType: Optional[ MarketType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Market type.
    '''

    MarketPlan: Optional[MarketPlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MarketPlan.PlannedMarket',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A market plan has a number of markets (DA, HA, RT).
    '''

@dataclass(repr=False)
class PnodeDistributionFactor(Identity):
    '''
    This class allows SC to input different distribution factors for pricing
    node.
    '''

    factor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used to calculate "participation" of Pnode in an AggregatePnode. For example,
    for regulation region this factor is 1 and total sum of all factors for
    a specific regulation region does not have to be 1. For pricing zone the
    total sum of all factors has to be 1.
    '''

    podLossFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Point of delivery loss factor
    '''

    offPeak: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that this distribution factor is to apply during off peak.
    '''

    onPeak: Optional[ YesNo ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indication that this factor is to apply during Peak periods.
    '''

    AggregatedPnode: Optional[AggregatedPnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AggregatedPnode.PnodeDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    BidDistributionFactor: Optional[BidDistributionFactor] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BidDistributionFactor.PnodeDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    IndividualPnode: Optional[IndividualPnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'IndividualPnode.PnodeDistributionFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PnodeResults(Identity):
    '''
    Provides the total price, the cost component, the loss component, and the
    congestion component for Pnodes for the forward and real time markets.
    There are several prices produced based on the run type (MPM, RUC, Pricing,
    or Scheduling/Dispatch).
    '''

    congestLMP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Congestion component of Location Marginal Price (LMP) in monetary units
    per MW.
    '''

    costLMP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Cost component of Locational Marginal Pricing (LMP) in monetary units per
    MW.
    '''

    lossLMP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Loss component of Location Marginal Price (LMP) in monetary units per MW.
    '''

    marginalClearingPrice: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Locational Marginal Price (LMP) ($/MWh)
    '''

    scheduledMW: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    total MW schedule at the pnode
    '''

    updateTimeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateUser: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateType: Optional[ MQSCHGType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Pnode: Optional[Pnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Pnode.PnodeResults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PnodeClearing: Optional[PnodeClearing] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PnodeClearing.PnodeResults',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Point(Identity):
    '''
    An identification of a set of values beeing adressed within a specific
    interval of time.
    '''

    position: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A sequential value representing the relative position within a given time
    interval.
    '''

    quality: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The quality of the information being provided. This quality may be estimated,
    not available, as provided, etc.
    '''

    secondaryQuantity: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Secondary quantity identified for a point.
    '''

    AceTariffType: list[AceTariffType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AceTariffType.Point',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    FlowDirection: list[FlowDirection] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'FlowDirection.Point',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Period: Optional[Period] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Period.Point',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Price: list[Price] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Price.Point',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    quantity: list[Quantity] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Quantity.Point',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Reason: list[Reason] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Reason.Point',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.Point',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PositionPoint(Identity):
    '''
    Set of spatial coordinates that determine a point, defined in the coordinate
    system specified in 'Location.CoordinateSystem'. Use a single position
    point instance to describe a point-oriented location. Use a sequence of
    position points to describe a line-oriented object (physical location of
    non-point oriented objects like cables or lines), or area of an object
    (like a substation or a geographical zone - in this case, have first and
    last position point with the same values).
    '''

    groupNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero-relative sequence number of this group within a series of points;
    used when there is a need to express disjoint groups of points that are
    considered to be part of a single location.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Zero-relative sequence number of this point within a series of points.
    '''

    xPosition: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    X axis position.
    '''

    yPosition: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Y axis position.
    '''

    zPosition: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Z axis position.
    '''

    Location: Optional[Location] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Location.PositionPoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Location described by this position point.
    '''

@dataclass(repr=False)
class Price(Identity):
    '''
    The cost corresponding to a specific measure and expressed in a currency.
    '''

    amount: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A number of monetary units specified in a unit of currency.
    '''

    category: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The category of a price to be used in a price calculation. The price category
    is mutually agreed between System Operators.
    '''

    direction: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The direction indicates whether a System Operator pays the Market Parties
    or inverse.
    '''

    Domain: list[Domain] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Domain.Price',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Point: Optional[Point] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Point.Price',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.Price',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class PriceDescriptor(Identity):
    '''
    The price of a Commodity during a given time interval may change over time.
    For example, a price may be forecasted a year ahead, a month ahead, a day
    ahead, an hour ahead, and in real time; this is defined using the MarketType.
    Additionally a price may have one or more components. For example, a locational
    marginal energy price may be the arithmetic sum of the system price, the
    congestion price, and the loss price. The priceType enumeration is used
    determine if the price is the complete price (priceType="total") or one
    of potentially many constituent components.
    '''

@dataclass(repr=False)
class PublicX509Certificate(Identity):
    '''
    Used to convey information that will allow matching in order to determine
    which certificate to use. Actual certificates are exchanged externally
    to the CIM exchange.
    '''

    issuerName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Represents the CA that issued the certificate. Defined to be per X.509.
    '''

    serialNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Is the serial number of the certificate per X.509 definition.
    '''

    ISOUpperLayer: Optional[ISOUpperLayer] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ISOUpperLayer.UpperLayerPublicX509Certificate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Application layer used with the certificate for mutual authentication.
    '''

    TCPAccessPoint: Optional[TCPAccessPoint] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TCPAccessPoint.PublicX509Certificate',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The association allows a certificate to be bound for use by TLS.
    '''

@dataclass(repr=False)
class Quality61850(Identity):
    '''
    Quality flags in this class are as defined in IEC 61850, except for estimatorReplaced,
    which has been included in this class for convenience.
    '''

    badReference: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement value may be incorrect due to a reference being out of calibration.
    '''

    estimatorReplaced: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value has been replaced by State Estimator. estimatorReplaced is not an
    IEC61850 quality bit but has been put in this class for convenience.
    '''

    failure: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    This identifier indicates that a supervision function has detected an internal
    or external failure, e.g. communication failure.
    '''

    oldData: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement value is old and possibly invalid, as it has not been successfully
    updated during a specified time interval.
    '''

    operatorBlocked: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement value is blocked and hence unavailable for transmission.
    '''

    oscillatory: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    To prevent some overload of the communication it is sensible to detect
    and suppress oscillating (fast changing) binary inputs. If a signal changes
    in a defined time twice in the same direction (from 0 to 1 or from 1 to
    0) then oscillation is detected and the detail quality identifier "oscillatory"
    is set. If it is detected a configured numbers of transient changes could
    be passed by. In this time the validity status "questionable" is set. If
    after this defined numbers of changes the signal is still in the oscillating
    state the value shall be set either to the opposite state of the previous
    stable value or to a defined default value. In this case the validity status
    "questionable" is reset and "invalid" is set as long as the signal is oscillating.
    If it is configured such that no transient changes should be passed by
    then the validity status "invalid" is set immediately in addition to the
    detail quality identifier "oscillatory" (used for status information only).
    '''

    outOfRange: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement value is beyond a predefined range of value.
    '''

    overFlow: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement value is beyond the capability of being represented properly.
    For example, a counter value overflows from maximum count back to a value
    of zero.
    '''

    suspect: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A correlation function has detected that the value is not consistent with
    other values. Typically set by a network State Estimator.
    '''

    test: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Measurement value is transmitted for test purposes.
    '''

    source: Optional[ Source ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Source gives information related to the origin of a value. The value may
    be acquired from the process, defaulted or substituted.
    '''

    validity: Optional[ Validity ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Validity of the measurement value.
    '''

@dataclass(repr=False)
class MeasurementValueQuality(Quality61850):
    '''
    Measurement quality flags. Bits 0-10 are defined for substation automation
    in IEC 61850-7-3. Bits 11-15 are reserved for future expansion by that
    document. Bits 16-31 are reserved for EMS applications.
    '''

    MeasurementValue: Optional[MeasurementValue] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MeasurementValue.MeasurementValueQuality',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    A MeasurementValue has a MeasurementValueQuality associated with it.
    '''

@dataclass(repr=False)
class Quantity(Identity):
    '''
    Description of quantities needed in the data exchange.
    The type of the quantity is described either by the role of the association
    or the type attribute.
    The quality attribute provides the information about the quality of the
    quantity (measured, estimated, etc.).
    '''

    quality: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The quality of the information being provided. This quality may be estimated,
    not available, as provided, etc.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The description of the type of the quantity.
    '''

    Detail_Quantity: list[Quantity] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Quantity.quantity',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Additional information related to the associated quantity.
    '''

    Domain: list[Domain] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Domain.Quantity',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Point: list[Point] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Point.Quantity',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    quantity: Optional[Quantity] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Quantity.Detail_Quantity',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The quantity value.
    The association role provides the information about what is expressed.
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.Quantity',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ReadingQuality(Identity):
    '''
    Quality of a specific reading value or interval reading value. Note that
    more than one quality may be applicable to a given reading. Typically not
    used unless problems or unusual conditions occur (i.e., quality for each
    reading is assumed to be good unless stated otherwise in associated reading
    quality type). It can also be used with the corresponding reading quality
    type to indicate that the validation has been performed and succeeded.
    '''

    comment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Elaboration on the quality code.
    '''

    source: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    System acting as the source of the quality code.
    '''

    timeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time at which the quality code was assigned or ascertained.
    '''

    Reading: Optional[BaseReading] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BaseReading.ReadingQualities',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reading value to which this quality applies.
    '''

    ReadingQualityType: Optional[ReadingQualityType] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ReadingQualityType.ReadingQualities',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of this reading quality.
    '''

@dataclass(repr=False)
class Reason(Identity):
    '''
    The motivation of an act.
    '''

    code: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The motivation of an act in coded form.
    '''

    text: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The textual explanation corresponding to the reason code.
    '''

    MarketDocument: list[MarketDocument] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketDocument.Reason',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Period: list[Period] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Period.Reason',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Point: list[Point] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Point.Reason',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.Reason',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.Reason',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class RegularTimePoint(Identity):
    '''
    Time point for a schedule where the time between the consecutive points
    is constant.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The position of the regular time point in the sequence. Note that time
    points don't have to be sequential, i.e. time points may be omitted. The
    actual time for a RegularTimePoint is computed by multiplying the associated
    regular interval schedule's time step with the regular time point sequence
    number and adding the associated schedules start time. To specify values
    for the start time, use sequence number 0. The sequence number cannot be
    negative.
    '''

    value1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The first value at the time. The meaning of the value is defined by the
    derived type of the associated schedule.
    '''

    value2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The second value at the time. The meaning of the value is defined by the
    derived type of the associated schedule.
    '''

    IntervalSchedule: Optional[RegularIntervalSchedule] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegularIntervalSchedule.TimePoints',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Regular interval schedule containing this time point.
    '''

@dataclass(repr=False)
class ReportingCapability(Identity):
    '''
    <font color="#0f0f0f">Definition of one set of reporting capabilities for
    this monitoring station. The associated EnvironmentalValueSets describe
    the maximum range of possible environmental values the station is capable
    of returning. This attribute is intended primarily to assist a utility
    in managing its stations. </font>
    '''

    reportingIntervalPeriod: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of units of time making up reporting period.
    '''

    reportingIntervalType: Optional[ CalculationIntervalUnitKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit of time in which reporting period is expressed.
    '''

    reportingMethod: Optional[ ReportingMethodKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Indicates how the weather station reports observations.
    '''

    EnvironmentalAnalog: list[EnvironmentalAnalog] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'EnvironmentalAnalog.ReportingCapability',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    One of the environmental value sets expressing one of the reporting capabilities.
    '''

    EnvironmentalMonitoringStation: Optional[EnvironmentalMonitoringStation] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EnvironmentalMonitoringStation.ReportingCapability',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The environmental monitoring station to which this set of reporting capabilities
    belong.
    '''

@dataclass(repr=False)
class ResourceCapacity(Identity):
    '''
    This class model the various capacities of a resource. A resource may have
    numbers of capacities related to operating, ancillary services, energy
    trade and so forth. Capacities may be defined for active power or reactive
    power.
    '''

    defaultCapacity: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    default capacity
    '''

    maximumCapacity: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    maximum capacity
    '''

    minimumCapacity: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    minimum capacity
    '''

    capacityType: Optional[ ResourceCapacityType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    capacity type
    The types are but not limited to:
    Regulation Up
    Regulation Dn
    Spinning Reserve
    Non-Spinning Reserve
    FOO capacity
    MOO capacity
    '''

    unitSymbol: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit selection for the capacity values.
    '''

    RegisteredResource: list[RegisteredResource] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'RegisteredResource.ResourceCapacity',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ResourceCertification(Identity):
    '''
    Specifies certification for a resource to participate in a specific markets.
    '''

@dataclass(repr=False)
class ResourceDeploymentStatus(Identity):
    '''
    '''

    acceptComments: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Commenst to explain why the acceptance status. For example, to explain
    why a request is accepted only partially, instead of fully.
    '''

    acceptStatus: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of the resource for this deployment. Values include (full compliance,
    partial compliance, opt-out, etc.)
    '''

    resourceResponseMW: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The MW amount the resource can contribute for this deployment. This is
    from the DR provider - as a response? Or actual? Does this belong in settlement?
    Discuss more.
    '''

    InstructionClearing: Optional[InstructionClearing] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'InstructionClearing.ResourceDeploymentStatus',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ResourceStartupCost(Identity):
    '''
    To model the startup costs of a generation resource.
    '''

    fuelColdStartup: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Verifiable Cold Start Up Fuel (MMBtu per start)
    '''

    fuelHotStartup: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Verifiable Hot Start Up Fuel (MMBtu per start)
    '''

    fuelIntermediateStartup: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Verifiable Intermediate Start Up Fuel (MMBtu per start)
    '''

    fuelLowSustainedLimit: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Minimum-Energy fuel, MMBtu/MWh
    '''

    gasPercentColdStartup: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Fuel Index Price (gas) for cold startup
    '''

    gasPercentHotStartup: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Fuel Index Price (gas) for hot startup
    '''

    gasPercentIntermediateStartup: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Fuel Index Price (gas) for intermediate startup
    '''

    gasPercentLowSustainedLimit: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of FIP (gas) for operating at LSL
    '''

    oilPercentColdStartup: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Fuel Oil Price (FOP) for cold startup
    '''

    oilPercentHotStartup: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Fuel Oil Price (FOP) for hot startup
    '''

    oilPercentIntermediateStartup: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Fuel Oil Price (FOP) for intermediate startup
    '''

    oilPercentLowSustainedLimit: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of FOP (oil) for operating at LSL
    '''

    solidfuelPercentColdStartup: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Solid Fuel for cold startup
    '''

    solidfuelPercentHotStartup: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Solid Fuel for hot startup
    '''

    solidfuelPercentIntermediateStartup: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Solid Fuel for intermedite startup
    '''

    solidfuelPercentLowSustainedLimit: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Percentage of Solid Fuel for operating at LSL
    '''

    ResourceVerifiableCosts: Optional[ResourceVerifiableCosts] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ResourceVerifiableCosts.ResourceStartupCost',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ResourceVerifiableCosts(Identity):
    '''
    This class is defined to describe the verifiable costs associated with
    a generation resource.
    '''

    MktHeatRateCurve: Optional[MktHeatRateCurve] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MktHeatRateCurve.ResourceVerifiableCosts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RegisteredResource: Optional[RegisteredResource] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RegisteredResource.ResourceVerifiableCosts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ResourceOperationMaintenanceCost: Optional[ResourceOperationMaintenanceCost] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ResourceOperationMaintenanceCost.ResourceVerifiableCosts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ResourceStartupCost: list[ResourceStartupCost] = field(
        default_factory = list,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ResourceStartupCost.ResourceVerifiableCosts',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class RevisionHistory(Identity):
    '''
    History of changes made to a switching plan step after the switching plan
    has been approved.
    '''

    revisionAuthor: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Person who made the change
    '''

    revisionDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time of the change
    '''

    revisionReason: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason for making the change
    '''

    kind: Optional[ RevisionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of change, either void or added.
    '''

    SwitchingStep: Optional[SwitchingStep] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingStep.RevisionHistory',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class ScheduledEventData(Identity):
    '''
    Schedule parameters for an activity that is to occur, is occurring, or
    has completed.
    '''

    estimatedWindow: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Estimated date and time for activity execution (with earliest possibility
    of activity initiation and latest possibility of activity completion).
    '''

    InspectionDataSet: Optional[InspectionDataSet] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'InspectionDataSet.AccordingToSchedules',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    requestedWindow: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Requested date and time interval for activity execution.
    '''

    ScheduledEvents: list[ScheduledEvent] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ScheduledEvent.ScheduledEventData',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    All scheduled events with this specification.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Current status information relevant to the data for a scheduled event
    '''

@dataclass(repr=False)
class StateVariable(Identity):
    '''
    An abstract class for state variables.
    '''

@dataclass(repr=False)
class SvInjection(StateVariable):
    '''
    The SvInjection reports the calculated bus injection minus the sum of the
    terminal flows. The terminal flow is positive out from the bus (load sign
    convention) and bus injection has positive flow into the bus. SvInjection
    may have the remainder after state estimation or slack after power flow
    calculation.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminal phase at which the connection is applied. If missing, the
    injection is assumed to be balanced among non-neutral phases.
    '''

    pInjection: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The active power mismatch between calculated injection and initial injection.
    Positive sign means injection into the TopologicalNode (bus).
    '''

    qInjection: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactive power mismatch between calculated injection and initial injection.
    Positive sign means injection into the TopologicalNode (bus).
    '''

    TopologicalNode: Optional[TopologicalNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.SvInjection',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The topological node associated with the flow injection state variable.
    '''

@dataclass(repr=False)
class SvPowerFlow(StateVariable):
    '''
    State variable for power flow. Load convention is used for flow direction.
    This means flow out from the TopologicalNode into the equipment is positive.
    '''

    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The active power flow. Load sign convention is used, i.e. positive sign
    means flow out from a TopologicalNode (bus) into the conducting equipment.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The individual phase of the flow. If unspecified, then assumed to be balanced
    among phases.
    '''

    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactive power flow. Load sign convention is used, i.e. positive sign
    means flow out from a TopologicalNode (bus) into the conducting equipment.
    '''

    EnergyGroup: Optional[EnergyGroup] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'EAID_9E145EE8_2544_4933_9DE4_FB008FF09419-A',
            'namespace': 'http://langdale.com.au/2005/xuid#'
        })
    '''
    '''

    Terminal: Optional[Terminal] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Terminal.SvPowerFlow',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminal associated with the power flow state variable.
    '''

@dataclass(repr=False)
class SvShuntCompensatorSections(StateVariable):
    '''
    State variable for the number of sections in service for a shunt compensator.
    '''

    sections: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The number of sections in service as a continuous variable. The attribute
    shall be a positive value or zero. To get integer value scale with ShuntCompensator.bPerSection.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminal phase at which the connection is applied. If missing, the
    injection is assumed to be balanced among non-neutral phases.
    '''

    ShuntCompensator: Optional[ShuntCompensator] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ShuntCompensator.SvShuntCompensatorSections',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The shunt compensator for which the state applies.
    '''

@dataclass(repr=False)
class SvStatus(StateVariable):
    '''
    State variable for status.
    '''

    inService: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The in service status as a result of topology processing. It indicates
    if the equipment is considered as energized by the power flow. It reflects
    if the equipment is connected within a solvable island. It does not necessarily
    reflect whether or not the island was solved by the power flow.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The individual phase status. If the attribute is unspecified, then three
    phase model is assumed.
    '''

    ConductingEquipment: Optional[ConductingEquipment] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ConductingEquipment.SvStatus',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The conducting equipment associated with the status state variable.
    '''

@dataclass(repr=False)
class SvSwitch(StateVariable):
    '''
    State variable for switch.
    '''

    open: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The attribute tells if the computed state of the switch is considered open.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The terminal phase at which the connection is applied. If missing, the
    injection is assumed to be balanced among non-neutral phases.
    '''

    Switch: Optional[Switch] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Switch.SvSwitch',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switch associated with the switch state.
    '''

@dataclass(repr=False)
class SvTapStep(StateVariable):
    '''
    State variable for transformer tap step.
    '''

    position: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The floating point tap position. This is not the tap ratio, but rather
    the tap step position as defined by the related tap changer model and normally
    is constrained to be within the range of minimum and maximum tap positions.
    '''

    TapChanger: Optional[TapChanger] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TapChanger.SvTapStep',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The tap changer associated with the tap step state.
    '''

@dataclass(repr=False)
class SvVoltage(StateVariable):
    '''
    State variable for voltage.
    '''

    angle: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The voltage angle of the topological node complex voltage with respect
    to system reference.
    '''

    phase: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If specified the voltage is the line to ground voltage of the individual
    phase. If unspecified, then the voltage is assumed balanced.
    '''

    v: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The voltage magnitude at the topological node. The attribute shall be a
    positive value.
    '''

    TopologicalNode: Optional[TopologicalNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.SvVoltage',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The topological node associated with the voltage state.
    '''

@dataclass(repr=False)
class SwitchingStep(Identity):
    '''
    Atomic switching step; can be part of a switching step group, or part of
    a switching plan.
    '''

    isFreeSequence: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    For a step, if isFreeSequence is set to false or is not specified, all
    of the steps in the group must be executed in the order defined by the
    sequenceNumber attribute. The sequenceNumber for a step has a different
    meaning when there are two or more sequential steps that have the isFreeSequence
    attribute set to true. Execution must still be performed in sequenceNumber
    order until a set of two or more steps that have isFreeSequence set to
    true is encountered. In this case, these steps can be executed in any sequence,
    until a step is encountered that has isFreeSequence set to false. All of
    the steps preceding this step must be executed before the step can be executed.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Order of this activity in the sequence of activities within the switching
    plan.
    '''

    subStepSequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Supports compound switching steps that are made up of several sub steps.
    '''

    RevisionHistory: Optional[RevisionHistory] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RevisionHistory.SwitchingStep',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    SwitchingAction: Optional[SwitchingAction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingAction.SwitchingStep',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching action that is associated to the switching step.
    '''

    SwitchingStepGroup: Optional[SwitchingStepGroup] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingStepGroup.SwitchingStep',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching step group that contains the switching steps.
    '''

@dataclass(repr=False)
class SwitchingStepGroup(Identity):
    '''
    A logical step, grouping atomic switching steps that are important to distinguish
    when they may change topology (e.g. placing a jumper between two cuts).
    '''

    description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Descriptive information concerning the switching step group.
    '''

    isFreeSequence: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    If true, the sequence number serves for presentation purposes only, and
    the activity itself may be executed at any time.
    '''

    purpose: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Describes the overall purpose of the steps in this switching step group.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Order of this activity in the sequence of activities within the switching
    plan.
    '''

    SwitchingPlan: Optional[SwitchingPlan] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'SwitchingPlan.SwitchingStepGroups',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Switching plan to which this group belongs.
    '''

    SwitchingStep: list[SwitchingStep] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'SwitchingStep.SwitchingStepGroup',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The switching steps that are part of the switching step group.
    '''

@dataclass(repr=False)
class SysLoadDistributionFactor(Identity):
    '''
    This class models the system distribution factors. This class needs to
    be used along with the HostControlArea and the ConnectivityNode to show
    the distribution of each individual party.
    '''

    factor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Used to calculate load "participation" of a connectivity node in an host
    control area
    '''

    DistributionFactorSet: list[DistributionFactorSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'DistributionFactorSet.SysLoadDistribuFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    HostControlArea: Optional[HostControlArea] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'HostControlArea.SysLoadDistribuFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MktConnectivityNode: Optional[MktConnectivityNode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'MktConnectivityNode.SysLoadDistribuFactor',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class TapChangerTablePoint(Identity):
    '''
    Describes each tap step in the tabular curve.
    '''

    ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The voltage at the tap step divided by rated voltage of the transformer
    end having the tap changer. Hence this is a value close to one.
    For example, if the ratio at step 1 is 1.01, and the rated voltage of the
    transformer end is 110kV, then the voltage obtained by setting the tap
    changer to step 1 to is 111.1kV.
    '''

    step: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The tap step.
    '''

    b: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The magnetizing branch susceptance deviation as a percentage of nominal
    value. The actual susceptance is calculated as follows:
    calculated magnetizing susceptance = b(nominal) * (1 + b(from this class)/100).
    The b(nominal) is defined as the static magnetizing susceptance on the
    associated power transformer end or ends. This model assumes the star impedance
    (pi model) form.
    '''

    g: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The magnetizing branch conductance deviation as a percentage of nominal
    value. The actual conductance is calculated as follows:
    calculated magnetizing conductance = g(nominal) * (1 + g(from this class)/100).
    The g(nominal) is defined as the static magnetizing conductance on the
    associated power transformer end or ends. This model assumes the star impedance
    (pi model) form.
    '''

    r: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The resistance deviation as a percentage of nominal value. The actual reactance
    is calculated as follows:
    calculated resistance = r(nominal) * (1 + r(from this class)/100). The
    r(nominal) is defined as the static resistance on the associated power
    transformer end or ends. This model assumes the star impedance (pi model)
    form.
    '''

    x: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The series reactance deviation as a percentage of nominal value. The actual
    reactance is calculated as follows:
    calculated reactance = x(nominal) * (1 + x(from this class)/100). The x(nominal)
    is defined as the static series reactance on the associated power transformer
    end or ends. This model assumes the star impedance (pi model) form.
    '''

@dataclass(repr=False)
class PhaseTapChangerTablePoint(TapChangerTablePoint):
    '''
    Describes each tap step in the phase tap changer tabular curve.
    '''

    angle: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The angle difference in degrees. A positive value indicates a positive
    angle variation from the Terminal at the PowerTransformerEnd, where the
    TapChanger is located, into the transformer.
    '''

    PhaseTapChangerTable: Optional[PhaseTapChangerTable] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'PhaseTapChangerTable.PhaseTapChangerTablePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The table of this point.
    '''

@dataclass(repr=False)
class RatioTapChangerTablePoint(TapChangerTablePoint):
    '''
    Describes each tap step in the ratio tap changer tabular curve.
    '''

    RatioTapChangerTable: Optional[RatioTapChangerTable] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'RatioTapChangerTable.RatioTapChangerTablePoint',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Table of this point.
    '''

@dataclass(repr=False)
class TenMinAuxiliaryData(Identity):
    '''
    Models 10-Minutes Auxiliary Data.
    '''

    intervalStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateTimeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateUser: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class TerminalConstraintTerm(Identity):
    '''
    A constraint term associated with a specific terminal on a physical piece
    of equipment.
    '''

@dataclass(repr=False)
class TimeTariffInterval(Identity):
    '''
    One of a sequence of time intervals defined in terms of real time. It is
    typically used in association with TariffProfile to define the intervals
    in a time of use tariff structure, where startDateTime simultaneously determines
    the starting point of this interval and the ending point of the previous
    interval.
    '''

@dataclass(repr=False)
class TradingHubPrice(Identity):
    '''
    Models prices at Trading Hubs, interval based.
    '''

    intervalStartTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateTimeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    updateUser: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    marketType: Optional[ MarketType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class TradingHubValues(Identity):
    '''
    Models prices at Trading Hubs.
    '''

    price: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Utilizes the Market type. For DA, the price is hourly. For RTM the price
    is a 5 minute price.
    '''

    AggregatedPnode: Optional[AggregatedPnode] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'AggregatedPnode.TradingHubValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TradingHubPrice: Optional[TradingHubPrice] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TradingHubPrice.TradingHubValues',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class TransmissionCapacity(Identity):
    '''
    This class models the transmission (either a transmission interface or
    a POR/POD pair) capacity including Total Transfer Capacity (TTC), Operating
    Transfer Capacity (OTC), and Capacity Benefit Margin (CBM).
    '''

@dataclass(repr=False)
class TransmissionInterfaceRightEntitlement(Identity):
    '''
    This is formally called the branch group ETC/TOR entitlement with the inclusion
    of CVR as ETC. This could be also used to represent the TR entitlement
    on a POR/POD.
    '''

@dataclass(repr=False)
class TransmissionReservation(Identity):
    '''
    A transmission reservation is obtained from the OASIS system to reserve
    transmission for a specified time period, transmission path and transmission
    product.
    '''

@dataclass(repr=False)
class TroubleSymptoms(Identity):
    '''
    Trouble symptoms reported by person reporting the trouble. The symptoms
    provide clues to utility personnel analyzing the ticket to help identify
    the root cause of the problem.
    '''

    troubleSymptomsExtentOther: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The extent of the problem being reported that does not fit any of the enumeration
    values.
    '''

    troubleSymptomsLightOther: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with lights being reported that does not fit any of the enumeration
    values
    '''

    troubleSymptomsPoleOther: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with pole being reported that does not fit any of the enumeration
    values
    '''

    troubleSymptomsTransformerOther: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with transformer being reported that does not fit any of the
    enumeration values
    '''

    troubleSymptomsTreeOther: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with tree being reported that does not fit any of the enumeration
    values
    '''

    troubleSymptomsWireOther: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with wire being reported that does not fit any of the enumeration
    values
    '''

    troubleSymptomsExtent: Optional[ TroubleSymptomsExtentKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The extent of the problem being reported.
    '''

    troubleSymptomsLight: Optional[ TroubleSymptomsLightKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with lights being reported.
    '''

    troubleSymptomsPole: Optional[ TroubleSymptomsPoleKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with pole being reported.
    '''

    troubleSymptomsTransformer: Optional[ TroubleSymptomsTransformerKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with transformer being reported.
    '''

    troubleSymptomsTree: Optional[ TroubleSymptomsTree_Kind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with tree being reported.
    '''

    troubleSymptomsWire: Optional[ TroubleSymptomsWireKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The problem with wire being reported.
    '''

    TroubleTicket: Optional[TroubleTicket] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'TroubleTicket.TroubleSymptoms',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class Unit(Identity):
    '''
    The identification of the unit name for the time series quantities.
    '''

    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The coded representation of the unit.
    '''

    AceTariffType: list[AceTariffType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AceTariffType.Unit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    TimeSeries: list[TimeSeries] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'TimeSeries.Unit',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class UserAttribute(Identity):
    '''
    Generic name-value pair class, with optional sequence number and units
    for value; can be used to model parts of information exchange when concrete
    types are not known in advance.
    '''

    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name of an attribute.
    '''

    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Sequence number for this attribute in a list of attributes.
    '''

    ErpInvoiceLineItems: list[ErpInvoiceLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpInvoiceLineItem.UserAttributes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ErpLedgerEntries: list[ErpLedgerEntry] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ErpLedgerEntry.UserAttributes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ProcedureDataSets: list[ProcedureDataSet] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ProcedureDataSet.Properties',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PropertySpecification: Optional[Specification] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Specification.AssetProperites',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    RatingSpecification: Optional[Specification] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Specification.Ratings',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    Transaction: Optional[Transaction] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'Transaction.UserAttributes',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Transaction for which this snapshot has been recorded.
    '''

    value: Optional[StringQuantity] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value of an attribute, including unit information.
    '''

@dataclass(repr=False)
class MktUserAttribute(UserAttribute):
    '''
    Subclass of IEC61968:Domain2:UserAttribute.
    '''

    AttributeProperty: list[AttributeProperty] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'AttributeProperty.MktUserAttribute',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    BillDeterminant: list[BillDeterminant] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'BillDeterminant.MktUserAttribute',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ChargeGroup: list[ChargeGroup] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ChargeGroup.MktUserAttribute',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    ChargeType: list[ChargeType] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ChargeType.MktUserAttribute',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    MarketStatementLineItem: list[MarketStatementLineItem] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'MarketStatementLineItem.MktUserAttribute',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    PassThroughBill: list[PassThroughBill] = field(
        default_factory = list,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'PassThroughBill.MktUserAttribute',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class WirePhaseInfo(Identity):
    '''
    Information on a wire carrying a single phase.
    '''

    phaseInfo: Optional[ SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phase information.
    '''

    WireAssemblyInfo: Optional[WireAssemblyInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WireAssemblyInfo.WirePhaseInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Wire assembly information using this wire phase information.
    '''

    WireInfo: Optional[WireInfo] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WireInfo.WirePhaseInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Wire information contributing to this wire phase information.
    '''

    WirePosition: Optional[WirePosition] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WirePosition.WirePhaseInfo',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Wire position with this wire phase information.
    '''

class AccumulationKind(Enum):
    '''
    Kind of accumulation behaviour for read / measured values from individual
    end points.
    '''

    boundedQuantity = 'boundedQuantity'
    '''
    A time-independent cumulative quantity much like a 'bulkQuantity' or a
    'latchingQuantity', except that the accumulation stops at the maximum or
    minimum values. When the maximum is reached, any additional positive accumulation
    is discarded, but negative accumulation may be accepted (thus lowering
    the counter.) Likewise, when the negative bound is reached, any additional
    negative accumulation is discarded, but positive accumulation is accepted
    (thus increasing the counter.)
    '''

    bulkQuantity = 'bulkQuantity'
    '''
    A value from a register which represents the bulk quantity of a commodity.
    This quantity is computed as the integral of the commodity usage rate.
    This value is typically used as the basis for the dial reading at the meter,
    and as a result, will roll over upon reaching a maximum dial value.
    Note 1: With the metering system, the roll-over behaviour typically implies
    a roll-under behavior so that the value presented is always a positive
    value (e.g. unsigned integer or positive decimal.) However, when communicating
    data between enterprise applications a negative value might occur in a
    case such as net metering.
    Note 2: A 'bulkQuantity' refers primarily to the dial reading and not the
    consumption over a specific period of time.
    '''

    continuousCumulative = 'continuousCumulative'
    '''
    The sum of the previous billing period values and the present period value.
    Note: 'continuousCumulative' is commonly used in conjunction with 'demand',
    and it would represent the cumulative sum of the previous billing period
    maximum demand values (as occurring with each demand reset) summed with
    the present period maximum demand value (which has yet to be reset.)
    '''

    cumulative = 'cumulative'
    '''
    The sum of the previous billing period values.
    Note: 'cumulative' is commonly used in conjunction with “demand.” Each
    demand reset causes the maximum demand value for the present billing period
    (since the last demand reset) to accumulate as an accumulative total of
    all maximum demands. So instead of 'zeroing' the demand register, a demand
    reset has the effect of adding the present maximum demand to this accumulating
    total.
    '''

    deltaData = 'deltaData'
    '''
    The difference between the value at the end of the prescribed interval
    and the beginning of the interval. This is used for incremental interval
    data.
    Note: One common application would be for load profile data, another use
    might be to report the number of events within an interval (such as the
    number of equipment energisations within the specified period of time.)
    '''

    indicating = 'indicating'
    '''
    As if a needle is swung out on the meter face to a value to indicate the
    current value.
    Note: An 'indicating' value is typically measured over hundreds of milliseconds
    or greater, or may imply a “pusher” mechanism to capture a value. Compare
    this to 'instantaneous' which is measured over a shorter period of time.
    '''

    instantaneous = 'instantaneous'
    '''
    Typically measured over the fastest period of time allowed by the definition
    of the metric (usually milliseconds or tens of milliseconds.)
    Note: 'instantaneous' was moved to attribute #3 in Ed.2 of IEC 61968-9,
    from attribute #1 in Ed.1 of IEC 61968-9.
    '''

    latchingQuantity = 'latchingQuantity'
    '''
    When this description is applied to a metered value, it implies that the
    value is a time-independent cumulative quantity much like a 'bulkQuantity',
    except that it latches upon the maximum value upon reaching that value.
    Any additional accumulation (positive or negative) is discarded until a
    reset occurs.
    Note: A 'latchingQuantity' may also occur in the downward direction – upon
    reaching a minimum value. The terms 'maximum' or 'minimum' (for 'aggregate')
    will usually be included when this type of accumulation behaviour is present.
    When this description is applied to an encoded value (UOM= 'Code'), it
    implies that the value has one or more bits which are latching. The condition
    that caused the bit to be set may have long since evaporated.
    In either case, the timestamp that accompanies the value may not coincide
    with the moment the value was initially set.
    In both cases a system will need to perform an operation to clear the latched
    value.
    '''

    none = 'none'
    '''
    Not applicable, or implied by the unit of measure.
    '''

    summation = 'summation'
    '''
    A form of accumulation which is selective with respect to time.
    Note : 'summation' could be considered a specialisation of 'bulkQuantity'
    as it selectively accumulates pulses over a timing pattern (while 'bulkQuantity'
    accumulates pulses all of the time).
    '''

    timeDelay = 'timeDelay'
    '''
    A form of computation which introduces a time delay characteristic to the
    data value.
    '''

class AggregateKind(Enum):
    '''
    Kind of aggregation for read / measured values from multiple end points.
    '''

    average = 'average'
    '''
    The value represents average.
    '''

    excess = 'excess'
    '''
    The value represents an amount over which a threshold was exceeded.
    '''

    fifthMaximum = 'fifthMaximum'
    '''
    The fifth highest value observed.
    '''

    fourthMaximum = 'fourthMaximum'
    '''
    The fourth highest value observed.
    '''

    highThreshold = 'highThreshold'
    '''
    The value represents a programmed high threshold.
    '''

    lowThreshold = 'lowThreshold'
    '''
    The value represents a programmed low threshold.
    '''

    maximum = 'maximum'
    '''
    The highest value observed.
    '''

    minimum = 'minimum'
    '''
    The smallest value observed.
    '''

    nominal = 'nominal'
    '''
    The nominal value.
    '''

    none = 'none'
    '''
    Not applicable.
    '''

    normal = 'normal'
    '''
    The normal value.
    '''

    secondMaximum = 'secondMaximum'
    '''
    The second highest value observed.
    '''

    secondMinimum = 'secondMinimum'
    '''
    The second smallest value observed.
    '''

    sum = 'sum'
    '''
    The accumulated sum.
    '''

    thirdMaximum = 'thirdMaximum'
    '''
    The third highest value observed.
    '''

class AmiBillingReadyKind(Enum):
    '''
    Lifecycle states of the metering installation at a usage point with respect
    to readiness for billing via advanced metering infrastructure reads.
    '''

    amiCapable = 'amiCapable'
    '''
    Usage point is equipped with an AMI capable meter that is not yet currently
    equipped with a communications module.
    '''

    amiDisabled = 'amiDisabled'
    '''
    Usage point is equipped with an AMI capable meter; however, the AMI functionality
    has been disabled or is not being used.
    '''

    billingApproved = 'billingApproved'
    '''
    Usage point is equipped with an operating AMI capable meter and accuracy
    has been certified for billing purposes.
    '''

    enabled = 'enabled'
    '''
    Usage point is equipped with an AMI capable meter having communications
    capability.
    '''

    nonAmi = 'nonAmi'
    '''
    Usage point is equipped with a non AMI capable meter.
    '''

    nonMetered = 'nonMetered'
    '''
    Usage point is not currently equipped with a meter.
    '''

    operable = 'operable'
    '''
    Usage point is equipped with an AMI capable meter that is functioning and
    communicating with the AMI network.
    '''

class AnalyticKind(Enum):
    '''
    Possible kinds of analytics.
    '''

    agingAnalytic = 'agingAnalytic'
    '''
    Analytic evaluates aging.
    '''

    faultAnalytic = 'faultAnalytic'
    '''
    Analytic evaluates fault.
    '''

    healthAnalytic = 'healthAnalytic'
    '''
    Analytic evaluates asset health.
    '''

    other = 'other'
    '''
    Analytic evaluates other factor.
    '''

    replacementAnalytic = 'replacementAnalytic'
    '''
    Analytic evaluates need for replacement.
    '''

    riskAnalytic = 'riskAnalytic'
    '''
    Analytic evaluates risk.
    '''

class AnchorKind(Enum):
    '''
    Kind of anchor.
    '''

    concrete = 'concrete'
    '''
    '''

    helix = 'helix'
    '''
    '''

    multiHelix = 'multiHelix'
    '''
    '''

    other = 'other'
    '''
    '''

    rod = 'rod'
    '''
    '''

    screw = 'screw'
    '''
    '''

    unknown = 'unknown'
    '''
    '''

class AnodeType(Enum):
    '''
    Aggregated Nodes Types for example:
    <ul>
    <li>SYS - System Zone/Region; </li>
    </ul>
    <ul>
    <li>RUC - RUC Zone; </li>
    </ul>
    <ul>
    <li>LFZ - Load Forecast Zone; </li>
    </ul>
    <ul>
    <li>REG - Market Energy/Ancillary Service Region; </li>
    </ul>
    <ul>
    <li>AGR - Aggregate Generation Resource; </li>
    </ul>
    <ul>
    <li>POD - Point of Delivery; </li>
    </ul>
    <ul>
    <li>ALR - Aggregate Load Resource; </li>
    </ul>
    <ul>
    <li>LTAC - Load TransmissionAccessCharge (TAC) Group; </li>
    </ul>
    <ul>
    <li>ACA - Adjacent Control Area </li>
    </ul>
    <ul>
    <li>ASR - Aggregated System Resource </li>
    </ul>
    <ul>
    <li>ECA - Embedded Control Area </li>
    </ul>
    '''

    ACA = 'ACA'
    '''
    Adjacent Control Area
    '''

    AGR = 'AGR'
    '''
    Aggregate Generation Resource;
    '''

    ALR = 'ALR'
    '''
    Aggregate Load Resource;
    '''

    ASR = 'ASR'
    '''
    Aggregated System Resource
    '''

    DER = 'DER'
    '''
    Distributed Energy Resource.
    '''

    ECA = 'ECA'
    '''
    Embedded Control Area
    '''

    LFZ = 'LFZ'
    '''
    Load Forecast Zone
    '''

    LTAC = 'LTAC'
    '''
    Load TransmissionAccessCharge (TAC) Group;
    '''

    POD = 'POD'
    '''
    Point of Delivery;
    '''

    REG = 'REG'
    '''
    Market Energy/Ancillary Service Region;
    '''

    RUC = 'RUC'
    '''
    RUC Zone
    '''

    SYS = 'SYS'
    '''
    System Zone/Region;
    '''

class ApnodeType(Enum):
    '''
    Aggregate Node Types for example:
    AG - Aggregated Generation
    CPZ - Custom Price Zone
    DPZ - Default Price Zone
    LAP - Load Aggregation Point
    TH - Trading Hub
    SYS - System Zone
    CA - Control Area
    GA - generic aggregation
    EHV - 500 kV
    GH - generic hub
    ZN - zone
    INT - Interface
    BUS - Bus
    '''

    AG = 'AG'
    '''
    Aggregated Generation
    '''

    BUS = 'BUS'
    '''
    Bus
    '''

    CA = 'CA'
    '''
    Control Area
    '''

    CPZ = 'CPZ'
    '''
    Custom Price Zone
    '''

    DCA = 'DCA'
    '''
    Designated Congestion Area
    '''

    DPZ = 'DPZ'
    '''
    Default Price Zone
    '''

    EHV = 'EHV'
    '''
    500 kV - Extra High Voltage aggregate price nodes
    '''

    GA = 'GA'
    '''
    generic aggregation
    '''

    GH = 'GH'
    '''
    generic hub
    '''

    INT = 'INT'
    '''
    Interface
    '''

    SYS = 'SYS'
    '''
    System Zone
    '''

    TH = 'TH'
    '''
    Trading Hub
    '''

    ZN = 'ZN'
    '''
    Zone
    '''

class ApplicationSecurityKind(Enum):
    '''
    Specifies the expected security mechanism, per IEC 62351-4, to be utilized.
    '''

    endToEndSecure = 'endToEndSecure'
    '''
    Indicates that E2E-security shall be used in order to allow establishment
    of an MMS association.
    '''

    nonSecure = 'nonSecure'
    '''
    Indicates that an application security shall not be used in order to allow
    establishment of an MSS association.
    '''

    secure = 'secure'
    '''
    Indicates that the A-security-profile as specified in Clause 11 (or IEC
    TS 62351-4:2007) shall be used in order to allow establishment of an MMS
    association.
    '''

class AreaControlMode(Enum):
    '''
    Area's present control mode.
    '''

    CF = 'CF'
    '''
    CF = Constant Frequency
    '''

    CTL = 'CTL'
    '''
    Constant Tie-Line
    '''

    OFF = 'OFF'
    '''
    Off control
    '''

    TLB = 'TLB'
    '''
    Tie-Line Bias
    '''

class AreaKind(Enum):
    '''
    Enumeration for the type of area defined; e.g., county, state, parish,
    zipcode, etc.
    '''

    borough = 'borough'
    '''
    Enumeration for the type of area defined for the borough
    '''

    county = 'county'
    '''
    Enumeration for the type of area defined for the county
    '''

    parish = 'parish'
    '''
    Enumeration for the type of area defined for the parish
    '''

    serviceArea = 'serviceArea'
    '''
    Enumeration for the type of area defined for the service area
    '''

    state = 'state'
    '''
    Enumeration for the type of area defined for the state
    '''

    township = 'township'
    '''
    Enumeration for the type of area defined for the township
    '''

    ward = 'ward'
    '''
    Enumeration for the type of area defined for the ward
    '''

    zipcode = 'zipcode'
    '''
    Enumeration for the type of area defined for the zipcode
    '''

class AssetFailureClassification(Enum):
    '''
    Classifications of asset failures.
    '''

    defect = 'defect'
    '''
    Failure due to defect.
    '''

    major = 'major'
    '''
    Major failure.
    '''

    majorNeedsReplacement = 'majorNeedsReplacement'
    '''
    Major failure – asset needs to be replaced.
    '''

    minor = 'minor'
    '''
    Minor failure.
    '''

class AssetFailureMode(Enum):
    '''
    What asset has failed to be able to do.
    Reason for breaker failure.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    failToCarryLoad = 'failToCarryLoad'
    '''
    Failure to carry load.
    '''

    failToClose = 'failToClose'
    '''
    Failure to close.
    '''

    failToInterrupt = 'failToInterrupt'
    '''
    Failure to interrupt.
    '''

    failToOpen = 'failToOpen'
    '''
    Failure to open.
    '''

    failToProvideInsulationLevel = 'failToProvideInsulationLevel'
    '''
    Failure to provide insulation.
    '''

class AssetGroupKind(Enum):
    '''
    Possible kinds of asset groups.
    '''

    analysisGroup = 'analysisGroup'
    '''
    Group is used for analysis purposes.
    '''

    complianceGroup = 'complianceGroup'
    '''
    Group is used for compliance purposes.
    '''

    functionalGroup = 'functionalGroup'
    '''
    Group is used for functional purposes, for example assets which are grouped
    together because they are part of a for a particular function - such as
    a group of feeders.
    '''

    inventoryGroup = 'inventoryGroup'
    '''
    Group is used for inventory purposes.
    '''

    other = 'other'
    '''
    '''

class AssetHazardKind(Enum):
    '''
    Type of hazard that is posed to asset in this location.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    ambientTempAbove38 = 'ambientTempAbove38'
    '''
    Subject to ambient temperature above 38 °C.
    '''

    ambientTempBelowMinus12 = 'ambientTempBelowMinus12'
    '''
    Subject to ambient temperature of below -12 °C.
    '''

    childrenAtPlay = 'childrenAtPlay'
    '''
    Children play in area (stray kite/ball hazard).
    '''

    fishingArea = 'fishingArea'
    '''
    Fishing in area (fishing pole/line hazard).
    '''

    other = 'other'
    '''
    If other, look at type field for more information.
    '''

    vegetation = 'vegetation'
    '''
    Vegetation growing below asset that may cause problem.
    '''

class AssetKind(Enum):
    '''
    Kinds of assets or asset components.
    '''

    breakerAirBlastBreaker = 'breakerAirBlastBreaker'
    '''
    Air blast circuit breaker.
    '''

    breakerBulkOilBreaker = 'breakerBulkOilBreaker'
    '''
    Bulk oil circuit breaker.
    '''

    breakerInsulatingStackAssembly = 'breakerInsulatingStackAssembly'
    '''
    Breaker insulating stack assembly (for live tank breaker).
    '''

    breakerMinimumOilBreaker = 'breakerMinimumOilBreaker'
    '''
    Minimum oil circuit breaker.
    '''

    breakerSF6DeadTankBreaker = 'breakerSF6DeadTankBreaker'
    '''
    SF6 dead tank breaker.
    '''

    breakerSF6LiveTankBreaker = 'breakerSF6LiveTankBreaker'
    '''
    SF6 live tank breaker.
    '''

    breakerTankAssembly = 'breakerTankAssembly'
    '''
    Breaker tank assembly.
    '''

    other = 'other'
    '''
    Other type of Asset. The type attribute may provide more details in this
    case.
    '''

    transformer = 'transformer'
    '''
    Transformer.
    '''

    transformerTank = 'transformerTank'
    '''
    Transformer tank.
    '''

class AssetLifecycleStateKind(Enum):
    '''
    Lifecycle states an asset can be in.
    While the possible lifecycle states are standardized, the allowed transitions
    are not - they are intended to be defined by the business process requirements
    of local implementations.
    '''

    disposedOf = 'disposedOf'
    '''
    Asset disposed of.
    '''

    manufactured = 'manufactured'
    '''
    Asset manufactured.
    '''

    purchased = 'purchased'
    '''
    Asset purchased.
    '''

    received = 'received'
    '''
    Asset received.
    '''

    retired = 'retired'
    '''
    Asset retired.
    '''

class AssetModelUsageKind(Enum):
    '''
    Usage for an asset model.
    '''

    customerSubstation = 'customerSubstation'
    '''
    Asset model is intended for use in customer substation.
    '''

    distributionOverhead = 'distributionOverhead'
    '''
    Asset model is intended for use in distribution overhead network.
    '''

    distributionUnderground = 'distributionUnderground'
    '''
    Asset model is intended for use in underground distribution network.
    '''

    other = 'other'
    '''
    Other kind of asset model usage.
    '''

    streetlight = 'streetlight'
    '''
    Asset model is intended for use as streetlight.
    '''

    substation = 'substation'
    '''
    Asset model is intended for use in substation.
    '''

    transmission = 'transmission'
    '''
    Asset model is intended for use in transmission network.
    '''

    unknown = 'unknown'
    '''
    Usage of the asset model is unknown.
    '''

class AssetStringKind(Enum):
    '''
    Definition of type of string useful in asset domain.
    '''

    visualExamRemarks = 'visualExamRemarks'
    '''
    Remarks related to a visual exam.
    Could be used for remarks on oil appearance resulting from visual examination,
    including sediment, appearance, free water.
    '''

class AsynchronousMachineKind(Enum):
    '''
    Kind of Asynchronous Machine.
    '''

    generator = 'generator'
    '''
    The Asynchronous Machine is a generator.
    '''

    motor = 'motor'
    '''
    The Asynchronous Machine is a motor.
    '''

class AtmosphericAnalogKind(Enum):
    '''
    Kinds of analogs (floats) measuring an atmospheric condition.
    '''

    albedo = 'albedo'
    '''
    '''

    ambientTemperature = 'ambientTemperature'
    '''
    The temperature measured b<font color="#0f0f0f">y a thermometer exposed
    to the air in a place sheltered from direct solar radiation. </font>Also
    known as "dry bulb" because<font color="#0f0f0f"> the air temperature is
    indicated by a thermometer not affecte</font>d by the moisture of the air.
    '''

    atmosphericPressure = 'atmosphericPressure'
    '''
    '''

    ceiling = 'ceiling'
    '''
    '''

    dewPoint = 'dewPoint'
    '''
    The temperature to which air must be cooled at constant pressure and constant
    water-vapor content in order for saturation to occur. In other words, it
    is the temperature at which water vapor starts to condense out of the air.
    '''

    heatIndex = 'heatIndex'
    '''
    The temperature of how hot it "feels like" for a given combination of warm
    air temperature and relative humidity.
    '''

    horizontalVisibility = 'horizontalVisibility'
    '''
    '''

    humidity = 'humidity'
    '''
    '''

    ice = 'ice'
    '''
    '''

    illuminanceDiffuseHorizontal = 'illuminanceDiffuseHorizontal'
    '''
    '''

    illuminanceDirectNormal = 'illuminanceDirectNormal'
    '''
    '''

    illuminanceGlobalHorizontal = 'illuminanceGlobalHorizontal'
    '''
    '''

    irradianceDiffuseHorizonal = 'irradianceDiffuseHorizonal'
    '''
    '''

    irradianceDirectNormal = 'irradianceDirectNormal'
    '''
    '''

    irradianceExtraTerrestrialHorizontal = 'irradianceExtraTerrestrialHorizontal'
    '''
    '''

    irradianceExtraTerrestrialVertical = 'irradianceExtraTerrestrialVertical'
    '''
    '''

    irradianceGlobalHorizontal = 'irradianceGlobalHorizontal'
    '''
    '''

    luminanceZenith = 'luminanceZenith'
    '''
    '''

    precipitation = 'precipitation'
    '''
    '''

    rain = 'rain'
    '''
    '''

    skyCoverageOpaque = 'skyCoverageOpaque'
    '''
    '''

    skyCoverageTotal = 'skyCoverageTotal'
    '''
    '''

    snow = 'snow'
    '''
    Snow amount over a specified period of time.
    '''

    verticalVisibility = 'verticalVisibility'
    '''
    '''

    windChill = 'windChill'
    '''
    The temperature of how cold it "feels like" based on the rate of heat loss
    from exposed skin caused by the effects of wind and cold temperatures.
    '''

    windSpeedGust = 'windSpeedGust'
    '''
    Maximum instantaneous wind speed in the 10 minute period preceding a moment
    in time so long as more than 10 knots of difference has been exhibited
    between peaks and lulls during that 10 minute time period.
    0 value means no gusts during preceding 10 minute period.
    '''

    windSpeedInstantaneous = 'windSpeedInstantaneous'
    '''
    Wind speed at a moment in time.
    '''

    windSpeedPeak = 'windSpeedPeak'
    '''
    Peak instantaneous wind speed in the 60 minutes preceding a moment in time
    as long as peak speed greater than 25 knots.
    0 value means speed did not exceed 25 knots during preceding 60 minutes.
    '''

    windSpeedSustained = 'windSpeedSustained'
    '''
    Average instantaneous wind speed over the 2-minute time period preceding
    a moment in time.
    '''

class AutomaticDispInstTypeCommitment(Enum):
    '''
    Commitment instruction types.
    '''

    DR_ADJUSTMENT = 'DR_ADJUSTMENT'
    '''
    Distributed Resource adjustment for a distributed resource that is already
    deployed (committed).
    '''

    DR_DEPLOY = 'DR_DEPLOY'
    '''
    Distributed Resource Deployment
    '''

    DR_RELEASE = 'DR_RELEASE'
    '''
    Distributed Resource Release
    '''

    SHUT_DOWN = 'SHUT_DOWN'
    '''
    Shut down instruction type
    '''

    START_UP = 'START_UP'
    '''
    Start up instruction type
    '''

class BatteryStateKind(Enum):
    '''
    The state of the battery unit.
    '''

    charging = 'charging'
    '''
    Stored energy is increasing.
    '''

    discharging = 'discharging'
    '''
    Stored energy is decreasing.
    '''

    empty = 'empty'
    '''
    Unable to discharge, and not charging.
    '''

    full = 'full'
    '''
    Unable to charge, and not discharging.
    '''

    waiting = 'waiting'
    '''
    Neither charging nor discharging, but able to do so.
    '''

class BidType(Enum):
    '''
    For example:
    DEFAULT_ENERGY_BID
    DEFAULT_STARTUP_BID
    DEFAULT_MINIMUM_LOAD_BID
    '''

    DEFAULT_ENERGY_BID = 'DEFAULT_ENERGY_BID'
    '''
    '''

    DEFAULT_MINIMUM_LOAD_BID = 'DEFAULT_MINIMUM_LOAD_BID'
    '''
    '''

    DEFAULT_STARTUP_BID = 'DEFAULT_STARTUP_BID'
    '''
    '''

class BidTypeRMR(Enum):
    '''
    Bid self schedule type has two types as the required output of requirements
    and qualified pre-dispatch.
    '''

    QUALIFIED_PREDISPATCH = 'QUALIFIED_PREDISPATCH'
    '''
    Output of requirements bid self schedule type.
    '''

    REQUIREMENTS = 'REQUIREMENTS'
    '''
    Qualified pre-dispatch bid self schedule type.
    '''

class BillMediaKind(Enum):
    '''
    Kind of bill media.
    '''

    electronic = 'electronic'
    '''
    '''

    other = 'other'
    '''
    '''

    paper = 'paper'
    '''
    '''

class BoilerControlMode(Enum):
    '''
    Boiler control mode.
    '''

    coordinated = 'coordinated'
    '''
    Coordinated.
    '''

    following = 'following'
    '''
    Following.
    '''

class BreakerApplicationKind(Enum):
    '''
    Classifications of network roles in which breakers can be deployed. The
    classifications are intended to reflect both criticality of breaker in
    network operations and typical usage experienced by breaker.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    busBreaker = 'busBreaker'
    '''
    Bus breaker.
    '''

    busTieBreaker = 'busTieBreaker'
    '''
    Bus tie breaker.
    '''

    capacitorOrReactorBankBreaker = 'capacitorOrReactorBankBreaker'
    '''
    Capacitor or reactor breaker.
    '''

    feederBreaker = 'feederBreaker'
    '''
    Feeder breaker.
    '''

    other = 'other'
    '''
    Other type of breaker application.
    '''

    spare = 'spare'
    '''
    Spare breaker.
    '''

    stepUpTransformerBreakerFossil = 'stepUpTransformerBreakerFossil'
    '''
    Step-up transformer breaker for fossil generator.
    '''

    stepUpTransformerBreakerHydro = 'stepUpTransformerBreakerHydro'
    '''
    Step-up transformer breaker for hydro generator.
    '''

    stepUpTransformerBreakerNuclear = 'stepUpTransformerBreakerNuclear'
    '''
    Step-up transformer breaker for nuclear generator.
    '''

    stepUpTransformerBreakerPumpedStorage = 'stepUpTransformerBreakerPumpedStorage'
    '''
    Step-up transformer breaker for pumped storage.
    '''

    substationTransformerBreaker = 'substationTransformerBreaker'
    '''
    Substation transformer breaker.
    '''

    transmissionFlowGateLineBreaker = 'transmissionFlowGateLineBreaker'
    '''
    Transmission flow gate line breaker.
    '''

    transmissionLineBreaker = 'transmissionLineBreaker'
    '''
    Transmission line breaker.
    '''

    transmissionTieLineBreaker = 'transmissionTieLineBreaker'
    '''
    Transmission tie line breaker.
    '''

class BreakerConfiguration(Enum):
    '''
    Switching arrangement for bay.
    '''

    breakerAndAHalf = 'breakerAndAHalf'
    '''
    Breaker and a half.
    '''

    doubleBreaker = 'doubleBreaker'
    '''
    Double breaker.
    '''

    noBreaker = 'noBreaker'
    '''
    No breaker.
    '''

    singleBreaker = 'singleBreaker'
    '''
    Single breaker.
    '''

class BreakerFailureReasonKind(Enum):
    '''
    Reason for breaker failure.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    SF6BlastValveFailure = 'SF6BlastValveFailure'
    '''
    SF6 blast valve failure.
    '''

    SF6PufferFailure = 'SF6PufferFailure'
    '''
    SF6 puffer valve failure.
    '''

    blastValveFailure = 'blastValveFailure'
    '''
    Blast valve failure.
    '''

    bushingFailure = 'bushingFailure'
    '''
    Bushing failure.
    '''

    closeCoilOpenShortedFailed = 'closeCoilOpenShortedFailed'
    '''
    Close coil open shorted failure.
    '''

    contaminatedAir = 'contaminatedAir'
    '''
    Contaminated air.
    '''

    contaminatedArcChutes = 'contaminatedArcChutes'
    '''
    Contaminated arc chutes.
    '''

    contaminatedGas = 'contaminatedGas'
    '''
    Contaminated gas.
    '''

    contaminatedGasAir = 'contaminatedGasAir'
    '''
    Contaminated gas or air.
    '''

    controlCircuitFailure = 'controlCircuitFailure'
    '''
    Control circuit failure.
    '''

    degradedLubrication = 'degradedLubrication'
    '''
    Degraded lubrication.
    '''

    externalOrInternalContamination = 'externalOrInternalContamination'
    '''
    External or internal contamination.
    '''

    highPressureAirPlant = 'highPressureAirPlant'
    '''
    High pressure air plant.
    '''

    highResistanceLoadPath = 'highResistanceLoadPath'
    '''
    High resistance load path.
    '''

    highResistancePath = 'highResistancePath'
    '''
    High resistance path.
    '''

    interrupterContactFailure = 'interrupterContactFailure'
    '''
    Interrupter contact failure.
    '''

    interrupterFailure = 'interrupterFailure'
    '''
    Interrupter failure.
    '''

    linkageFailure = 'linkageFailure'
    '''
    Linkage failure.
    '''

    lossOfOil = 'lossOfOil'
    '''
    Loss of oil.
    '''

    lossOfVacuum = 'lossOfVacuum'
    '''
    Loss of vacuum.
    '''

    lowGasPressure = 'lowGasPressure'
    '''
    Low gas pressure.
    '''

    mechanismFailure = 'mechanismFailure'
    '''
    Blast valve failure.
    '''

    mechanismOrLinkageFailure = 'mechanismOrLinkageFailure'
    '''
    Mechanism or linkage failure.
    '''

    oilRelatedFailure = 'oilRelatedFailure'
    '''
    Oil-related failure.
    '''

    poorOilQuality = 'poorOilQuality'
    '''
    Poor oil quality.
    '''

    rackingMechanismFailure = 'rackingMechanismFailure'
    '''
    Racking mechanism failure.
    '''

    resistorFailure = 'resistorFailure'
    '''
    Resistor failure.
    '''

    resistorGradingCapacitorFailure = 'resistorGradingCapacitorFailure'
    '''
    Resistor grading capacitor failure.
    '''

    solidDielectricFailure = 'solidDielectricFailure'
    '''
    Solid dielectric failure.
    '''

    storedEnergyFailure = 'storedEnergyFailure'
    '''
    Stored energy failure.
    '''

    tripCoilOpenShortedFailed = 'tripCoilOpenShortedFailed'
    '''
    Trip coil open shorted failure.
    '''

class BusbarConfiguration(Enum):
    '''
    Busbar layout for bay.
    '''

    doubleBus = 'doubleBus'
    '''
    Double bus.
    '''

    mainWithTransfer = 'mainWithTransfer'
    '''
    Main bus with transfer bus.
    '''

    ringBus = 'ringBus'
    '''
    Ring bus.
    '''

    singleBus = 'singleBus'
    '''
    Single bus.
    '''

class BushingInsulationKind(Enum):
    '''
    Insulation kind for bushings.
    '''

    compound = 'compound'
    '''
    Compound.
    '''

    oilImpregnatedPaper = 'oilImpregnatedPaper'
    '''
    Oil impregnated paper.
    '''

    other = 'other'
    '''
    Other.
    '''

    resinBondedPaper = 'resinBondedPaper'
    '''
    Resin bonded paper.
    '''

    resinImpregnatedPaper = 'resinImpregnatedPaper'
    '''
    Resin impregnated paper.
    '''

    solidPorcelain = 'solidPorcelain'
    '''
    Solid porcelain.
    '''

class BushingInsulationPfTestKind(Enum):
    '''
    Kind of PF test for bushing insulation.
    '''

    c1 = 'c1'
    '''
    Power factor tap-to-ground.
    '''

    c2 = 'c2'
    '''
    Power factor tap-to-conductor.
    '''

class CableConstructionKind(Enum):
    '''
    Kind of cable construction.
    '''

    compacted = 'compacted'
    '''
    Compacted cable.
    '''

    compressed = 'compressed'
    '''
    Compressed cable.
    '''

    other = 'other'
    '''
    Other kind of cable construction.
    '''

    sector = 'sector'
    '''
    Sector cable.
    '''

    segmental = 'segmental'
    '''
    Segmental cable.
    '''

    solid = 'solid'
    '''
    Solid cable.
    '''

    stranded = 'stranded'
    '''
    Stranded cable.
    '''

class CableOuterJacketKind(Enum):
    '''
    Kind of cable outer jacket.
    '''

    insulating = 'insulating'
    '''
    Insulating cable outer jacket.
    '''

    linearLowDensityPolyethylene = 'linearLowDensityPolyethylene'
    '''
    Linear low density polyethylene cable outer jacket.
    '''

    none = 'none'
    '''
    Cable has no outer jacket.
    '''

    other = 'other'
    '''
    Pther kind of cable outer jacket.
    '''

    polyethylene = 'polyethylene'
    '''
    Polyethylene cable outer jacket.
    '''

    pvc = 'pvc'
    '''
    PVC cable outer jacket.
    '''

    semiconducting = 'semiconducting'
    '''
    Semiconducting cable outer jacket.
    '''

class CableShieldMaterialKind(Enum):
    '''
    Kind of cable shield material.
    '''

    aluminum = 'aluminum'
    '''
    Aluminum cable shield.
    '''

    copper = 'copper'
    '''
    Copper cable shield.
    '''

    lead = 'lead'
    '''
    Lead cable shield.
    '''

    other = 'other'
    '''
    Other kind of cable shield material.
    '''

    steel = 'steel'
    '''
    Steel cable shield.
    '''

class CalculationIntervalUnitKind(Enum):
    '''
    Units in which calculation interval period is defined.
    '''

    cycle = 'cycle'
    '''
    Period expressed in cycles.
    '''

    day = 'day'
    '''
    Period expressed in days.
    '''

    hour = 'hour'
    '''
    Period expressed in hours.
    '''

    milliSecond = 'milliSecond'
    '''
    Period expressed in milli-seconds.
    '''

    minute = 'minute'
    '''
    Period expressed in minutes.
    '''

    month = 'month'
    '''
    Period expressed in months.
    '''

    perCycle = 'perCycle'
    '''
    Period expressed in per-cycle.
    '''

    season = 'season'
    '''
    Period expressed in seasons.
    '''

    second = 'second'
    '''
    Period expressed in seconds.
    '''

    week = 'week'
    '''
    Period expressed in weeks.
    '''

    year = 'year'
    '''
    Period expressed in years.
    '''

class CalculationKind(Enum):
    '''
    Categorisation of calculation operation that can be done to Measurement.
    '''

    div = 'div'
    '''
    Division operation the input values (operands).
    '''

    mul = 'mul'
    '''
    Multiplication operation the input values (operands).
    '''

    sqrt = 'sqrt'
    '''
    Square root operator - only one input value (operands).
    '''

    sum = 'sum'
    '''
    Summation operation over the input values (operands).
    '''

class CalculationModeKind(Enum):
    '''
    The mode of the calculation (total, periodic, sliding).
    .
    '''

    period = 'period'
    '''
    Calcuation is for fixed period.
    '''

    sliding = 'sliding'
    '''
    Calculation is for sliding period.
    '''

    total = 'total'
    '''
    Calculation is for total period.
    '''

class CalculationTechniqueKind(Enum):
    '''
    Possible calculation techniques.
    '''

    average = 'average'
    '''
    Result is average value for period.
    '''

    maximum = 'maximum'
    '''
    Result is maximum value for period.
    '''

    minimum = 'minimum'
    '''
    Result is minimum value for period.
    '''

    trueRMS = 'trueRMS'
    '''
    Result is RMS value for period.
    '''

class ChargeKind(Enum):
    '''
    Kind of charge.
    '''

    auxiliaryCharge = 'auxiliaryCharge'
    '''
    Any other charge which is not a consumptionCharge or demandCharge. For
    example: debt recovery, arrears, standing charge or charge for another
    service such as street lighting.
    '''

    consumptionCharge = 'consumptionCharge'
    '''
    The charge levied for the actual usage of the service, normally expressed
    in terms of a tariff. For example: usage x price per kWh = total charge
    for consumption.
    '''

    demandCharge = 'demandCharge'
    '''
    The charge related to the usage within a defined time interval, normally
    expressed in terms of a tariff. For example: a maximum-demand tariff will
    levy an additional charge on top of the consumption charge if the usage
    exceeds a defined limit per hour.
    '''

    other = 'other'
    '''
    Other kind of charge.
    '''

    taxCharge = 'taxCharge'
    '''
    Any charge that is classified as a tax of a kind. For example: VAT, GST,
    TV tax, etc.
    '''

class ClearanceActionKind(Enum):
    '''
    Type of clearance action.
    '''

    issue = 'issue'
    '''
    Issue clearance.
    '''

    release = 'release'
    '''
    Release clearance.
    '''

    update = 'update'
    '''
    Update clearance.
    '''

class CloudKind(Enum):
    '''
    Kind of cloud.
    '''

    altoCumulus = 'altoCumulus'
    '''
    '''

    altoStratus = 'altoStratus'
    '''
    '''

    cirroCumulus = 'cirroCumulus'
    '''
    '''

    cirroStratus = 'cirroStratus'
    '''
    '''

    cirrus = 'cirrus'
    '''
    '''

    cumuloNimbus = 'cumuloNimbus'
    '''
    '''

    cumulus = 'cumulus'
    '''
    '''

    nimboStratus = 'nimboStratus'
    '''
    '''

    other = 'other'
    '''
    '''

    stratoCumulus = 'stratoCumulus'
    '''
    '''

    stratus = 'stratus'
    '''
    '''

    toweringCumulus = 'toweringCumulus'
    '''
    '''

class ComDirectionKind(Enum):
    '''
    Kind of communication direction.
    '''

    biDirectional = 'biDirectional'
    '''
    Communication with the device is bi-directional.
    '''

    fromDevice = 'fromDevice'
    '''
    Communication is from device.
    '''

    toDevice = 'toDevice'
    '''
    Communication is to device.
    '''

class ComTechnologyKind(Enum):
    '''
    Kind of communication technology.
    '''

    cellular = 'cellular'
    '''
    Communicates using a public cellular radio network. A specific variant
    of 'rf'.
    '''

    ethernet = 'ethernet'
    '''
    Communicates using one or more of a family of frame-based computer networking
    technologies conforming to the IEEE 802.3 standard.
    '''

    homePlug = 'homePlug'
    '''
    Communicates using power line communication technologies conforming to
    the standards established by the HomePlug Powerline Alliance. A specific
    variant of 'plc'.
    '''

    pager = 'pager'
    '''
    Communicates using a public one-way or two-way radio-based paging network.
    A specific variant of 'rf'.
    '''

    phone = 'phone'
    '''
    Communicates using a basic, wireline telephone system.
    '''

    plc = 'plc'
    '''
    Communicates using power line communication technologies.
    '''

    rf = 'rf'
    '''
    Communicates using private or public radio-based technology.
    '''

    rfMesh = 'rfMesh'
    '''
    Communicates using a mesh radio technology. A specific variant of 'rf'.
    '''

    zigbee = 'zigbee'
    '''
    Communicates using radio communication technologies conforming to the standards
    established by the ZigBee. A specific variant of 'rf'.
    '''

class CommodityKind(Enum):
    '''
    Kind of commodity being measured.
    '''

    air = 'air'
    '''
    Atmospheric air
    '''

    carbon = 'carbon'
    '''
    The element has an atomic number of 6.
    '''

    ch4 = 'ch4'
    '''
    Methane CH4
    '''

    co2 = 'co2'
    '''
    Carbon Dioxide CO2
    '''

    communication = 'communication'
    '''
    A measurement of the communication infrastructure itself.
    '''

    coolingFluid = 'coolingFluid'
    '''
    The cool fluid returns warmer than when it was sent. The heat conveyed
    may be metered.
    '''

    electricityPrimaryMetered = 'electricityPrimaryMetered'
    '''
    It is possible for a meter to be outfitted with an external VT and/or CT.
    The meter might not be aware of these devices, and the display not compensate
    for their presence. Ultimately, when these scalars are applied, the value
    that represents the service value is called the “primary metered” value.
    The “index” in sub-category 3 mirrors those of sub-category 0.
    '''

    electricitySecondaryMetered = 'electricitySecondaryMetered'
    '''
    All types of metered quantities. This type of reading comes from the meter
    and represents a “secondary” metered value.
    '''

    hch = 'hch'
    '''
    Hexachlorocyclohexane HCH
    '''

    heatingFluid = 'heatingFluid'
    '''
    This fluid is likely in liquid form. It is not necessarily water or water
    based. The warm fluid returns cooler than when it was sent. The heat conveyed
    may be metered.
    '''

    insulativeGas = 'insulativeGas'
    '''
    (SF6 is found separately below.)
    '''

    insulativeOil = 'insulativeOil'
    '''
    Oil that is used in transformers to provide insulation and heat conduction.
    '''

    internet = 'internet'
    '''
    Internet service
    '''

    naturalGas = 'naturalGas'
    '''
    A naturally occurring hydrocarbon gas mixture.
    '''

    none = 'none'
    '''
    Not Applicable
    '''

    nonpotableWater = 'nonpotableWater'
    '''
    Reclaimed water – possibly used for irrigation but not sufficiently treated
    to be considered safe for drinking.
    '''

    nox = 'nox'
    '''
    Nitrous Oxides NOX
    '''

    pfc = 'pfc'
    '''
    Perfluorocarbons PFC
    '''

    potableWater = 'potableWater'
    '''
    Drinkable water
    '''

    propane = 'propane'
    '''
    The formula is C3H8
    '''

    refuse = 'refuse'
    '''
    trash
    '''

    sf6 = 'sf6'
    '''
    Sulfurhexafluoride SF6
    '''

    so2 = 'so2'
    '''
    Sulfur Dioxide SO2
    '''

    steam = 'steam'
    '''
    Water in steam form, usually used for heating.
    '''

    tvLicence = 'tvLicence'
    '''
    Television
    '''

    wasteWater = 'wasteWater'
    '''
    (Sewerage)
    '''

class ConditionFactorKind(Enum):
    '''
    Kind of condition factor.
    '''

    accountAllocation = 'accountAllocation'
    '''
    '''

    labor = 'labor'
    '''
    '''

    material = 'material'
    '''
    '''

    other = 'other'
    '''
    '''

    travel = 'travel'
    '''
    '''

class ContingencyEquipmentStatusKind(Enum):
    '''
    Indicates the state which the contingency equipment is to be in when the
    contingency is applied.
    '''

    inService = 'inService'
    '''
    The equipment is to be put into service.
    '''

    outOfService = 'outOfService'
    '''
    The equipment is to be taken out of service.
    '''

class ControlAreaTypeKind(Enum):
    '''
    The type of control area.
    '''

    AGC = 'AGC'
    '''
    Used for automatic generation control.
    '''

    Forecast = 'Forecast'
    '''
    Used for load forecast.
    '''

    Interchange = 'Interchange'
    '''
    Used for interchange specification or control.
    '''

class CoolantType(Enum):
    '''
    Method of cooling a machine.
    '''

    air = 'air'
    '''
    Air.
    '''

    hydrogenGas = 'hydrogenGas'
    '''
    Hydrogen gas.
    '''

    water = 'water'
    '''
    Water.
    '''

class CoolingKind(Enum):
    '''
    Kind of cooling.
    '''

    forcedAir = 'forcedAir'
    '''
    '''

    forcedOilAndAir = 'forcedOilAndAir'
    '''
    '''

    other = 'other'
    '''
    '''

    selfCooling = 'selfCooling'
    '''
    '''

class CorporateStandardKind(Enum):
    '''
    Kind of corporate standard.
    '''

    experimental = 'experimental'
    '''
    Asset model is used experimentally.
    '''

    other = 'other'
    '''
    Other kind of corporate standard for the asset model.
    '''

    standard = 'standard'
    '''
    Asset model is used as corporate standard.
    '''

    underEvaluation = 'underEvaluation'
    '''
    Asset model usage is under evaluation.
    '''

class CoverageCodeKind(Enum):
    '''
    Kinds of weather condition coverage.
    '''

    brief = 'brief'
    '''
    '''

    frequent = 'frequent'
    '''
    '''

    intermittant = 'intermittant'
    '''
    '''

    isolated = 'isolated'
    '''
    '''

    numerous = 'numerous'
    '''
    '''

    occasional = 'occasional'
    '''
    '''

    partly = 'partly'
    '''
    '''

    patchy = 'patchy'
    '''
    '''

    periodsOf = 'periodsOf'
    '''
    '''

    scattered = 'scattered'
    '''
    '''

    widespread = 'widespread'
    '''
    '''

class CrewStatusKind(Enum):
    '''
    Defines the current status of the Crew - assigned, arrived, etc.
    '''

    arrived = 'arrived'
    '''
    the crew is on site at the outage location
    '''

    assigned = 'assigned'
    '''
    the crew has been assigned to work on a task
    '''

    awaitingCrewAssignment = 'awaitingCrewAssignment'
    '''
    Indicates that the work is awaiting one or more crews to be assigned
    '''

    enroute = 'enroute'
    '''
    the crew has been dispatched to work on an outage
    '''

    fieldComplete = 'fieldComplete'
    '''
    the crew has corrected the outage in the field. The equipment or other
    devices may not be energized at this time.
    '''

class CsOperatingModeKind(Enum):
    '''
    Operating mode for HVDC line operating as Current Source Converter.
    '''

    inverter = 'inverter'
    '''
    Operating as inverter, which is the power receiving end.
    '''

    rectifier = 'rectifier'
    '''
    Operating as rectifier, which is the power sending end.
    '''

class CsPpccControlKind(Enum):
    '''
    Active power control modes for HVDC line operating as Current Source Converter.
    '''

    activePower = 'activePower'
    '''
    Control is active power control at AC side, at point of common coupling.
    Target is provided by ACDCConverter.targetPpcc.
    '''

    dcCurrent = 'dcCurrent'
    '''
    Control is DC current with target value provided by CsConverter.targetIdc.
    '''

    dcVoltage = 'dcVoltage'
    '''
    Control is DC voltage with target value provided by ACDCConverter.targetUdc.
    '''

class Currency(Enum):
    '''
    Monetary currencies. ISO 4217 standard including 3-character currency code.
    '''

    AED = 'AED'
    '''
    United Arab Emirates dirham.
    '''

    AFN = 'AFN'
    '''
    Afghan afghani.
    '''

    ALL = 'ALL'
    '''
    Albanian lek.
    '''

    AMD = 'AMD'
    '''
    Armenian dram.
    '''

    ANG = 'ANG'
    '''
    Netherlands Antillean guilder.
    '''

    AOA = 'AOA'
    '''
    Angolan kwanza.
    '''

    ARS = 'ARS'
    '''
    Argentine peso.
    '''

    AUD = 'AUD'
    '''
    Australian dollar.
    '''

    AWG = 'AWG'
    '''
    Aruban florin.
    '''

    AZN = 'AZN'
    '''
    Azerbaijani manat.
    '''

    BAM = 'BAM'
    '''
    Bosnia and Herzegovina convertible mark.
    '''

    BBD = 'BBD'
    '''
    Barbados dollar.
    '''

    BDT = 'BDT'
    '''
    Bangladeshi taka.
    '''

    BGN = 'BGN'
    '''
    Bulgarian lev.
    '''

    BHD = 'BHD'
    '''
    Bahraini dinar.
    '''

    BIF = 'BIF'
    '''
    Burundian franc.
    '''

    BMD = 'BMD'
    '''
    Bermudian dollar (customarily known as Bermuda dollar).
    '''

    BND = 'BND'
    '''
    Brunei dollar.
    '''

    BOB = 'BOB'
    '''
    Boliviano.
    '''

    BOV = 'BOV'
    '''
    Bolivian Mvdol (funds code).
    '''

    BRL = 'BRL'
    '''
    Brazilian real.
    '''

    BSD = 'BSD'
    '''
    Bahamian dollar.
    '''

    BTN = 'BTN'
    '''
    Bhutanese ngultrum.
    '''

    BWP = 'BWP'
    '''
    Botswana pula.
    '''

    BYR = 'BYR'
    '''
    Belarusian ruble.
    '''

    BZD = 'BZD'
    '''
    Belize dollar.
    '''

    CAD = 'CAD'
    '''
    Canadian dollar.
    '''

    CDF = 'CDF'
    '''
    Congolese franc.
    '''

    CHF = 'CHF'
    '''
    Swiss franc.
    '''

    CLF = 'CLF'
    '''
    Unidad de Fomento (funds code), Chile.
    '''

    CLP = 'CLP'
    '''
    Chilean peso.
    '''

    CNY = 'CNY'
    '''
    Chinese yuan.
    '''

    COP = 'COP'
    '''
    Colombian peso.
    '''

    COU = 'COU'
    '''
    Unidad de Valor Real.
    '''

    CRC = 'CRC'
    '''
    Costa Rican colon.
    '''

    CUC = 'CUC'
    '''
    Cuban convertible peso.
    '''

    CUP = 'CUP'
    '''
    Cuban peso.
    '''

    CVE = 'CVE'
    '''
    Cape Verde escudo.
    '''

    CZK = 'CZK'
    '''
    Czech koruna.
    '''

    DJF = 'DJF'
    '''
    Djiboutian franc.
    '''

    DKK = 'DKK'
    '''
    Danish krone.
    '''

    DOP = 'DOP'
    '''
    Dominican peso.
    '''

    DZD = 'DZD'
    '''
    Algerian dinar.
    '''

    EEK = 'EEK'
    '''
    Estonian kroon.
    '''

    EGP = 'EGP'
    '''
    Egyptian pound.
    '''

    ERN = 'ERN'
    '''
    Eritrean nakfa.
    '''

    ETB = 'ETB'
    '''
    Ethiopian birr.
    '''

    EUR = 'EUR'
    '''
    Euro.
    '''

    FJD = 'FJD'
    '''
    Fiji dollar.
    '''

    FKP = 'FKP'
    '''
    Falkland Islands pound.
    '''

    GBP = 'GBP'
    '''
    Pound sterling.
    '''

    GEL = 'GEL'
    '''
    Georgian lari.
    '''

    GHS = 'GHS'
    '''
    Ghanaian cedi.
    '''

    GIP = 'GIP'
    '''
    Gibraltar pound.
    '''

    GMD = 'GMD'
    '''
    Gambian dalasi.
    '''

    GNF = 'GNF'
    '''
    Guinean franc.
    '''

    GTQ = 'GTQ'
    '''
    Guatemalan quetzal.
    '''

    GYD = 'GYD'
    '''
    Guyanese dollar.
    '''

    HKD = 'HKD'
    '''
    Hong Kong dollar.
    '''

    HNL = 'HNL'
    '''
    Honduran lempira.
    '''

    HRK = 'HRK'
    '''
    Croatian kuna.
    '''

    HTG = 'HTG'
    '''
    Haitian gourde.
    '''

    HUF = 'HUF'
    '''
    Hungarian forint.
    '''

    IDR = 'IDR'
    '''
    Indonesian rupiah.
    '''

    ILS = 'ILS'
    '''
    Israeli new sheqel.
    '''

    INR = 'INR'
    '''
    Indian rupee.
    '''

    IQD = 'IQD'
    '''
    Iraqi dinar.
    '''

    IRR = 'IRR'
    '''
    Iranian rial.
    '''

    ISK = 'ISK'
    '''
    Icelandic króna.
    '''

    JMD = 'JMD'
    '''
    Jamaican dollar.
    '''

    JOD = 'JOD'
    '''
    Jordanian dinar.
    '''

    JPY = 'JPY'
    '''
    Japanese yen.
    '''

    KES = 'KES'
    '''
    Kenyan shilling.
    '''

    KGS = 'KGS'
    '''
    Kyrgyzstani som.
    '''

    KHR = 'KHR'
    '''
    Cambodian riel.
    '''

    KMF = 'KMF'
    '''
    Comoro franc.
    '''

    KPW = 'KPW'
    '''
    North Korean won.
    '''

    KRW = 'KRW'
    '''
    South Korean won.
    '''

    KWD = 'KWD'
    '''
    Kuwaiti dinar.
    '''

    KYD = 'KYD'
    '''
    Cayman Islands dollar.
    '''

    KZT = 'KZT'
    '''
    Kazakhstani tenge.
    '''

    LAK = 'LAK'
    '''
    Lao kip.
    '''

    LBP = 'LBP'
    '''
    Lebanese pound.
    '''

    LKR = 'LKR'
    '''
    Sri Lanka rupee.
    '''

    LRD = 'LRD'
    '''
    Liberian dollar.
    '''

    LSL = 'LSL'
    '''
    Lesotho loti.
    '''

    LTL = 'LTL'
    '''
    Lithuanian litas.
    '''

    LVL = 'LVL'
    '''
    Latvian lats.
    '''

    LYD = 'LYD'
    '''
    Libyan dinar.
    '''

    MAD = 'MAD'
    '''
    Moroccan dirham.
    '''

    MDL = 'MDL'
    '''
    Moldovan leu.
    '''

    MGA = 'MGA'
    '''
    Malagasy ariary.
    '''

    MKD = 'MKD'
    '''
    Macedonian denar.
    '''

    MMK = 'MMK'
    '''
    Myanma kyat.
    '''

    MNT = 'MNT'
    '''
    Mongolian tugrik.
    '''

    MOP = 'MOP'
    '''
    Macanese pataca.
    '''

    MRO = 'MRO'
    '''
    Mauritanian ouguiya.
    '''

    MUR = 'MUR'
    '''
    Mauritian rupee.
    '''

    MVR = 'MVR'
    '''
    Maldivian rufiyaa.
    '''

    MWK = 'MWK'
    '''
    Malawian kwacha.
    '''

    MXN = 'MXN'
    '''
    Mexican peso.
    '''

    MYR = 'MYR'
    '''
    Malaysian ringgit.
    '''

    MZN = 'MZN'
    '''
    Mozambican metical.
    '''

    NAD = 'NAD'
    '''
    Namibian dollar.
    '''

    NGN = 'NGN'
    '''
    Nigerian naira.
    '''

    NIO = 'NIO'
    '''
    Cordoba oro.
    '''

    NOK = 'NOK'
    '''
    Norwegian krone.
    '''

    NPR = 'NPR'
    '''
    Nepalese rupee.
    '''

    NZD = 'NZD'
    '''
    New Zealand dollar.
    '''

    OMR = 'OMR'
    '''
    Omani rial.
    '''

    PAB = 'PAB'
    '''
    Panamanian balboa.
    '''

    PEN = 'PEN'
    '''
    Peruvian nuevo sol.
    '''

    PGK = 'PGK'
    '''
    Papua New Guinean kina.
    '''

    PHP = 'PHP'
    '''
    Philippine peso.
    '''

    PKR = 'PKR'
    '''
    Pakistani rupee.
    '''

    PLN = 'PLN'
    '''
    Polish zloty.
    '''

    PYG = 'PYG'
    '''
    Paraguayan guaraní.
    '''

    QAR = 'QAR'
    '''
    Qatari rial.
    '''

    RON = 'RON'
    '''
    Romanian new leu.
    '''

    RSD = 'RSD'
    '''
    Serbian dinar.
    '''

    RUB = 'RUB'
    '''
    Russian rouble.
    '''

    RWF = 'RWF'
    '''
    Rwandan franc.
    '''

    SAR = 'SAR'
    '''
    Saudi riyal.
    '''

    SBD = 'SBD'
    '''
    Solomon Islands dollar.
    '''

    SCR = 'SCR'
    '''
    Seychelles rupee.
    '''

    SDG = 'SDG'
    '''
    Sudanese pound.
    '''

    SEK = 'SEK'
    '''
    Swedish krona/kronor.
    '''

    SGD = 'SGD'
    '''
    Singapore dollar.
    '''

    SHP = 'SHP'
    '''
    Saint Helena pound.
    '''

    SLL = 'SLL'
    '''
    Sierra Leonean leone.
    '''

    SOS = 'SOS'
    '''
    Somali shilling.
    '''

    SRD = 'SRD'
    '''
    Surinamese dollar.
    '''

    STD = 'STD'
    '''
    São Tomé and Príncipe dobra.
    '''

    SYP = 'SYP'
    '''
    Syrian pound.
    '''

    SZL = 'SZL'
    '''
    Lilangeni.
    '''

    THB = 'THB'
    '''
    Thai baht.
    '''

    TJS = 'TJS'
    '''
    Tajikistani somoni.
    '''

    TMT = 'TMT'
    '''
    Turkmenistani manat.
    '''

    TND = 'TND'
    '''
    Tunisian dinar.
    '''

    TOP = 'TOP'
    '''
    Tongan pa'anga.
    '''

    TRY = 'TRY'
    '''
    Turkish lira.
    '''

    TTD = 'TTD'
    '''
    Trinidad and Tobago dollar.
    '''

    TWD = 'TWD'
    '''
    New Taiwan dollar.
    '''

    TZS = 'TZS'
    '''
    Tanzanian shilling.
    '''

    UAH = 'UAH'
    '''
    Ukrainian hryvnia.
    '''

    UGX = 'UGX'
    '''
    Ugandan shilling.
    '''

    USD = 'USD'
    '''
    United States dollar.
    '''

    UYU = 'UYU'
    '''
    Uruguayan peso.
    '''

    UZS = 'UZS'
    '''
    Uzbekistan som.
    '''

    VEF = 'VEF'
    '''
    Venezuelan bolívar fuerte.
    '''

    VND = 'VND'
    '''
    Vietnamese Dong.
    '''

    VUV = 'VUV'
    '''
    Vanuatu vatu.
    '''

    WST = 'WST'
    '''
    Samoan tala.
    '''

    XAF = 'XAF'
    '''
    CFA franc BEAC.
    '''

    XCD = 'XCD'
    '''
    East Caribbean dollar.
    '''

    XOF = 'XOF'
    '''
    CFA Franc BCEAO.
    '''

    XPF = 'XPF'
    '''
    CFP franc.
    '''

    YER = 'YER'
    '''
    Yemeni rial.
    '''

    ZAR = 'ZAR'
    '''
    South African rand.
    '''

    ZMK = 'ZMK'
    '''
    Zambian kwacha.
    '''

    ZWL = 'ZWL'
    '''
    Zimbabwe dollar.
    '''

class CurveStyle(Enum):
    '''
    Style or shape of curve.
    '''

    constantYValue = 'constantYValue'
    '''
    The Y-axis values are assumed constant until the next curve point and prior
    to the first curve point.
    '''

    straightLineYValues = 'straightLineYValues'
    '''
    The Y-axis values are assumed to be a straight line between values. Also
    known as linear interpolation.
    '''

class CustomerBillingKind(Enum):
    '''
    Kind of customer billing.
    '''

    consolidatedEss = 'consolidatedEss'
    '''
    Consolidated bill from energy service supplier (ESS).
    '''

    consolidatedUdc = 'consolidatedUdc'
    '''
    Consolidated bill from utility distribution company (UDC).
    '''

    other = 'other'
    '''
    '''

    separateEssUdc = 'separateEssUdc'
    '''
    Separate bills from ESS and UDC.
    '''

class CustomerKind(Enum):
    '''
    Kind of customer.
    '''

    commercialIndustrial = 'commercialIndustrial'
    '''
    Commercial industrial customer.
    '''

    energyServiceScheduler = 'energyServiceScheduler'
    '''
    Customer as energy service scheduler.
    '''

    energyServiceSupplier = 'energyServiceSupplier'
    '''
    Customer as energy service supplier.
    '''

    enterprise = 'enterprise'
    '''
    Enterprise customer
    '''

    internalUse = 'internalUse'
    '''
    Internal use customer.
    '''

    other = 'other'
    '''
    Other kind of customer.
    '''

    pumpingLoad = 'pumpingLoad'
    '''
    Pumping load customer.
    '''

    regionalOperator = 'regionalOperator'
    '''
    Regional Operator customer
    '''

    residential = 'residential'
    '''
    Residential customer.
    '''

    residentialAndCommercial = 'residentialAndCommercial'
    '''
    Residential and commercial customer.
    '''

    residentialAndStreetlight = 'residentialAndStreetlight'
    '''
    Residential and streetlight customer.
    '''

    residentialFarmService = 'residentialFarmService'
    '''
    Residential farm service customer.
    '''

    residentialStreetlightOthers = 'residentialStreetlightOthers'
    '''
    Residential streetlight or other related customer.
    '''

    subsidiary = 'subsidiary'
    '''
    Subsidiary customer
    '''

    windMachine = 'windMachine'
    '''
    Wind machine customer.
    '''

class DCConverterOperatingModeKind(Enum):
    '''
    The operating mode of an HVDC bipole.
    '''

    bipolar = 'bipolar'
    '''
    Bipolar operation.
    '''

    monopolarGroundReturn = 'monopolarGroundReturn'
    '''
    Monopolar operation with ground return.
    '''

    monopolarMetallicReturn = 'monopolarMetallicReturn'
    '''
    Monopolar operation with metallic return.
    '''

class DCPolarityKind(Enum):
    '''
    Polarity for DC circuits.
    '''

    middle = 'middle'
    '''
    Middle pole. The converter terminal is the midpoint in a bipolar or symmetric
    monopole configuration. The midpoint can be grounded and/or have a metallic
    return.
    '''

    negative = 'negative'
    '''
    Negative pole. The converter terminal is intended to operate at a negative
    voltage relative the midpoint or positive terminal.
    '''

    positive = 'positive'
    '''
    Positive pole. The converter terminal is intended to operate at a positive
    voltage relative the midpoint or negative terminal.
    '''

class DERParameterKind(Enum):
    '''
    Specifies the DER parameters related to the unit of power, ramp rate and
    regulation flows.
    '''

    activePower = 'activePower'
    '''
    The amount of power being used, measured in Watts.
    '''

    apparentPower = 'apparentPower'
    '''
    The combination of reactive power and active power, and is the product
    of voltage and current without reference to the phase angle.
    '''

    decreasingRampRate = 'decreasingRampRate'
    '''
    An indication of whether the ramp rate associated with a curve is negative.
    '''

    highFilterBiDirectionalRegulation = 'highFilterBiDirectionalRegulation'
    '''
    AC voltage regulation of high frequency
    '''

    highFilterDownRegulation = 'highFilterDownRegulation'
    '''
    High Pass Frequency Regulation downwards.
    '''

    highFilterUpRegulation = 'highFilterUpRegulation'
    '''
    High Pass Frequency Regulation upwards.
    '''

    increasingRampRate = 'increasingRampRate'
    '''
    An indication of whether the ramp rate associated with a curve is positive.
    '''

    lowFilterBiDirectionalRegulation = 'lowFilterBiDirectionalRegulation'
    '''
    Used to filter out the sinosuidal disturbances to the grid.
    '''

    lowFilterDownRegulation = 'lowFilterDownRegulation'
    '''
    Low Pass Frequency Regulation downwards.
    '''

    lowFilterUpRegulation = 'lowFilterUpRegulation'
    '''
    Low Pass Frequency Regulation upwards.
    '''

    reactivePower = 'reactivePower'
    '''
    The measure of reactance, measured in Vars.
    '''

    voltage = 'voltage'
    '''
    The measure of difference in potential between two points, measured in
    Volts.
    '''

class DERUnitSymbol(Enum):
    '''
    The units defined for usage in DER related contexts. This class is a subset
    plus possible additions of the UnitSymbol Class in the CIM Domain Package.
    '''

    A = 'A'
    '''
    Current in Ampere.
    '''

    Ah = 'Ah'
    '''
    Ampere-hours, Ampere-hours.
    '''

    As = 'As'
    '''
    Ampere seconds (A·s).
    '''

    Btu = 'Btu'
    '''
    Energy, British Thermal Unit.
    '''

    Hz = 'Hz'
    '''
    Frequency in Hertz (1/s).
    '''

    Q = 'Q'
    '''
    Quantity power, Q.
    '''

    Qh = 'Qh'
    '''
    Quantity energy, Qh.
    '''

    V = 'V'
    '''
    Electric potential in Volt (W/A).
    '''

    VA = 'VA'
    '''
    Apparent power in Volt Ampere (See also real power and reactive power.)
    '''

    VAh = 'VAh'
    '''
    Apparent energy in Volt Ampere hours.
    '''

    VAr = 'VAr'
    '''
    Reactive power in Volt Ampere reactive. The “reactive” or “imaginary” component
    of electrical power (VIsin(phi)). (See also real power and apparent power).
    Note: Different meter designs use different methods to arrive at their
    results. Some meters may compute reactive power as an arithmetic value,
    while others compute the value vectorially. The data consumer should determine
    the method in use and the suitability of the measurement for the intended
    purpose.
    '''

    VArh = 'VArh'
    '''
    Reactive energy in Volt Ampere reactive hours.
    '''

    VPerVA = 'VPerVA'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between IEC
    meters and EEI (ANSI) meters. It is assumed that the data consumers understand
    the type of meter being used and agree on the sign convention in use at
    any given utility.
    '''

    VPerVAr = 'VPerVAr'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between IEC
    meters and EEI (ANSI) meters. It is assumed that the data consumers understand
    the type of meter being used and agree on the sign convention in use at
    any given utility.
    '''

    Vh = 'Vh'
    '''
    Volt-hour, Volt hours.
    '''

    Vs = 'Vs'
    '''
    Volt second (Ws/A).
    '''

    W = 'W'
    '''
    Real power in Watt (J/s). Electrical power may have real and reactive components.
    The real portion of electrical power (I²R or VIcos(phi)), is expressed
    in Watts. (See also apparent power and reactive power.)
    '''

    WPerA = 'WPerA'
    '''
    Active power per current flow, watt per Ampere.
    '''

    WPers = 'WPers'
    '''
    Ramp rate in Watt per second.
    '''

    Wh = 'Wh'
    '''
    Real energy in Watt hours.
    '''

    deg = 'deg'
    '''
    Plane angle in degrees.
    '''

    degC = 'degC'
    '''
    Relative temperature in degrees Celsius.
    In the SI unit system the symbol is ºC. Electric charge is measured in
    coulomb that has the unit symbol C. To distinguish degree Celsius form
    coulomb the symbol used in the UML is degC. Reason for not using ºC is
    the special character º is difficult to manage in software.
    '''

    h = 'h'
    '''
    Time, hour = 60 min = 3600 s.
    '''

    min = 'min'
    '''
    Time, minute = 60 s.
    '''

    ohm = 'ohm'
    '''
    Electric resistance in ohm (V/A).
    '''

    ohmPerm = 'ohmPerm'
    '''
    Electric resistance per length in ohm per metre ((V/A)/m).
    '''

    ohmm = 'ohmm'
    '''
    resistivity, Ohm metre, (rho).
    '''

    onePerHz = 'onePerHz'
    '''
    Reciprocal of frequency (1/Hz).
    '''

    s = 's'
    '''
    Time in seconds.
    '''

    therm = 'therm'
    '''
    Energy, Therm.
    '''

class DemographicKind(Enum):
    '''
    Demographic kind of a land property.
    '''

    other = 'other'
    '''
    '''

    rural = 'rural'
    '''
    '''

    urban = 'urban'
    '''
    '''

class DependencyKind(Enum):
    '''
    '''

    mutuallyExclusive = 'mutuallyExclusive'
    '''
    '''

    required = 'required'
    '''
    '''

class DeploymentStateKind(Enum):
    '''
    Possible states of asset deployment.
    '''

    inService = 'inService'
    '''
    Asset in service in deployment location.
    '''

    installed = 'installed'
    '''
    Asset installed in deployment location.
    '''

    notYetInstalled = 'notYetInstalled'
    '''
    Asset not yet installed in deployment location.
    '''

    outOfService = 'outOfService'
    '''
    Asset out of service, but in deployment location.
    '''

    removed = 'removed'
    '''
    Asset removed from deployment location.
    '''

class DesignKind(Enum):
    '''
    Kind of design.
    '''

    asBuilt = 'asBuilt'
    '''
    '''

    estimated = 'estimated'
    '''
    '''

    other = 'other'
    '''
    '''

class ERTConfidenceKind(Enum):
    '''
    The estimated restoration time (ERT) is the amount of time estimated to
    correct the outage and can have a confidence factor applied such as high
    or low confidence that the ERT will be accomplished. This confidence factor
    may be updated as needed during the outage period - just as the actual
    ERT can be updated.
    '''

    high = 'high'
    '''
    there is a high confidence that the ERT will be accomplished
    '''

    low = 'low'
    '''
    there is a low confidence that the ERT will be accomplished.
    '''

class EmissionType(Enum):
    '''
    The type of emission.
    '''

    carbonDioxide = 'carbonDioxide'
    '''
    Carbon dioxide.
    '''

    carbonDisulfide = 'carbonDisulfide'
    '''
    Carbon disulfide.
    '''

    chlorine = 'chlorine'
    '''
    Chlorine.
    '''

    hydrogenSulfide = 'hydrogenSulfide'
    '''
    Hydrogen sulfide.
    '''

    nitrogenOxide = 'nitrogenOxide'
    '''
    Nitrogen oxide.
    '''

    sulfurDioxide = 'sulfurDioxide'
    '''
    Sulfur dioxide.
    '''

class EmissionValueSource(Enum):
    '''
    The source of the emission value.
    '''

    calculated = 'calculated'
    '''
    Calculated.
    '''

    measured = 'measured'
    '''
    Measured.
    '''

class EndDeviceFunctionKind(Enum):
    '''
    Kind of end device function.
    '''

    autonomousDst = 'autonomousDst'
    '''
    Autonomous application of daylight saving time (DST).
    '''

    demandResponse = 'demandResponse'
    '''
    Demand response functions.
    '''

    electricMetering = 'electricMetering'
    '''
    Electricity metering.
    '''

    gasMetering = 'gasMetering'
    '''
    Gas metering.
    '''

    metrology = 'metrology'
    '''
    Presentation of metered values to a user or another system (always a function
    of a meter, but might not be supported by a load control unit).
    '''

    onRequestRead = 'onRequestRead'
    '''
    On-request reads.
    '''

    outageHistory = 'outageHistory'
    '''
    Reporting historical power interruption data.
    '''

    relaysProgramming = 'relaysProgramming'
    '''
    Support for one or more relays that may be programmable in the meter (and
    tied to TOU, time pulse, load control or other functions).
    '''

    reverseFlow = 'reverseFlow'
    '''
    Detection and monitoring of reverse flow.
    '''

    waterMetering = 'waterMetering'
    '''
    Water metering.
    '''

class EnergyTransactionType(Enum):
    '''
    Defines the state of a transaction.
    '''

    approve = 'approve'
    '''
    Approve
    '''

    deny = 'deny'
    '''
    Deny
    '''

    study = 'study'
    '''
    Study
    '''

class EnvironmentalDiscreteKind(Enum):
    '''
    Discrete (integer) measuring an environmental condition.
    '''

    cloudCover = 'cloudCover'
    '''
    Cloud cover in octa.
    '''

class ErpAccountKind(Enum):
    '''
    Kind of ERP account.
    '''

    estimate = 'estimate'
    '''
    '''

    normal = 'normal'
    '''
    '''

    reversal = 'reversal'
    '''
    '''

    statistical = 'statistical'
    '''
    '''

class ErpInvoiceKind(Enum):
    '''
    Kind of ERP invoice.
    '''

    purchase = 'purchase'
    '''
    '''

    sale = 'sale'
    '''
    '''

class ErpInvoiceLineItemKind(Enum):
    '''
    Kind of invoice line item.
    '''

    initial = 'initial'
    '''
    '''

    other = 'other'
    '''
    '''

    recalculation = 'recalculation'
    '''
    '''

class ExecutionType(Enum):
    '''
    Execution types of Market Runs.
    '''

    DA = 'DA'
    '''
    Day Ahead
    '''

    HASP = 'HASP'
    '''
    Real TIme Hour Ahead Execution
    '''

    RTD = 'RTD'
    '''
    Real Time Dispatch
    '''

    RTPD = 'RTPD'
    '''
    Real Time Pre-dispatch
    '''

class FACTSDeviceKind(Enum):
    '''
    Kind of FACTS device.
    '''

    statcom = 'statcom'
    '''
    Static synchronous compensator.
    '''

    svc = 'svc'
    '''
    Static VAr compensator.
    '''

    tcpar = 'tcpar'
    '''
    Thyristor-controlled phase-angle regulator.
    '''

    tcsc = 'tcsc'
    '''
    Thyristor-controlled series capacitor.
    '''

    tcvl = 'tcvl'
    '''
    Thyristor-controlled voltage limiter.
    '''

    tsbr = 'tsbr'
    '''
    Thyristor-switched braking resistor.
    '''

    tssc = 'tssc'
    '''
    Thyristor-switched series capacitor.
    '''

    upfc = 'upfc'
    '''
    Unified power flow controller.
    '''

class FScale(Enum):
    '''
    Fujita scale (referred to as EF-scale starting in 2007) for tornado damage.
    A set of wind estimates (not measurements) based on damage. It uses three-second
    gusts estimated at the point of damage based on a judgment of 8 levels
    of damage to 28 indicators. These estimates vary with height and exposure.
    The 3 second gust is not the same wind as in standard surface observations.
    Enumerations based on NOAA conventions.
    '''

    five = 'five'
    '''
    Over 200 mph 3-second gust.
    '''

    four = 'four'
    '''
    166-200 mph 3-second gust.
    '''

    minusNine = 'minusNine'
    '''
    Unknown.
    '''

    one = 'one'
    '''
    86-110 mph 3-second gust.
    '''

    three = 'three'
    '''
    136-165 mph 3-second gust.
    '''

    two = 'two'
    '''
    111-135 mph 3-second gust.
    '''

    zero = 'zero'
    '''
    65-85 mph 3-second gust.
    '''

class FacilityKind(Enum):
    '''
    Types of facilities at which an asset can be deployed.
    '''

    distributionPoleTop = 'distributionPoleTop'
    '''
    Distribution pole top.
    '''

    substationDistribution = 'substationDistribution'
    '''
    Distribution substation.
    '''

    substationFossilPlant = 'substationFossilPlant'
    '''
    Fossil plant substation.
    '''

    substationHydroPlant = 'substationHydroPlant'
    '''
    Hydro plant substation.
    '''

    substationNuclearPlant = 'substationNuclearPlant'
    '''
    Nuclear plant substation.
    '''

    substationSubTransmission = 'substationSubTransmission'
    '''
    Subtransmission substation.
    '''

    substationTransmission = 'substationTransmission'
    '''
    Transmission substation.
    '''

class FailureIsolationMethodKind(Enum):
    '''
    How the failure has been isolated.
    '''

    breakerOperation = 'breakerOperation'
    '''
    Isolated via breaker operation.
    '''

    burnedInTheClear = 'burnedInTheClear'
    '''
    Isolated by equipment burning in the clear.
    '''

    fuse = 'fuse'
    '''
    Isolated by fuse.
    '''

    manuallyIsolated = 'manuallyIsolated'
    '''
    Isolated by manual operation.
    '''

    other = 'other'
    '''
    Isolated by other action.
    '''

class FlowDirectionKind(Enum):
    '''
    Kind of flow direction for reading/measured values proper to some commodities
    such as, for example, energy, power, demand.
    '''

    forward = 'forward'
    '''
    "Delivered," or "Imported" as defined 61968-2.
    Forward Active Energy is a positive kWh value as one would naturally expect
    to find as energy is supplied by the utility and consumed at the service.
    Forward Reactive Energy is a positive VArh value as one would naturally
    expect to find in the presence of inductive loading.
    In polyphase metering, the forward energy register is incremented when
    the sum of the phase energies is greater than zero:
    <img src="HTS_1.PNG" width="209" height="16" border="0" alt="graphic"/>
    '''

    lagging = 'lagging'
    '''
    Typically used to describe that a power factor is lagging the reference
    value.
    Note 1: When used to describe VA, “lagging” describes a form of measurement
    where reactive power is considered in all four quadrants, but real power
    is considered only in quadrants I and IV.
    Note 2: When used to describe power factor, the term “Lagging” implies
    that the PF is negative. The term “lagging” in this case takes the place
    of the negative sign. If a signed PF value is to be passed by the data
    producer, then the direction of flow enumeration zero (none) should be
    used in order to avoid the possibility of creating an expression that employs
    a double negative. The data consumer should be able to tell from the sign
    of the data if the PF is leading or lagging. This principle is analogous
    to the concept that “Reverse” energy is an implied negative value, and
    to publish a negative reverse value would be ambiguous.
    Note 3: Lagging power factors typically indicate inductive loading.
    '''

    leading = 'leading'
    '''
    Typically used to describe that a power factor is leading the reference
    value.
    Note: Leading power factors typically indicate capacitive loading.
    '''

    net = 'net'
    '''
    |Forward| - |Reverse|, See 61968-2.
    Note: In some systems, the value passed as a “net” value could become negative.
    In other systems the value passed as a “net” value is always a positive
    number, and rolls-over and rolls-under as needed.
    '''

    none = 'none'
    '''
    Not Applicable (N/A)
    '''

    q1minusQ4 = 'q1minusQ4'
    '''
    Q1 minus Q4
    '''

    q1plusQ2 = 'q1plusQ2'
    '''
    Reactive positive quadrants. (The term “lagging” is preferred.)
    '''

    q1plusQ3 = 'q1plusQ3'
    '''
    Quadrants 1 and 3
    '''

    q1plusQ4 = 'q1plusQ4'
    '''
    Quadrants 1 and 4 usually represent forward active energy
    '''

    q2minusQ3 = 'q2minusQ3'
    '''
    Q2 minus Q3
    '''

    q2plusQ3 = 'q2plusQ3'
    '''
    Quadrants 2 and 3 usually represent reverse active energy
    '''

    q2plusQ4 = 'q2plusQ4'
    '''
    Quadrants 2 and 4
    '''

    q3minusQ2 = 'q3minusQ2'
    '''
    Q3 minus Q2
    '''

    q3plusQ4 = 'q3plusQ4'
    '''
    Reactive negative quadrants. (The term “leading” is preferred.)
    '''

    quadrant1 = 'quadrant1'
    '''
    Q1 only
    '''

    quadrant2 = 'quadrant2'
    '''
    Q2 only
    '''

    quadrant3 = 'quadrant3'
    '''
    Q3 only
    '''

    quadrant4 = 'quadrant4'
    '''
    Q4 only
    '''

    reverse = 'reverse'
    '''
    Reverse Active Energy is equivalent to "Received," or "Exported" as defined
    in 61968-2.
    Reverse Active Energy is a positive kWh value as one would expect to find
    when energy is backfed by the service onto the utility network.
    Reverse Reactive Energy is a positive VArh value as one would expect to
    find in the presence of capacitive loading and a leading Power Factor.
    In polyphase metering, the reverse energy register is incremented when
    the sum of the phase energies is less than zero:
    <img src="HTS_1.PNG" width="209" height="16" border="0" alt="graphic"/>
    Note: The value passed as a reverse value is always a positive value. It
    is understood by the label “reverse” that it represents negative flow.
    '''

    total = 'total'
    '''
    |Forward| + |Reverse|, See 61968-2.
    The sum of the commodity in all quadrants Q1+Q2+Q3+Q4.
    In polyphase metering, the total energy register is incremented when the
    absolute value of the sum of the phase energies is greater than zero:
    <img src="HTS_1.PNG" width="217" height="16" border="0" alt="graphic"/>
    '''

    totalByPhase = 'totalByPhase'
    '''
    In polyphase metering, the total by phase energy register is incremented
    when the sum of the absolute values of the phase energies is greater than
    zero:
    <img src="HTS_1.PNG" width="234" height="16" border="0" alt="graphic"/>
    In single phase metering, the formulas for “Total” and “Total by phase”
    collapse to the same expression. For communication purposes however, the
    “Total” enumeration should be used with single phase meter data.
    '''

class FuelType(Enum):
    '''
    Type of fuel.
    '''

    brownCoalLignite = 'brownCoalLignite'
    '''
    Brown coal lignite.
    '''

    coal = 'coal'
    '''
    Generic coal, not including lignite type.
    '''

    coalDerivedGas = 'coalDerivedGas'
    '''
    Coal derived gas.
    '''

    gas = 'gas'
    '''
    Natural gas.
    '''

    hardCoal = 'hardCoal'
    '''
    Hard coal.
    '''

    lignite = 'lignite'
    '''
    The fuel is lignite coal. Note that this is a special type of coal, so
    the other enum of coal is reserved for hard coal types or if the exact
    type of coal is not known.
    '''

    oil = 'oil'
    '''
    Oil.
    '''

    oilShale = 'oilShale'
    '''
    Oil Shale.
    '''

    other = 'other'
    '''
    Any fuel type not included in the rest of the enumerated value.
    '''

    peat = 'peat'
    '''
    Peat.
    '''

class GeneratorControlMode(Enum):
    '''
    Unit control modes.
    '''

    pulse = 'pulse'
    '''
    Pulse control mode.
    '''

    setpoint = 'setpoint'
    '''
    Setpoint control mode.
    '''

class GeneratorControlSource(Enum):
    '''
    The source of controls for a generating unit.
    '''

    offAGC = 'offAGC'
    '''
    Off of automatic generation control (AGC).
    '''

    onAGC = 'onAGC'
    '''
    On automatic generation control (AGC).
    '''

    plantControl = 'plantControl'
    '''
    Plant is controlling.
    '''

    unavailable = 'unavailable'
    '''
    Not available.
    '''

class GeosphericAnalogKind(Enum):
    '''
    Kinds of analogs (floats) measuring a geospheric condition.
    '''

    lightningDensity = 'lightningDensity'
    '''
    Flash rate in strikes/hour/km<sup>2</sup>.
    '''

    seismicEastWest = 'seismicEastWest'
    '''
    '''

    seismicNorthSouth = 'seismicNorthSouth'
    '''
    '''

    seismicVertical = 'seismicVertical'
    '''
    '''

    snowPackDepth = 'snowPackDepth'
    '''
    '''

    temperature = 'temperature'
    '''
    '''

class HydroEnergyConversionKind(Enum):
    '''
    Specifies the capability of the hydro generating unit to convert energy
    as a generator or pump.
    '''

    generator = 'generator'
    '''
    Able to generate power, but not able to pump water for energy storage.
    '''

    pumpAndGenerator = 'pumpAndGenerator'
    '''
    Able to both generate power and pump water for energy storage.
    '''

class HydroPlantStorageKind(Enum):
    '''
    The type of hydro power plant.
    '''

    pumpedStorage = 'pumpedStorage'
    '''
    Pumped storage.
    '''

    runOfRiver = 'runOfRiver'
    '''
    Run of river.
    '''

    storage = 'storage'
    '''
    Storage.
    '''

class HydroTurbineKind(Enum):
    '''
    Type of turbine.
    '''

    francis = 'francis'
    '''
    Francis.
    '''

    kaplan = 'kaplan'
    '''
    Kaplan.
    '''

    pelton = 'pelton'
    '''
    Pelton.
    '''

class HydrosphericAnalogKind(Enum):
    '''
    Kinds of analogs (floats) measuring a hydrospheric condition.
    '''

    floodLevel = 'floodLevel'
    '''
    '''

    stormSurgeHeight = 'stormSurgeHeight'
    '''
    '''

    surfaceTemperature = 'surfaceTemperature'
    '''
    '''

    waterTemperature = 'waterTemperature'
    '''
    '''

    waveHeight = 'waveHeight'
    '''
    '''

class ICCPAccessPrivilegeKind(Enum):
    '''
    Provides access privilege information regarding an ICCP point.
    '''

    readOnly = 'readOnly'
    '''
    Indicates that the remote is not allowed to change the value of the ICCPPoint.
    '''

    readWrite = 'readWrite'
    '''
    Indicates that the remote can not only get the value, but may also change
    the value of the ICCP Point.
    '''

class ICCPPointKind(Enum):
    '''
    The kind of ICCP point that is to be conveyed.
    '''

    discrete = 'discrete'
    '''
    Indicates that an ICCP discrete type is to be conveyed.
    '''

    packedProtectionEvent = 'packedProtectionEvent'
    '''
    Indicates that an ICCP packed Protection Event is to be conveyed.
    '''

    real = 'real'
    '''
    Indicates that an ICCP real type is to be conveyed.
    '''

    singleProtectionEvent = 'singleProtectionEvent'
    '''
    Indicates that an ICCP single Protection Event type is to be conveyed.
    '''

    state = 'state'
    '''
    Indicates that an ICCP state type is to be conveyed.
    '''

    stateSupplemental = 'stateSupplemental'
    '''
    Indicates that an ICCP state supplemental type is to be conveyed.
    '''

class ICCPQualityKind(Enum):
    '''
    Indicates the type of quality information that is to be exchanged. For
    protection events the value shall be "none".
    '''

    extended = 'extended'
    '''
    Indicates that only extended information is to be provided.
    '''

    extendedwithQualityTime = 'extendedwithQualityTime'
    '''
    Provides quality, timestamp, and extended information.
    '''

    none = 'none'
    '''
    Indicates that no quality is conveyed with the ICCP point.
    '''

    qualityAndTime = 'qualityAndTime'
    '''
    Indicates that quality and a timestamp are to be provided.
    '''

    qualityOnly = 'qualityOnly'
    '''
    Indicates that only quality is to be provided.
    '''

class ICCPScopeKind(Enum):
    '''
    Specifies the control centre scope.
    '''

    iCC = 'iCC'
    '''
    Inter-Control Centre scope – available for exchange between the control
    centres in the bilateral table.
    '''

    vCC = 'vCC'
    '''
    Virtual Control Centre Scope – globally available.
    '''

class IPAddressKind(Enum):
    '''
    Indicates if the addressing of the IPAccessPoint, gateway, and subnet are
    per IPv4 or IPv6.
    '''

    iPv4 = 'iPv4'
    '''
    Indicates that IPv4 dotted decimal notation is in use.
    '''

    iPv6 = 'iPv6'
    '''
    Indicates that an IPv6 dotted decimal is in use.
    '''

class InUseStateKind(Enum):
    '''
    Possible 'in use' states that an asset can be in.
    '''

    inUse = 'inUse'
    '''
    Asset is deployed (in use) or is being put into use.
    '''

    notReadyForUse = 'notReadyForUse'
    '''
    Asset is not ready to be put into use.
    '''

    readyForUse = 'readyForUse'
    '''
    Asset is ready to be put into use.
    '''

class IntensityCodeKind(Enum):
    '''
    Kinds of weather condition intensity.
    '''

    heavy = 'heavy'
    '''
    '''

    light = 'light'
    '''
    '''

    veryHeavy = 'veryHeavy'
    '''
    '''

    veryLight = 'veryLight'
    '''
    '''

class InterTieDirection(Enum):
    '''
    Direction of an intertie.
    '''

    E = 'E'
    '''
    Export.
    '''

    I = 'I'
    '''
    Import.
    '''

class InterruptingMediumKind(Enum):
    '''
    Kinds of interrupting mediums.
    '''

    airBlast = 'airBlast'
    '''
    Air blast.
    '''

    airMagnetic = 'airMagnetic'
    '''
    Air magnetic.
    '''

    bulkOil = 'bulkOil'
    '''
    Bulk oil.
    '''

    gasSinglePressure = 'gasSinglePressure'
    '''
    Gas single pressure.
    '''

    gasTwoPressure = 'gasTwoPressure'
    '''
    Gas two pressure.
    '''

    minimumOil = 'minimumOil'
    '''
    Minimum oil.
    '''

    vacuum = 'vacuum'
    '''
    Vacuum.
    '''

class JointConfigurationKind(Enum):
    '''
    Kind of configuration for joints.
    '''

    other = 'other'
    '''
    '''

    wires1to1 = 'wires1to1'
    '''
    '''

    wires2to1 = 'wires2to1'
    '''
    '''

    wires3to1 = 'wires3to1'
    '''
    '''

class JointFillKind(Enum):
    '''
    Kind of fill for Joint.
    '''

    airNoFilling = 'airNoFilling'
    '''
    '''

    asphaltic = 'asphaltic'
    '''
    '''

    bluefill254 = 'bluefill254'
    '''
    '''

    epoxy = 'epoxy'
    '''
    '''

    insoluseal = 'insoluseal'
    '''
    '''

    noFillPrefab = 'noFillPrefab'
    '''
    '''

    noVoid = 'noVoid'
    '''
    '''

    oil = 'oil'
    '''
    '''

    other = 'other'
    '''
    '''

    petrolatum = 'petrolatum'
    '''
    '''

class LandPropertyKind(Enum):
    '''
    Kind of (land) property.
    '''

    building = 'building'
    '''
    Site enclosed within a building.
    '''

    customerPremise = 'customerPremise'
    '''
    Site with a customer.
    '''

    depot = 'depot'
    '''
    Storehouse for supplies that also serves as a station for supporting crews.
    '''

    external = 'external'
    '''
    Property owned or used by an external party that is not a customer.
    '''

    gridSupplyPoint = 'gridSupplyPoint'
    '''
    Substation where the distribution and transmission networks meet and hence
    have mixed ownership and mixed operational control.
    '''

    store = 'store'
    '''
    Place of storage (e.g., a warehouse) to put aside, or accumulate, material
    and equipment for use when needed.
    '''

    substation = 'substation'
    '''
    Transmission network switchyard.
    '''

class LoadForecastType(Enum):
    '''
    Load forecast zone types.
    '''

    LFZ = 'LFZ'
    '''
    Load forecast zone.
    '''

    LZMS = 'LZMS'
    '''
    Metered sub system zone.
    '''

class LocationKind(Enum):
    '''
    The nature of the location being defined for an environmental entity. Possible
    values are center, perimeter, primary, secondary.
    '''

    center = 'center'
    '''
    The center of a phenomenon. Will typically be used with a Location with
    a single PositionPoint instance.
    '''

    extent = 'extent'
    '''
    The area or line of a phenomenon, not the center. Will typically be used
    with a Location with multiple PositionPoint instances.
    '''

    primary = 'primary'
    '''
    Primary area to which an environmental alert applies.
    '''

    secondary = 'secondary'
    '''
    Secondary area to which an environmental alert applies.
    '''

class MQSCHGType(Enum):
    '''
    For example:
    ADD - add
    CHG - change
    '''

    ADD = 'ADD'
    '''
    '''

    CHG = 'CHG'
    '''
    '''

class MQSInstructionSource(Enum):
    '''
    Valid values, for example:
    INS - Instruction from RTM
    ACT - Actual instruction after the fact
    '''

    ACT = 'ACT'
    '''
    '''

    INS = 'INS'
    '''
    '''

class MacroPeriodKind(Enum):
    '''
    Kind of macro period for calculations on read / measured values.
    '''

    billingPeriod = 'billingPeriod'
    '''
    Captured during the billing period starting at midnight of the first day
    of the billing period (as defined by the billing cycle day). If during
    the current billing period, it specifies a period from the start of the
    current billing period until "now".
    '''

    daily = 'daily'
    '''
    Daily period starting at midnight. If for the current day, this specifies
    the time from midnight to "now".
    '''

    monthly = 'monthly'
    '''
    Monthly period starting at midnight on the first day of the month. If within
    the current month, this specifies the period from the start of the month
    until "now."
    '''

    none = 'none'
    '''
    Not applicable.
    '''

    seasonal = 'seasonal'
    '''
    A season of time spanning multiple months. E.g. "Summer," "Spring," "Fall,"
    and "Winter" based cycle. If within the current season, it specifies the
    period from the start of the current season until "now."
    '''

    specifiedPeriod = 'specifiedPeriod'
    '''
    For the period defined by the start and end of the TimePeriod element in
    the message.
    '''

    weekly = 'weekly'
    '''
    Weekly period starting at midnight on the first day of the week and ending
    the instant before midnight the last day of the week. If within the current
    week, it specifies the period from the start of the week until "now."
    '''

class MarketEventStatusKind(Enum):
    '''
    Market event status types.
    '''

    active = 'active'
    '''
    The status of the event is currently in a active state.
    Active (when sysdate is equal or greater than to planned start time)
    '''

    cancelled = 'cancelled'
    '''
    The status of the event is currently in a cancelled state.
    Cancelled (stopped before planned start time or planned end time)
    '''

    completed = 'completed'
    '''
    The status of the event is currently in a completed state.
    Complete (when sysdate is equal to the release time)
    '''

    planned = 'planned'
    '''
    The status of the event is currently in a planned state.
    Planned (sysdate is less than planned start time)
    '''

class MarketProductSelfSchedType(Enum):
    '''
    Market product self schedule bid types.
    '''

    ETC = 'ETC'
    '''
    Existing Transmission Contract.
    '''

    LPT = 'LPT'
    '''
    Low price taker.
    '''

    PT = 'PT'
    '''
    Price taker.
    '''

    RA = 'RA'
    '''
    Resource adequacy.
    '''

    RGMR = 'RGMR'
    '''
    Regulatory must run.
    '''

    RMR = 'RMR'
    '''
    Reliability Must Run.
    '''

    RMT = 'RMT'
    '''
    Reliability must take.
    '''

    SP = 'SP'
    '''
    Self provision.
    '''

    TOR = 'TOR'
    '''
    Transmission Ownership Right.
    '''

class MarketProductType(Enum):
    '''
    For example:
    Energy, Reg Up, Reg Down, Spin Reserve, Nonspin Reserve, RUC, Load Folloing
    Up, and Load Following Down.
    '''

    EN = 'EN'
    '''
    energy type
    '''

    LFD = 'LFD'
    '''
    Load following down
    '''

    LFU = 'LFU'
    '''
    Load following up
    '''

    NR = 'NR'
    '''
    non spinning reserve
    '''

    RC = 'RC'
    '''
    Residual Unit Commitment
    '''

    RD = 'RD'
    '''
    regulation down
    '''

    REG = 'REG'
    '''
    Regulation
    '''

    RU = 'RU'
    '''
    regulation up
    '''

    SR = 'SR'
    '''
    spinning reserve
    '''

class MarketType(Enum):
    '''
    Market type.
    '''

    DAM = 'DAM'
    '''
    Day ahead market.
    '''

    HAM = 'HAM'
    '''
    Hour Ahead Market.
    '''

    RTM = 'RTM'
    '''
    Real time market.
    '''

    RUC = 'RUC'
    '''
    Residual Unit Commitment.
    '''

class MeasurementKind(Enum):
    '''
    Kind of read / measured value.
    '''

    alarm = 'alarm'
    '''
    A measurement related to an alarm
    '''

    apTitle = 'apTitle'
    '''
    An application name which is making or has made a request
    '''

    apparentPowerFactor = 'apparentPowerFactor'
    '''
    The ratio of real energy (usually net Wh) to apparent energy (kVAh)
    '''

    applicationContext = 'applicationContext'
    '''
    Information that describes the logical context in which a request, measurement,
    or command is made.
    '''

    assetNumber = 'assetNumber'
    '''
    An asset identifier
    '''

    audibleVolume = 'audibleVolume'
    '''
    Sound
    '''

    bandwidth = 'bandwidth'
    '''
    A measurement of dataflow
    '''

    batteryCarryover = 'batteryCarryover'
    '''
    An estimate of the battery ride through capacity
    '''

    batteryVoltage = 'batteryVoltage'
    '''
    Battery voltage
    '''

    billCarryover = 'billCarryover'
    '''
    Customer’s bill for the (Currency)
    '''

    billLastPeriod = 'billLastPeriod'
    '''
    Customer’s bill for the previous billing period (Currency)
    '''

    billToDate = 'billToDate'
    '''
    Customer’s bill, as known thus far within the present billing period (Currency)
    '''

    broadcastAddress = 'broadcastAddress'
    '''
    A message target address implying all endpoint units within range of a
    particular sender
    '''

    connectionFee = 'connectionFee'
    '''
    Monthly fee for connection to commodity.
    '''

    currency = 'currency'
    '''
    funds
    '''

    current = 'current'
    '''
    The flow of electrons
    '''

    currentAngle = 'currentAngle'
    '''
    A phase current zerocross timing measurement releative to a reference voltage
    zerocross
    '''

    currentImbalance = 'currentImbalance'
    '''
    A measurement of the departure of a phase current relative to the average
    current of all phases
    '''

    dataOverflowAlarm = 'dataOverflowAlarm'
    '''
    An indication of or measurement of a loss of data
    '''

    date = 'date'
    '''
    A measurement of the date and/or time in a clock, or a time stamp indicating
    when data was captured, when a maximum or minimum occurred, or to commemorate
    some other important aspect of a measurement
    '''

    demand = 'demand'
    '''
    The measurement of maximum power flow which is computed as energy usage
    over time, the dimensions of which are defined by a tariff
    '''

    demandLimit = 'demandLimit'
    '''
    A threshold setting that determines the trip point that if exceeded would
    trigger a demand limiting action or alarm
    '''

    demandReset = 'demandReset'
    '''
    A count of the number of times demand has been reset (remotely, locally,
    and/or automatically.)
    '''

    deviceAddressType1 = 'deviceAddressType1'
    '''
    Endpoint target address Type1
    '''

    deviceAddressType2 = 'deviceAddressType2'
    '''
    Endpoint target address Type2
    '''

    deviceAddressType3 = 'deviceAddressType3'
    '''
    Endpoint target address Type3
    '''

    deviceAddressType4 = 'deviceAddressType4'
    '''
    Endpoint target address Type4
    '''

    deviceClass = 'deviceClass'
    '''
    A unique identifier for the Endpoint’s configuration
    '''

    diagnostic = 'diagnostic'
    '''
    A measurement related to equipment diagnostics
    '''

    distance = 'distance'
    '''
    A linear distance or range radius
    '''

    distortionPowerFactor = 'distortionPowerFactor'
    '''
    The ratio of the distortion VAh to the apparent VAh
    '''

    distortionVoltAmp = 'distortionVoltAmp'
    '''
    A measurement in which a V<sup>2</sup> I<sup>2</sup> term has both real
    and reactive components removed leaving only distortion. For example, distortion
    VAh = Sqrt( (V<sup>2</sup>h)(I<sup>2</sup>h) – (Wh)<sup>2</sup> – (VArh)<sup>2</sup>)
    '''

    electronicSerialNumber = 'electronicSerialNumber'
    '''
    A device serial number
    '''

    emergencyLimit = 'emergencyLimit'
    '''
    A setting that indicates an emergency limit
    '''

    encoderTamper = 'encoderTamper'
    '''
    An indication of tampering with a meter encoder
    '''

    endDeviceID = 'endDeviceID'
    '''
    A unique identifier of the endDevice – the device providing measurements
    or under control of the network
    '''

    energization = 'energization'
    '''
    Pertaining to the presence of voltage
    '''

    energizationLoadSide = 'energizationLoadSide'
    '''
    Measuring the presence or absence of voltage on the load side of an electricity
    meter
    '''

    energy = 'energy'
    '''
    Scalar quantity which may be increased or decreased in a system when it
    receives or produces work, respectively
    '''

    fan = 'fan'
    '''
    A forced air moving device
    '''

    frequency = 'frequency'
    '''
    Reciprocal of the period
    '''

    frequencyExcursion = 'frequencyExcursion'
    '''
    A measurement of the departure of the frequency from the nominal frequency
    '''

    fund = 'fund'
    '''
    Duplicate with “currency”
    '''

    groupAddressType1 = 'groupAddressType1'
    '''
    Group target address Type1
    '''

    groupAddressType2 = 'groupAddressType2'
    '''
    Group target address Type2
    '''

    groupAddressType3 = 'groupAddressType3'
    '''
    Group target address Type3
    '''

    groupAddressType4 = 'groupAddressType4'
    '''
    Group target address Type4
    '''

    ieee1366ASAI = 'ieee1366ASAI'
    '''
    A measurement of IEEE-1366 Average Service Availability Index
    '''

    ieee1366ASIDI = 'ieee1366ASIDI'
    '''
    A measurement of the IEEE-1366 Average Service Interruption Duration Index
    '''

    ieee1366ASIFI = 'ieee1366ASIFI'
    '''
    A measurement of the IEEE-1366 Average Service Interruption Frequency Index
    '''

    ieee1366CAIDI = 'ieee1366CAIDI'
    '''
    A measurement of the IEEE-1366 Customer average interruption duration index
    '''

    ieee1366CAIFI = 'ieee1366CAIFI'
    '''
    A measurement of the IEEE-1366 Customer average interruption frequency
    index
    '''

    ieee1366CEMIn = 'ieee1366CEMIn'
    '''
    A measurement of the IEEE-1366 Customers Experiencing Multiple Interruptions
    '''

    ieee1366CEMSMIn = 'ieee1366CEMSMIn'
    '''
    A measurement of the IEEE-1366 Customers Experiencing Multiple Sustained
    and Momentary Interruptions
    '''

    ieee1366CTAIDI = 'ieee1366CTAIDI'
    '''
    A measurement of the IEEE-1366 Customer Total Average Interruption Duration
    Index
    '''

    ieee1366MAIFI = 'ieee1366MAIFI'
    '''
    A measurement of the IEEE-1366 Momentary Average Interruption Frequency
    Index
    '''

    ieee1366MAIFIe = 'ieee1366MAIFIe'
    '''
    A measurement of the IEEE-1366 Momentary Average event Interruption Frequency
    Index
    '''

    ieee1366MomentaryInterruption = 'ieee1366MomentaryInterruption'
    '''
    IEEE-1366 Momentary Interruption count
    '''

    ieee1366MomentaryInterruptionEvent = 'ieee1366MomentaryInterruptionEvent'
    '''
    IEEE-1366 Momentary Interruption event count
    '''

    ieee1366SAIDI = 'ieee1366SAIDI'
    '''
    IEEE-1366 System Average Interruption Duration Index
    '''

    ieee1366SAIFI = 'ieee1366SAIFI'
    '''
    IEEE-1366 System Average Interruption Frequency Index
    '''

    ieee1366SustainedInterruption = 'ieee1366SustainedInterruption'
    '''
    IEEE-1366 Sustained Interruption duration
    '''

    interruptionBehaviour = 'interruptionBehaviour'
    '''
    A measurement related to power interruptions (Note: often an interruption
    count or duration.)
    '''

    inversionTamper = 'inversionTamper'
    '''
    A measurement related to inversion tamper (Note: typically a count of inversions)
    '''

    ipAddress = 'ipAddress'
    '''
    An IP address for the endpoint
    '''

    lineLoss = 'lineLoss'
    '''
    An energy, power, voltage, or current loss attributed to transmission or
    distribution line impedance
    '''

    loadInterrupt = 'loadInterrupt'
    '''
    A measurement related to load interruption (Note: typically a load interruption
    count or measurement of duration)
    '''

    loadShed = 'loadShed'
    '''
    A measurement related to load shed (Note: typically a load shed count or
    load shed duration)
    '''

    loss = 'loss'
    '''
    A quantity lost due to “technical” reasons (such as line loss) or “non-technical”
    reasons (such as theft.)
    '''

    macAddress = 'macAddress'
    '''
    A MAC address for the endpoint
    '''

    maintenance = 'maintenance'
    '''
    A measurement related to the pending maintenance of equipment
    '''

    mfgAssignedConfigurationID = 'mfgAssignedConfigurationID'
    '''
    The configuration given to a device at time of manufacture
    '''

    mfgAssignedPhysicalSerialNumber = 'mfgAssignedPhysicalSerialNumber'
    '''
    The serial number assigned to a device at time of manufacture
    '''

    mfgAssignedProductNumber = 'mfgAssignedProductNumber'
    '''
    The product number assigned to a device at time of manufacture
    '''

    mfgAssignedUniqueCommunicationAddress = 'mfgAssignedUniqueCommunicationAddress'
    '''
    A communication address assigned to a device at time of manufacture
    '''

    multiCastAddress = 'multiCastAddress'
    '''
    A message target address implying a large group of endpoint units within
    range of a particular sender
    '''

    negativeSequence = 'negativeSequence'
    '''
    A quantity that has a rotation sequence which is opposite to that of the
    power system
    '''

    none = 'none'
    '''
    Not Applicable
    '''

    oneWayAddress = 'oneWayAddress'
    '''
    A communication address of a network endpoint used in one-way communication
    '''

    phasorPowerFactor = 'phasorPowerFactor'
    '''
    The ratio of real energy (usually net Wh) to phasor apparent energy (kVAh)
    '''

    phasorReactivePower = 'phasorReactivePower'
    '''
    The ratio of real energy (usually net Wh) to phasor reactive energy (kVAh)
    '''

    physicalTamper = 'physicalTamper'
    '''
    A measurement related to physical tampering (Note: typically a tamper count)
    '''

    positiveSequence = 'positiveSequence'
    '''
    A quantity that has a rotation sequence in agreement with that of the power
    system
    '''

    power = 'power'
    '''
    The derivative of energy with respect to time, where the energy is being
    transferred or transformed.
    '''

    powerFactor = 'powerFactor'
    '''
    The ratio of real energy (usually net Wh) to apparent energy (kVAh)
    '''

    powerLossTamper = 'powerLossTamper'
    '''
    Tamper indicated while power was out
    '''

    powerOutage = 'powerOutage'
    '''
    A measurement related to power outages (Note: typically a status)
    '''

    powerQuality = 'powerQuality'
    '''
    A measurement related to power quality
    '''

    powerRestoration = 'powerRestoration'
    '''
    A measurement related to power restoration (Note: typically a status)
    '''

    programmed = 'programmed'
    '''
    A measurement related to device programming (Note: typically a status measurement)
    '''

    pushbutton = 'pushbutton'
    '''
    A measurement related to pushbutton (Note: typically a status or count)
    '''

    quantityPower = 'quantityPower'
    '''
    A power measurement of Qh, where Qh is defined to be half of the sum of
    the Wh measurements on each phase plus the squareroot of 3 over two times
    the sum of the VArh measurements on each phase.
    '''

    relayActivation = 'relayActivation'
    '''
    A measurement related to relay activations
    '''

    relayCycle = 'relayCycle'
    '''
    A measurement related to relay cycling (Note1: one open and one closure
    together is one cycle, Note2: Usually expressed as a count)
    '''

    removalTamper = 'removalTamper'
    '''
    An indication of equipment tampering that shows equipment was moved or
    opened
    '''

    reprogrammingTamper = 'reprogrammingTamper'
    '''
    An indication of equipment tampering that shows equipment has been reprogrammed
    '''

    reverseRotationTamper = 'reverseRotationTamper'
    '''
    An indication of tampering as evidenced by reverse power flow
    '''

    sag = 'sag'
    '''
    A temporary dip in the supply voltage below the nominal value
    '''

    signalStrength = 'signalStrength'
    '''
    A measurement of RF signal strength
    '''

    signaltoNoiseRatio = 'signaltoNoiseRatio'
    '''
    A measurement of received (RF) signal strength divided by the (RF) noise
    floor
    '''

    swell = 'swell'
    '''
    A temporary rise of the supply voltage over the nominal value
    '''

    switchArmed = 'switchArmed'
    '''
    A measurement of the switch arm condition
    '''

    switchDisabled = 'switchDisabled'
    '''
    A measurement of the switch enablement status
    '''

    switchPosition = 'switchPosition'
    '''
    A physical or logical switch position status which includes “opened” and
    “closed”, but for some products may also include “armed,” or other states
    that indicate a temporary state due to some condition.
    '''

    tamper = 'tamper'
    '''
    An indication of equipment tampering
    '''

    tapPosition = 'tapPosition'
    '''
    Tap changer position
    '''

    tariffRate = 'tariffRate'
    '''
    An energy price defined in a contract. The rate might be a price for energy,
    for power (usually expressed as a demand value), or some other measurement.
    The rate might be currency based, or as a code, or as a component of a
    larger tariff description.
    '''

    temperature = 'temperature'
    '''
    A quantity proportional to the energy of a system
    '''

    totalHarmonicDistortion = 'totalHarmonicDistortion'
    '''
    The ratio of the sum of the harmonics to the fundamental. (THD may measure
    either voltage or current, and may isolated to a given phase)
    '''

    transformerLoss = 'transformerLoss'
    '''
    A measurement of the energy or power loss in a transformer due to inefficiency
    '''

    twoWayAddress = 'twoWayAddress'
    '''
    A communication address used for bidirectional communication
    '''

    unipedeVoltageDip10to15 = 'unipedeVoltageDip10to15'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 10-15% range
    '''

    unipedeVoltageDip15to30 = 'unipedeVoltageDip15to30'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 15-30% range
    '''

    unipedeVoltageDip30to60 = 'unipedeVoltageDip30to60'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 30-60% range
    '''

    unipedeVoltageDip60to90 = 'unipedeVoltageDip60to90'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 60-90% rangeA voltage dip classification
    per EN50160 or a similar national standard measuring the number of dips
    in the 60-90% range
    '''

    unipedeVoltageDip90to100 = 'unipedeVoltageDip90to100'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 90-100% range
    '''

    voltage = 'voltage'
    '''
    The difference in electric potential between two points
    '''

    voltageAngle = 'voltageAngle'
    '''
    A phase voltage zerocross timing measurement relative to a reference voltage
    zerocross
    '''

    voltageExcursion = 'voltageExcursion'
    '''
    A measurement of the departure of the voltage from the nominal voltage
    '''

    voltageImbalance = 'voltageImbalance'
    '''
    A measurement of the departure of a phase voltage relative to the average
    voltage of all phases.
    '''

    volume = 'volume'
    '''
    fluid volume
    '''

    volumetricFlow = 'volumetricFlow'
    '''
    A fluid flow rate
    '''

    watchdogTimeout = 'watchdogTimeout'
    '''
    A reset triggered by a hardware “watchdog” circuit
    '''

    zeroFlowDuration = 'zeroFlowDuration'
    '''
    The amount of time that current flow drops to a zero level or level below
    the ability of the sensor to sense
    '''

    zeroSequence = 'zeroSequence'
    '''
    The zero sequence current is the vector sum of the phase currents
    '''

class MeasurementKindOld(Enum):
    '''
    Kind of read / measured value.
    '''

    alarm = 'alarm'
    '''
    A measurement related to an alarm
    '''

    apTitle = 'apTitle'
    '''
    An application name which is making or has made a request
    '''

    apparentPowerFactor = 'apparentPowerFactor'
    '''
    The ratio of real energy (usually net Wh) to apparent energy (kVAh)
    '''

    applicationContext = 'applicationContext'
    '''
    Information that describes the logical context in which a request, measurement,
    or command is made.
    '''

    assetNumber = 'assetNumber'
    '''
    An asset identifier
    '''

    audibleVolume = 'audibleVolume'
    '''
    Sound
    '''

    bandwidth = 'bandwidth'
    '''
    A measurement of dataflow
    '''

    batteryCarryover = 'batteryCarryover'
    '''
    An estimate of the battery ride through capacity
    '''

    batteryVoltage = 'batteryVoltage'
    '''
    Battery voltage
    '''

    billCarryover = 'billCarryover'
    '''
    Customer’s bill for the (Currency)
    '''

    billLastPeriod = 'billLastPeriod'
    '''
    Customer’s bill for the previous billing period (Currency)
    '''

    billToDate = 'billToDate'
    '''
    Customer’s bill, as known thus far within the present billing period (Currency)
    '''

    broadcastAddress = 'broadcastAddress'
    '''
    A message target address implying all endpoint units within range of a
    particular sender
    '''

    connectionFee = 'connectionFee'
    '''
    Monthly fee for connection to commodity.
    '''

    currency = 'currency'
    '''
    funds
    '''

    current = 'current'
    '''
    The flow of electrons
    '''

    currentAngle = 'currentAngle'
    '''
    A phase current zerocross timing measurement releative to a reference voltage
    zerocross
    '''

    currentImbalance = 'currentImbalance'
    '''
    A measurement of the departure of a phase current relative to the average
    current of all phases
    '''

    dataOverflowAlarm = 'dataOverflowAlarm'
    '''
    An indication of or measurement of a loss of data
    '''

    date = 'date'
    '''
    A measurement of the date and/or time in a clock, or a time stamp indicating
    when data was captured, when a maximum or minimum occurred, or to commemorate
    some other important aspect of a measurement
    '''

    demand = 'demand'
    '''
    The measurement of maximum power flow which is computed as energy usage
    over time, the dimensions of which are defined by a tariff
    '''

    demandLimit = 'demandLimit'
    '''
    A threshold setting that determines the trip point that if exceeded would
    trigger a demand limiting action or alarm
    '''

    demandReset = 'demandReset'
    '''
    A count of the number of times demand has been reset (remotely, locally,
    and/or automatically.)
    '''

    deviceAddressType1 = 'deviceAddressType1'
    '''
    Endpoint target address Type1
    '''

    deviceAddressType2 = 'deviceAddressType2'
    '''
    Endpoint target address Type2
    '''

    deviceAddressType3 = 'deviceAddressType3'
    '''
    Endpoint target address Type3
    '''

    deviceAddressType4 = 'deviceAddressType4'
    '''
    Endpoint target address Type4
    '''

    deviceClass = 'deviceClass'
    '''
    A unique identifier for the Endpoint’s configuration
    '''

    diagnostic = 'diagnostic'
    '''
    A measurement related to equipment diagnostics
    '''

    distance = 'distance'
    '''
    A linear distance or range radius
    '''

    distortionPowerFactor = 'distortionPowerFactor'
    '''
    The ratio of the distortion VAh to the apparent VAh
    '''

    distortionVoltAmp = 'distortionVoltAmp'
    '''
    A measurement in which a V<sup>2</sup> I<sup>2</sup> term has both real
    and reactive components removed leaving only distortion. For example, distortion
    VAh = Sqrt( (V<sup>2</sup>h)(I<sup>2</sup>h) – (Wh)<sup>2</sup> – (VArh)<sup>2</sup>)
    '''

    electronicSerialNumber = 'electronicSerialNumber'
    '''
    A device serial number
    '''

    emergencyLimit = 'emergencyLimit'
    '''
    A setting that indicates an emergency limit
    '''

    encoderTamper = 'encoderTamper'
    '''
    An indication of tampering with a meter encoder
    '''

    endDeviceID = 'endDeviceID'
    '''
    A unique identifier of the endDevice – the device providing measurements
    or under control of the network
    '''

    energization = 'energization'
    '''
    Pertaining to the presence of voltage
    '''

    energizationLoadSide = 'energizationLoadSide'
    '''
    Measuring the presence or absence of voltage on the load side of an electricity
    meter
    '''

    energy = 'energy'
    '''
    Scalar quantity which may be increased or decreased in a system when it
    receives or produces work, respectively
    '''

    fan = 'fan'
    '''
    A forced air moving device
    '''

    frequency = 'frequency'
    '''
    Reciprocal of the period
    '''

    frequencyExcursion = 'frequencyExcursion'
    '''
    A measurement of the departure of the frequency from the nominal frequency
    '''

    fund = 'fund'
    '''
    Duplicate with “currency”
    '''

    groupAddressType1 = 'groupAddressType1'
    '''
    Group target address Type1
    '''

    groupAddressType2 = 'groupAddressType2'
    '''
    Group target address Type2
    '''

    groupAddressType3 = 'groupAddressType3'
    '''
    Group target address Type3
    '''

    groupAddressType4 = 'groupAddressType4'
    '''
    Group target address Type4
    '''

    ieee1366ASAI = 'ieee1366ASAI'
    '''
    A measurement of IEEE-1366 Average Service Availability Index
    '''

    ieee1366ASIDI = 'ieee1366ASIDI'
    '''
    A measurement of the IEEE-1366 Average Service Interruption Duration Index
    '''

    ieee1366ASIFI = 'ieee1366ASIFI'
    '''
    A measurement of the IEEE-1366 Average Service Interruption Frequency Index
    '''

    ieee1366CAIDI = 'ieee1366CAIDI'
    '''
    A measurement of the IEEE-1366 Customer average interruption duration index
    '''

    ieee1366CAIFI = 'ieee1366CAIFI'
    '''
    A measurement of the IEEE-1366 Customer average interruption frequency
    index
    '''

    ieee1366CEMIn = 'ieee1366CEMIn'
    '''
    A measurement of the IEEE-1366 Customers Experiencing Multiple Interruptions
    '''

    ieee1366CEMSMIn = 'ieee1366CEMSMIn'
    '''
    A measurement of the IEEE-1366 Customers Experiencing Multiple Sustained
    and Momentary Interruptions
    '''

    ieee1366CTAIDI = 'ieee1366CTAIDI'
    '''
    A measurement of the IEEE-1366 Customer Total Average Interruption Duration
    Index
    '''

    ieee1366MAIFI = 'ieee1366MAIFI'
    '''
    A measurement of the IEEE-1366 Momentary Average Interruption Frequency
    Index
    '''

    ieee1366MAIFIe = 'ieee1366MAIFIe'
    '''
    A measurement of the IEEE-1366 Momentary Average event Interruption Frequency
    Index
    '''

    ieee1366MomentaryInterruption = 'ieee1366MomentaryInterruption'
    '''
    IEEE-1366 Momentary Interruption count
    '''

    ieee1366MomentaryInterruptionEvent = 'ieee1366MomentaryInterruptionEvent'
    '''
    IEEE-1366 Momentary Interruption event count
    '''

    ieee1366SAIDI = 'ieee1366SAIDI'
    '''
    IEEE-1366 System Average Interruption Duration Index
    '''

    ieee1366SAIFI = 'ieee1366SAIFI'
    '''
    IEEE-1366 System Average Interruption Frequency Index
    '''

    ieee1366SustainedInterruption = 'ieee1366SustainedInterruption'
    '''
    IEEE-1366 Sustained Interruption duration
    '''

    interruptionBehaviour = 'interruptionBehaviour'
    '''
    A measurement related to power interruptions (Note: often an interruption
    count or duration.)
    '''

    inversionTamper = 'inversionTamper'
    '''
    A measurement related to inversion tamper (Note: typically a count of inversions)
    '''

    ipAddress = 'ipAddress'
    '''
    An IP address for the endpoint
    '''

    lineLoss = 'lineLoss'
    '''
    An energy, power, voltage, or current loss attributed to transmission or
    distribution line impedance
    '''

    loadInterrupt = 'loadInterrupt'
    '''
    A measurement related to load interruption (Note: typically a load interruption
    count or measurement of duration)
    '''

    loadShed = 'loadShed'
    '''
    A measurement related to load shed (Note: typically a load shed count or
    load shed duration)
    '''

    loss = 'loss'
    '''
    A quantity lost due to “technical” reasons (such as line loss) or “non-technical”
    reasons (such as theft.)
    '''

    macAddress = 'macAddress'
    '''
    A MAC address for the endpoint
    '''

    maintenance = 'maintenance'
    '''
    A measurement related to the pending maintenance of equipment
    '''

    mfgAssignedConfigurationID = 'mfgAssignedConfigurationID'
    '''
    The configuration given to a device at time of manufacture
    '''

    mfgAssignedPhysicalSerialNumber = 'mfgAssignedPhysicalSerialNumber'
    '''
    The serial number assigned to a device at time of manufacture
    '''

    mfgAssignedProductNumber = 'mfgAssignedProductNumber'
    '''
    The product number assigned to a device at time of manufacture
    '''

    mfgAssignedUniqueCommunicationAddress = 'mfgAssignedUniqueCommunicationAddress'
    '''
    A communication address assigned to a device at time of manufacture
    '''

    multiCastAddress = 'multiCastAddress'
    '''
    A message target address implying a large group of endpoint units within
    range of a particular sender
    '''

    negativeSequence = 'negativeSequence'
    '''
    A quantity that has a rotation sequence which is opposite to that of the
    power system
    '''

    none = 'none'
    '''
    Not Applicable
    '''

    oneWayAddress = 'oneWayAddress'
    '''
    A communication address of a network endpoint used in one-way communication
    '''

    phasorPowerFactor = 'phasorPowerFactor'
    '''
    The ratio of real energy (usually net Wh) to phasor apparent energy (kVAh)
    '''

    phasorReactivePower = 'phasorReactivePower'
    '''
    The ratio of real energy (usually net Wh) to phasor reactive energy (kVAh)
    '''

    physicalTamper = 'physicalTamper'
    '''
    A measurement related to physical tampering (Note: typically a tamper count)
    '''

    positiveSequence = 'positiveSequence'
    '''
    A quantity that has a rotation sequence in agreement with that of the power
    system
    '''

    power = 'power'
    '''
    The derivative of energy with respect to time, where the energy is being
    transferred or transformed.
    '''

    powerFactor = 'powerFactor'
    '''
    The ratio of real energy (usually net Wh) to apparent energy (kVAh)
    '''

    powerLossTamper = 'powerLossTamper'
    '''
    Tamper indicated while power was out
    '''

    powerOutage = 'powerOutage'
    '''
    A measurement related to power outages (Note: typically a status)
    '''

    powerQuality = 'powerQuality'
    '''
    A measurement related to power quality
    '''

    powerRestoration = 'powerRestoration'
    '''
    A measurement related to power restoration (Note: typically a status)
    '''

    programmed = 'programmed'
    '''
    A measurement related to device programming (Note: typically a status measurement)
    '''

    pushbutton = 'pushbutton'
    '''
    A measurement related to pushbutton (Note: typically a status or count)
    '''

    quantityPower = 'quantityPower'
    '''
    A power measurement of Qh, where Qh is defined to be half of the sum of
    the Wh measurements on each phase plus the squareroot of 3 over two times
    the sum of the VArh measurements on each phase.
    '''

    relayActivation = 'relayActivation'
    '''
    A measurement related to relay activations
    '''

    relayCycle = 'relayCycle'
    '''
    A measurement related to relay cycling (Note1: one open and one closure
    together is one cycle, Note2: Usually expressed as a count)
    '''

    removalTamper = 'removalTamper'
    '''
    An indication of equipment tampering that shows equipment was moved or
    opened
    '''

    reprogrammingTamper = 'reprogrammingTamper'
    '''
    An indication of equipment tampering that shows equipment has been reprogrammed
    '''

    reverseRotationTamper = 'reverseRotationTamper'
    '''
    An indication of tampering as evidenced by reverse power flow
    '''

    sag = 'sag'
    '''
    A temporary dip in the supply voltage below the nominal value
    '''

    signalStrength = 'signalStrength'
    '''
    A measurement of RF signal strength
    '''

    signaltoNoiseRatio = 'signaltoNoiseRatio'
    '''
    A measurement of received (RF) signal strength divided by the (RF) noise
    floor
    '''

    swell = 'swell'
    '''
    A temporary rise of the supply voltage over the nominal value
    '''

    switchArmed = 'switchArmed'
    '''
    A measurement of the switch arm condition
    '''

    switchDisabled = 'switchDisabled'
    '''
    A measurement of the switch enablement status
    '''

    switchPosition = 'switchPosition'
    '''
    A physical or logical switch position status which includes “opened” and
    “closed”, but for some products may also include “armed,” or other states
    that indicate a temporary state due to some condition.
    '''

    tamper = 'tamper'
    '''
    An indication of equipment tampering
    '''

    tapPosition = 'tapPosition'
    '''
    Tap changer position
    '''

    tariffRate = 'tariffRate'
    '''
    An energy price defined in a contract. The rate might be a price for energy,
    for power (usually expressed as a demand value), or some other measurement.
    The rate might be currency based, or as a code, or as a component of a
    larger tariff description.
    '''

    temperature = 'temperature'
    '''
    A quantity proportional to the energy of a system
    '''

    totalHarmonicDistortion = 'totalHarmonicDistortion'
    '''
    The ratio of the sum of the harmonics to the fundamental. (THD may measure
    either voltage or current, and may isolated to a given phase)
    '''

    transformerLoss = 'transformerLoss'
    '''
    A measurement of the energy or power loss in a transformer due to inefficiency
    '''

    twoWayAddress = 'twoWayAddress'
    '''
    A communication address used for bidirectional communication
    '''

    unipedeVoltageDip10to15 = 'unipedeVoltageDip10to15'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 10-15% range
    '''

    unipedeVoltageDip15to30 = 'unipedeVoltageDip15to30'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 15-30% range
    '''

    unipedeVoltageDip30to60 = 'unipedeVoltageDip30to60'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 30-60% range
    '''

    unipedeVoltageDip60to90 = 'unipedeVoltageDip60to90'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 60-90% rangeA voltage dip classification
    per EN50160 or a similar national standard measuring the number of dips
    in the 60-90% range
    '''

    unipedeVoltageDip90to100 = 'unipedeVoltageDip90to100'
    '''
    A voltage dip classification per EN50160 or a similar national standard
    measuring the number of dips in the 90-100% range
    '''

    voltage = 'voltage'
    '''
    The difference in electric potential between two points
    '''

    voltageAngle = 'voltageAngle'
    '''
    A phase voltage zerocross timing measurement relative to a reference voltage
    zerocross
    '''

    voltageExcursion = 'voltageExcursion'
    '''
    A measurement of the departure of the voltage from the nominal voltage
    '''

    voltageImbalance = 'voltageImbalance'
    '''
    A measurement of the departure of a phase voltage relative to the average
    voltage of all phases.
    '''

    volume = 'volume'
    '''
    fluid volume
    '''

    volumetricFlow = 'volumetricFlow'
    '''
    A fluid flow rate
    '''

    watchdogTimeout = 'watchdogTimeout'
    '''
    A reset triggered by a hardware “watchdog” circuit
    '''

    zeroFlowDuration = 'zeroFlowDuration'
    '''
    The amount of time that current flow drops to a zero level or level below
    the ability of the sensor to sense
    '''

    zeroSequence = 'zeroSequence'
    '''
    The zero sequence current is the vector sum of the phase currents
    '''

class MeasuringPeriodKind(Enum):
    '''
    Kind of period for reading / measuring values.
    '''

    fifteenMinute = 'fifteenMinute'
    '''
    15-minute
    '''

    fiveMinute = 'fiveMinute'
    '''
    5-minute
    '''

    fixedBlock10Min = 'fixedBlock10Min'
    '''
    10-minute Fixed Block
    '''

    fixedBlock15Min = 'fixedBlock15Min'
    '''
    15-minute Fixed Block
    '''

    fixedBlock1Min = 'fixedBlock1Min'
    '''
    1-minute Fixed Block
    '''

    fixedBlock20Min = 'fixedBlock20Min'
    '''
    20-minute Fixed Block
    '''

    fixedBlock30Min = 'fixedBlock30Min'
    '''
    30-minute Fixed Block
    '''

    fixedBlock5Min = 'fixedBlock5Min'
    '''
    5-minute Fixed Block
    '''

    fixedBlock60Min = 'fixedBlock60Min'
    '''
    60-minute Fixed Block
    '''

    none = 'none'
    '''
    Not applicable.
    '''

    oneMinute = 'oneMinute'
    '''
    1-minute
    '''

    present = 'present'
    '''
    Within the present period of time
    '''

    previous = 'previous'
    '''
    Shifted within the previous monthly cycle and data set
    '''

    rollingBlock10MinIntvl1MinSubIntvl = 'rollingBlock10MinIntvl1MinSubIntvl'
    '''
    10-minute Rolling Block with 1-minute sub-intervals
    '''

    rollingBlock10MinIntvl2MinSubIntvl = 'rollingBlock10MinIntvl2MinSubIntvl'
    '''
    10-minute Rolling Block with 2-minute sub-intervals
    '''

    rollingBlock10MinIntvl5MinSubIntvl = 'rollingBlock10MinIntvl5MinSubIntvl'
    '''
    10-minute Rolling Block with 5-minute sub-intervals
    '''

    rollingBlock15MinIntvl1MinSubIntvl = 'rollingBlock15MinIntvl1MinSubIntvl'
    '''
    15-minute Rolling Block with 1-minute sub-intervals
    '''

    rollingBlock15MinIntvl3MinSubIntvl = 'rollingBlock15MinIntvl3MinSubIntvl'
    '''
    15-minute Rolling Block with 3-minute sub-intervals
    '''

    rollingBlock15MinIntvl5MinSubIntvl = 'rollingBlock15MinIntvl5MinSubIntvl'
    '''
    15-minute Rolling Block with 5-minute sub-intervals
    '''

    rollingBlock30MinIntvl10MinSubIntvl = 'rollingBlock30MinIntvl10MinSubIntvl'
    '''
    30-minute Rolling Block with 10-minute sub-intervals
    '''

    rollingBlock30MinIntvl15MinSubIntvl = 'rollingBlock30MinIntvl15MinSubIntvl'
    '''
    30-minute Rolling Block with 15-minute sub-intervals
    '''

    rollingBlock30MinIntvl2MinSubIntvl = 'rollingBlock30MinIntvl2MinSubIntvl'
    '''
    30-minute Rolling Block with 2-minute sub-intervals
    '''

    rollingBlock30MinIntvl3MinSubIntvl = 'rollingBlock30MinIntvl3MinSubIntvl'
    '''
    30-minute Rolling Block with 3-minute sub-intervals
    '''

    rollingBlock30MinIntvl5MinSubIntvl = 'rollingBlock30MinIntvl5MinSubIntvl'
    '''
    30-minute Rolling Block with 5-minute sub-intervals.
    '''

    rollingBlock30MinIntvl6MinSubIntvl = 'rollingBlock30MinIntvl6MinSubIntvl'
    '''
    30-minute Rolling Block with 6-minute sub-intervals
    '''

    rollingBlock5MinIntvl1MinSubIntvl = 'rollingBlock5MinIntvl1MinSubIntvl'
    '''
    5-minute Rolling Block with 1-minute sub-intervals
    '''

    rollingBlock60MinIntvl10MinSubIntvl = 'rollingBlock60MinIntvl10MinSubIntvl'
    '''
    60-minute Rolling Block with 10-minute sub-intervals
    '''

    rollingBlock60MinIntvl12MinSubIntvl = 'rollingBlock60MinIntvl12MinSubIntvl'
    '''
    60-minute Rolling Block with 12-minute sub-intervals
    '''

    rollingBlock60MinIntvl15MinSubIntvl = 'rollingBlock60MinIntvl15MinSubIntvl'
    '''
    60-minute Rolling Block with 15-minute sub-intervals
    '''

    rollingBlock60MinIntvl20MinSubIntvl = 'rollingBlock60MinIntvl20MinSubIntvl'
    '''
    60-minute Rolling Block with 20-minute sub-intervals
    '''

    rollingBlock60MinIntvl30MinSubIntvl = 'rollingBlock60MinIntvl30MinSubIntvl'
    '''
    60-minute Rolling Block with 30-minute sub-intervals
    '''

    rollingBlock60MinIntvl4MinSubIntvl = 'rollingBlock60MinIntvl4MinSubIntvl'
    '''
    60-minute Rolling Block with 4-minute sub-intervals
    '''

    rollingBlock60MinIntvl5MinSubIntvl = 'rollingBlock60MinIntvl5MinSubIntvl'
    '''
    60-minute Rolling Block with 5-minute sub-intervals
    '''

    rollingBlock60MinIntvl6MinSubIntvl = 'rollingBlock60MinIntvl6MinSubIntvl'
    '''
    60-minute Rolling Block with 6-minute sub-intervals
    '''

    sixtyMinute = 'sixtyMinute'
    '''
    60-minute
    '''

    tenMinute = 'tenMinute'
    '''
    10-minute
    '''

    thirtyMinute = 'thirtyMinute'
    '''
    30-minute
    '''

    threeMinute = 'threeMinute'
    '''
    3-minute
    '''

    twentyMinute = 'twentyMinute'
    '''
    20-minute interval
    '''

    twentyfourHour = 'twentyfourHour'
    '''
    24-hour
    '''

    twoMinute = 'twoMinute'
    '''
    2-minute
    '''

class MediumKind(Enum):
    '''
    Kind of medium.
    '''

    SF6 = 'SF6'
    '''
    Medium is SF6.
    '''

    SF6CF4 = 'SF6CF4'
    '''
    Medium is SF6CF4.
    '''

    SF6N2 = 'SF6N2'
    '''
    Medium is SF6N2.
    '''

    air = 'air'
    '''
    Medium is air.
    '''

    gas = 'gas'
    '''
    Medium is gas.
    '''

    liquid = 'liquid'
    '''
    Medium is liquid.
    '''

    mineralOil = 'mineralOil'
    '''
    Medium is mineral oil.
    '''

    solid = 'solid'
    '''
    Medium is solid.
    '''

class MeterMultiplierKind(Enum):
    '''
    Kind of meter multiplier.
    '''

    ctRatio = 'ctRatio'
    '''
    Current transformer ratio used to convert associated quantities to real
    measurements.
    '''

    kE = 'kE'
    '''
    Test constant.
    '''

    kH = 'kH'
    '''
    Meter kh (watthour) constant. The number of watthours that must be applied
    to the meter to cause one disk revolution for an electromechanical meter
    or the number of watthours represented by one increment pulse for an electronic
    meter.
    '''

    kR = 'kR'
    '''
    Register multiplier. The number to multiply the register reading by in
    order to get kWh.
    '''

    ptRatio = 'ptRatio'
    '''
    Potential transformer ratio used to convert associated quantities to real
    measurements.
    '''

    transformerRatio = 'transformerRatio'
    '''
    Product of the CT ratio and PT ratio.
    '''

class MktAccountKind(Enum):
    '''
    Kind of Market account.
    '''

    estimate = 'estimate'
    '''
    '''

    normal = 'normal'
    '''
    '''

    reversal = 'reversal'
    '''
    '''

    statistical = 'statistical'
    '''
    '''

class MktBillMediaKind(Enum):
    '''
    Kind of bill media.
    '''

    electronic = 'electronic'
    '''
    '''

    other = 'other'
    '''
    '''

    paper = 'paper'
    '''
    '''

class MktInvoiceLineItemKind(Enum):
    '''
    Kind of invoice line item.
    '''

    initial = 'initial'
    '''
    '''

    other = 'other'
    '''
    '''

    recalculation = 'recalculation'
    '''
    '''

class NotificationTriggerKind(Enum):
    '''
    Kind of trigger to notify customer.
    '''

    etrChange = 'etrChange'
    '''
    Notify customer if estimated restoration time changes.
    '''

    informDispatched = 'informDispatched'
    '''
    Notify customer that a crew has been dispatched to investigate the problem.
    '''

    initialEtr = 'initialEtr'
    '''
    Notify customer for the first time that estimated restoration time is available.
    '''

    powerOut = 'powerOut'
    '''
    Notify customer of planned outage.
    '''

    powerRestored = 'powerRestored'
    '''
    Notify customer when power has been restored.
    '''

class OilSampleLocation(Enum):
    '''
    Locations where oil can be sampled.
    '''

    oilDrainageDevice = 'oilDrainageDevice'
    '''
    Sample from oil drainage device.
    '''

    oilSampleValve = 'oilSampleValve'
    '''
    Sample from oil sample valve.
    '''

    other = 'other'
    '''
    Sample from other location.
    '''

class OilTemperatureSource(Enum):
    '''
    Sources for oil temperature.
    '''

    infraredGun = 'infraredGun'
    '''
    Oil temperature from infrared gun.
    '''

    other = 'other'
    '''
    Oil temperature from other souce.
    '''

    topOilTemperatureGauge = 'topOilTemperatureGauge'
    '''
    Oil temperature from top oil temperature gauge.
    '''

class OnOff(Enum):
    '''
    ON
    OFF
    '''

    OFF = 'OFF'
    '''
    '''

    ON = 'ON'
    '''
    '''

class OperatingMechanismKind(Enum):
    '''
    Kinds of operating mechanisms.
    '''

    capacitorTrip = 'capacitorTrip'
    '''
    Capacitor trip mechanism.
    '''

    hydraulic = 'hydraulic'
    '''
    Hydraulic mechanism.
    '''

    pneudraulic = 'pneudraulic'
    '''
    Pneudraulic mechanism.
    '''

    pneumatic = 'pneumatic'
    '''
    Pneumatic mechanism.
    '''

    solenoid = 'solenoid'
    '''
    Solenoid mechanism.
    '''

    spring = 'spring'
    '''
    Spring mechanism.
    '''

    springHandCrank = 'springHandCrank'
    '''
    Spring hand-crank mechanism.
    '''

    springHydraulic = 'springHydraulic'
    '''
    Spring hydraulic mechanism.
    '''

    springMotor = 'springMotor'
    '''
    Spring motor mechanism.
    '''

class OperationalLimitDirectionKind(Enum):
    '''
    The direction attribute describes the side of a limit that is a violation.
    '''

    absoluteValue = 'absoluteValue'
    '''
    An absoluteValue limit means that a monitored absolute value above the
    limit value is a violation.
    '''

    high = 'high'
    '''
    High means that a monitored value above the limit value is a violation.
    If applied to a terminal flow, the positive direction is into the terminal.
    '''

    low = 'low'
    '''
    Low means a monitored value below the limit is a violation. If applied
    to a terminal flow, the positive direction is into the terminal.
    '''

class OrientationKind(Enum):
    '''
    The orientation of the coordinate system with respect to top, left, and
    the coordinate number system.
    '''

    negative = 'negative'
    '''
    For 2D diagrams, a negative orientation gives the left-hand orientation
    (favoured by computer graphics displays) with X values increasing from
    left to right and Y values increasing from top to bottom. This is also
    known as a left hand orientation.
    '''

    positive = 'positive'
    '''
    For 2D diagrams, a positive orientation will result in X values increasing
    from left to right and Y values increasing from bottom to top. This is
    also known as a right hand orientation.
    '''

class OutageCauseKind(Enum):
    '''
    This enumeration describes the primary cause of the outage - planned, unplanned,
    etc.
    '''

    animal = 'animal'
    '''
    This outage was caused by an animal is was unplanned. As such it is treated
    as a forced outage and is probably classified as "trouble" with a Trouble
    Ticket as well as a work/service order. The primary difference between
    this and an unplanned outage is the reason for the outage. If an animal
    caused this and perished as a result, the utility may have other actions
    that are required to be taken by the EPA or other groups with whom the
    utility has an agreement.
    '''

    lightingStrike = 'lightingStrike'
    '''
    Outage is caused by a lighting strike
    '''

    lineDown = 'lineDown'
    '''
    The outage is caused by a line down
    '''

    poleDown = 'poleDown'
    '''
    The outage is caused by a pole down
    '''

    treeDown = 'treeDown'
    '''
    The outage is caused by a tree down
    '''

class OutageStatusKind(Enum):
    '''
    This defines if the outage have been predicted or confirmed
    '''

    closed = 'closed'
    '''
    The outage has been fully restored, the crews have been released and the
    outage is shown as closed
    '''

    confirmed = 'confirmed'
    '''
    the outage has been verified
    '''

    partiallyRestored = 'partiallyRestored'
    '''
    Some of the usage points affected by the outage have been restored but
    other usage points are still out of power.
    '''

    predicted = 'predicted'
    '''
    the outage may not be real since it has not been verified - it is only
    thought to be an outage.
    '''

    restored = 'restored'
    '''
    All usage points associated with the outage have been restored
    '''

class PSREventKind(Enum):
    '''
    Kind of power system resource (PSR) event.
    '''

    inService = 'inService'
    '''
    Power system resource state change to in service.
    '''

    other = 'other'
    '''
    Other power system resource state change.
    '''

    outOfService = 'outOfService'
    '''
    Power system resource state change to out of service.
    '''

    pendingAdd = 'pendingAdd'
    '''
    Power system resource state change to pending add.
    '''

    pendingRemove = 'pendingRemove'
    '''
    Power system resource state change to pending remove.
    '''

    pendingReplace = 'pendingReplace'
    '''
    Power system resource state change to pending replace.
    '''

    unknown = 'unknown'
    '''
    Unknown power system resource state change.
    '''

class ParticipationCategoryMPM(Enum):
    '''
    For example:
    'Y' - Participates in both LMPM and SMPM
    'N' - Not included in LMP price measures
    'S' - Participates in SMPM price measures
    'L' - Participates in LMPM price measures
    '''

    L = 'L'
    '''
    '''

    N = 'N'
    '''
    '''

    S = 'S'
    '''
    '''

    Y = 'Y'
    '''
    '''

class PetersenCoilModeKind(Enum):
    '''
    The mode of operation for a Petersen coil.
    '''

    automaticPositioning = 'automaticPositioning'
    '''
    Automatic positioning.
    '''

    fixed = 'fixed'
    '''
    Fixed position.
    '''

    manual = 'manual'
    '''
    Manual positioning.
    '''

class PhaseCode(Enum):
    '''
    An unordered enumeration of phase identifiers. Allows designation of phases
    for both transmission and distribution equipment, circuits and loads. The
    enumeration, by itself, does not describe how the phases are connected
    together or connected to ground. Ground is not explicitly denoted as a
    phase.
    Residential and small commercial loads are often served from single-phase,
    or split-phase, secondary circuits. For the example of s12N, phases 1 and
    2 refer to hot wires that are 180 degrees out of phase, while N refers
    to the neutral wire. Through single-phase transformer connections, these
    secondary circuits may be served from one or two of the primary phases
    A, B, and C. For three-phase loads, use the A, B, C phase codes instead
    of s12N.
    The integer values are from IEC 61968-9 to support revenue metering applications.
    '''

    A = 'A'
    '''
    Phase A.
    '''

    AB = 'AB'
    '''
    Phases A and B.
    '''

    ABC = 'ABC'
    '''
    Phases A, B, and C.
    '''

    ABCN = 'ABCN'
    '''
    Phases A, B, C, and N.
    '''

    ABN = 'ABN'
    '''
    Phases A, B, and neutral.
    '''

    AC = 'AC'
    '''
    Phases A and C.
    '''

    ACN = 'ACN'
    '''
    Phases A, C and neutral.
    '''

    AN = 'AN'
    '''
    Phases A and neutral.
    '''

    B = 'B'
    '''
    Phase B.
    '''

    BC = 'BC'
    '''
    Phases B and C.
    '''

    BCN = 'BCN'
    '''
    Phases B, C, and neutral.
    '''

    BN = 'BN'
    '''
    Phases B and neutral.
    '''

    C = 'C'
    '''
    Phase C.
    '''

    CN = 'CN'
    '''
    Phases C and neutral.
    '''

    N = 'N'
    '''
    Neutral phase.
    '''

    X = 'X'
    '''
    Unknown non-neutral phase.
    '''

    XN = 'XN'
    '''
    Unknown non-neutral phase plus neutral.
    '''

    XY = 'XY'
    '''
    Two unknown non-neutral phases.
    '''

    XYN = 'XYN'
    '''
    Two unknown non-neutral phases plus neutral.
    '''

    none = 'none'
    '''
    No phases specified.
    '''

    s1 = 's1'
    '''
    Secondary phase 1.
    '''

    s12 = 's12'
    '''
    Secondary phase 1 and 2.
    '''

    s12N = 's12N'
    '''
    Secondary phases 1, 2, and neutral.
    '''

    s1N = 's1N'
    '''
    Secondary phase 1 and neutral.
    '''

    s2 = 's2'
    '''
    Secondary phase 2.
    '''

    s2N = 's2N'
    '''
    Secondary phase 2 and neutral.
    '''

class PhaseConnectedFaultKind(Enum):
    '''
    The type of fault connection among phases.
    '''

    lineOpen = 'lineOpen'
    '''
    The fault is when the conductor path is broken between two terminals. Additional
    coexisting faults may be required if the broken conductor also causes connections
    to grounds or other lines or phases.
    '''

    lineToGround = 'lineToGround'
    '''
    The fault connects the indicated phases to ground. The line to line fault
    impedance is not used and assumed infinite. The full ground impedance is
    connected between each phase specified in the fault and ground, but not
    between the phases.
    '''

    lineToLine = 'lineToLine'
    '''
    The fault connects the specified phases together without a connection to
    ground. The ground impedance of this fault is ignored. The line to line
    impedance is connected between each of the phases specified in the fault.
    For example three times for a three phase fault, one time for a two phase
    fault. A single phase fault should not be specified.
    '''

    lineToLineToGround = 'lineToLineToGround'
    '''
    The fault connects the indicated phases to ground and to each other. The
    line to line impedance is connected between each of the phases specified
    in the fault in a full mesh. For example three times for a three phase
    fault, one time for a two phase fault. A single phase fault should not
    be specified. The full ground impedance is connected between each phase
    specified in the fault and ground.
    '''

class PhaseShuntConnectionKind(Enum):
    '''
    The configuration of phase connections for a single terminal device such
    as a load or capacitor.
    '''

    D = 'D'
    '''
    Delta connection.
    '''

    G = 'G'
    '''
    Ground connection; use when explicit connection to ground needs to be expressed
    in combination with the phase code, such as for electrical wire/cable or
    for meters.
    '''

    I = 'I'
    '''
    Independent winding, for single-phase connections.
    '''

    Y = 'Y'
    '''
    Wye connection.
    '''

    Yn = 'Yn'
    '''
    Wye, with neutral brought out for grounding.
    '''

class PoleBaseKind(Enum):
    '''
    Kind of base for poles.
    '''

    asphalt = 'asphalt'
    '''
    '''

    cement = 'cement'
    '''
    '''

    dirt = 'dirt'
    '''
    '''

    other = 'other'
    '''
    '''

    unknown = 'unknown'
    '''
    '''

class PolePreservativeKind(Enum):
    '''
    Preservative kind for poles.
    '''

    cellon = 'cellon'
    '''
    '''

    chemonite = 'chemonite'
    '''
    '''

    creosote = 'creosote'
    '''
    '''

    naphthena = 'naphthena'
    '''
    '''

    other = 'other'
    '''
    '''

    penta = 'penta'
    '''
    '''

    unknown = 'unknown'
    '''
    '''

class PoleTreatmentKind(Enum):
    '''
    Kind of treatment for poles.
    '''

    butt = 'butt'
    '''
    '''

    full = 'full'
    '''
    '''

    grayStain = 'grayStain'
    '''
    '''

    greenStain = 'greenStain'
    '''
    '''

    natural = 'natural'
    '''
    '''

    other = 'other'
    '''
    '''

    penta = 'penta'
    '''
    '''

    unknown = 'unknown'
    '''
    '''

class PotentialTransformerKind(Enum):
    '''
    The construction kind of the potential transformer.
    '''

    capacitiveCoupling = 'capacitiveCoupling'
    '''
    The potential transformer is using capacitive coupling to create secondary
    voltage.
    '''

    inductive = 'inductive'
    '''
    The potential transformer is using induction coils to create secondary
    voltage.
    '''

class ProcedureKind(Enum):
    '''
    Kind of procedure.
    '''

    diagnosis = 'diagnosis'
    '''
    Diagnosis procedure.
    '''

    inspection = 'inspection'
    '''
    Inspection procedure.
    '''

    maintenance = 'maintenance'
    '''
    Maintenance procedure.
    '''

    other = 'other'
    '''
    Other procedure.
    '''

    test = 'test'
    '''
    Test procedure.
    '''

class ProtectiveActionAdjustmentKind(Enum):
    '''
    Categorisation of different protective action adjustments that can be performed
    on equipment.
    '''

    byPercentage = 'byPercentage'
    '''
    The adjustment is in percentage of the active value.
    '''

    byValue = 'byValue'
    '''
    The adjustment is in given by a value that defined the changes that will
    be done to the active value.
    '''

    measurement = 'measurement'
    '''
    The equipment will operating on a value given by a measurement.
    '''

    setValue = 'setValue'
    '''
    The equipment will operate on the new value.
    '''

class RandomisationKind(Enum):
    '''
    Kind of randomisation to be applied to control the timing of end device
    control commands and/or the definition of demand response and load control
    events. Value other than 'none' is typically used to mitigate potential
    deleterious effects of simultaneous operation of multiple devices.
    '''

    default = 'default'
    '''
    Randomisation of start and/or end times involving the operation of one
    or more devices is controlled by default settings for the device(s).
    '''

    end = 'end'
    '''
    End time of an event or control action affecting one or more devices is
    randomised to prevent simultaneous operation.
    '''

    none = 'none'
    '''
    Neither the start time nor the end time of an event or control action affecting
    one or more devices is randomised.
    '''

    start = 'start'
    '''
    Start time of an event or control action affecting one or more multiple
    devices is randomised.
    '''

    startAndEnd = 'startAndEnd'
    '''
    Both the start time and the end time of an event or control action affecting
    one or more devices are randomised to prevent simultaneous operation.
    '''

class ReadingReasonKind(Enum):
    '''
    Reason for the reading being taken.
    '''

    billing = 'billing'
    '''
    Reading(s) taken or to be taken in response to a billing-related inquiry
    by a customer or other party. A variant of 'inquiry'.
    '''

    demandReset = 'demandReset'
    '''
    Reading(s) taken or to be taken in conjunction with the resetting of one
    or more demand registers in a meter.
    '''

    inquiry = 'inquiry'
    '''
    Reading(s) taken or to be taken in response to an inquiry by a customer
    or other party.
    '''

    installation = 'installation'
    '''
    Reading(s) taken or to be taken in conjunction with installation of a meter.
    '''

    loadManagement = 'loadManagement'
    '''
    Reading(s) taken or to be taken to support management of loads on distribution
    networks or devices.
    '''

    loadResearch = 'loadResearch'
    '''
    Reading(s) taken or to be taken to support research and analysis of loads
    on distribution networks or devices.
    '''

    moveIn = 'moveIn'
    '''
    Reading(s) taken or to be taken in conjunction with a customer move-in
    event.
    '''

    moveOut = 'moveOut'
    '''
    Reading(s) taken or to be taken in conjunction with a customer move-out
    event.
    '''

    other = 'other'
    '''
    Reading(s) taken or to be taken for some other reason or purpose.
    '''

    removal = 'removal'
    '''
    Reading(s) taken or to be taken in conjunction with removal of a meter.
    '''

    serviceConnect = 'serviceConnect'
    '''
    Reading(s) taken or to be taken in conjunction with a connection or re-connection
    of service.
    '''

    serviceDisconnect = 'serviceDisconnect'
    '''
    Reading(s) taken or to be taken in conjunction with a disconnection of
    service.
    '''

class RegulatingControlModeKind(Enum):
    '''
    The kind of regulation model. For example regulating voltage, reactive
    power, active power, etc.
    '''

    activePower = 'activePower'
    '''
    Active power is specified.
    '''

    admittance = 'admittance'
    '''
    Admittance is specified.
    '''

    currentFlow = 'currentFlow'
    '''
    Current flow is specified.
    '''

    powerFactor = 'powerFactor'
    '''
    Power factor is specified.
    '''

    reactivePower = 'reactivePower'
    '''
    Reactive power is specified.
    '''

    temperature = 'temperature'
    '''
    Control switches on/off based on the local temperature (i.e., a thermostat).
    '''

    timeScheduled = 'timeScheduled'
    '''
    Control switches on/off by time of day. The times may change on the weekend,
    or in different seasons.
    '''

    voltage = 'voltage'
    '''
    Voltage is specified.
    '''

class RegulationBranchKind(Enum):
    '''
    Kind of regulation branch for shunt impedance.
    '''

    breaker = 'breaker'
    '''
    '''

    fuse = 'fuse'
    '''
    '''

    line = 'line'
    '''
    '''

    other = 'other'
    '''
    '''

    recloser = 'recloser'
    '''
    '''

    sectionner = 'sectionner'
    '''
    '''

    switch = 'switch'
    '''
    '''

    transformer = 'transformer'
    '''
    '''

class RelativeDisplacementKind(Enum):
    '''
    The types of relative displacement
    '''

    centreEarth = 'centreEarth'
    '''
    '''

    ground = 'ground'
    '''
    '''

    seaLevel = 'seaLevel'
    '''
    '''

class RemoteUnitType(Enum):
    '''
    Type of remote unit.
    '''

    ControlCenter = 'ControlCenter'
    '''
    Control centre.
    '''

    IED = 'IED'
    '''
    Intelligent electronic device (IED).
    '''

    RTU = 'RTU'
    '''
    Remote terminal unit.
    '''

    SubstationControlSystem = 'SubstationControlSystem'
    '''
    Substation control system.
    '''

class ReportingMethodKind(Enum):
    '''
    Method by which information is gathered from station.
    '''

    automated = 'automated'
    '''
    Station automatically reports.
    '''

    manual = 'manual'
    '''
    Station must be physically visited to gather observations.
    '''

    queried = 'queried'
    '''
    Station must be queried to obtain observations.
    '''

class ResourceCapacityType(Enum):
    '''
    Resource capacity type.
    '''

    FO = 'FO'
    '''
    Flexible Offer.
    '''

    MO = 'MO'
    '''
    Must Offer.
    '''

    NR = 'NR'
    '''
    Non spinning reserve.
    '''

    RA = 'RA'
    '''
    Resource Adequacy.
    '''

    RD = 'RD'
    '''
    Regulation Down.
    '''

    RMR = 'RMR'
    '''
    Reliability Must Run.
    '''

    RU = 'RU'
    '''
    Regulation Up.
    '''

    SR = 'SR'
    '''
    Spinning reserve.
    '''

class ResourceRegistrationStatus(Enum):
    '''
    Types of resource registration status, for example:
    Active
    Mothballed
    Planned
    Decommissioned
    '''

    Active = 'Active'
    '''
    Resource registration is active
    '''

    Decommissioned = 'Decommissioned'
    '''
    Resource registration status is decommissioned
    '''

    Mothballed = 'Mothballed'
    '''
    Resource registration has been suspended
    '''

    Planned = 'Planned'
    '''
    Registration status is in the planning stage
    '''

class RetiredReasonKind(Enum):
    '''
    Reason asset retired.
    '''

    environmental = 'environmental'
    '''
    Retired due to environmental reasons.
    '''

    excessiveMaintenance = 'excessiveMaintenance'
    '''
    Retired due to excessive maintainance issues.
    '''

    facilitiesUpgrade = 'facilitiesUpgrade'
    '''
    Retired due to facility upgrade.
    '''

    failed = 'failed'
    '''
    Retired because of failure.
    '''

    obsolescence = 'obsolescence'
    '''
    Retired due to obsolescence.
    '''

    other = 'other'
    '''
    Retired due to other reasons.
    '''

    sold = 'sold'
    '''
    Retired and sold.
    '''

class RevenueKind(Enum):
    '''
    Accounting classification of the type of revenue collected for the customer
    agreement, typically used to break down accounts for revenue accounting.
    '''

    commercial = 'commercial'
    '''
    Commercial revenue.
    '''

    industrial = 'industrial'
    '''
    Industrial revenue.
    '''

    irrigation = 'irrigation'
    '''
    Irrigation revenue.
    '''

    nonResidential = 'nonResidential'
    '''
    Non-residential revenue.
    '''

    other = 'other'
    '''
    Other revenue kind.
    '''

    residential = 'residential'
    '''
    Residential revenue.
    '''

    streetLight = 'streetLight'
    '''
    Streetlight revenue.
    '''

class RevisionKind(Enum):
    '''
    List of the kinds of revisions that can be made to a SwitchingStep.
    '''

    added = 'added'
    '''
    '''

    void = 'void'
    '''
    '''

class RiskScoreKind(Enum):
    '''
    Types of risk scores.
    '''

    customerRisk = 'customerRisk'
    '''
    Customer risk score.
    '''

    financialRisk = 'financialRisk'
    '''
    Financial risk score.
    '''

    safetyRisk = 'safetyRisk'
    '''
    Safety risk score.
    '''

class SVCControlMode(Enum):
    '''
    Static VAr Compensator control mode.
    '''

    reactivePower = 'reactivePower'
    '''
    Reactive power control.
    '''

    voltage = 'voltage'
    '''
    Voltage control.
    '''

class SampleContainerType(Enum):
    '''
    Types of sample containers.
    '''

    glassCan = 'glassCan'
    '''
    Glass can container.
    '''

    metalCan = 'metalCan'
    '''
    Metal can container.
    '''

    syringe = 'syringe'
    '''
    Syringe.
    '''

class ScaleKind(Enum):
    '''
    Kinds of scaling.
    '''

    exponential = 'exponential'
    '''
    Exponential scale.
    '''

    linear = 'linear'
    '''
    Linear scale.
    '''

class SealConditionKind(Enum):
    '''
    Kind of seal condition.
    '''

    broken = 'broken'
    '''
    Seal is broken.
    '''

    locked = 'locked'
    '''
    Seal is locked.
    '''

    missing = 'missing'
    '''
    Seal is missing.
    '''

    open = 'open'
    '''
    Seal is open.
    '''

    other = 'other'
    '''
    Other kind of seal condition.
    '''

class SealKind(Enum):
    '''
    Kind of seal.
    '''

    lead = 'lead'
    '''
    Lead seal.
    '''

    lock = 'lock'
    '''
    Lock seal.
    '''

    other = 'other'
    '''
    Other kind of seal.
    '''

    steel = 'steel'
    '''
    Steel seal.
    '''

class SelfSchedReferenceType(Enum):
    '''
    Indication of which type of self schedule is being referenced.
    '''

    ETC = 'ETC'
    '''
    Existing transmission contract.
    '''

    TOR = 'TOR'
    '''
    Transmission ownership right.
    '''

class ServiceKind(Enum):
    '''
    Kind of service.
    '''

    air = 'air'
    '''
    Air service.
    '''

    electricity = 'electricity'
    '''
    Electricity service.
    '''

    gas = 'gas'
    '''
    Gas service.
    '''

    heat = 'heat'
    '''
    Heat service.
    '''

    heatingFluid = 'heatingFluid'
    '''
    Heating fluid service.
    '''

    internet = 'internet'
    '''
    Internet service.
    '''

    naturalGas = 'naturalGas'
    '''
    Natural gas service.
    '''

    other = 'other'
    '''
    Other kind of service.
    '''

    propane = 'propane'
    '''
    Propane service.
    '''

    rates = 'rates'
    '''
    Rates (e.g. tax, charge, toll, duty, tariff, etc.) service.
    '''

    refuse = 'refuse'
    '''
    Refuse (waster) service.
    '''

    sewerage = 'sewerage'
    '''
    Sewerage service.
    '''

    steam = 'steam'
    '''
    Steam service.
    '''

    time = 'time'
    '''
    Time service.
    '''

    tvLicence = 'tvLicence'
    '''
    TV license service.
    '''

    water = 'water'
    '''
    Water service.
    '''

class ServiceMultiplierKind(Enum):
    '''
    Kind of service multiplier.
    '''

    ctRatio = 'ctRatio'
    '''
    Current transformer ratio used to convert associated quantities to real
    measurements.
    '''

    ptRatio = 'ptRatio'
    '''
    Voltage transformer ratio used to convert associated quantities to real
    measurements.
    '''

    transformerRatio = 'transformerRatio'
    '''
    Product of the CT ratio and PT ratio.
    '''

class ServiceRequestKind(Enum):
    '''
    Kinds of service requests
    '''

    connect = 'connect'
    '''
    Physically connect the service.
    '''

    construction = 'construction'
    '''
    The construction work requested.
    '''

    disconnect = 'disconnect'
    '''
    Physically disconnect the service.
    '''

    inspection = 'inspection'
    '''
    Inspection work.
    '''

    newservice = 'newservice'
    '''
    A new service is requested by the customer
    '''

    other = 'other'
    '''
    Other kind of work.
    '''

    reconnect = 'reconnect'
    '''
    Physically reconnect the service.
    '''

    repair = 'repair'
    '''
    Repair work.
    '''

    replace = 'replace'
    '''
    replace an asset
    '''

    test = 'test'
    '''
    Test work.
    '''

    turn_off = 'turn_off'
    '''
    Temporarily turn off the service but leave the connection in place. THIS ATTRIBUTE HAS BEEN RENAMED TO COMPLY WITH PYTHON SYNTAX
    '''

    turn_on = 'turn_on'
    '''
    Turn on the service. THIS ATTRIBUTE HAS BEEN RENAMED TO COMPLY WITH PYTHON SYNTAX
    '''

class ShortCircuitRotorKind(Enum):
    '''
    Type of rotor, used by short circuit applications.
    '''

    salientPole1 = 'salientPole1'
    '''
    Salient pole 1 in IEC 60909.
    '''

    salientPole2 = 'salientPole2'
    '''
    Salient pole 2 in IEC 60909.
    '''

    turboSeries1 = 'turboSeries1'
    '''
    Turbo Series 1 in IEC 60909.
    '''

    turboSeries2 = 'turboSeries2'
    '''
    Turbo series 2 in IEC 60909.
    '''

class ShuntImpedanceControlKind(Enum):
    '''
    Kind of control for shunt impedance.
    '''

    fixed = 'fixed'
    '''
    '''

    localOnly = 'localOnly'
    '''
    '''

    remoteOnly = 'remoteOnly'
    '''
    '''

    remoteWithLocalOverride = 'remoteWithLocalOverride'
    '''
    '''

class ShuntImpedanceLocalControlKind(Enum):
    '''
    Kind of local control for shunt impedance.
    '''

    current = 'current'
    '''
    '''

    none = 'none'
    '''
    '''

    powerFactor = 'powerFactor'
    '''
    '''

    reactivePower = 'reactivePower'
    '''
    '''

    temperature = 'temperature'
    '''
    '''

    time = 'time'
    '''
    '''

    voltage = 'voltage'
    '''
    '''

class SinglePhaseKind(Enum):
    '''
    Enumeration of single phase identifiers. Allows designation of single phases
    for both transmission and distribution equipment, circuits and loads.
    '''

    A = 'A'
    '''
    Phase A.
    '''

    B = 'B'
    '''
    Phase B.
    '''

    C = 'C'
    '''
    Phase C.
    '''

    N = 'N'
    '''
    Neutral.
    '''

    s1 = 's1'
    '''
    Secondary phase 1.
    '''

    s2 = 's2'
    '''
    Secondary phase 2.
    '''

class Source(Enum):
    '''
    Source gives information related to the origin of a value.
    '''

    DEFAULTED = 'DEFAULTED'
    '''
    The value contains a default value.
    '''

    PROCESS = 'PROCESS'
    '''
    The value is provided by input from the process I/O or being calculated
    from some function.
    '''

    SUBSTITUTED = 'SUBSTITUTED'
    '''
    The value is provided by input of an operator or by an automatic source.
    '''

class SpaceAnalogKind(Enum):
    '''
    Kinds of analogs (floats) measuring a space condition.
    '''

    magneticFieldDirection = 'magneticFieldDirection'
    '''
    '''

    magneticFieldStrength = 'magneticFieldStrength'
    '''
    '''

class StreetlightLampKind(Enum):
    '''
    Kind of lamp for the streetlight.
    '''

    highPressureSodium = 'highPressureSodium'
    '''
    '''

    mercuryVapor = 'mercuryVapor'
    '''
    '''

    metalHalide = 'metalHalide'
    '''
    '''

    other = 'other'
    '''
    '''

class StructureMaterialKind(Enum):
    '''
    Kind of material used for structures.
    '''

    concrete = 'concrete'
    '''
    '''

    other = 'other'
    '''
    '''

    steel = 'steel'
    '''
    '''

    wood = 'wood'
    '''
    '''

class StructureSupportKind(Enum):
    '''
    Kind of structure support.
    '''

    anchor = 'anchor'
    '''
    '''

    guy = 'guy'
    '''
    '''

class SupplierKind(Enum):
    '''
    Kind of supplier.
    '''

    lse = 'lse'
    '''
    Load Serving Entity
    '''

    mdma = 'mdma'
    '''
    Meter Data Management Agent (MDMA) reads meters, validates meter data,
    and estimates missing data to be used in various applications
    '''

    msp = 'msp'
    '''
    Managed service provider (MSP) delivers services, such as network, application,
    infrastructure and security, via ongoing and regular support and active
    administration
    '''

    other = 'other'
    '''
    Other kind of supplier.
    '''

    retailer = 'retailer'
    '''
    Entity that sells the service, but does not deliver to the customer; applies
    to the deregulated markets.
    '''

    utility = 'utility'
    '''
    Entity that delivers the service to the customer.
    '''

class SwitchActionKind(Enum):
    '''
    Kind of action on switch.
    '''

    close = 'close'
    '''
    Close the switch.
    '''

    disableReclosing = 'disableReclosing'
    '''
    Disable (automatic) switch reclosing.
    '''

    enableReclosing = 'enableReclosing'
    '''
    Enable (automatic) switch reclosing.
    '''

    open = 'open'
    '''
    Open the switch.
    '''

class SynchronousMachineKind(Enum):
    '''
    Synchronous machine type.
    '''

    condenser = 'condenser'
    '''
    Indicates the synchronous machine can operate as a condenser.
    '''

    generator = 'generator'
    '''
    Indicates the synchronous machine can operate as a generator.
    '''

    generatorOrCondenser = 'generatorOrCondenser'
    '''
    Indicates the synchronous machine can operate as a generator or as a condenser.
    '''

    generatorOrCondenserOrMotor = 'generatorOrCondenserOrMotor'
    '''
    Indicates the synchronous machine can operate as a generator or as a condenser
    or as a motor.
    '''

    generatorOrMotor = 'generatorOrMotor'
    '''
    Indicates the synchronous machine can operate as a generator or as a motor.
    '''

    motor = 'motor'
    '''
    Indicates the synchronous machine can operate as a motor.
    '''

    motorOrCondenser = 'motorOrCondenser'
    '''
    Indicates the synchronous machine can operate as a motor or as a condenser.
    '''

class SynchronousMachineOperatingMode(Enum):
    '''
    Synchronous machine operating mode.
    '''

    condenser = 'condenser'
    '''
    Operating as condenser.
    '''

    generator = 'generator'
    '''
    Operating as generator.
    '''

    motor = 'motor'
    '''
    Operating as motor.
    '''

class TagActionKind(Enum):
    '''
    Kind of action on tag.
    '''

    place = 'place'
    '''
    Place the tag.
    '''

    remove = 'remove'
    '''
    Remove the tag.
    '''

    verify = 'verify'
    '''
    Verify the tag.
    '''

class TempEquipActionKind(Enum):
    '''
    Kind of action on temporary equipment (such as cut, jumper, ground, energy
    source).
    '''

    connect = 'connect'
    '''
    Connect the temp equipment to its terminal
    '''

    disconnect = 'disconnect'
    '''
    Disconnect the temp equipment from its terminal
    '''

    place = 'place'
    '''
    Place the jumper (close) or the cut (open).
    '''

    remove = 'remove'
    '''
    Remove the jumper (open) or the cut (close).
    '''

class TestKind(Enum):
    '''
    The test applied to determine if the condition is met.
    '''

    equalTo = 'equalTo'
    '''
    '''

    greaterThan = 'greaterThan'
    '''
    '''

    greaterThanOrEqualTo = 'greaterThanOrEqualTo'
    '''
    '''

    lessThan = 'lessThan'
    '''
    '''

    lessThanOrEqualTo = 'lessThanOrEqualTo'
    '''
    '''

class TestMethod(Enum):
    '''
    Possible test methods.
    '''

    _60567ByDisplacement = '60567ByDisplacement'
    '''
    60567 by displacement method.
    '''

    _60567ByPartition = '60567ByPartition'
    '''
    60567 by partition method.
    '''

    _60567ByVacuum = '60567ByVacuum'
    '''
    60567 by vacuum method.
    '''

    _60970Automatic = '60970Automatic'
    '''
    Automatic method.
    '''

    _60970Manual1 = '60970Manual1'
    '''
    Manual method 1.
    '''

    _60970Manual2 = '60970Manual2'
    '''
    Manual method 2.
    '''

    _61125A = '61125A'
    '''
    61125A method.
    '''

    _61125B = '61125B'
    '''
    61125B method.
    '''

    _61125C = '61125C'
    '''
    61125C method.
    '''

    _62270AnnexA = '62270AnnexA'
    '''
    62270 Annex A method.
    '''

    _62535AnnexA = '62535AnnexA'
    '''
    62535 Annex A method.
    '''

    _62535Main = '62535Main'
    '''
    62535 main method.
    '''

    D1275A = 'D1275A'
    '''
    D1275A method.
    '''

    D1275B = 'D1275B'
    '''
    D1275B method.
    '''

    D3612A = 'D3612A'
    '''
    D3612A method.
    '''

    D3612B = 'D3612B'
    '''
    D3612B method.
    '''

    D3612C = 'D3612C'
    '''
    D3612C method.
    '''

class TestReason(Enum):
    '''
    Reason for test.
    '''

    postOilTreatment = 'postOilTreatment'
    '''
    Test after oil treatment.
    '''

    postOperationFault = 'postOperationFault'
    '''
    Test after operation fault.
    '''

    postRepair = 'postRepair'
    '''
    Test after repair.
    '''

    routine = 'routine'
    '''
    Routine test.
    '''

class TestVariantKind(Enum):
    '''
    Test variants.
    '''

    _0C = '0C'
    '''
    Testing done at temperature of 0°C.
    '''

    _100C = '100C'
    '''
    Testing done at temperature of 100°C.
    '''

    _164hours = '164hours'
    '''
    Measurements taken at 164 hours.
    '''

    _1mm = '1mm'
    '''
    Specimen of 1 mm thickness used in testing.
    '''

    _25C = '25C'
    '''
    Testing done at temperature of 25°C.
    '''

    _2mm = '2mm'
    '''
    Specimen of 2 mm thickness used in testing.
    '''

    _30C = '30C'
    '''
    Testing done at temperature of 30°C.
    '''

    _40C = '40C'
    '''
    Testing done at temperature of 40°C.
    '''

    _72hours = '72hours'
    '''
    Measurements taken at 72 hours.
    '''

    minus30C = 'minus30C'
    '''
    Testing done at temperature of -30°C.
    '''

    minus40C = 'minus40C'
    '''
    Testing done at temperature of -40°C.
    '''

class TimeIntervalKind(Enum):
    '''
    Specifies the unit of time for the intervals in the schedule.
    '''

    D = 'D'
    '''
    Day
    '''

    M = 'M'
    '''
    Month
    '''

    Y = 'Y'
    '''
    Year
    '''

    h = 'h'
    '''
    Hour
    '''

    m = 'm'
    '''
    Minute
    '''

    s = 's'
    '''
    Second
    '''

class TimePeriodUnit(Enum):
    '''
    Units in which reporting frequency is specified.
    '''

    days = 'days'
    '''
    '''

    hours = 'hours'
    '''
    '''

    minutes = 'minutes'
    '''
    '''

    months = 'months'
    '''
    '''

    seconds = 'seconds'
    '''
    '''

    weeks = 'weeks'
    '''
    '''

class TransactionKind(Enum):
    '''
    Kind of transaction.
    '''

    accountPayment = 'accountPayment'
    '''
    Payment against a specified account.
    '''

    auxiliaryChargePayment = 'auxiliaryChargePayment'
    '''
    Payment against a specified auxiliary account.
    '''

    diversePayment = 'diversePayment'
    '''
    Payment against an item other than an account.
    '''

    meterConfigurationToken = 'meterConfigurationToken'
    '''
    Issue of token that will alter the meter configuration.
    '''

    other = 'other'
    '''
    Other kind of transaction.
    '''

    serviceChargePayment = 'serviceChargePayment'
    '''
    Payment for a service.
    '''

    taxChargePayment = 'taxChargePayment'
    '''
    Payment for a tax.
    '''

    tokenCancellation = 'tokenCancellation'
    '''
    Cancellation of a previously issued token.
    '''

    tokenExchange = 'tokenExchange'
    '''
    Exchange of a previously issued token for a new token.
    '''

    tokenFreeIssue = 'tokenFreeIssue'
    '''
    Issue of a free credit token where the donor is the supplier.
    '''

    tokenGrant = 'tokenGrant'
    '''
    Issue of a free credit token where the donor is a 3rd party.
    '''

    tokenSalePayment = 'tokenSalePayment'
    '''
    Payment for a credit token sale to a customer.
    '''

    transactionReversal = 'transactionReversal'
    '''
    Reversal of a previous transaction.
    '''

class TransformerApplicationKind(Enum):
    '''
    Classifications of network roles in which transformers can be deployed.
    The classifications are intended to reflect both criticality of transformer
    in network operations and typical usage experienced by transformer.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood (PAB 2016/01/09).
    '''

    distribution = 'distribution'
    '''
    Transformer between one distribution voltage level and another distribution
    voltage level.
    '''

    generatorStepUp = 'generatorStepUp'
    '''
    Transformer is generator step-up transformer.
    '''

    transmissionBusToBus = 'transmissionBusToBus'
    '''
    Transformer between bus at one transmission voltage level and a bus at
    another transmission voltage level.
    '''

    transmissionBusToDistribution = 'transmissionBusToDistribution'
    '''
    Transformer between bus at transmission voltage level and bus at distribution
    voltage level.
    '''

class TransformerControlMode(Enum):
    '''
    Control modes for a transformer.
    '''

    reactive = 'reactive'
    '''
    Reactive power flow control.
    '''

    volt = 'volt'
    '''
    Voltage control.
    '''

class TransformerFailureReasonKind(Enum):
    '''
    Reason for transformer failure.
    Note: This enumeration provides essential information to asset health analytics.
    The existing list is a starting point and is anticipated to be fleshed
    out further as requirements are better understood. (PAB 2016/01/09).
    '''

    bushingFailure = 'bushingFailure'
    '''
    Bushing-caused failure.
    '''

    lossOfOil = 'lossOfOil'
    '''
    Loss-of-oil-caused faliure.
    '''

    oilRelatedFailure = 'oilRelatedFailure'
    '''
    Oil-related failure.
    '''

    poorOilQuality = 'poorOilQuality'
    '''
    Oil quality-related failure.
    '''

class TransmissionModeKind(Enum):
    '''
    Transmission mode for end device display controls, applicable to premises
    area network (PAN) devices.
    '''

    anonymous = 'anonymous'
    '''
    Message transmission mode whereby messages or commands are broadcast to
    unspecified devices listening for such communications.
    '''

    both = 'both'
    '''
    Message transmission mode whereby messages or commands are sent by both
    'normal' and 'anonymous' methods.
    '''

    normal = 'normal'
    '''
    Message transmission mode whereby messages or commands are sent to specific
    devices.
    '''

class TroubleCallKind(Enum):
    '''
    Describes the type of Trouble, based on customer input.
    '''

    lineDown = 'lineDown'
    '''
    The customer is reporting a line down
    '''

    powerOut = 'powerOut'
    '''
    The customer is reporting an outage.
    '''

class TroubleReportingKind(Enum):
    '''
    Kind of trouble reporting.
    '''

    app = 'app'
    '''
    '''

    call = 'call'
    '''
    Trouble call received by customer service representative.
    '''

    email = 'email'
    '''
    Trouble reported by email.
    '''

    ivr = 'ivr'
    '''
    Trouble reported through interactive voice response system.
    '''

    letter = 'letter'
    '''
    Trouble reported by letter.
    '''

    other = 'other'
    '''
    Trouble reported by other means.
    '''

    sms = 'sms'
    '''
    '''

    web = 'web'
    '''
    '''

class TroubleSymptomsExtentKind(Enum):
    '''
    The enumerated values that define the extent of the problem.
    '''

    entireNeighbourhood = 'entireNeighbourhood'
    '''
    '''

    neighbour = 'neighbour'
    '''
    '''

    ok = 'ok'
    '''
    '''

    other = 'other'
    '''
    '''

    singleCustomer = 'singleCustomer'
    '''
    '''

class TroubleSymptomsLightKind(Enum):
    '''
    The list of values that define the light problem.
    '''

    allOut = 'allOut'
    '''
    '''

    dim = 'dim'
    '''
    '''

    flickering = 'flickering'
    '''
    '''

    ok = 'ok'
    '''
    '''

    other = 'other'
    '''
    '''

    partOut = 'partOut'
    '''
    '''

class TroubleSymptomsPoleKind(Enum):
    '''
    The list of values that define the Pole problem.
    '''

    down = 'down'
    '''
    '''

    hit = 'hit'
    '''
    '''

    leaning = 'leaning'
    '''
    '''

    ok = 'ok'
    '''
    '''

    other = 'other'
    '''
    '''

class TroubleSymptomsTransformerKind(Enum):
    '''
    The list of items that define the transformer problem.
    '''

    burning = 'burning'
    '''
    '''

    ok = 'ok'
    '''
    '''

    other = 'other'
    '''
    '''

class TroubleSymptomsTree_Kind(Enum):
    '''
    The list of items that define the tree problem.
    '''

    limbOnService = 'limbOnService'
    '''
    '''

    limbOnWire = 'limbOnWire'
    '''
    '''

    ok = 'ok'
    '''
    '''

    other = 'other'
    '''
    '''

class TroubleSymptomsWireKind(Enum):
    '''
    The list of items that define the wire problem.
    '''

    digIn = 'digIn'
    '''
    '''

    ok = 'ok'
    '''
    '''

    other = 'other'
    '''
    '''

    serviceDown = 'serviceDown'
    '''
    '''

    wireDown = 'wireDown'
    '''
    '''

    wireburning = 'wireburning'
    '''
    '''

class UncertaintyKind(Enum):
    '''
    The type of uncertainty for a reading.
    '''

    estimated = 'estimated'
    '''
    The value is estimated.
    '''

    interpolated = 'interpolated'
    '''
    The value is interpolated.
    '''

    standard = 'standard'
    '''
    The value has standard uncertainty consistent with National Weather Service
    practises given the instrument and manner of observation.
    '''

    unknown = 'unknown'
    '''
    The process of value calculation or measurement is unknown.
    '''

class UnitMultiplier(Enum):
    '''
    The unit multipliers defined for the CIM. When applied to unit symbols,
    the unit symbol is treated as a derived unit. Regardless of the contents
    of the unit symbol text, the unit symbol shall be treated as if it were
    a single-character unit symbol. Unit symbols should not contain multipliers,
    and it should be left to the multiplier to define the multiple for an entire
    data type.
    For example, if a unit symbol is "m2Pers" and the multiplier is "k", then
    the value is k(m**2/s), and the multiplier applies to the entire final
    value, not to any individual part of the value. This can be conceptualized
    by substituting a derived unit symbol for the unit type. If one imagines
    that the symbol "Þ" represents the derived unit "m2Pers", then applying
    the multiplier "k" can be conceptualized simply as "kÞ".
    For example, the SI unit for mass is "kg" and not "g". If the unit symbol
    is defined as "kg", then the multiplier is applied to "kg" as a whole and
    does not replace the "k" in front of the "g". In this case, the multiplier
    of "m" would be used with the unit symbol of "kg" to represent one gram.
    As a text string, this violates the instructions in IEC 80000-1. However,
    because the unit symbol in CIM is treated as a derived unit instead of
    as an SI unit, it makes more sense to conceptualize the "kg" as if it were
    replaced by one of the proposed replacements for the SI mass symbol. If
    one imagines that the "kg" were replaced by a symbol "Þ", then it is easier
    to conceptualize the multiplier "m" as creating the proper unit "mÞ", and
    not the forbidden unit "mkg".
    '''

    E = 'E'
    '''
    Exa 10**18.
    '''

    G = 'G'
    '''
    Giga 10**9.
    '''

    M = 'M'
    '''
    Mega 10**6.
    '''

    P = 'P'
    '''
    Peta 10**15.
    '''

    T = 'T'
    '''
    Tera 10**12.
    '''

    Y = 'Y'
    '''
    Yotta 10**24.
    '''

    Z = 'Z'
    '''
    Zetta 10**21.
    '''

    a = 'a'
    '''
    Atto 10**-18.
    '''

    c = 'c'
    '''
    Centi 10**-2.
    '''

    d = 'd'
    '''
    Deci 10**-1.
    '''

    da = 'da'
    '''
    Deca 10**1.
    '''

    f = 'f'
    '''
    Femto 10**-15.
    '''

    h = 'h'
    '''
    Hecto 10**2.
    '''

    k = 'k'
    '''
    Kilo 10**3.
    '''

    m = 'm'
    '''
    Milli 10**-3.
    '''

    micro = 'micro'
    '''
    Micro 10**-6.
    '''

    n = 'n'
    '''
    Nano 10**-9.
    '''

    none = 'none'
    '''
    No multiplier or equivalently multiply by 1.
    '''

    p = 'p'
    '''
    Pico 10**-12.
    '''

    y = 'y'
    '''
    Yocto 10**-24.
    '''

    z = 'z'
    '''
    Zepto 10**-21.
    '''

class UnitSymbol(Enum):
    '''
    The derived units defined for usage in the CIM. In some cases, the derived
    unit is equal to an SI unit. Whenever possible, the standard derived symbol
    is used instead of the formula for the derived unit. For example, the unit
    symbol Farad is defined as "F" instead of "CPerV". In cases where a standard
    symbol does not exist for a derived unit, the formula for the unit is used
    as the unit symbol. For example, density does not have a standard symbol
    and so it is represented as "kgPerm3". With the exception of the "kg",
    which is an SI unit, the unit symbols do not contain multipliers and therefore
    represent the base derived unit to which a multiplier can be applied as
    a whole.
    Every unit symbol is treated as an unparseable text as if it were a single-letter
    symbol. The meaning of each unit symbol is defined by the accompanying
    descriptive text and not by the text contents of the unit symbol.
    To allow the widest possible range of serializations without requiring
    special character handling, several substitutions are made which deviate
    from the format described in IEC 80000-1. The division symbol "/" is replaced
    by the letters "Per". Exponents are written in plain text after the unit
    as "m3" instead of being formatted as "m" with a superscript of 3 or introducing
    a symbol as in "m^3". The degree symbol "°" is replaced with the letters
    "deg". Any clarification of the meaning for a substitution is included
    in the description for the unit symbol.
    Non-SI units are included in list of unit symbols to allow sources of data
    to be correctly labelled with their non-SI units (for example, a GPS sensor
    that is reporting numbers that represent feet instead of meters). This
    allows software to use the unit symbol information correctly convert and
    scale the raw data of those sources into SI-based units.
    The integer values are used for harmonization with IEC 61850.
    '''

    A = 'A'
    '''
    Current in amperes.
    '''

    A2 = 'A2'
    '''
    Amperes squared (A²).
    '''

    A2h = 'A2h'
    '''
    Ampere-squared hour, ampere-squared hour.
    '''

    A2s = 'A2s'
    '''
    Ampere squared time in square amperes (A²s).
    '''

    APerA = 'APerA'
    '''
    Current, ratio of amperages. Note: Users may need to supply a prefix such
    as ‘m’ to show rates such as ‘mA/A’.
    '''

    APerm = 'APerm'
    '''
    A/m, magnetic field strength, amperes per metre.
    '''

    Ah = 'Ah'
    '''
    Ampere-hours, ampere-hours.
    '''

    As = 'As'
    '''
    Ampere seconds (A·s).
    '''

    Bq = 'Bq'
    '''
    Radioactivity in becquerels (1/s).
    '''

    Btu = 'Btu'
    '''
    Energy, British Thermal Units.
    '''

    C = 'C'
    '''
    Electric charge in coulombs (A·s).
    '''

    CPerkg = 'CPerkg'
    '''
    Exposure (x rays), coulombs per kilogram.
    '''

    CPerm2 = 'CPerm2'
    '''
    Surface charge density, coulombs per square metre.
    '''

    CPerm3 = 'CPerm3'
    '''
    Electric charge density, coulombs per cubic metre.
    '''

    F = 'F'
    '''
    Electric capacitance in farads (C/V).
    '''

    FPerm = 'FPerm'
    '''
    Permittivity, farads per metre.
    '''

    G = 'G'
    '''
    Magnetic flux density, gausses (1 G = 10-4 T).
    '''

    Gy = 'Gy'
    '''
    Absorbed dose in grays (J/kg).
    '''

    GyPers = 'GyPers'
    '''
    Absorbed dose rate, grays per second.
    '''

    H = 'H'
    '''
    Electric inductance in henrys (Wb/A).
    '''

    HPerm = 'HPerm'
    '''
    Permeability, henrys per metre.
    '''

    Hz = 'Hz'
    '''
    Frequency in hertz (1/s).
    '''

    HzPerHz = 'HzPerHz'
    '''
    Frequency, rate of frequency change. Note: Users may need to supply a prefix
    such as ‘m’ to show rates such as ‘mHz/Hz’.
    '''

    HzPers = 'HzPers'
    '''
    Rate of change of frequency in hertz per second.
    '''

    J = 'J'
    '''
    Energy in joules (N·m = C·V = W·s).
    '''

    JPerK = 'JPerK'
    '''
    Heat capacity in joules/kelvin.
    '''

    JPerkg = 'JPerkg'
    '''
    Specific energy, Joules / kg.
    '''

    JPerkgK = 'JPerkgK'
    '''
    Specific heat capacity, specific entropy, joules per kilogram Kelvin.
    '''

    JPerm2 = 'JPerm2'
    '''
    Insulation energy density, joules per square metre or watt second per square
    metre.
    '''

    JPerm3 = 'JPerm3'
    '''
    Energy density, joules per cubic metre.
    '''

    JPermol = 'JPermol'
    '''
    Molar energy, joules per mole.
    '''

    JPermolK = 'JPermolK'
    '''
    Molar entropy, molar heat capacity, joules per mole kelvin.
    '''

    JPers = 'JPers'
    '''
    Energy rate in joules per second (J/s).
    '''

    K = 'K'
    '''
    Temperature in kelvins.
    '''

    KPers = 'KPers'
    '''
    Temperature change rate in kelvins per second.
    '''

    M = 'M'
    '''
    Length, nautical miles (1 M = 1852 m).
    '''

    Mx = 'Mx'
    '''
    Magnetic flux, maxwells (1 Mx = 10-8 Wb).
    '''

    N = 'N'
    '''
    Force in newtons (kg·m/s²).
    '''

    NPerm = 'NPerm'
    '''
    Surface tension, newton per metre.
    '''

    Nm = 'Nm'
    '''
    Moment of force, newton metres.
    '''

    Oe = 'Oe'
    '''
    Magnetic field in oersteds, (1 Oe = (103/4p) A/m).
    '''

    Pa = 'Pa'
    '''
    Pressure in pascals (N/m²). Note: the absolute or relative measurement
    of pressure is implied with this entry. See below for more explicit forms.
    '''

    PaPers = 'PaPers'
    '''
    Pressure change rate in pascals per second.
    '''

    Pas = 'Pas'
    '''
    Dynamic viscosity, pascal seconds.
    '''

    Q = 'Q'
    '''
    Quantity power, Q.
    '''

    Qh = 'Qh'
    '''
    Quantity energy, Qh.
    '''

    S = 'S'
    '''
    Conductance in siemens.
    '''

    SPerm = 'SPerm'
    '''
    Conductance per length (F/m).
    '''

    Sv = 'Sv'
    '''
    Dose equivalent in sieverts (J/kg).
    '''

    T = 'T'
    '''
    Magnetic flux density in teslas (Wb/m2).
    '''

    V = 'V'
    '''
    Electric potential in volts (W/A).
    '''

    V2 = 'V2'
    '''
    Volt squared (W²/A²).
    '''

    V2h = 'V2h'
    '''
    Volt-squared hour, volt-squared-hours.
    '''

    VA = 'VA'
    '''
    Apparent power in volt amperes. See also real power and reactive power.
    '''

    VAh = 'VAh'
    '''
    Apparent energy in volt ampere hours.
    '''

    VAr = 'VAr'
    '''
    Reactive power in volt amperes reactive. The “reactive” or “imaginary”
    component of electrical power (VIsin(phi)). (See also real power and apparent
    power).
    Note: Different meter designs use different methods to arrive at their
    results. Some meters may compute reactive power as an arithmetic value,
    while others compute the value vectorially. The data consumer should determine
    the method in use and the suitability of the measurement for the intended
    purpose.
    '''

    VArh = 'VArh'
    '''
    Reactive energy in volt ampere reactive hours.
    '''

    VPerHz = 'VPerHz'
    '''
    Magnetic flux in volt per hertz.
    '''

    VPerV = 'VPerV'
    '''
    Voltage, ratio of voltages. Note: Users may need to supply a prefix such
    as ‘m’ to show rates such as ‘mV/V’.
    '''

    VPerVA = 'VPerVA'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between IEC
    meters and EEI (ANSI) meters. It is assumed that the data consumers understand
    the type of meter being used and agree on the sign convention in use at
    any given utility.
    '''

    VPerVAr = 'VPerVAr'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between IEC
    meters and EEI (ANSI) meters. It is assumed that the data consumers understand
    the type of meter being used and agree on the sign convention in use at
    any given utility.
    '''

    VPerm = 'VPerm'
    '''
    Electric field strength, volts per metre.
    '''

    Vh = 'Vh'
    '''
    Volt-hour, Volt hours.
    '''

    Vs = 'Vs'
    '''
    Volt seconds (Ws/A).
    '''

    W = 'W'
    '''
    Real power in watts (J/s). Electrical power may have real and reactive
    components. The real portion of electrical power (I&#178;R or VIcos(phi)),
    is expressed in Watts. See also apparent power and reactive power.
    '''

    WPerA = 'WPerA'
    '''
    Active power per current flow, watts per Ampere.
    '''

    WPerW = 'WPerW'
    '''
    Signal Strength, ratio of power. Note: Users may need to supply a prefix
    such as ‘m’ to show rates such as ‘mW/W’.
    '''

    WPerm2 = 'WPerm2'
    '''
    Heat flux density, irradiance, watts per square metre.
    '''

    WPerm2sr = 'WPerm2sr'
    '''
    Radiance, watts per square metre steradian.
    '''

    WPermK = 'WPermK'
    '''
    Thermal conductivity in watt/metres kelvin.
    '''

    WPers = 'WPers'
    '''
    Ramp rate in watts per second.
    '''

    WPersr = 'WPersr'
    '''
    Radiant intensity, watts per steradian.
    '''

    Wb = 'Wb'
    '''
    Magnetic flux in webers (V·s).
    '''

    Wh = 'Wh'
    '''
    Real energy in watt hours.
    '''

    anglemin = 'anglemin'
    '''
    Plane angle, minutes.
    '''

    anglesec = 'anglesec'
    '''
    Plane angle, seconds.
    '''

    bar = 'bar'
    '''
    Pressure in bars, (1 bar = 100 kPa).
    '''

    cd = 'cd'
    '''
    Luminous intensity in candelas.
    '''

    charPers = 'charPers'
    '''
    Data rate (baud) in characters per second.
    '''

    character = 'character'
    '''
    Number of characters.
    '''

    cosPhi = 'cosPhi'
    '''
    Power factor, dimensionless.
    Note 1: This definition of power factor only holds for balanced systems.
    See the alternative definition under code 153.
    Note 2 : Beware of differing sign conventions in use between the IEC and
    EEI. It is assumed that the data consumer understands the type of meter
    in use and the sign convention in use by the utility.
    '''

    count = 'count'
    '''
    Amount of substance, Counter value.
    '''

    d = 'd'
    '''
    Time in days, day = 24 h = 86400 s.
    '''

    dB = 'dB'
    '''
    Sound pressure level in decibels. Note: multiplier “d” is included in this
    unit symbol for compatibility with IEC 61850-7-3.
    '''

    dBm = 'dBm'
    '''
    Power level (logarithmic ratio of signal strength , Bel-mW), normalized
    to 1mW. Note: multiplier “d” is included in this unit symbol for compatibility
    with IEC 61850-7-3.
    '''

    deg = 'deg'
    '''
    Plane angle in degrees.
    '''

    degC = 'degC'
    '''
    Relative temperature in degrees Celsius.
    In the SI unit system the symbol is °C. Electric charge is measured in
    coulomb that has the unit symbol C. To distinguish degree Celsius from
    coulomb the symbol used in the UML is degC. The reason for not using °C
    is that the special character ° is difficult to manage in software.
    '''

    ft3 = 'ft3'
    '''
    Volume, cubic feet.
    '''

    gPerg = 'gPerg'
    '''
    Concentration, The ratio of the mass of a solute divided by the mass of
    the solution. Note: Users may need use a prefix such a ‘µ’ to express a
    quantity such as ‘µg/g’.
    '''

    gal = 'gal'
    '''
    Volume in gallons, US gallon (1 gal = 231 in3 = 128 fl ounce).
    '''

    h = 'h'
    '''
    Time in hours, hour = 60 min = 3600 s.
    '''

    ha = 'ha'
    '''
    Area, hectares.
    '''

    kat = 'kat'
    '''
    Catalytic activity, katal = mol / s.
    '''

    katPerm3 = 'katPerm3'
    '''
    Catalytic activity concentration, katals per cubic metre.
    '''

    kg = 'kg'
    '''
    Mass in kilograms. Note: multiplier “k” is included in this unit symbol
    for compatibility with IEC 61850-7-3.
    '''

    kgPerJ = 'kgPerJ'
    '''
    Weight per energy in kilograms per joule (kg/J). Note: multiplier “k” is
    included in this unit symbol for compatibility with IEC 61850-7-3.
    '''

    kgPerm3 = 'kgPerm3'
    '''
    Density in kilogram/cubic metres (kg/m³). Note: multiplier “k” is included
    in this unit symbol for compatibility with IEC 61850-7-3.
    '''

    kgm = 'kgm'
    '''
    Moment of mass in kilogram metres (kg·m) (first moment of mass). Note:
    multiplier “k” is included in this unit symbol for compatibility with IEC
    61850-7-3.
    '''

    kgm2 = 'kgm2'
    '''
    Moment of mass in kilogram square metres (kg·m²) (Second moment of mass,
    commonly called the moment of inertia). Note: multiplier “k” is included
    in this unit symbol for compatibility with IEC 61850-7-3.
    '''

    kn = 'kn'
    '''
    Speed, knots (1 kn = 1852/3600) m/s.
    '''

    l = 'l'
    '''
    Volume in litres, litre = dm3 = m3/1000.
    '''

    lPerh = 'lPerh'
    '''
    Volumetric flow rate, litres per hour.
    '''

    lPerl = 'lPerl'
    '''
    Concentration, The ratio of the volume of a solute divided by the volume
    of the solution. Note: Users may need use a prefix such a ‘µ’ to express
    a quantity such as ‘µL/L’.
    '''

    lPers = 'lPers'
    '''
    Volumetric flow rate in litres per second.
    '''

    lm = 'lm'
    '''
    Luminous flux in lumens (cd·sr).
    '''

    lx = 'lx'
    '''
    Illuminance in lux (lm/m²).
    '''

    m = 'm'
    '''
    Length in metres.
    '''

    m2 = 'm2'
    '''
    Area in square metres (m²).
    '''

    m2Pers = 'm2Pers'
    '''
    Viscosity in square metres / second (m²/s).
    '''

    m3 = 'm3'
    '''
    Volume in cubic metres (m³).
    '''

    m3Compensated = 'm3Compensated'
    '''
    Volume, cubic metres, with the value compensated for weather effects.
    '''

    m3Perh = 'm3Perh'
    '''
    Volumetric flow rate, cubic metres per hour.
    '''

    m3Perkg = 'm3Perkg'
    '''
    Specific volume, cubic metres per kilogram, v.
    '''

    m3Pers = 'm3Pers'
    '''
    Volumetric flow rate in cubic metres per second (m³/s).
    '''

    m3Uncompensated = 'm3Uncompensated'
    '''
    Volume, cubic metres, with the value uncompensated for weather effects.
    '''

    mPerm3 = 'mPerm3'
    '''
    Fuel efficiency in metres per cubic metres (m/m³).
    '''

    mPers = 'mPers'
    '''
    Velocity in metres per second (m/s).
    '''

    mPers2 = 'mPers2'
    '''
    Acceleration in metres per second squared (m/s²).
    '''

    min = 'min'
    '''
    Time in minutes, minute = 60 s.
    '''

    mmHg = 'mmHg'
    '''
    Pressure, millimetres of mercury (1 mmHg is approximately 133.3 Pa).
    '''

    mol = 'mol'
    '''
    Amount of substance in moles.
    '''

    molPerkg = 'molPerkg'
    '''
    Concentration, Molality, the amount of solute in moles and the amount of
    solvent in kilograms.
    '''

    molPerm3 = 'molPerm3'
    '''
    Concentration, The amount of substance concentration, (c), the amount of
    solvent in moles divided by the volume of solution in m³.
    '''

    molPermol = 'molPermol'
    '''
    Concentration, Molar fraction, the ratio of the molar amount of a solute
    divided by the molar amount of the solution.
    '''

    none = 'none'
    '''
    Dimension less quantity, e.g. count, per unit, etc.
    '''

    ohm = 'ohm'
    '''
    Electric resistance in ohms (V/A).
    '''

    ohmPerm = 'ohmPerm'
    '''
    Electric resistance per length in ohms per metre ((V/A)/m).
    '''

    ohmm = 'ohmm'
    '''
    Resistivity, ohm metres, (rho).
    '''

    onePerHz = 'onePerHz'
    '''
    Reciprocal of frequency (1/Hz).
    '''

    onePerm = 'onePerm'
    '''
    Wavenumber, reciprocal metres, (1/m).
    '''

    ppm = 'ppm'
    '''
    Concentration in parts per million.
    '''

    rad = 'rad'
    '''
    Plane angle in radians (m/m).
    '''

    radPers = 'radPers'
    '''
    Angular velocity in radians per second (rad/s).
    '''

    radPers2 = 'radPers2'
    '''
    Angular acceleration, radians per second squared.
    '''

    rev = 'rev'
    '''
    Amount of rotation, revolutions.
    '''

    rotPers = 'rotPers'
    '''
    Rotations per second (1/s). See also Hz (1/s).
    '''

    s = 's'
    '''
    Time in seconds.
    '''

    sPers = 'sPers'
    '''
    Time, Ratio of time. Note: Users may need to supply a prefix such as ‘&#181;’
    to show rates such as ‘&#181;s/s’.
    '''

    sr = 'sr'
    '''
    Solid angle in steradians (m2/m2).
    '''

    therm = 'therm'
    '''
    Energy, therms.
    '''

    tonne = 'tonne'
    '''
    Mass in tons, “tonne” or “metric ton” (1000 kg = 1 Mg).
    '''

class UsagePointConnectedKind(Enum):
    '''
    State of the usage point with respect to connection to the network.
    '''

    connected = 'connected'
    '''
    The usage point is connected to the network and able to receive or send
    the applicable commodity (electricity, gas, water, etc.).
    '''

    logicallyDisconnected = 'logicallyDisconnected'
    '''
    The usage point has been disconnected through operation of a disconnect
    function within the meter present at the usage point. The usage point is
    unable to receive or send the applicable commodity (electricity, gas, water,
    etc.) A logical disconnect can often be achieved without utilising a field
    crew.
    '''

    physicallyDisconnected = 'physicallyDisconnected'
    '''
    The usage point has been disconnected from the network at a point upstream
    of the meter. The usage point is unable to receive or send the applicable
    commodity (electricity, gas, water, etc.). A physical disconnect is often
    achieved by utilising a field crew.
    '''

class Validity(Enum):
    '''
    Validity for MeasurementValue.
    '''

    GOOD = 'GOOD'
    '''
    The value is marked good if no abnormal condition of the acquisition function
    or the information source is detected.
    '''

    INVALID = 'INVALID'
    '''
    The value is marked invalid when a supervision function recognises abnormal
    conditions of the acquisition function or the information source (missing
    or non-operating updating devices). The value is not defined under this
    condition. The mark invalid is used to indicate to the client that the
    value may be incorrect and shall not be used.
    '''

    QUESTIONABLE = 'QUESTIONABLE'
    '''
    The value is marked questionable if a supervision function detects an abnormal
    behaviour, however the value could still be valid. The client is responsible
    for determining whether or not values marked "questionable" should be used.
    '''

class VsPpccControlKind(Enum):
    '''
    Types applicable to the control of real power and/or DC voltage by voltage
    source converter.
    '''

    pPcc = 'pPcc'
    '''
    Control is real power at point of common coupling. The target value is
    provided by ACDCConverter.targetPpcc.
    '''

    pPccAndUdcDroop = 'pPccAndUdcDroop'
    '''
    Control is active power at point of common coupling and local DC voltage,
    with the droop. Target values are provided by ACDCConverter.targetPpcc,
    ACDCConverter.targetUdc and VsConverter.droop.
    '''

    pPccAndUdcDroopPilot = 'pPccAndUdcDroopPilot'
    '''
    Control is active power at point of common coupling and the pilot DC voltage,
    with the droop. The mode is used for Multi Terminal High Voltage DC (MTDC)
    systems where multiple HVDC Substations are connected to the HVDC transmission
    lines. The pilot voltage is then used to coordinate the control the DC
    voltage across the HVDC substations. Targets are provided by ACDCConverter.targetPpcc,
    ACDCConverter.targetUdc and VsConverter.droop.
    '''

    pPccAndUdcDroopWithCompensation = 'pPccAndUdcDroopWithCompensation'
    '''
    Control is active power at point of common coupling and compensated DC
    voltage, with the droop. Compensation factor is the resistance, as an approximation
    of the DC voltage of a common (real or virtual) node in the DC network.
    Targets are provided by ACDCConverter.targetPpcc, ACDCConverter.targetUdc,
    VsConverter.droop and VsConverter.droopCompensation.
    '''

    phasePcc = 'phasePcc'
    '''
    Control is phase at point of common coupling. Target is provided by VsConverter.targetPhasePcc.
    '''

    udc = 'udc'
    '''
    Control is DC voltage with target value provided by ACDCConverter.targetUdc.
    '''

class VsQpccControlKind(Enum):
    '''
    Kind of reactive power control at point of common coupling for a voltage
    source converter.
    '''

    powerFactorPcc = 'powerFactorPcc'
    '''
    Control is power factor at point of common coupling. Target is provided
    by VsConverter.targetPowerFactorPcc.
    '''

    pulseWidthModulation = 'pulseWidthModulation'
    '''
    No explicit control. Pulse-modulation factor is directly set in magnitude
    (VsConverter.targetPWMfactor) and phase (VsConverter.targetPhasePcc).
    '''

    reactivePcc = 'reactivePcc'
    '''
    Control is reactive power at point of common coupling. Target is provided
    by VsConverter.targetQpcc.
    '''

    voltagePcc = 'voltagePcc'
    '''
    Control is voltage at point of common coupling. Target is provided by VsConverter.targetUpcc.
    '''

class WeatherCodeKind(Enum):
    '''
    Kinds of weather conditions.
    '''

    blowingDust = 'blowingDust'
    '''
    "BD" weather code ("Blowing Dust").
    '''

    blowingSand = 'blowingSand'
    '''
    "BN" weather code ("Blowing Sand").
    '''

    blowingSnow = 'blowingSnow'
    '''
    "BS" weather code ("Blowing Snow").
    '''

    cloudy = 'cloudy'
    '''
    '''

    drizzle = 'drizzle'
    '''
    "L" weather code ("Drizzle").
    '''

    fog = 'fog'
    '''
    "F weather code ("Fog
    '''

    freezingDrizzle = 'freezingDrizzle'
    '''
    "ZL" weather code ("Freezing Drizzle").
    '''

    freezingRain = 'freezingRain'
    '''
    "ZR" weather code ("Freezing Rain").
    '''

    freezingSpray = 'freezingSpray'
    '''
    "ZF" weather code ("Freezing Spray").
    '''

    frost = 'frost'
    '''
    "FR" weather code ("Frost").
    '''

    hail = 'hail'
    '''
    "A" weather code ("Hail").
    '''

    haze = 'haze'
    '''
    "H" weather code ("Haze").
    '''

    iceCrystals = 'iceCrystals'
    '''
    "IC" weather code ("Ice Crystals").
    '''

    iceFog = 'iceFog'
    '''
    "IF" weather code ("Ice Fog").
    '''

    mist = 'mist'
    '''
    "BR" weather code ("Mist"),
    '''

    rain = 'rain'
    '''
    "R" weather code ("Rain").
    '''

    rainShowers = 'rainShowers'
    '''
    "RW" weather code ("Rain Showers").
    '''

    rainSnowMix = 'rainSnowMix'
    '''
    "RS" weather code ("Rain/Snow Mix").
    '''

    sleet = 'sleet'
    '''
    "IP" weather code ("Ice Pellets/Sleet").
    '''

    smoke = 'smoke'
    '''
    "K" weather code ("Smoke").
    '''

    snow = 'snow'
    '''
    "S" weather code ("Snow").
    '''

    snowShowers = 'snowShowers'
    '''
    "SW" weather code ("Snow Showers").
    '''

    snowSleetMix = 'snowSleetMix'
    '''
    "SI" weather code ("Snow/Sleet Mix").
    '''

    sunny = 'sunny'
    '''
    '''

    thunderStorms = 'thunderStorms'
    '''
    "T" weather code ("Thunder Storms").
    '''

    volcanicAsh = 'volcanicAsh'
    '''
    "VA" weather code ("Volcanic Ash").
    '''

    waterSpouts = 'waterSpouts'
    '''
    "WP" weather code ("Water Spouts")
    '''

    wintryMix = 'wintryMix'
    '''
    "WS" weather code ("Wintry Mix").
    '''

class WindGenUnitKind(Enum):
    '''
    Kind of wind generating unit.
    '''

    offshore = 'offshore'
    '''
    The wind generating unit is located offshore.
    '''

    onshore = 'onshore'
    '''
    The wind generating unit is located onshore.
    '''

class WindingConnection(Enum):
    '''
    Winding connection type.
    '''

    A = 'A'
    '''
    Autotransformer common winding.
    '''

    D = 'D'
    '''
    Delta.
    '''

    I = 'I'
    '''
    Independent winding, for single-phase connections.
    '''

    Y = 'Y'
    '''
    Wye.
    '''

    Yn = 'Yn'
    '''
    Wye, with neutral brought out for grounding.
    '''

    Z = 'Z'
    '''
    ZigZag.
    '''

    Zn = 'Zn'
    '''
    ZigZag, with neutral brought out for grounding.
    '''

class WireInsulationKind(Enum):
    '''
    Kind of wire insulation.
    '''

    asbestosAndVarnishedCambric = 'asbestosAndVarnishedCambric'
    '''
    Asbestos and varnished cambric wire insulation.
    '''

    beltedPilc = 'beltedPilc'
    '''
    Belted pilc wire insulation.
    '''

    butyl = 'butyl'
    '''
    Butyl wire insulation.
    '''

    crosslinkedPolyethylene = 'crosslinkedPolyethylene'
    '''
    Crosslinked polyethylene wire insulation.
    '''

    ethylenePropyleneRubber = 'ethylenePropyleneRubber'
    '''
    Ethylene propylene rubber wire insulation.
    '''

    highMolecularWeightPolyethylene = 'highMolecularWeightPolyethylene'
    '''
    High nolecular weight polyethylene wire insulation.
    '''

    highPressureFluidFilled = 'highPressureFluidFilled'
    '''
    High pressure fluid filled wire insulation.
    '''

    lowCapacitanceRubber = 'lowCapacitanceRubber'
    '''
    Low capacitance rubber wire insulation.
    '''

    oilPaper = 'oilPaper'
    '''
    Oil paper wire insulation.
    '''

    other = 'other'
    '''
    Other kind of wire insulation.
    '''

    ozoneResistantRubber = 'ozoneResistantRubber'
    '''
    Ozone resistant rubber wire insulation.
    '''

    rubber = 'rubber'
    '''
    Rubber wire insulation.
    '''

    siliconRubber = 'siliconRubber'
    '''
    Silicon rubber wire insulation.
    '''

    treeResistantHighMolecularWeightPolyethylene = 'treeResistantHighMolecularWeightPolyethylene'
    '''
    Tree resistant high molecular weight polyethylene wire insulation.
    '''

    treeRetardantCrosslinkedPolyethylene = 'treeRetardantCrosslinkedPolyethylene'
    '''
    Tree retardant crosslinked polyethylene wire insulation.
    '''

    unbeltedPilc = 'unbeltedPilc'
    '''
    Unbelted pilc wire insulation.
    '''

    varnishedCambricCloth = 'varnishedCambricCloth'
    '''
    Varnished cambric cloth wire insulation.
    '''

    varnishedDacronGlass = 'varnishedDacronGlass'
    '''
    Varnished dacron glass wire insulation.
    '''

class WireMaterialKind(Enum):
    '''
    Kind of wire material.
    '''

    aaac = 'aaac'
    '''
    Aluminum-alloy conductor steel reinforced.
    '''

    acsr = 'acsr'
    '''
    Aluminum conductor steel reinforced.
    '''

    aluminum = 'aluminum'
    '''
    Aluminum wire.
    '''

    aluminumAlloy = 'aluminumAlloy'
    '''
    Aluminum-alloy wire.
    '''

    aluminumAlloySteel = 'aluminumAlloySteel'
    '''
    Aluminum-alloy-steel wire.
    '''

    aluminumSteel = 'aluminumSteel'
    '''
    Aluminum-steel wire.
    '''

    copper = 'copper'
    '''
    Copper wire.
    '''

    other = 'other'
    '''
    Other wire material.
    '''

    steel = 'steel'
    '''
    Steel wire.
    '''

class WireUsageKind(Enum):
    '''
    Kind of wire usage.
    '''

    distribution = 'distribution'
    '''
    Wire is used in medium voltage network.
    '''

    other = 'other'
    '''
    Other kind of wire usage.
    '''

    secondary = 'secondary'
    '''
    Wire is used in low voltage circuit.
    '''

    transmission = 'transmission'
    '''
    Wire is used in extra-high voltage or high voltage network.
    '''

class WorkTaskKind(Enum):
    '''
    Kinds of work tasks.
    '''

    exchange = 'exchange'
    '''
    Work task deals with exchange of assets.
    '''

    install = 'install'
    '''
    Work task deals with installation of assets.
    '''

    investigate = 'investigate'
    '''
    Work task deals with investigation about assets.
    '''

    remove = 'remove'
    '''
    Work task deals with removal of assets.
    '''

class WorkTimeScheduleKind(Enum):
    '''
    Kind of work schedule.
    '''

    actual = 'actual'
    '''
    Actual work time schedule.
    '''

    earliest = 'earliest'
    '''
    Earliest work time schedule.
    '''

    estimate = 'estimate'
    '''
    Estimate work time schedule.
    '''

    immediate = 'immediate'
    '''
    ??.
    '''

    latest = 'latest'
    '''
    Latest work time schedule.
    '''

    request = 'request'
    '''
    Request work time schedule.
    '''

class YesNo(Enum):
    '''
    Used as a flag set to Yes or No.
    '''

    NO = 'NO'
    '''
    '''

    YES = 'YES'
    '''
    '''

@dataclass
class MonthDay():
    value: str = field(default=None)
    '''
    MonthDay format as "--mm-dd", which conforms with XSD data type gMonthDay.
    '''

@dataclass
class Susceptance():
    value: float = field(default=None)
    '''
    Imaginary part of admittance.
    '''

@dataclass
class Pressure():
    value: float = field(default=None)
    '''
    Pressure in pascals.
    '''

@dataclass
class Hours():
    value: float = field(default=None)
    '''
    Time specified in hours.
    '''

@dataclass
class Capacitance():
    value: float = field(default=None)
    '''
    Capacitive part of reactance (imaginary part of impedance), at rated frequency.
    '''

@dataclass
class Voltage():
    value: float = field(default=None)
    '''
    Electrical voltage, can be both AC and DC.
    '''

@dataclass
class CapacitancePerLength():
    value: float = field(default=None)
    '''
    Capacitance per unit of length.
    '''

@dataclass
class SusceptancePerLength():
    value: float = field(default=None)
    '''
    Imaginary part of admittance per unit of length.
    '''

@dataclass
class Frequency():
    value: float = field(default=None)
    '''
    Cycles per second.
    '''

@dataclass
class PU():
    value: float = field(default=None)
    '''
    Per Unit - a positive or negative value referred to a defined base. Values
    typically range from -10 to +10.
    '''

@dataclass
class Speed():
    value: float = field(default=None)
    '''
    Distance per unit of time.
    '''

@dataclass
class Minutes():
    value: float = field(default=None)
    '''
    Time in minutes.
    '''

@dataclass
class AngleDegrees():
    value: float = field(default=None)
    '''
    Measurement of angle in degrees.
    '''

@dataclass
class ActivePowerChangeRate():
    value: float = field(default=None)
    '''
    Rate of change of active power per time.
    '''

@dataclass
class RotationSpeed():
    value: float = field(default=None)
    '''
    Number of revolutions per second.
    '''

@dataclass
class RealEnergy():
    value: float = field(default=None)
    '''
    Real electrical energy.
    '''

@dataclass
class VolumeFlowRate():
    value: float = field(default=None)
    '''
    Volume per time.
    '''

@dataclass
class CostPerHeatUnit():
    value: float = field(default=None)
    '''
    Cost, in units of currency, per quantity of heat generated.
    '''

@dataclass
class Money():
    value: str = field(default=None)
    '''
    Amount of money.
    '''

@dataclass
class MagneticField():
    value: float = field(default=None)
    '''
    Magnetic field in nanotesla.
    '''

@dataclass
class Volume():
    value: float = field(default=None)
    '''
    Volume.
    '''

@dataclass
class CostPerEnergyUnit():
    value: float = field(default=None)
    '''
    Cost, in units of currency, per quantity of electrical energy generated.
    '''

@dataclass
class KiloActivePower():
    value: float = field(default=None)
    '''
    Active power in kilowatts.
    '''

@dataclass
class InductancePerLength():
    value: float = field(default=None)
    '''
    Inductance per unit of length.
    '''

@dataclass
class Displacement():
    value: float = field(default=None)
    '''
    Unit of displacement relative to a reference position, hence can be negative.
    '''

@dataclass
class ApparentPower():
    value: float = field(default=None)
    '''
    Product of the RMS value of the voltage and the RMS value of the current.
    '''

@dataclass
class CurrentFlow():
    value: float = field(default=None)
    '''
    Electrical current with sign convention: positive flow is out of the conducting
    equipment into the connectivity node. Can be both AC and DC.
    '''

@dataclass
class ReactivePower():
    value: float = field(default=None)
    '''
    Product of RMS value of the voltage and the RMS value of the quadrature
    component of the current.
    '''

@dataclass
class Temperature():
    value: float = field(default=None)
    '''
    Value of temperature in degrees Celsius.
    '''

@dataclass
class Seconds():
    value: float = field(default=None)
    '''
    Time, in seconds.
    '''

@dataclass
class Emission():
    value: float = field(default=None)
    '''
    Quantity of emission per fuel heat content.
    '''

@dataclass
class ActivePowerPerFrequency():
    value: float = field(default=None)
    '''
    Active power variation with frequency.
    '''

@dataclass
class Inductance():
    value: float = field(default=None)
    '''
    Inductive part of reactance (imaginary part of impedance), at rated frequency.
    '''

@dataclass
class VoltagePerReactivePower():
    value: float = field(default=None)
    '''
    Voltage variation with reactive power.
    '''

@dataclass
class WaterLevel():
    value: float = field(default=None)
    '''
    Reservoir water level referred to a given datum such as mean sea level.
    '''

@dataclass
class ActivePower():
    value: float = field(default=None)
    '''
    Product of RMS value of the voltage and the RMS value of the in-phase component
    of the current.
    '''

@dataclass
class Mass():
    value: float = field(default=None)
    '''
    Mass.
    '''

@dataclass
class ConductancePerLength():
    value: float = field(default=None)
    '''
    Real part of admittance per unit of length.
    '''

@dataclass
class Reactance():
    value: float = field(default=None)
    '''
    Reactance (imaginary part of impedance), at rated frequency.
    '''

@dataclass
class Conductance():
    value: float = field(default=None)
    '''
    Factor by which voltage must be multiplied to give corresponding power
    lost from a circuit. Real part of admittance.
    '''

@dataclass
class ReactancePerLength():
    value: float = field(default=None)
    '''
    Reactance (imaginary part of impedance) per unit of length, at rated frequency.
    '''

@dataclass
class Resistance():
    value: float = field(default=None)
    '''
    Resistance (real part of impedance).
    '''

@dataclass
class CostPerVolume():
    value: float = field(default=None)
    '''
    Cost per unit volume.
    '''

@dataclass
class CostRate():
    value: float = field(default=None)
    '''
    Cost, in units of currency, per elapsed time.
    '''

@dataclass
class Classification():
    value: int = field(default=None)
    '''
    Classification of level. Specify as 1..n, with 1 being the most detailed,
    highest priority, etc as described on the attribute using this data type.
    '''

@dataclass
class Bearing():
    value: float = field(default=None)
    '''
    The bearing in degrees (with 360 degrees being True North). Measured in
    degrees clockwise from True North. 0 degrees indicates no direction being
    given.
    '''

@dataclass
class ActivePowerPerCurrentFlow():
    value: float = field(default=None)
    '''
    Active power variation with current flow.
    '''

@dataclass
class Length():
    value: float = field(default=None)
    '''
    Unit of length. It shall be a positive value or zero.
    '''

@dataclass
class ParticulateDensity():
    value: float = field(default=None)
    '''
    Particulate density as kg/m<sup>3</sup>.
    '''

@dataclass
class ResistancePerLength():
    value: float = field(default=None)
    '''
    Resistance (real part of impedance) per unit of length.
    '''

@dataclass
class PerCent():
    value: float = field(default=None)
    '''
    Percentage on a defined base. For example, specify as 100 to indicate at
    the defined base.
    '''

@dataclass
class AngleRadians():
    value: float = field(default=None)
    '''
    Phase angle in radians.
    '''

@dataclass
class HeatRate():
    value: float = field(default=None)
    '''
    Heat generated, in energy per time unit of elapsed time.
    '''

@dataclass
class Impedance():
    value: float = field(default=None)
    '''
    Ratio of voltage to current.
    '''

@dataclass(repr=False)
class ASTMStandard(Identity):
    '''
    Standard published by ASTM (ASTM International).
    '''

@dataclass(repr=False)
class AcceptanceTest(Identity):
    '''
    Acceptance test for assets.
    '''

    dateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time the asset was last tested using the 'type' of test and yielding
    the current status in 'success' attribute.
    '''

    success: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if asset has passed acceptance test and may be placed in or is in
    service. It is set to false if asset is removed from service and is required
    to be tested again before being placed back in service, possibly in a new
    location. Since asset may go through multiple tests during its lifecycle,
    the date of each acceptance test may be recorded in 'Asset.ActivityRecord.status.dateTime'.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of test or group of tests that was conducted on 'dateTime'.
    '''

@dataclass(repr=False)
class AccountingUnit(Identity):
    '''
    Unit for accounting; use either 'energyUnit' or 'currencyUnit' to specify
    the unit for 'value'.
    '''

@dataclass(repr=False)
class CIGREStandard(Identity):
    '''
    Standard published by CIGRE (Council on Large Electric Systems).
    '''

@dataclass(repr=False)
class ControlledAppliance(Identity):
    '''
    Appliance controlled with a PAN device control.
    '''

    isElectricVehicle: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is an electric vehicle.
    '''

    isExteriorLighting: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is exterior lighting.
    '''

    isGenerationSystem: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is a generation system.
    '''

    isHvacCompressorOrFurnace: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is HVAC compressor or furnace.
    '''

    isInteriorLighting: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is interior lighting.
    '''

    isIrrigationPump: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is an irrigation pump.
    '''

    isManagedCommercialIndustrialLoad: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is managed commercial or industrial load.
    '''

    isPoolPumpSpaJacuzzi: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is a pool, pump, spa or jacuzzi.
    '''

    isSimpleMiscLoad: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is a simple miscellaneous load.
    '''

    isSmartAppliance: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is a smart appliance.
    '''

    isStripAndBaseboardHeater: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is a stip or baseboard heater.
    '''

    isWaterHeater: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the appliance is a water heater.
    '''

@dataclass(repr=False)
class DINStandard(Identity):
    '''
    Standard published by DIN (German Institute of Standards).
    '''

@dataclass(repr=False)
class DateInterval(Identity):
    '''
    Interval between two dates.
    '''

    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End date of this interval.
    '''

    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start date of this interval.
    '''

@dataclass(repr=False)
class DateTimeInterval(Identity):
    '''
    Interval between two date and time points, where the interval includes
    the start time but excludes end time.
    '''

    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End date and time of this interval. The end date and time where the interval
    is defined up to, but excluded.
    '''

    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start date and time of this interval. The start date and time is included
    in the defined interval.
    '''

@dataclass(repr=False)
class DecimalQuantity(Identity):
    '''
    Quantity with decimal value and associated unit or currency information.
    '''

    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value of this quantity.
    '''

    currency: Optional[ Currency ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Currency of this quantity.
    '''

    multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit multiplier of this quantity.
    '''

    unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit of this quantity.
    '''

@dataclass(repr=False)
class DeploymentDate(Identity):
    '''
    Dates for deployment events of an asset. May have multiple deployment type
    dates for this device and a compound type allows a query to return multiple
    dates.
    '''

    inServiceDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time asset most recently put in service.
    '''

    installedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time asset most recently installed.
    '''

    notYetInstalledDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time of asset deployment transition to not yet installed.
    '''

    outOfServiceDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time asset most recently taken out of service.
    '''

    removedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time asset most recently removed.
    '''

@dataclass(repr=False)
class DobleStandard(Identity):
    '''
    Standard published by Doble.
    '''

@dataclass(repr=False)
class EPAStandard(Identity):
    '''
    Standard published by EPA (United States Environmental Protection Agency).
    '''

@dataclass(repr=False)
class ElectronicAddress(Identity):
    '''
    Electronic address information.
    '''

    email1: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Primary email address.
    '''

    email2: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Alternate email address.
    '''

    lan: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Address on local area network.
    '''

    mac: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    MAC (Media Access Control) address.
    '''

    password: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Password needed to log in.
    '''

    radio: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Radio address.
    '''

    userID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    User ID needed to log in, which can be for an individual person, an organisation,
    a location, etc.
    '''

    web: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    World wide web address.
    '''

@dataclass(repr=False)
class EndDeviceCapability(Identity):
    '''
    Inherent capabilities of an end device (i.e., the functions it supports).
    '''

    autonomousDst: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if autonomous DST (daylight saving time) function is supported.
    '''

    communication: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if communication function is supported.
    '''

    connectDisconnect: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if connect and disconnect function is supported.
    '''

    demandResponse: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if demand response function is supported.
    '''

    electricMetering: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if electric metering function is supported.
    '''

    gasMetering: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if gas metering function is supported.
    '''

    metrology: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if metrology function is supported.
    '''

    onRequestRead: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if on request read function is supported.
    '''

    outageHistory: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if outage history function is supported.
    '''

    pressureCompensation: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if device performs pressure compensation for metered quantities.
    '''

    pricingInfo: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if pricing information is supported.
    '''

    pulseOutput: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if device produces pulse outputs.
    '''

    relaysProgramming: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if relays programming function is supported.
    '''

    reverseFlow: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if reverse flow function is supported.
    '''

    superCompressibilityCompensation: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if device performs super compressibility compensation for metered
    quantities.
    '''

    temperatureCompensation: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if device performs temperature compensation for metered quantities.
    '''

    textMessage: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if the displaying of text messages is supported.
    '''

    waterMetering: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if water metering function is supported.
    '''

@dataclass(repr=False)
class EndDeviceTiming(Identity):
    '''
    Timing for the control actions of end devices.
    '''

    durationIndefinite: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if 'duration' is indefinite.
    '''

    duration: Optional[ float | Minutes ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Duration of the end device control action or the business event that is
    the subject of the end device control.
    '''

    randomisation: Optional[ RandomisationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Kind of randomisation to be applied to the end device control actions to
    be executed.
    '''

    interval: Optional[DateTimeInterval] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start and end time of an interval during which end device control actions
    are to be executed.
    '''

@dataclass(repr=False)
class ExtensionItem(Identity):
    '''
    Specifies the extensions list items
    '''

    extName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    the name of the extension
    '''

    extType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The type of the extension
    '''

    extValue: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    the value of the extension
    '''

@dataclass(repr=False)
class ExtensionsList(Identity):
    '''
    Specifies the enumeration of the extension item
    '''

    extensionsItem: Optional[ExtensionItem] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    a compound type that defines the extension name, type and value
    '''

@dataclass(repr=False)
class FaultImpedance(Identity):
    '''
    Impedance description for the fault.
    '''

    rGround: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The resistance of the fault between phases and ground.
    '''

    rLineToLine: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The resistance of the fault between phases.
    '''

    xGround: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactance of the fault between phases and ground.
    '''

    xLineToLine: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The reactance of the fault between phases.
    '''

@dataclass(repr=False)
class FloatQuantity(Identity):
    '''
    Quantity with float value and associated unit information.
    '''

    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value of this quantity.
    '''

    multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit multiplier of this quantity.
    '''

    unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit of this quantity.
    '''

@dataclass(repr=False)
class IECStandard(Identity):
    '''
    Standard published by IEC (International Electrotechnical Commission).
    '''

@dataclass(repr=False)
class IEEEStandard(Identity):
    '''
    Standard published by IEEE (Institute of Electrical and Electronics Engineers).
    '''

@dataclass(repr=False)
class ISOStandard(Identity):
    '''
    Standard published by ISO (International Organization for Standardization).
    '''

@dataclass(repr=False)
class InUseDate(Identity):
    '''
    Dates associated with asset 'in use' status. May have multiple in use dates
    for this device and a compound type allows a query to return multiple dates.
    '''

    inUseDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date asset was most recently put in use.
    '''

    notReadyForUseDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date of most recent asset transition to not ready for use state.
    '''

    readyForUseDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date of most recent asset transition to ready for use state.
    '''

@dataclass(repr=False)
class IntegerQuantity(Identity):
    '''
    Quantity with integer value and associated unit information.
    '''

    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value of this quantity.
    '''

    multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit multiplier of this quantity.
    '''

    unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit of this quantity.
    '''

@dataclass(repr=False)
class LaborelecStandard(Identity):
    '''
    Standard published by Laborelec.
    '''

@dataclass(repr=False)
class LifecycleDate(Identity):
    '''
    Dates for asset lifecycle state changes. May have multiple lifecycle dates
    for this device and a compound type allows a query to return multiple dates.
    '''

    installationDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date current installation was completed, which may not be the same as the
    in-service date. Asset may have been installed at other locations previously.
    Ignored if asset is (1) not currently installed (e.g., stored in a depot)
    or (2) not intended to be installed (e.g., vehicle, tool).
    '''

    manufacturedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date the asset was manufactured.
    '''

    purchaseDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date the asset was purchased. Note that even though an asset may have been
    purchased, it may not have been received into inventory at the time of
    purchase.
    '''

    receivedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date the asset was received and first placed into inventory.
    '''

    removalDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date when the asset was last removed from service. Ignored if (1) not intended
    to be in service, or (2) currently in service.
    '''

    retiredDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date the asset is permanently retired from service and may be scheduled
    for disposal. Ignored if asset is (1) currently in service, or (2) permanently
    removed from service.
    '''

@dataclass(repr=False)
class LineDetail(Identity):
    '''
    Details on an amount line, with rounding, date and note.
    '''

@dataclass(repr=False)
class MonthDayInterval(Identity):
    '''
    Interval between two times specified as month and day.
    '''

    end: Optional[ MonthDay ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End time of this interval.
    '''

    start: Optional[ MonthDay ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start time of this interval.
    '''

@dataclass(repr=False)
class Priority(Identity):
    '''
    Priority definition.
    '''

    justification: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Justification for 'rank'.
    '''

    rank: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Priority level; lower number means high priority inside the same 'type'.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type describing 'rank'; e.g., high, emergency, etc.
    '''

@dataclass(repr=False)
class RationalNumber(Identity):
    '''
    Rational number = 'numerator' / 'denominator'.
    '''

    denominator: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Denominator. Value 1 indicates the number is a simple integer.
    '''

    numerator: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Numerator.
    '''

@dataclass(repr=False)
class ReadingInterharmonic(Identity):
    '''
    Interharmonics are represented as a rational number 'numerator' / 'denominator',
    and harmonics are represented using the same mechanism and identified by
    'denominator'=1.
    '''

    denominator: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interharmonic denominator. Value 0 means not applicable. Value 2 is used
    in combination with 'numerator'=1 to represent interharmonic 1/2. Finally,
    value 1 indicates the harmonic of the order specified with 'numerator'.
    '''

    numerator: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Interharmonic numerator. Value 0 means not applicable. Value 1 is used
    in combination with 'denominator'=2 to represent interharmonic 1/2, and
    with 'denominator'=1 it represents fundamental frequency. Finally, values
    greater than 1 indicate the harmonic of that order (e.g., 'numerator'=5
    is the fifth harmonic).
    '''

@dataclass(repr=False)
class RelativeDisplacement(Identity):
    '''
    Vertical displacement relative to either sealevel, ground or the center
    of the earth.
    '''

    displacement: Optional[ float | Displacement ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

    kind: Optional[ RelativeDisplacementKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    '''

@dataclass(repr=False)
class RemoteConnectDisconnectInfo(Identity):
    '''
    Details of remote connect and disconnect function.
    '''

@dataclass(repr=False)
class ServicePointOutageSummary(Identity):
    '''
    Summary counts of service points affected by an outage. These counts are
    sometimes referred to as total and critical customer count.
    '''

    criticalCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of critical service (delivery) points affected by an outage.
    '''

    totalCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of all service (delivery) points affected by an outage.
    '''

@dataclass(repr=False)
class Status(Identity):
    '''
    Current status information relevant to an entity.
    '''

    dateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Date and time for which status 'value' applies.
    '''

    reason: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Reason code or explanation for why an object went to the current status
    'value'.
    '''

    remark: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Pertinent information regarding the current 'value', as free form text.
    '''

    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status value at 'dateTime'; prior status changes may have been kept in
    instances of activity records associated with the object to which this
    status applies.
    '''

@dataclass(repr=False)
class StreetAddress(Identity):
    '''
    General purpose street and postal address information.
    '''

    language: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The language in which the address is specified, using ISO 639-1 two digit
    language code.
    '''

    poBox: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Post office box.
    '''

    postalCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Postal code for the address.
    '''

    status: Optional[Status] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Status of this address.
    '''

    streetDetail: Optional[StreetDetail] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Street detail.
    '''

    townDetail: Optional[TownDetail] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': '',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Town detail.
    '''

@dataclass(repr=False)
class StreetDetail(Identity):
    '''
    Street details, in the context of address.
    '''

    addressGeneral: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    First line of a free form address or some additional address information
    (for example a mail stop).
    '''

    addressGeneral2: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Second line of a free form address.
    '''

    addressGeneral3: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Third line of a free form address.
    '''

    buildingName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) In certain cases the physical location of the place of
    interest does not have a direct point of entry from the street, but may
    be located inside a larger structure such as a building, complex, office
    block, apartment, etc.
    '''

    code: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Utilities often make use of external reference systems,
    such as those of the town-planner's department or surveyor general's mapping
    system, that allocate global reference codes to streets.
    '''

    floorIdentification: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    The identification by name or number, expressed as text, of the floor in
    the building as part of this address.
    '''

    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name of the street.
    '''

    number: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Designator of the specific location on the street.
    '''

    prefix: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Prefix to the street name. For example: North, South, East, West.
    '''

    suffix: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Suffix to the street name. For example: North, South, East, West.
    '''

    suiteNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Number of the apartment or suite.
    '''

    type: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Type of street. Examples include: street, circle, boulevard, avenue, road,
    drive, etc.
    '''

    withinTownLimits: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    True if this street is within the legal geographical boundaries of the
    specified town (default).
    '''

@dataclass(repr=False)
class StringQuantity(Identity):
    '''
    Quantity with string value (when it is not important whether it is an integral
    or a floating point number) and associated unit information.
    '''

    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Value of this quantity.
    '''

    multiplier: Optional[ UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit multiplier of this quantity.
    '''

    unit: Optional[ UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Unit of this quantity.
    '''

@dataclass(repr=False)
class TAPPIStandard(Identity):
    '''
    Standard published by TAPPI.
    '''

@dataclass(repr=False)
class TelephoneNumber(Identity):
    '''
    Telephone number.
    '''

    areaCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Area or region code.
    '''

    cityCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    City code.
    '''

    countryCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Country code.
    '''

    dialOut: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Dial out code, for instance to call outside an enterprise.
    '''

    extension: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Extension for this telephone number.
    '''

    internationalPrefix: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    (if applicable) Prefix used when calling an international number.
    '''

    ituPhone: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Phone number according to International Telecommunication Union (ITU) E.164.
    '''

    localNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Main (local) part of this telephone number.
    '''

@dataclass(repr=False)
class TimeInterval(Identity):
    '''
    Interval between two times.
    '''

    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    End time of this interval.
    '''

    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Start time of this interval.
    '''

@dataclass(repr=False)
class TownDetail(Identity):
    '''
    Town details, in the context of address.
    '''

    code: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Town code.
    '''

    country: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name of the country.
    '''

    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Town name.
    '''

    section: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Town section. For example, it is common for there to be 36 sections per
    township.
    '''

    stateOrProvince: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    Name of the state or province.
    '''

@dataclass(repr=False)
class UKMinistryOfDefenceStandard(Identity):
    '''
    Standard published by United Kingdom Ministry of Defence.
    '''

@dataclass(repr=False)
class Version(Identity):
    '''
    This is the version for a group of devices or objects. This could be used
    to track the version for any group of objects or devices over time. For
    example, for a DERGroup, the requesting system may want to get the details
    of a specific version of a DERGroup.
    '''

    date: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    date of this version
    '''

    major: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    major release level for this version
    '''

    minor: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    minor release level for this version
    '''

    revision: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '0',
            'maxOccurs': '1',
            'namespace': 'http://iec.ch/TC57/CIM100#'
        })
    '''
    revision level for this version
    '''

@dataclass(repr=False)
class WEPStandard(Identity):
    '''
    Standard published by Westinghouse - a WEP (Westinghouse Engineering Procedure).
    '''
