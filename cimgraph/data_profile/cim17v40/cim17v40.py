from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum
from typing import Optional

from pydantic import BaseModel, ValidationError

from cimgraph.data_profile.units import units

'''
    Annotated CIMantic Graphs data profile for Profile
    Generated by CIMTool http://cimtool.org
'''
@dataclass
class ACLineSegment(BaseModel):
    '''
    A wire or combination of wires, with consistent electrical characteristics,
    building a single electrical system, used to carry alternating current
    between points in the power system.
    For symmetrical, transposed three phase lines, it is sufficient to use
    attributes of the line segment, which describe impedances and admittances
    for the entire length of the segment. Additionally impedances can be computed
    by using length and associated per length impedances.
    The BaseVoltage at the two ends of ACLineSegments in a Line shall have
    the same BaseVoltage.nominalVoltage. However, boundary lines may have slightly
    different BaseVoltage.nominalVoltages and variation is allowed. Larger
    voltage difference in general requires use of an equivalent branch.
    '''
    b0ch: Optional[ float | units.Susceptance ] = field(
        default = units.Susceptance(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) susceptance, uniformly distributed, of the
    entire line section.
    '''
    bch: Optional[ float | units.Susceptance ] = field(
        default = units.Susceptance(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) susceptance, uniformly distributed,
    of the entire line section. This value represents the full charging over
    the full length of the line.
    '''
    g0ch: Optional[ float | units.Conductance ] = field(
        default = units.Conductance(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) conductance, uniformly distributed, of the
    entire line section.
    '''
    gch: Optional[ float | units.Conductance ] = field(
        default = units.Conductance(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) conductance, uniformly distributed,
    of the entire line section.
    '''
    r: Optional[ float | units.Resistance ] = field(
        default = units.Resistance(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series resistance of the entire line section.
    '''
    r0: Optional[ float | units.Resistance ] = field(
        default = units.Resistance(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series resistance of the entire line section.
    '''
    shortCircuitEndTemperature: Optional[ float | units.Temperature ] = field(
        default = units.Temperature(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Maximum permitted temperature at the end of SC for the calculation of minimum
    short-circuit currents. Used for short circuit data exchange according
    to IEC 60909.
    '''
    x: Optional[ float | units.Reactance ] = field(
        default = units.Reactance(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series reactance of the entire line section.
    '''
    x0: Optional[ float | units.Reactance ] = field(
        default = units.Reactance(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series reactance of the entire line section.
    '''
    ACLineSegmentPhases: list[ ACLineSegmentPhase ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'ACLineSegmentPhase.ACLineSegment'
        })
    '''
    The line segment phases which belong to the line segment.
    '''
@dataclass
class ACLineSegmentPhase(BaseModel):
    '''
    Represents a single wire of an alternating current line segment.
    '''
    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Number designation for this line segment phase. Each line segment phase
    within a line segment should have a unique sequence number. This is useful
    for unbalanced modelling to bind the mathematical model (PhaseImpedanceData
    of PerLengthPhaseImpedance) with the connectivity model (this class) and
    the physical model (WirePosition) without tight coupling.
    '''
    phase: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    The phase connection of the wire at both ends.
    '''
    ACLineSegment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.ACLineSegmentPhases'
        })
    '''
    The line segment to which the phase belongs.
    '''
    WireInfo: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'WireInfo.ACLineSegmentPhase'
        })
    '''
    Wire information contributing to this AC line segment phase information.
    '''
@dataclass
class DateInterval(BaseModel):
    '''
    Interval between two dates.
    '''
    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    End date of this interval.
    '''
    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Start date of this interval.
    '''
@dataclass
class DateTimeInterval(BaseModel):
    '''
    Interval between two date and time points, where the interval includes
    the start time but excludes end time.
    '''
    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    End date and time of this interval. The end date and time where the interval
    is defined up to, but excluded.
    '''
    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Start date and time of this interval. The start date and time is included
    in the defined interval.
    '''
@dataclass
class DecimalQuantity(BaseModel):
    '''
    Quantity with decimal value and associated unit or currency information.
    '''
    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Value of this quantity.
    '''
    currency: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Currency of this quantity.
    '''
    multiplier: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Unit multiplier of this quantity.
    '''
    unit: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Unit of this quantity.
    '''
@dataclass
class FloatQuantity(BaseModel):
    '''
    Quantity with float value and associated unit information.
    '''
    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Value of this quantity.
    '''
    multiplier: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Unit multiplier of this quantity.
    '''
    unit: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Unit of this quantity.
    '''
@dataclass
class IdentifiedObject(BaseModel):
    '''
    This is a root class to provide common identification for all classes needing
    identification and naming attributes.
    '''
    mRID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Master resource identifier issued by a model authority. The mRID is unique
    within an exchange context. Global uniqueness is easily achieved by using
    a UUID, as specified in RFC 4122, for the mRID. The use of UUID is strongly
    recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the mRID
    is mapped to rdf:ID or rdf:about attributes that identify CIM object elements.
    '''
    aliasName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    The aliasName is free text human readable name of the object alternative
    to IdentifiedObject.name. It may be non unique and may not correlate to
    a naming hierarchy.
    The attribute aliasName is retained because of backwards compatibility
    between CIM relases. It is however recommended to replace aliasName with
    the Name class as aliasName is planned for retirement at a future time.
    '''
    description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    The description is a free human readable text describing or naming the
    object. It may be non unique and may not correlate to a naming hierarchy.
    '''
    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    The name is any free human readable and possibly non unique text naming
    the object.
    '''
    InstanceSet: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'InstanceSet.InstanceSetMember'
        })
    '''
    Dataset containing the data objects.
    '''
    PropertiesCIMDataObject: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ChangeSetMember.PropertiesObject'
        })
    '''
    The single CIM data object in the appropriate dataset context.
    '''
@dataclass
class IntegerQuantity(BaseModel):
    '''
    Quantity with integer value and associated unit information.
    '''
    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Value of this quantity.
    '''
    multiplier: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Unit multiplier of this quantity.
    '''
    unit: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Unit of this quantity.
    '''
@dataclass
class MonthDayInterval(BaseModel):
    '''
    Interval between two times specified as month and day.
    '''
    end: Optional[ str | units.MonthDay ] = field(
        default = units.MonthDay(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    End time of this interval.
    '''
    start: Optional[ str | units.MonthDay ] = field(
        default = units.MonthDay(),
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Start time of this interval.
    '''
@dataclass
class StringQuantity(BaseModel):
    '''
    Quantity with string value (when it is not important whether it is an integral
    or a floating point number) and associated unit information.
    '''
    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Value of this quantity.
    '''
    multiplier: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Unit multiplier of this quantity.
    '''
    unit: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Unit of this quantity.
    '''
@dataclass
class TimeInterval(BaseModel):
    '''
    Interval between two times.
    '''
    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    End time of this interval.
    '''
    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Start time of this interval.
    '''
@dataclass
class ACDCTerminal( IdentifiedObject ):
    '''
    An electrical connection point (AC or DC) to a piece of conducting equipment.
    Terminals are connected at physical connection points called connectivity
    nodes.
    '''
    connected: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    The connected status is related to a bus-branch model and the topological
    node to terminal relation. True implies the terminal is connected to the
    related topological node and false implies it is not.
    In a bus-branch model, the connected status is used to tell if equipment
    is disconnected without having to change the connectivity described by
    the topological node to terminal relation. A valid case is that conducting
    equipment can be connected in one end and open in the other. In particular
    for an AC line segment, where the reactive line charging can be significant,
    this is a relevant case.
    '''
    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    The orientation of the terminal connections for a multiple terminal conducting
    equipment. The sequence numbering starts with 1 and additional terminals
    should follow in increasing order. The first terminal is the "starting
    point" for a two terminal branch.
    '''
    BusNameMarker: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'BusNameMarker.Terminal'
        })
    '''
    The bus name marker used to name the bus (topological node).
    '''
    Measurements: list[ Measurement ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'Measurement.Terminal'
        })
    '''
    Measurements associated with this terminal defining where the measurement
    is placed in the network topology. It may be used, for instance, to capture
    the sensor position, such as a voltage transformer (PT) at a busbar or
    a current transformer (CT) at the bar between a breaker and an isolator.
    '''
    OperationalLimitSet: list[ OperationalLimitSet ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': 'unbounded',
            'inverse': 'OperationalLimitSet.Terminal'
        })
    '''
    The operational limit sets at the terminal.
    '''
@dataclass
class BusNameMarker( IdentifiedObject ):
    '''
    Used to apply user standard names to TopologicalNodes. Associated with
    one or more terminals that are normally connected with the bus name. The
    associated terminals are normally connected by non-retained switches. For
    a ring bus station configuration, all BusbarSection terminals in the ring
    are typically associated. For a breaker and a half scheme, both BusbarSections
    would normally be associated. For a ring bus, all BusbarSections would
    normally be associated. For a "straight" busbar configuration, normally
    only the main terminal at the BusbarSection would be associated.
    '''
@dataclass
class Measurement( IdentifiedObject ):
    '''
    A Measurement represents any measured, calculated or non-measured non-calculated
    quantity. Any piece of equipment may contain Measurements, e.g. a substation
    may have temperature measurements and door open indications, a transformer
    may have oil temperature and tank pressure measurements, a bay may contain
    a number of power flow measurements and a Breaker may contain a switch
    status measurement.
    The PSR - Measurement association is intended to capture this use of Measurement
    and is included in the naming hierarchy based on EquipmentContainer. The
    naming hierarchy typically has Measurements as leaves, e.g. Substation-VoltageLevel-Bay-Switch-Measurement.
    Some Measurements represent quantities related to a particular sensor location
    in the network, e.g. a voltage transformer (VT) or potential transformer
    (PT) at a busbar or a current transformer (CT) at the bar between a breaker
    and an isolator. The sensing position is not captured in the PSR - Measurement
    association. Instead it is captured by the Measurement - Terminal association
    that is used to define the sensing location in the network topology. The
    location is defined by the connection of the Terminal to ConductingEquipment.
    If both a Terminal and PSR are associated, and the PSR is of type ConductingEquipment,
    the associated Terminal should belong to that ConductingEquipment instance.
    When the sensor location is needed both Measurement-PSR and Measurement-Terminal
    are used. The Measurement-Terminal association is never used alone.
    '''
    measurementType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'attribute',
            'minOccurs': '0',
            'maxOccurs': '1'
        })
    '''
    Specifies the type of measurement. For example, this specifies if the measurement
    represents an indoor temperature, outdoor temperature, bus voltage, line
    flow, etc.
    When the measurementType is set to "Specialization", the type of Measurement
    is defined in more detail by the specialized class which inherits from
    Measurement.
    '''
    Terminal: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'association',
            'minOccurs': '0',
            'maxOccurs': '1',
            'inverse': 'ACDCTerminal.Measurements'
        })
    '''
    One or more measurements may be associated with a terminal in the network.
    '''
@dataclass
class OperationalLimitSet( IdentifiedObject ):
    '''
    A set of limits associated with equipment. Sets of limits might apply to
    a specific temperature, or season for example. A set of limits may contain
    different severities of limit levels that would apply to the same equipment.
    The set may contain limits of different types such as apparent power and
    current limits or high and low voltage limits that are logically applied
    together as a set.
    '''
@dataclass
class SinglePhaseKind( Enum ):
    '''
    Enumeration of single phase identifiers. Allows designation of single phases
    for both transmission and distribution equipment, circuits and loads.
    '''
    A = 'A'
    '''
    Phase A.
    '''
    B = 'B'
    '''
    Phase B.
    '''
    C = 'C'
    '''
    Phase C.
    '''
    N = 'N'
    '''
    Neutral.
    '''
    s1 = 's1'
    '''
    Secondary phase 1.
    '''
    s2 = 's2'
    '''
    Secondary phase 2.
    '''
