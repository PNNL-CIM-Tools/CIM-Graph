from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum
from typing import Optional

'''
    Annotated CIMantic Graphs data profile for Profile
    Generated by CIMTool http://cimtool.org
'''
@dataclass
class BlockingFunction():
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Delay.BlockingFunction'
        })
    '''
    '''
    VSCtype1: Optional[ str | VSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCtype1.BlockingFunction'
        })
    '''
    '''
@dataclass
class BranchGroupTerminal():
    '''
    A specific directed terminal flow for a branch group.
    '''
    positiveFlowIn: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The flow into the terminal is summed if set true. The flow out of the terminal
    is summed if set false.
    '''
    BranchGroup: Optional[ str | BranchGroup ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BranchGroup.BranchGroupTerminal'
        })
    '''
    The branch group to which the directed branch group terminals belong.
    '''
    Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.BranchGroupTerminal'
        })
    '''
    The terminal to be summed.
    '''
@dataclass
class CCAinverter():
    '''
    '''
    CSCtype1: Optional[ str | CSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_C028CE96_6309_4883_89A5_E1B91BD9EF2D-A'
        })
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_CBF65696_C189_4ab1_A0C3_34B7539B34A1-B'
        })
    '''
    '''
@dataclass
class CCArectifierControl():
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_AF4309DA_72A5_4b21_80EC_9653AF6D0620-B'
        })
    '''
    '''
    CSCtype1: Optional[ str | CSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_AF476A35_E037_4efb_9B03_02299D031FDA-A'
        })
    '''
    '''
@dataclass
class ChangeSetMember():
    '''
    A CRUD-style data object.
    '''
    Changeset: Optional[ str | ChangeSet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ChangeSet.ChangeSetMember'
        })
    '''
    Dataset containing the data objects.
    '''
    PropertiesObject: Optional[ str | IdentifiedObject ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'IdentifiedObject.PropertiesCIMDataObject'
        })
    '''
    The CIM object holding the properties of this dataset context. Sometimes
    properties are not required and only the reference to the registered object
    is required.
    '''
    TargetObject: Optional[ str | IdentifiedObject ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'IdentifiedObject.TargetingCIMDataObject'
        })
    '''
    The registered CIM object.
    '''
@dataclass
class ObjectCreation(ChangeSetMember):
    '''
    An object is to be created in the context.
    '''
@dataclass
class ObjectDeletion(ChangeSetMember):
    '''
    An object is to be deleted in the context.
    '''
@dataclass
class ObjectModification(ChangeSetMember):
    '''
    The object already exists and is to be modified.
    '''
    ObjectReverseModification: Optional[ str | ObjectReverseModification ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ObjectReverseModification.ObjectModification'
        })
    '''
    The data object holding preconditions of updates.
    '''
@dataclass
class ObjectReverseModification(ChangeSetMember):
    '''
    Used to specify precondition properties for a preconditioned update.
    '''
    ObjectModification: Optional[ str | ObjectModification ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ObjectModification.ObjectReverseModification'
        })
    '''
    The associated data object representing the update. Normally the associaiton
    is specifed, but in the case of a proxy object where the association is
    removed, we might not reference any data object as it would only reference
    a proxy data object with no associations.
    '''
@dataclass
class CurveData():
    '''
    Multi-purpose data points for defining a curve. The use of this generic
    class is discouraged if a more specific class can be used to specify the
    X and Y axis values along with their specific data types.
    '''
    xvalue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The data value of the X-axis variable, depending on the X-axis units.
    '''
    y1value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The data value of the first Y-axis variable, depending on the Y-axis units.
    '''
    y2value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The data value of the second Y-axis variable (if present), depending on
    the Y-axis units.
    '''
    y3value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The data value of the third Y-axis variable (if present), depending on
    the Y-axis units.
    '''
    Curve: Optional[ str | Curve ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Curve.CurveDatas'
        })
    '''
    The curve of this curve data point.
    '''
@dataclass
class DCvoltageControl():
    '''
    DC voltage control used for voltage regulation.
    '''
    kivdc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain of the DC voltage regulator (Kivdc).
    '''
    kpvdc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain of the DC voltage regulator (Kpvdc).
    '''
    vdcmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum DC voltage (Vdcmax).
    '''
    vdcmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum DC voltage (Vdcmin).
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Delay.DCvoltageControl'
        })
    '''
    '''
    VSCtype1: Optional[ str | VSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCtype1.DCvoltageControl'
        })
    '''
    '''
@dataclass
class DataSet():
    '''
    A generic container of a version of instance data. The MRID can be used
    in an audit trail, not in reusable script intended to work with new versions
    of data.
    A dataset could be serialized multiple times and in multiple technologies,
    yet retain the same identity.
    '''
    mRID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Master resource identifier issued by a model authority. The mRID is unique
    within an exchange context. Global uniqueness is easily achieved by using
    a UUID, as specified in RFC 4122, for the mRID. The use of UUID is strongly
    recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552 Edition
    1, the mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The description is a free human readable text describing or naming the
    object. It may be non unique and may not correlate to a naming hierarchy.
    '''
    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The name is any free human readable and possibly non unique text naming
    the object.
    '''
    AlternateModel: Optional[ str | AlternateModel ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AlternateModel.Dataset'
        })
    '''
    The alternate model using the data.
    '''
    ModelPartVersion: Optional[ str | ModelPartVersion ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_2494ED30_254C_4f13_8F87_6FBEE03C2A4F-B'
        })
    '''
    '''
@dataclass
class ChangeSet(DataSet):
    '''
    Describes a set of changes that can be applied in different situations.
    A given registered target object MRID may only be referenced once by the
    contained change set members.
    '''
    NMProjectStage: Optional[ str | NetworkModelProjectStage ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectStage.ChangeSets'
        })
    '''
    '''
@dataclass
class InstanceSet(DataSet):
    '''
    Instance of a version of a model part. This corresponds to a payload of
    instance data.
    '''
@dataclass
class DateInterval():
    '''
    Interval between two dates.
    '''
    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    End date of this interval.
    '''
    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Start date of this interval.
    '''
@dataclass
class DateTimeInterval():
    '''
    Interval between two date and time points, where the interval includes
    the start time but excludes end time.
    '''
    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    End date and time of this interval. The end date and time where the interval
    is defined up to, but excluded.
    '''
    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Start date and time of this interval. The start date and time is included
    in the defined interval.
    '''
@dataclass
class DecimalQuantity():
    '''
    Quantity with decimal value and associated unit or currency information.
    '''
    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value of this quantity.
    '''
    currency: Optional[ str | Currency ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Currency of this quantity.
    '''
    multiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit multiplier of this quantity.
    '''
    unit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit of this quantity.
    '''
@dataclass
class Delay():
    '''
    All the measurements are filtered by a first lag element with a time constant
    TM.
    '''
    tm: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant.
    '''
    BlockingFunction: Optional[ str | BlockingFunction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BlockingFunction.Delay'
        })
    '''
    '''
    DCvoltageControl: Optional[ str | DCvoltageControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCvoltageControl.Delay'
        })
    '''
    '''
    CCArectifierControl: Optional[ str | CCArectifierControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_AF4309DA_72A5_4b21_80EC_9653AF6D0620-A'
        })
    '''
    '''
    CCAinverter: Optional[ str | CCAinverter ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_CBF65696_C189_4ab1_A0C3_34B7539B34A1-A'
        })
    '''
    '''
    VDCOL: Optional[ str | VDCOL ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_DA56FBC7_3797_4264_AE29_61FEBA3C58F7-A'
        })
    '''
    '''
    IdcInverterControl: Optional[ str | IdcInverterControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_F80046F2_833E_473c_81F7_F2217DD56589-A'
        })
    '''
    '''
    Pcontrol: Optional[ str | Pcontrol ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Pcontrol.Delay'
        })
    '''
    '''
    PFmode: Optional[ str | PFmode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PFmode.Delay'
        })
    '''
    '''
    Qlimiter: Optional[ str | Qlimiter ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Qlimiter.Delay'
        })
    '''
    '''
    Qmode: Optional[ str | Qmode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Qmode.Delay'
        })
    '''
    '''
    Qregulator: Optional[ str | Qregulator ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Qregulator.Delay'
        })
    '''
    '''
    Umode: Optional[ str | Umode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Umode.Delay'
        })
    '''
    '''
@dataclass
class DiagramObjectGluePoint():
    '''
    This is used for grouping diagram object points from different diagram
    objects that are considered to be glued together in a diagram even if they
    are not at the exact same coordinates.
    '''
@dataclass
class DiagramObjectPoint():
    '''
    A point in a given space defined by 3 coordinates and associated to a diagram
    object. The coordinates may be positive or negative as the origin does
    not have to be in the corner of a diagram.
    '''
    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The sequence position of the point, used for defining the order of points
    for diagram objects acting as a polyline or polygon with more than one
    point. The attribute shall be a positive value.
    '''
    xPosition: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The X coordinate of this point.
    '''
    yPosition: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The Y coordinate of this point.
    '''
    zPosition: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The Z coordinate of this point.
    '''
    DiagramObject: Optional[ str | DiagramObject ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DiagramObject.DiagramObjectPoints'
        })
    '''
    The diagram object with which the points are associated.
    '''
    DiagramObjectGluePoint: Optional[ str | DiagramObjectGluePoint ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DiagramObjectGluePoint.DiagramObjectPoints'
        })
    '''
    The 'glue' point to which this point is associated.
    '''
@dataclass
class DifferentialModel():
    '''
    A set of statements describing the changes in the network model. The statement
    is defined in the incremental model.
    '''
@dataclass
class FaultImpedance():
    '''
    Impedance description for the fault.
    '''
    rGround: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The resistance of the fault between phases and ground.
    '''
    rLineToLine: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The resistance of the fault between phases.
    '''
    xGround: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactance of the fault between phases and ground.
    '''
    xLineToLine: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactance of the fault between phases.
    '''
@dataclass
class FloatQuantity():
    '''
    Quantity with float value and associated unit information.
    '''
    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value of this quantity.
    '''
    multiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit multiplier of this quantity.
    '''
    unit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit of this quantity.
    '''
@dataclass
class GenericDataSetVersion():
    '''
    '''
    majorVersion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The universal CIM version name describing a consistent set of packages.
    '''
    minorVersion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Describe minor updates and error corrections.
    '''
    published: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date when the complete CIM canonical model is published and made available
    for use,
    After the publication the major version and name space are updated.
    '''
@dataclass
class HVDCLookUpTable():
    '''
    '''
    input: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    output: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    sequence: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    functionKind: Optional[ str | LookUpTableFunctionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    VDCOL: Optional[ str | VDCOL ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_14C2B235_371D_4ebf_BFF8_1E462660C3D0-A'
        })
    '''
    '''
    Qregulator: Optional[ str | Qregulator ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Qregulator.HVDClookUpTable'
        })
    '''
    '''
@dataclass
class IEC61970CIMVersion():
    '''
    This is the IEC 61970 CIM version number assigned to this UML model.
    '''
    date: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Form is YYYY-MM-DD for example for January 5, 2009 it is 2009-01-05.
    '''
    version: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Form is IEC61970CIMXXvYY where XX is the major CIM package version and
    the YY is the minor version. For example IEC61970CIM13v18.
    '''
@dataclass
class IdcInverterControl():
    '''
    '''
    CSCtype1: Optional[ str | CSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_339D9BE1_B6FE_4ebd_B884_707C77DA6C91-A'
        })
    '''
    '''
    VDCOL: Optional[ str | VDCOL ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_D9D8D23C_3E4B_4af0_B456_954687DFA9E6-B'
        })
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_F80046F2_833E_473c_81F7_F2217DD56589-B'
        })
    '''
    '''
@dataclass
class IdentifiedObject():
    '''
    This is a root class to provide common identification for all classes needing
    identification and naming attributes.
    '''
    mRID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Master resource identifier issued by a model authority. The mRID is unique
    within an exchange context. Global uniqueness is easily achieved by using
    a UUID, as specified in RFC 4122, for the mRID. The use of UUID is strongly
    recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the mRID
    is mapped to rdf:ID or rdf:about attributes that identify CIM object elements.
    '''
    aliasName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The aliasName is free text human readable name of the object alternative
    to IdentifiedObject.name. It may be non unique and may not correlate to
    a naming hierarchy.
    The attribute aliasName is retained because of backwards compatibility
    between CIM relases. It is however recommended to replace aliasName with
    the Name class as aliasName is planned for retirement at a future time.
    '''
    description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The description is a free human readable text describing or naming the
    object. It may be non unique and may not correlate to a naming hierarchy.
    '''
    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The name is any free human readable and possibly non unique text naming
    the object.
    '''
    InstanceSet: Optional[ str | InstanceSet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'InstanceSet.InstanceSetMember'
        })
    '''
    Dataset containing the data objects.
    '''
    PropertiesCIMDataObject: Optional[ str | ChangeSetMember ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ChangeSetMember.PropertiesObject'
        })
    '''
    The single CIM data object in the appropriate dataset context.
    '''
@dataclass
class ACDCTerminal(IdentifiedObject):
    '''
    An electrical connection point (AC or DC) to a piece of conducting equipment.
    Terminals are connected at physical connection points called connectivity
    nodes.
    '''
    connected: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The connected status is related to a bus-branch model and the topological
    node to terminal relation. True implies the terminal is connected to the
    related topological node and false implies it is not.
    In a bus-branch model, the connected status is used to tell if equipment
    is disconnected without having to change the connectivity described by
    the topological node to terminal relation. A valid case is that conducting
    equipment can be connected in one end and open in the other. In particular
    for an AC line segment, where the reactive line charging can be significant,
    this is a relevant case.
    '''
    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The orientation of the terminal connections for a multiple terminal conducting
    equipment. The sequence numbering starts with 1 and additional terminals
    should follow in increasing order. The first terminal is the "starting
    point" for a two terminal branch.
    '''
    BusNameMarker: Optional[ str | BusNameMarker ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BusNameMarker.Terminal'
        })
    '''
    The bus name marker used to name the bus (topological node).
    '''
@dataclass
class DCBaseTerminal(ACDCTerminal):
    '''
    An electrical connection point at a piece of DC conducting equipment. DC
    terminals are connected at one physical DC node that may have multiple
    DC terminals connected. A DC node is similar to an AC connectivity node.
    The model requires that DC connections are distinct from AC connections.
    '''
    DCNode: Optional[ str | DCNode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCNode.DCTerminals'
        })
    '''
    The DC connectivity node to which this DC base terminal connects with zero
    impedance.
    '''
    DCTopologicalNode: Optional[ str | DCTopologicalNode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCTopologicalNode.DCTerminals'
        })
    '''
    See association end Terminal.TopologicalNode.
    '''
@dataclass
class ACDCConverterDCTerminal(DCBaseTerminal):
    '''
    A DC electrical connection point at the AC/DC converter. The AC/DC converter
    is electrically connected also to the AC side. The AC connection is inherited
    from the AC conducting equipment in the same way as any other AC equipment.
    The AC/DC converter DC terminal is separate from generic DC terminal to
    restrict the connection with the AC side to AC/DC converter and so that
    no other DC conducting equipment can be connected to the AC side.
    '''
    polarity: Optional[ str | DCPolarityKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Represents the normal network polarity condition. Depending on the converter
    configuration the value shall be set as follows:
    - For a monopole with two converter terminals use DCPolarityKind “positive”
    and “negative”.
    - For a bi-pole or symmetric monopole with three converter terminals use
    DCPolarityKind “positive”, “middle” and “negative”.
    '''
    DCConductingEquipment: Optional[ str | ACDCConverter ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ACDCConverter.DCTerminals'
        })
    '''
    A DC converter terminal belong to an DC converter.
    '''
@dataclass
class DCTerminal(DCBaseTerminal):
    '''
    An electrical connection point to generic DC conducting equipment.
    '''
    DCConductingEquipment: Optional[ str | DCConductingEquipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCConductingEquipment.DCTerminals'
        })
    '''
    An DC terminal belong to a DC conducting equipment.
    '''
@dataclass
class Terminal(ACDCTerminal):
    '''
    An AC electrical connection point to a piece of conducting equipment. Terminals
    are connected at physical connection points called connectivity nodes.
    '''
    phases: Optional[ str | PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Represents the normal network phasing condition. If the attribute is missing,
    three phases (ABC) shall be assumed, except for terminals of grounding
    classes (specializations of EarthFaultCompensator, GroundDisconnector,
    and Ground) which will be assumed to be N. Therefore, phase code ABCN is
    explicitly declared when needed, e.g. for star point grounding equipment.
    The phase code on terminals connecting same ConnectivityNode or same TopologicalNode
    as well as for equipment between two terminals shall be consistent.
    '''
    Bushing: Optional[ str | Bushing ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Bushing.Terminal'
        })
    '''
    '''
    Circuit: Optional[ str | Circuit ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Circuit.EndTerminal'
        })
    '''
    '''
    ConductingEquipment: Optional[ str | ConductingEquipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ConductingEquipment.Terminals'
        })
    '''
    The conducting equipment of the terminal. Conducting equipment have terminals
    that may be connected to other conducting equipment terminals via connectivity
    nodes or topological nodes.
    '''
    ConnectivityNode: Optional[ str | ConnectivityNode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ConnectivityNode.Terminals'
        })
    '''
    The connectivity node to which this terminal connects with zero impedance.
    '''
    NormalHeadFeeder: Optional[ str | Feeder ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Feeder.NormalHeadTerminal'
        })
    '''
    The feeder that this terminal normally feeds. Only specified for the terminals
    at head of feeders.
    '''
    TopologicalNode: Optional[ str | TopologicalNode ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.Terminal'
        })
    '''
    The topological node associated with the terminal. This can be used as
    an alternative to the connectivity node path to topological node, thus
    making it unnecessary to model connectivity nodes in some cases. Note that
    the if connectivity nodes are in the model, this association would probably
    not be used as an input specification.
    '''
@dataclass
class AltGeneratingUnitMeas(IdentifiedObject):
    '''
    A prioritized measurement to be used for the generating unit in the control
    area specification.
    '''
    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Priority of a measurement usage. Lower numbers have first priority.
    '''
    AnalogValue: Optional[ str | AnalogValue ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AnalogValue.AltGeneratingUnit'
        })
    '''
    The specific analog value used as a source.
    '''
    ControlAreaGeneratingUnit: Optional[ str | ControlAreaGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ControlAreaGeneratingUnit.AltGeneratingUnitMeas'
        })
    '''
    The control area generating unit to which the prioritized measurement assignment
    is applied.
    '''
@dataclass
class AltTieMeas(IdentifiedObject):
    '''
    A prioritized measurement to be used for the tie flow as part of the control
    area specification.
    '''
    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Priority of a measurement usage. Lower numbers have first priority.
    '''
    AnalogValue: Optional[ str | AnalogValue ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AnalogValue.AltTieMeas'
        })
    '''
    The specific analog value used as a source.
    '''
    TieFlow: Optional[ str | TieFlow ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TieFlow.AltTieMeas'
        })
    '''
    The tie flow of the alternate measurements.
    '''
@dataclass
class AlternateModel(IdentifiedObject):
    '''
    '''
    AlternateModelGroup: Optional[ str | AlternateModelGroup ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AlternateModelGroup.AlternateModel'
        })
    '''
    The group of alternate models for which one alternate is used.
    '''
    Dataset: Optional[ str | DataSet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DataSet.AlternateModel'
        })
    '''
    The data belonging to the alternate model.
    '''
@dataclass
class AlternateModelGroup(IdentifiedObject):
    '''
    '''
@dataclass
class AnnotatedProjectDependency(IdentifiedObject):
    '''
    '''
    dependencyType: Optional[ str | DependencyKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    DependentOnStage: Optional[ str | NetworkModelProjectStage ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectStage.DependencyDependentOnStage'
        })
    '''
    '''
    DependingStage: Optional[ str | NetworkModelProjectStage ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectStage.DenpendecyDependingStage'
        })
    '''
    '''
@dataclass
class AssemblyDescription(IdentifiedObject):
    '''
    A description for how to assemble model parts for a specific purpose.
    '''
@dataclass
class AssemblyManifest(IdentifiedObject):
    '''
    A collection of model parts when combined form a case or part of a case.
    '''
    CompleteModelToBeDeleted: Optional[ str | CompleteModelToBeDeleted ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_ABA7248F_7487_4c32_811C_B708158136CB-A'
        })
    '''
    '''
@dataclass
class Asset(IdentifiedObject):
    '''
    Tangible resource of the utility, including power system equipment, various
    end devices, cabinets, buildings, etc. For electrical network equipment,
    the role of the asset is defined through PowerSystemResource and its subclasses,
    defined mainly in the Wires model (refer to IEC61970-301 and model package
    IEC61970::Wires). Asset description places emphasis on the physical characteristics
    of the equipment fulfilling that role.
    '''
@dataclass
class Bushing(Asset):
    '''
    Bushing asset.
    '''
@dataclass
class AssetInfo(IdentifiedObject):
    '''
    Set of attributes of an asset, representing typical datasheet information
    of a physical device that can be instantiated and shared in different data
    exchange contexts:
    - as attributes of an asset instance (installed or in stock)
    - as attributes of an asset model (product by a manufacturer)
    - as attributes of a type asset (generic type of an asset as used in designs/extension
    planning).
    '''
@dataclass
class TransformerEndInfo(AssetInfo):
    '''
    Transformer end data.
    '''
@dataclass
class WireAssemblyInfo(AssetInfo):
    '''
    Describes the construction of a multi-conductor wire.
    '''
@dataclass
class WireInfo(AssetInfo):
    '''
    Wire data that can be specified per line segment phase, or for the line
    segment as a whole in case its phases all have the same wire characteristics.
    '''
@dataclass
class WireSpacingInfo(AssetInfo):
    '''
    Wire spacing data that associates multiple wire positions with the line
    segment, and allows to calculate line segment impedances. Number of phases
    can be derived from the number of associated wire positions whose phase
    is not neutral.
    '''
@dataclass
class AvailablityPlan(IdentifiedObject):
    '''
    The collection of all the availability schedules for a given time range.
    Only one availability plan shall be valid for the same period.
    '''
    validPeriod: Optional[ str | DateTimeInterval ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    The period of time for which the plan is valid.
    '''
@dataclass
class BaseFrequency(IdentifiedObject):
    '''
    The BaseFrequency class describes a base frequency for a power system network.
    In case of multiple power networks with different frequencies, e.g. 50
    Hz or 60 Hz each network will have its own base frequency class. Hence
    it is assumed that power system objects having different base frequencies
    appear in separate documents where each document has a single base frequency
    instance.
    '''
    frequency: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The base frequency.
    '''
@dataclass
class BasePower(IdentifiedObject):
    '''
    The BasePower class defines the base power used in the per unit calculations.
    '''
    basePower: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value used as base power.
    '''
@dataclass
class BaseVoltage(IdentifiedObject):
    '''
    Defines a system base voltage which is referenced.
    '''
    nominalVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The power system resource's base voltage. Shall be a positive value and
    not zero.
    '''
@dataclass
class BasicIntervalSchedule(IdentifiedObject):
    '''
    Schedule of values at points in time.
    '''
    startTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The time for the first time point. The value can be a time of day, not
    a specific date.
    '''
    value1Multiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Multiplier for value1.
    '''
    value1Unit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value1 units of measure.
    '''
    value2Multiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Multiplier for value2.
    '''
    value2Unit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value2 units of measure.
    '''
@dataclass
class IrregularIntervalSchedule(BasicIntervalSchedule):
    '''
    The schedule has time points where the time between them varies.
    '''
@dataclass
class RegularIntervalSchedule(BasicIntervalSchedule):
    '''
    The schedule has time points where the time between them is constant.
    '''
    endTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The time for the last time point. The value can be a time of day, not a
    specific date.
    '''
    timeStep: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The time between each pair of subsequent regular time points in sequence
    order.
    '''
@dataclass
class GenUnitOpSchedule(RegularIntervalSchedule):
    '''
    The generating unit's Operator-approved current operating schedule (or
    plan), typically produced with the aid of unit commitment type analyses.
    The X-axis represents absolute time. The Y1-axis represents the status
    (0=off-line and unavailable: 1=available: 2=must run: 3=must run at fixed
    power value: etc.). The Y2-axis represents the must run fixed power value
    where required.
    '''
    GeneratingUnit: Optional[ str | GeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.GenUnitOpSchedule'
        })
    '''
    A generating unit may have an operating schedule, indicating the planned
    operation of the unit.
    '''
@dataclass
class HydroPumpOpSchedule(RegularIntervalSchedule):
    '''
    The hydro pump's Operator-approved current operating schedule (or plan),
    typically produced with the aid of unit commitment type analyses. The unit's
    operating schedule status is typically given as: (0=unavailable) (1=available
    to startup or shutdown) (2=must pump).
    '''
    HydroPump: Optional[ str | HydroPump ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HydroPump.HydroPumpOpSchedule'
        })
    '''
    The hydro pump has a pumping schedule over time, indicating when pumping
    is to occur.
    '''
@dataclass
class InflowForecast(RegularIntervalSchedule):
    '''
    Natural water inflow to a reservoir, usually forecasted from predicted
    rain and snowmelt. Typically in one hour increments for up to 10 days.
    The forecast is given in average cubic meters per second over the time
    increment.
    '''
    Reservoir: Optional[ str | Reservoir ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Reservoir.InflowForecasts'
        })
    '''
    A reservoir may have a "natural" inflow forecast.
    '''
@dataclass
class SeasonDayTypeSchedule(RegularIntervalSchedule):
    '''
    A time schedule covering a 24 hour period, with curve data for a specific
    type of season and day.
    '''
    DayType: Optional[ str | DayType ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DayType.SeasonDayTypeSchedules'
        })
    '''
    DayType for the Schedule.
    '''
    Season: Optional[ str | Season ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Season.SeasonDayTypeSchedules'
        })
    '''
    Season for the Schedule.
    '''
@dataclass
class ConformLoadSchedule(SeasonDayTypeSchedule):
    '''
    A curve of load versus time (X-axis) showing the active power values (Y1-axis)
    and reactive power (Y2-axis) for each unit of the period covered. This
    curve represents a typical pattern of load over the time period for a given
    day type and season.
    '''
    ConformLoadGroup: Optional[ str | ConformLoadGroup ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ConformLoadGroup.ConformLoadSchedules'
        })
    '''
    The ConformLoadGroup where the ConformLoadSchedule belongs.
    '''
@dataclass
class NonConformLoadSchedule(SeasonDayTypeSchedule):
    '''
    An active power (Y1-axis) and reactive power (Y2-axis) schedule (curves)
    versus time (X-axis) for non-conforming loads, e.g., large industrial load
    or power station service (where modelled).
    '''
    NonConformLoadGroup: Optional[ str | NonConformLoadGroup ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NonConformLoadGroup.NonConformLoadSchedules'
        })
    '''
    The NonConformLoadGroup where the NonConformLoadSchedule belongs.
    '''
@dataclass
class RegulationSchedule(SeasonDayTypeSchedule):
    '''
    A pre-established pattern over time for a controlled variable, e.g., busbar
    voltage.
    '''
    RegulatingControl: Optional[ str | RegulatingControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RegulatingControl.RegulationSchedule'
        })
    '''
    Regulating controls that have this schedule.
    '''
@dataclass
class SwitchSchedule(SeasonDayTypeSchedule):
    '''
    A schedule of switch positions. If RegularTimePoint.value1 is 0, the switch
    is open. If 1, the switch is closed.
    '''
    Switch: Optional[ str | Switch ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Switch.SwitchSchedules'
        })
    '''
    A SwitchSchedule is associated with a Switch.
    '''
@dataclass
class TapSchedule(SeasonDayTypeSchedule):
    '''
    A pre-established pattern over time for a tap step.
    '''
    TapChanger: Optional[ str | TapChanger ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TapChanger.TapSchedules'
        })
    '''
    A TapSchedule is associated with a TapChanger.
    '''
@dataclass
class SteamSendoutSchedule(RegularIntervalSchedule):
    '''
    The cogeneration plant's steam sendout schedule in volume per time unit.
    '''
    CogenerationPlant: Optional[ str | CogenerationPlant ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CogenerationPlant.SteamSendoutSchedule'
        })
    '''
    A cogeneration plant has a steam sendout schedule.
    '''
@dataclass
class BilateralExchangeActor(IdentifiedObject):
    '''
    BilateralExchangeActor describes an actor that provides ICCP data, consumes
    ICCP data or both. The ICCP data provider lists the data it makes available
    to an ICCP data consumer. This data is described by ProvidedBilateralPoints.
    The relation between an ICCP data provider and a consumer is established
    by a BilateralExchangeAgreement. It is up to the ICCP data consumer to
    select what ProvidedBilateralPoints to use. The selection made is not described
    in this information model.
    '''
@dataclass
class ICCPVCC(BilateralExchangeActor):
    '''
    Indicates that the ICCP information is global in nature and normally is
    available to all authorized peers.
    '''
@dataclass
class ICCPVirtualControlCentre(BilateralExchangeActor):
    '''
    This contains the information that a particular actor exposes for a particular
    agreed upon ICCP Bilateral Table.
    '''
    calling: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Used to indicate if the Provider is responsible for initiating the TASE.2
    connection. If the value is TRUE, the provider is responsible for establishing
    the association. If the value is FALSE, the peer provider of the Bilateral
    Table will need to establish the association.
    '''
    clientAndServer: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If True the value indicates that the entity represented by the bilateral
    table is capable of issuing requests and responding to request (e.g. bidirectional
    support of ICCP requests).
    If False, this indicates that a calling entity (e.g. calling = True) will
    not be able to respond to ICCP requests. If False, and calling=False, this
    indicates that the entity will only respond to ICCP requests and not issue
    ICCP requests.
    '''
    minimumUpdateInterval: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the fastest update interval that can be provided for integrity
    information and Transfer Set creation. The value is in seconds.
    '''
    nameOfLocalICC: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the ICC scope name that the remote can use to access the information
    in the Bilateral Table if the information is not VCC scoped. This value
    may not be null.
    '''
    supportForBlock1: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for basic services. Must
    always be true.
    '''
    supportForBlock2: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for extended conditions.
    '''
    supportForBlock3: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for blocked transfers.
    '''
    supportForBlock4: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for information messages.
    '''
    supportForBlock5: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for device control.
    '''
    supportForDepriciatedBlock8: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Per IEC 60870-6-702: If true indicates support for accounts. The use of
    this block was deprecated in Edition 3.
    '''
    transportSecurityRequirement: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If true, then transport level security as specified by IEC 62351-6 is required.
    '''
    applicationSecurityRequirement: Optional[ str | ApplicationSecurityKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the expected security mechanism, per IEC 62351-4, to be utilized.
    '''
@dataclass
class BilateralExchangeAgreement(IdentifiedObject):
    '''
    This is the representation of the information exchange agreement between
    peers.
    '''
    Consumer: Optional[ str | BilateralExchangeActor ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BilateralExchangeActor.ConsumerBilateralExchange'
        })
    '''
    Subscriber of information from a remote peer.
    '''
    Provider: Optional[ str | BilateralExchangeActor ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BilateralExchangeActor.ProviderBilateralExchange'
        })
    '''
    Provider of information to a remote peer.
    '''
@dataclass
class TASE2BilateralTable(BilateralExchangeAgreement):
    '''
    This class describe the sending (providing) side in a bilateral ICCP data
    exchange. Hence the ICCP bilateral (table) descriptions are created by
    exchanging ICCP Provider data between the parties.
    '''
    bilateralTableID: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the version of the Bilateral Table configuration that is being
    exchanged.
    '''
    bilateralTableVersion: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The Version attribute identifies a unique version of the Bilateral Table.
    If any changes are made to a Bilateral Table, then a new unique value for
    this attribute shall be generated.
    '''
    tase2version: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the version of the TASE.2 that is needed to access the Bilateral
    Table information via TASE.2.
    In order for a link to be established, both sides must have the same value.
    '''
@dataclass
class BlockDispatchInstruction(IdentifiedObject):
    '''
    '''
    EnergyGroup: Optional[ str | EnergyGroup ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_3BC3FBEE_55AB_447d_A7C2_53E7591E1DC1-A'
        })
    '''
    '''
@dataclass
class BlockDispatchOrder(IdentifiedObject):
    '''
    '''
    sequence: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    BlockDispatchComponent: Optional[ str | BlockDispatchComponent ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_255D77CC_5A1D_4514_B6F4_972B9DFEDB7F-A'
        })
    '''
    '''
    BlockDispatchInstruction: Optional[ str | BlockDispatchInstruction ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_ABE32104_A9AB_469d_82CF_9252C48F75A0-A'
        })
    '''
    '''
@dataclass
class BranchGroup(IdentifiedObject):
    '''
    A group of branch terminals whose directed flow summation is to be monitored.
    A branch group need not form a cutset of the network.
    '''
    monitorActivePower: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Monitor the active power flow.
    '''
    monitorReactivePower: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Monitor the reactive power flow.
    '''
    maximumActivePower: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum active power flow.
    '''
    maximumReactivePower: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum reactive power flow.
    '''
    minimumActivePower: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum active power flow.
    '''
    minimumReactivePower: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum reactive power flow.
    '''
@dataclass
class BusNameMarker(IdentifiedObject):
    '''
    Used to apply user standard names to TopologicalNodes. Associated with
    one or more terminals that are normally connected with the bus name. The
    associated terminals are normally connected by non-retained switches. For
    a ring bus station configuration, all BusbarSection terminals in the ring
    are typically associated. For a breaker and a half scheme, both BusbarSections
    would normally be associated. For a ring bus, all BusbarSections would
    normally be associated. For a "straight" busbar configuration, normally
    only the main terminal at the BusbarSection would be associated.
    '''
    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Priority of bus name marker for use as topology bus name. Use 0 for do
    not care. Use 1 for highest priority. Use 2 as priority is less than 1
    and so on.
    '''
    ReportingGroup: Optional[ str | ReportingGroup ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ReportingGroup.BusNameMarker'
        })
    '''
    The reporting group to which this bus name marker belongs.
    '''
    TopologicalNode: Optional[ str | TopologicalNode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.BusNameMarker'
        })
    '''
    A user defined topological node that was originally defined in a planning
    model not yet having topology described by ConnectivityNodes. Once ConnectivityNodes
    has been created they may linked to user defined ToplogicalNdes using BusNameMarkers.
    '''
@dataclass
class CalculationMethodHierarchy(IdentifiedObject):
    '''
    The hierarchy of calculation methods used to derive this measurement.
    .
    '''
@dataclass
class ClampAction(IdentifiedObject):
    '''
    Action on Clamp as a switching step
    '''
@dataclass
class ConnectivityNode(IdentifiedObject):
    '''
    Connectivity nodes are points where terminals of AC conducting equipment
    are connected together with zero impedance.
    '''
    ConnectivityNodeContainer: Optional[ str | ConnectivityNodeContainer ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ConnectivityNodeContainer.ConnectivityNodes'
        })
    '''
    Container of this connectivity node.
    '''
    TopologicalNode: Optional[ str | TopologicalNode ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.ConnectivityNodes'
        })
    '''
    The topological node to which this connectivity node is assigned. May depend
    on the current state of switches in the network.
    '''
@dataclass
class Contingency(IdentifiedObject):
    '''
    An event threatening system reliability, consisting of one or more contingency
    elements.
    '''
    mustStudy: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Set true if must study this contingency.
    '''
@dataclass
class ContingencyElement(IdentifiedObject):
    '''
    An element of a system event to be studied by contingency analysis, representing
    a change in status of a single piece of equipment.
    '''
    Contingency: Optional[ str | Contingency ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Contingency.ContingencyElement'
        })
    '''
    A contingency element belongs to one contingency.
    '''
@dataclass
class ContingencyEquipment(ContingencyElement):
    '''
    Equipment whose in service status is to change, such as a power transformer
    or AC line segment.
    '''
    contingentStatus: Optional[ str | ContingencyEquipmentStatusKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The status for the associated equipment when in the contingency state.
    This status is independent of the case to which the contingency is originally
    applied, but defines the equipment status when the contingency is applied.
    '''
    Equipment: Optional[ str | Equipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Equipment.ContingencyEquipment'
        })
    '''
    The single piece of equipment to which to apply the contingency.
    '''
@dataclass
class ControlAction(IdentifiedObject):
    '''
    Control executed as a switching step.
    '''
@dataclass
class ControlAreaGeneratingUnit(IdentifiedObject):
    '''
    A control area generating unit. This class is needed so that alternate
    control area definitions may include the same generating unit. It should
    be noted that only one instance within a control area should reference
    a specific generating unit.
    '''
    ControlArea: Optional[ str | ControlArea ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ControlArea.ControlAreaGeneratingUnit'
        })
    '''
    The parent control area for the generating unit specifications.
    '''
    GeneratingUnit: Optional[ str | GeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.ControlAreaGeneratingUnit'
        })
    '''
    The generating unit specified for this control area. Note that a control
    area should include a GeneratingUnit only once.
    '''
@dataclass
class CurrentState(IdentifiedObject):
    '''
    '''
@dataclass
class Curve(IdentifiedObject):
    '''
    A multi-purpose curve or functional relationship between an independent
    variable (X-axis) and dependent (Y-axis) variables.
    '''
    curveStyle: Optional[ str | CurveStyle ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The style or shape of the curve.
    '''
    xMultiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Multiplier for X-axis.
    '''
    xUnit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The X-axis units of measure.
    '''
    y1Multiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Multiplier for Y1-axis.
    '''
    y1Unit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The Y1-axis units of measure.
    '''
    y2Multiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Multiplier for Y2-axis.
    '''
    y2Unit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The Y2-axis units of measure.
    '''
    y3Multiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Multiplier for Y3-axis.
    '''
    y3Unit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The Y3-axis units of measure.
    '''
@dataclass
class CTTempActivePowerCurve(Curve):
    '''
    Relationship between the combustion turbine's power output rating in gross
    active power (X-axis) and the ambient air temperature (Y-axis).
    '''
    CombustionTurbine: Optional[ str | CombustionTurbine ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CombustionTurbine.CTTempActivePowerCurve'
        })
    '''
    A combustion turbine may have an active power versus ambient temperature
    relationship.
    '''
@dataclass
class EmissionAccount(Curve):
    '''
    Accounts for tracking emissions usage and credits for thermal generating
    units. A unit may have zero or more emission accounts, and will typically
    have one for tracking usage and one for tracking credits.
    '''
    emissionType: Optional[ str | EmissionType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The type of emission, for example sulfur dioxide (SO2). The y1AxisUnits
    of the curve contains the unit of measure (e.g. kg) and the emissionType
    is the type of emission (e.g. sulfur dioxide).
    '''
    emissionValueSource: Optional[ str | EmissionValueSource ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The source of the emission value.
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.EmmissionAccounts'
        })
    '''
    A thermal generating unit may have one or more emission allowance accounts.
    '''
@dataclass
class EmissionCurve(Curve):
    '''
    Relationship between the unit's emission rate in units of mass per hour
    (Y-axis) and output active power (X-axis) for a given type of emission.
    This curve applies when only one type of fuel is being burned.
    '''
    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    emissionContent: Optional[ float | Emission ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The emission content per quantity of fuel burned.
    '''
    emissionType: Optional[ str | EmissionType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The type of emission, which also gives the production rate measurement
    unit. The y1AxisUnits of the curve contains the unit of measure (e.g. kg)
    and the emissionType is the type of emission (e.g. sulfur dioxide).
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.EmissionCurves'
        })
    '''
    A thermal generating unit may have one or more emission curves.
    '''
@dataclass
class FuelAllocationSchedule(Curve):
    '''
    The amount of fuel of a given type which is allocated for consumption over
    a specified period of time.
    '''
    fuelAllocationEndDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The end time and date of the fuel allocation schedule.
    '''
    fuelAllocationStartDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The start time and date of the fuel allocation schedule.
    '''
    maxFuelAllocation: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum amount of fuel that is allocated for consumption for the scheduled
    time period.
    '''
    minFuelAllocation: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum amount of fuel that is allocated for consumption for the scheduled
    time period, e.g., based on a "take-or-pay" contract.
    '''
    fuelType: Optional[ str | FuelType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The type of fuel, which also indicates the corresponding measurement unit.
    '''
    FossilFuel: Optional[ str | FossilFuel ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'FossilFuel.FuelAllocationSchedules'
        })
    '''
    A fuel allocation schedule shall have a fossil fuel.
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.FuelAllocationSchedules'
        })
    '''
    A thermal generating unit may have one or more fuel allocation schedules.
    '''
@dataclass
class GenUnitOpCostCurve(Curve):
    '''
    Relationship between unit operating cost (Y-axis) and unit output active
    power (X-axis). The operating cost curve for thermal units is derived from
    heat input and fuel costs. The operating cost curve for hydro units is
    derived from water flow rates and equivalent water costs.
    '''
    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    GeneratingUnit: Optional[ str | GeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.GenUnitOpCostCurves'
        })
    '''
    A generating unit may have one or more cost curves, depending upon fuel
    mixture and fuel cost.
    '''
@dataclass
class GrossToNetActivePowerCurve(Curve):
    '''
    Relationship between the generating unit's gross active power output on
    the X-axis (measured at the terminals of the machine(s)) and the generating
    unit's net active power output on the Y-axis (based on utility-defined
    measurements at the power station). Station service loads, when modelled,
    should be treated as non-conforming bus loads. There may be more than one
    curve, depending on the auxiliary equipment that is in service.
    '''
    GeneratingUnit: Optional[ str | GeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.GrossToNetActivePowerCurves'
        })
    '''
    A generating unit may have a gross active power to net active power curve,
    describing the losses and auxiliary power requirements of the unit.
    '''
@dataclass
class HeatInputCurve(Curve):
    '''
    Relationship between unit heat input in energy per time for main fuel (Y1-axis)
    and supplemental fuel (Y2-axis) versus unit output in active power (X-axis).
    The quantity of main fuel used to sustain generation at this output level
    is prorated for throttling between definition points. The quantity of supplemental
    fuel used at this output level is fixed and not prorated.
    '''
    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    auxPowerMult: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power output - auxiliary power multiplier adjustment factor.
    '''
    auxPowerOffset: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power output - auxiliary power offset adjustment factor.
    '''
    heatInputEff: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Heat input - efficiency multiplier adjustment factor.
    '''
    heatInputOffset: Optional[ float | HeatRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Heat input - offset adjustment factor.
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.HeatInputCurve'
        })
    '''
    A thermal generating unit may have a heat input curve.
    '''
@dataclass
class HeatRateCurve(Curve):
    '''
    Relationship between unit heat rate per active power (Y-axis) and unit
    output (X-axis). The heat input is from all fuels.
    '''
    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.HeatRateCurve'
        })
    '''
    A thermal generating unit may have a heat rate curve.
    '''
@dataclass
class HydroGeneratingEfficiencyCurve(Curve):
    '''
    Relationship between unit efficiency as percentage and unit output active
    power for a given net head in meters. The relationship between efficiency,
    discharge, head, and power output is expressed as follows: E =KP/HQ
    where: E is the efficiency, as a percentage; P is the active power; H is
    the height; Q is the discharge, volume/time unit; K is a constant.
    For example, a curve instance for a given net head could show efficiency
    (Y-axis) versus active power output (X-axis) or versus discharge on the
    X-axis.
    '''
    HydroGeneratingUnit: Optional[ str | HydroGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HydroGeneratingUnit.HydroGeneratingEfficiencyCurves'
        })
    '''
    A hydro generating unit has an efficiency curve.
    '''
@dataclass
class IncrementalHeatRateCurve(Curve):
    '''
    Relationship between unit incremental heat rate in (delta energy/time)
    per (delta active power) and unit output in active power. The IHR curve
    represents the slope of the HeatInputCurve. Note that the "incremental
    heat rate" and the "heat rate" have the same engineering units.
    '''
    isNetGrossP: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flag is set to true when output is expressed in net active power.
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.IncrementalHeatRateCurve'
        })
    '''
    A thermal generating unit may have an incremental heat rate curve.
    '''
@dataclass
class LevelVsVolumeCurve(Curve):
    '''
    Relationship between reservoir volume and reservoir level. The volume is
    at the Y-axis and the reservoir level at the X-axis.
    '''
    Reservoir: Optional[ str | Reservoir ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Reservoir.LevelVsVolumeCurves'
        })
    '''
    A reservoir may have a level versus volume relationship.
    '''
@dataclass
class PenstockLossCurve(Curve):
    '''
    Relationship between penstock head loss (in meters) and total discharge
    through the penstock (in cubic meters per second). One or more turbines
    may be connected to the same penstock.
    '''
    HydroGeneratingUnit: Optional[ str | HydroGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HydroGeneratingUnit.PenstockLossCurve'
        })
    '''
    A hydro generating unit has a penstock loss curve.
    '''
@dataclass
class ReactiveCapabilityCurve(Curve):
    '''
    Reactive power rating envelope versus the synchronous machine's active
    power, in both the generating and motoring modes. For each active power
    value there is a corresponding high and low reactive power limit value.
    Typically there will be a separate curve for each coolant condition, such
    as hydrogen pressure. The Y1 axis values represent reactive minimum and
    the Y2 axis values represent reactive maximum.
    '''
    coolantTemperature: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The machine's coolant temperature (e.g., ambient air or stator circulating
    water).
    '''
    hydrogenPressure: Optional[ float | Pressure ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The hydrogen coolant pressure.
    '''
@dataclass
class ShutdownCurve(Curve):
    '''
    Relationship between the rate in gross active power/minute (Y-axis) at
    which a unit should be shutdown and its present gross MW output (X-axis).
    '''
    shutdownDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date and time of the most recent generating unit shutdown.
    '''
    shutdownCost: Optional[ str | Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fixed shutdown cost.
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.ShutdownCurve'
        })
    '''
    A thermal generating unit may have a shutdown curve.
    '''
@dataclass
class StartIgnFuelCurve(Curve):
    '''
    The quantity of ignition fuel (Y-axis) used to restart and repay the auxiliary
    power consumed versus the number of hours (X-axis) the unit was off line.
    '''
    ignitionFuelType: Optional[ str | FuelType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of ignition fuel.
    '''
    StartupModel: Optional[ str | StartupModel ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StartupModel.StartIgnFuelCurve'
        })
    '''
    The unit's startup model may have a startup ignition fuel curve.
    '''
@dataclass
class StartMainFuelCurve(Curve):
    '''
    The quantity of main fuel (Y-axis) used to restart and repay the auxiliary
    power consumed versus the number of hours (X-axis) the unit was off line.
    '''
    mainFuelType: Optional[ str | FuelType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of main fuel.
    '''
    StartupModel: Optional[ str | StartupModel ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StartupModel.StartMainFuelCurve'
        })
    '''
    The unit's startup model may have a startup main fuel curve.
    '''
@dataclass
class StartRampCurve(Curve):
    '''
    Rate in gross active power per minute (Y-axis) at which a unit can be loaded
    versus the number of hours (X-axis) the unit was off line.
    '''
    hotStandbyRamp: Optional[ float | ActivePowerChangeRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The startup ramp rate in gross for a unit that is on hot standby.
    '''
    StartupModel: Optional[ str | StartupModel ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StartupModel.StartRampCurve'
        })
    '''
    The unit's startup model may have a startup ramp curve.
    '''
@dataclass
class TailbayLossCurve(Curve):
    '''
    Relationship between tailbay head loss height (Y-axis) and the total discharge
    into the power station's tailbay volume per time unit (X-axis) . There
    could be more than one curve depending on the level of the tailbay reservoir
    or river level.
    '''
    HydroGeneratingUnit: Optional[ str | HydroGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HydroGeneratingUnit.TailbayLossCurve'
        })
    '''
    A hydro generating unit has a tailbay loss curve.
    '''
@dataclass
class TargetLevelSchedule(Curve):
    '''
    Reservoir water level targets from advanced studies or "rule curves". Typically
    in one hour increments for up to 10 days.
    '''
    highLevelLimit: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High target level limit, above which the reservoir operation will be penalized.
    '''
    lowLevelLimit: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low target level limit, below which the reservoir operation will be penalized.
    '''
    Reservoir: Optional[ str | Reservoir ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Reservoir.TargetLevelSchedule'
        })
    '''
    A reservoir may have a water level target schedule.
    '''
@dataclass
class VsCapabilityCurve(Curve):
    '''
    The P-Q capability curve for a voltage source converter, with P on X-axis
    and Qmin and Qmax on Y1-axis and Y2-axis.
    '''
@dataclass
class CutAction(IdentifiedObject):
    '''
    Action on cut as a switching step.
    '''
@dataclass
class DCNode(IdentifiedObject):
    '''
    DC nodes are points where terminals of DC conducting equipment are connected
    together with zero impedance.
    '''
    DCEquipmentContainer: Optional[ str | DCEquipmentContainer ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCEquipmentContainer.DCNodes'
        })
    '''
    The DC container for the DC nodes.
    '''
    DCTopologicalNode: Optional[ str | DCTopologicalNode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCTopologicalNode.DCNodes'
        })
    '''
    The DC topological node to which this DC connectivity node is assigned.
    May depend on the current state of switches in the network.
    '''
@dataclass
class DCTopologicalIsland(IdentifiedObject):
    '''
    An electrically connected subset of the network. DC topological islands
    can change as the current network state changes, e.g. due to:
    - disconnect switches or breakers changing state in a SCADA/EMS.
    - manual creation, change or deletion of topological nodes in a planning
    tool.
    Only energised TopologicalNode-s shall be part of the topological island.
    '''
@dataclass
class DCTopologicalNode(IdentifiedObject):
    '''
    DC bus.
    '''
    DCEquipmentContainer: Optional[ str | DCEquipmentContainer ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCEquipmentContainer.DCTopologicalNode'
        })
    '''
    The connectivity node container to which the topological node belongs.
    '''
    DCTopologicalIsland: Optional[ str | DCTopologicalIsland ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCTopologicalIsland.DCTopologicalNodes'
        })
    '''
    A DC topological node belongs to a DC topological island.
    '''
@dataclass
class DayType(IdentifiedObject):
    '''
    Group of similar days. For example it could be used to represent weekdays,
    weekend, or holidays.
    '''
@dataclass
class Diagram(IdentifiedObject):
    '''
    The diagram being exchanged. The coordinate system is a standard Cartesian
    coordinate system and the orientation attribute defines the orientation.
    The initial view related attributes can be used to specify an initial view
    with the x,y coordinates of the diagonal points.
    '''
    x1InitialView: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    X coordinate of the first corner of the initial view.
    '''
    x2InitialView: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    X coordinate of the second corner of the initial view.
    '''
    y1InitialView: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Y coordinate of the first corner of the initial view.
    '''
    y2InitialView: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Y coordinate of the second corner of the initial view.
    '''
    orientation: Optional[ str | OrientationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coordinate system orientation of the diagram. A positive orientation gives
    standard “right-hand” orientation, with negative orientation indicating
    a “left-hand” orientation. For 2D diagrams, a positive orientation will
    result in X values increasing from left to right and Y values increasing
    from bottom to top. A negative orientation gives the “left-hand” orientation
    (favoured by computer graphics displays) with X values increasing from
    left to right and Y values increasing from top to bottom.
    '''
    DiagramStyle: Optional[ str | DiagramStyle ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DiagramStyle.Diagram'
        })
    '''
    A Diagram may have a DiagramStyle.
    '''
@dataclass
class DiagramObject(IdentifiedObject):
    '''
    An object that defines one or more points in a given space. This object
    can be associated with anything that specializes IdentifiedObject. For
    single line diagrams such objects typically include such items as analog
    values, breakers, disconnectors, power transformers, and transmission lines.
    '''
    drawingOrder: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The drawing order of this element. The higher the number, the later the
    element is drawn in sequence. This is used to ensure that elements that
    overlap are rendered in the correct order.
    '''
    isPolygon: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Defines whether or not the diagram objects points define the boundaries
    of a polygon or the routing of a polyline. If this value is true then a
    receiving application should consider the first and last points to be connected.
    '''
    offsetX: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The offset in the X direction. This is used for defining the offset from
    centre for rendering an icon (the default is that a single point specifies
    the centre of the icon).
    The offset is in per-unit with 0 indicating there is no offset from the
    horizontal centre of the icon. -0.5 indicates it is offset by 50% to the
    left and 0.5 indicates an offset of 50% to the right.
    '''
    offsetY: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The offset in the Y direction. This is used for defining the offset from
    centre for rendering an icon (the default is that a single point specifies
    the centre of the icon).
    The offset is in per-unit with 0 indicating there is no offset from the
    vertical centre of the icon. The offset direction is dependent on the orientation
    of the diagram, with -0.5 and 0.5 indicating an offset of +/- 50% on the
    vertical axis.
    '''
    rotation: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Sets the angle of rotation of the diagram object. Zero degrees is pointing
    to the top of the diagram. Rotation is clockwise. DiagramObject.rotation=0
    has the following meaning: The connection point of an element which has
    one terminal is pointing to the top side of the diagram. The connection
    point "From side" of an element which has more than one terminal is pointing
    to the top side of the diagram.
    DiagramObject.rotation=90 has the following meaning: The connection point
    of an element which has one terminal is pointing to the right hand side
    of the diagram. The connection point "From side" of an element which has
    more than one terminal is pointing to the right hand side of the diagram.
    '''
    Diagram: Optional[ str | Diagram ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Diagram.DiagramElements'
        })
    '''
    A diagram object is part of a diagram.
    '''
    DiagramObjectStyle: Optional[ str | DiagramObjectStyle ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DiagramObjectStyle.StyledObjects'
        })
    '''
    A diagram object has a style associated that provides a reference for the
    style used in the originating system.
    '''
    IdentifiedObject: Optional[ str | IdentifiedObject ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'IdentifiedObject.DiagramObjects'
        })
    '''
    The domain object to which this diagram object is associated.
    '''
@dataclass
class TextDiagramObject(DiagramObject):
    '''
    A diagram object for placing free-text or text derived from an associated
    domain object.
    '''
    text: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The text that is displayed by this text diagram object.
    '''
@dataclass
class DiagramObjectStyle(IdentifiedObject):
    '''
    A reference to a style used by the originating system for a diagram object.
    A diagram object style describes information such as line thickness, shape
    such as circle or rectangle etc, and colour.
    '''
@dataclass
class DiagramStyle(IdentifiedObject):
    '''
    The diagram style refers to a style used by the originating system for
    a diagram. A diagram style describes information such as schematic, geographic,
    etc.
    '''
@dataclass
class DynamicsFunctionBlock(IdentifiedObject):
    '''
    Abstract parent class for all Dynamics function blocks.
    '''
    enabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Function block used indicator.
    true = use of function block is enabled
    false = use of function block is disabled.
    '''
@dataclass
class CrossCompoundTurbineGovernorDynamics(DynamicsFunctionBlock):
    '''
    Turbine-governor cross-compound function block whose behaviour is described
    by reference to a standard model <font color="#0f0f0f">or by definition
    of a user-defined model.</font>
    '''
    HighPressureSynchronousMachineDynamics: Optional[ str | SynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachineDynamics.CrossCompoundTurbineGovernorDyanmics'
        })
    '''
    High-pressure synchronous machine with which this cross-compound turbine
    governor is associated.
    '''
    LowPressureSynchronousMachineDynamics: Optional[ str | SynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachineDynamics.CrossCompoundTurbineGovernorDynamics'
        })
    '''
    Low-pressure synchronous machine with which this cross-compound turbine
    governor is associated.
    '''
@dataclass
class GovSteamCC(CrossCompoundTurbineGovernorDynamics):
    '''
    Cross compound turbine governor. Unlike tandem compound units, cross compound
    units are not on the same shaft.
    '''
    dhp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    HP damping factor (<i>Dhp</i>). Typical value = 0.
    '''
    dlp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    LP damping factor (<i>Dlp</i>). Typical value = 0.
    '''
    fhp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of HP power ahead of reheater (<i>Fhp</i>). Typical value = 0,3.
    '''
    flp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of LP power ahead of reheater (<i>Flp</i>). Typical value = 0,7.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pmaxhp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum HP value position (<i>Pmaxhp</i>). Typical value = 1.
    '''
    pmaxlp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum LP value position (<i>Pmaxlp</i>). Typical value = 1.
    '''
    rhp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    HP governor droop (<i>Rhp</i>) (&gt; 0). Typical value = 0,05.
    '''
    rlp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    LP governor droop (<i>Rlp</i>) (&gt; 0). Typical value = 0,05.
    '''
    t1hp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    HP governor time constant (<i>T1hp</i>) (&gt;= 0). Typical value = 0,1.
    '''
    t1lp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    LP governor time constant (<i>T1lp</i>) (&gt;= 0). Typical value = 0,1.
    '''
    t3hp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    HP turbine time constant (<i>T3hp</i>) (&gt;= 0). Typical value = 0,1.
    '''
    t3lp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    LP turbine time constant (<i>T3lp</i>) (&gt;= 0). Typical value = 0,1.
    '''
    t4hp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    HP turbine time constant (<i>T4hp</i>) (&gt;= 0). Typical value = 0,1.
    '''
    t4lp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    LP turbine time constant (<i>T4lp</i>) (&gt;= 0). Typical value = 0,1.
    '''
    t5hp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    HP reheater time constant (<i>T5hp</i>) (&gt;= 0). Typical value = 10.
    '''
    t5lp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    LP reheater time constant (<i>T5lp</i>) (&gt;= 0). Typical value = 10.
    '''
@dataclass
class DiscontinuousExcitationControlDynamics(DynamicsFunctionBlock):
    '''
    Discontinuous excitation control function block whose behaviour is described
    by reference to a standard model <font color="#0f0f0f">or by definition
    of a user-defined model</font>.
    '''
    ExcitationSystemDynamics: Optional[ str | ExcitationSystemDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ExcitationSystemDynamics.DiscontinuousExcitationControlDynamics'
        })
    '''
    Excitation system model with which this discontinuous excitation control
    model is associated.
    '''
    RemoteInputSignal: Optional[ str | RemoteInputSignal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteInputSignal.DiscontinuousExcitationControlDynamics'
        })
    '''
    Remote input signal used by this discontinuous excitation control system
    model.
    '''
@dataclass
class DiscExcContIEEEDEC1A(DiscontinuousExcitationControlDynamics):
    '''
    IEEE type DEC1A discontinuous excitation control model that boosts generator
    excitation to a level higher than that demanded by the voltage regulator
    and stabilizer immediately following a system fault.
    Reference: IEEE 421.5-2005, 12.2.
    '''
    esc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed change reference (<i>E</i><i><sub>SC</sub></i>). Typical value =
    0,0015.
    '''
    kan: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Discontinuous controller gain (<i>K</i><i><sub>AN</sub></i>). Typical value
    = 400.
    '''
    ketl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Terminal voltage limiter gain (<i>K</i><i><sub>ETL</sub></i>). Typical
    value = 47.
    '''
    tan: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Discontinuous controller time constant (<i>T</i><i><sub>AN</sub></i>) (&gt;=
    0). Typical value = 0,08.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>D</sub></i>) (&gt;= 0). Typical value =
    0,03.
    '''
    tl1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>L</sub></i><sub>1</sub>) (&gt;= 0). Typical
    value = 0,025.
    '''
    tl2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>L</sub></i><sub>2</sub>) (&gt;= 0). Typical
    value = 1,25.
    '''
    tw5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    DEC washout time constant (<i>T</i><i><sub>W</sub></i><sub>5</sub>) (&gt;=
    0). Typical value = 5.
    '''
    val: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator voltage reference (<i>V</i><i><sub>AL</sub></i>). Typical value
    = 5,5.
    '''
    vanmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter for Van (<i>V</i><i><sub>ANMAX</sub></i>).
    '''
    vomax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>V</i><i><sub>OMAX</sub></i>) (&gt; DiscExcContIEEEDEC1A.vomin).
    Typical value = 0,3.
    '''
    vomin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>V</i><i><sub>OMIN</sub></i>) (&lt; DiscExcContIEEEDEC1A.vomax).
    Typical value = 0,1.
    '''
    vsmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>V</i><i><sub>SMAX</sub></i>)(&gt; DiscExcContIEEEDEC1A.vsmin).
    Typical value = 0,2.
    '''
    vsmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>V</i><i><sub>SMIN</sub></i>) (&lt; DiscExcContIEEEDEC1A.vsmax).
    Typical value = -0,066.
    '''
    vtc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Terminal voltage level reference (<i>V</i><i><sub>TC</sub></i>). Typical
    value = 0,95.
    '''
    vtlmt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage reference (<i>V</i><i><sub>TLMT</sub></i>). Typical value = 1,1.
    '''
    vtm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage limits (<i>V</i><i><sub>TM</sub></i>). Typical value = 1,13.
    '''
    vtn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage limits (<i>V</i><i><sub>TN</sub></i>). Typical value = 1,12.
    '''
@dataclass
class DiscExcContIEEEDEC2A(DiscontinuousExcitationControlDynamics):
    '''
    IEEE type DEC2A model for discontinuous excitation control. This system
    provides transient excitation boosting via an open-loop control as initiated
    by a trigger signal generated remotely.
    Reference: IEEE 421.5-2005 12.3.
    '''
    td1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Discontinuous controller time constant (<i>T</i><i><sub>D1</sub></i>) (&gt;=
    0).
    '''
    td2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Discontinuous controller washout time constant (<i>T</i><i><sub>D2</sub></i>)
    (&gt;= 0).
    '''
    vdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>V</i><i><sub>DMAX</sub></i>) (&gt; DiscExcContIEEEDEC2A.vdmin).
    '''
    vdmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>V</i><i><sub>DMIN</sub></i>) (&lt; DiscExcContIEEEDEC2A.vdmax).
    '''
    vk: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Discontinuous controller input reference (<i>V</i><i><sub>K</sub></i>).
    '''
@dataclass
class DiscExcContIEEEDEC3A(DiscontinuousExcitationControlDynamics):
    '''
    IEEE type DEC3A model. In some systems, the stabilizer output is disconnected
    from the regulator immediately following a severe fault to prevent the
    stabilizer from competing with action of voltage regulator during the first
    swing.
    Reference: IEEE 421.5-2005 12.4.
    '''
    tdr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reset time delay (<i>T</i><i><sub>DR</sub></i>) (&gt;= 0).
    '''
    vtmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Terminal undervoltage comparison level (<i>V</i><i><sub>TMIN</sub></i>).
    '''
@dataclass
class DiscontinuousExcitationControlUserDefined(DiscontinuousExcitationControlDynamics):
    '''
    Discontinuous excitation control function block whose dynamic behaviour
    is described by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class ExcitationSystemDynamics(DynamicsFunctionBlock):
    '''
    Excitation system function block whose behaviour is described by reference
    to a standard model <font color="#0f0f0f">or by definition of a user-defined
    model.</font>
    '''
    DiscontinuousExcitationControlDynamics: Optional[ str | DiscontinuousExcitationControlDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DiscontinuousExcitationControlDynamics.ExcitationSystemDynamics'
        })
    '''
    Discontinuous excitation control model associated with this excitation
    system model.
    '''
    OverexcitationLimiterDynamics: Optional[ str | OverexcitationLimiterDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OverexcitationLimiterDynamics.ExcitationSystemDynamics'
        })
    '''
    Overexcitation limiter model associated with this excitation system model.
    '''
    PFVArControllerType1Dynamics: Optional[ str | PFVArControllerType1Dynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PFVArControllerType1Dynamics.ExcitationSystemDynamics'
        })
    '''
    Power factor or VAr controller type 1 model associated with this excitation
    system model.
    '''
    PFVArControllerType2Dynamics: Optional[ str | PFVArControllerType2Dynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PFVArControllerType2Dynamics.ExcitationSystemDynamics'
        })
    '''
    Power factor or VAr controller type 2 model associated with this excitation
    system model.
    '''
    PowerSystemStabilizerDynamics: Optional[ str | PowerSystemStabilizerDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerSystemStabilizerDynamics.ExcitationSystemDynamics'
        })
    '''
    Power system stabilizer model associated with this excitation system model.
    '''
    SynchronousMachineDynamics: Optional[ str | SynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachineDynamics.ExcitationSystemDynamics'
        })
    '''
    Synchronous machine model with which this excitation system model is associated.
    '''
    UnderexcitationLimiterDynamics: Optional[ str | UnderexcitationLimiterDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'UnderexcitationLimiterDynamics.ExcitationSystemDynamics'
        })
    '''
    Undrexcitation limiter model associated with this excitation system model.
    '''
    VoltageCompensatorDynamics: Optional[ str | VoltageCompensatorDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VoltageCompensatorDynamics.ExcitationSystemDynamics'
        })
    '''
    Voltage compensator model associated with this excitation system model.
    '''
@dataclass
class ExcAC1A(ExcitationSystemDynamics):
    '''
    Modified IEEE AC1A alternator-supplied rectifier excitation system with
    different rate feedback source.
    '''
    hvlvgates: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates if both HV gate and LV gate are active (<i>HVLVgates</i>).
    true = gates are used
    false = gates are not used.
    Typical value = true.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>1</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,1.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>2</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,03.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 400.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 0,2.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>Kd</i>)
    (&gt;= 0). Typical value = 0,38.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>Kf</i>) (&gt;= 0). Typical
    value = 0,03.
    '''
    kf1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model (<i>Kf1</i>) (&gt;= 0).
    Typical value = 0.
    '''
    kf2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model (<i>Kf2</i>) (&gt;= 0).
    Typical value = 1.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>)
    (&gt;= 0). Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,02.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>c</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 0,8.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf</i>) (&gt; 0).
    Typical value = 1.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>amax</sub></i>) (&gt;
    0). Typical value = 14,5.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>amin</sub></i>) (&lt;
    0). Typical value = -14,5.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve1</i>) (&gt; 0). Typical value = 4,18.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve2</i>) (&gt; 0). Typical value = 3,14.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator outputs (<i>Vrmax</i>) (&gt; 0). Typical value
    = 6,03.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator outputs (<i>Vrmin</i>) (&lt; 0). Typical value
    = -5,43.
    '''
@dataclass
class ExcAC2A(ExcitationSystemDynamics):
    '''
    Modified IEEE AC2A alternator-supplied rectifier excitation system with
    different field current limit.
    '''
    hvgate: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates if HV gate is active (<i>HVgate</i>).
    true = gate is used
    false = gate is not used.
    Typical value = true.
    '''
    lvgate: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates if LV gate is active (<i>LVgate</i>).
    true = gate is used
    false = gate is not used.
    Typical value = true.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>1</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,037.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>2</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,012.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 400.
    '''
    kb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second stage regulator gain (<i>Kb</i>) (&gt; 0). Exciter field current
    controller gain. Typical value = 25.
    '''
    kb1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second stage regulator gain (<i>Kb1</i>). It is exciter field current controller
    gain used as alternative to <i>Kb</i> to represent a variant of the ExcAC2A
    model. Typical value = 25.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 0,28.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>Kd</i>)
    (&gt;= 0). Typical value = 0,35.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>Kf</i>) (&gt;= 0). Typical
    value = 0,03.
    '''
    kh: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current feedback gain (<i>Kh</i>) (&gt;= 0). Typical value
    = 1.
    '''
    kl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limiter gain (<i>Kl</i>). Typical value = 10.
    '''
    kl1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model (<i>Kl1</i>). Typical
    value = 1.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>)
    (&gt;= 0). Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,02.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 0,6.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf</i>) (&gt; 0).
    Typical value = 1.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vamax</i>) (&gt; 0). Typical value
    = 8.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vamin</i>) (&lt; 0). Typical value
    = -8.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>1</sub></i>) (&gt; 0). Typical
    value = 4,4.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>2</sub></i>) (&gt; 0). Typical
    value = 3,3.
    '''
    vfemax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limit reference (<i>Vfemax</i>) (&gt;= 0). Typical
    value = 4,4.
    '''
    vlr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum exciter field current (<i>Vlr</i>) (&gt; 0). Typical value = 4,4.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator outputs (<i>Vrmax</i>) (&gt; 0). Typical value
    = 105.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator outputs (<i>Vrmin</i>) (&lt; 0). Typical value
    = -95.
    '''
@dataclass
class ExcAC3A(ExcitationSystemDynamics):
    '''
    Modified IEEE AC3A alternator-supplied rectifier excitation system with
    different field current limit.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>1</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 1,143.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>2</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,1.
    '''
    efdn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value of <i>Efd </i>at which feedback gain changes (<i>Efdn</i>) (&gt;
    0). Typical value = 2,36.
    '''
    ka: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 45,62.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 0,104.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>Kd</i>)
    (&gt;= 0). Typical value = 0,499.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>Kf</i>) (&gt;= 0). Typical
    value = 0,143.
    '''
    kf1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model (<i>Kf1</i>). Typical
    value = 1.
    '''
    kf2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model (<i>Kf2</i>). Typical
    value = 0.
    '''
    klv: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain used in the minimum field voltage limiter loop (<i>Klv</i>). Typical
    value = 0,194.
    '''
    kn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>Kn</i>) (&gt;= 0). Typical
    value =0,05.
    '''
    kr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Constant associated with regulator and alternator field power supply (<i>Kr</i>)
    (&gt; 0). Typical value =3,77.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>).
    Typical value = 0.
    '''
    ta: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,013.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 1,17.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf</i>) (&gt; 0).
    Typical value = 1.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vamax</i>) (&gt; 0). Typical value
    = 1.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vamin</i>) (&lt; 0). Typical value
    = -0,95.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>1</sub></i>) (&gt; 0). Typical
    value = 6.24.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>2</sub></i>) (&gt; 0). Typical
    value = 4,68.
    '''
    vemin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum exciter voltage output (<i>Vemin</i>) (&lt;= 0). Typical value
    = 0.
    '''
    vfemax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limit reference (<i>Vfemax</i>) (&gt;= 0). Typical
    value = 16.
    '''
    vlv: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage used in the minimum field voltage limiter loop (<i>Vlv</i>).
    Typical value = 0,79.
    '''
@dataclass
class ExcAC4A(ExcitationSystemDynamics):
    '''
    Modified IEEE AC4A alternator-supplied rectifier excitation system with
    different minimum controller output.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 200.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,015.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    10.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    1.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator input limit (<i>Vimax</i>) (&gt; 0). Typical
    value = 10.
    '''
    vimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator input limit (<i>Vimin</i>) (&lt; 0). Typical
    value = -10.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; 0). Typical value
    = 5,64.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0). Typical value
    = -4,53.
    '''
@dataclass
class ExcAC5A(ExcitationSystemDynamics):
    '''
    Modified IEEE AC5A alternator-supplied rectifier excitation system with
    different minimum controller output.
    '''
    a: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model (<i>a</i>). Typical value
    = 1.
    '''
    seefd1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Efd</i><i><sub>1</sub></i> (<i>Se[Efd</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,86.
    '''
    seefd2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Efd</i><i><sub>2</sub></i> (<i>Se[Efd</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,5.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>Efd1</i>) (&gt;
    0). Typical value = 5,6.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>Efd2</i>) (&gt;
    0). Typical value = 4,2.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 400.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>Kf</i>) (&gt;= 0). Typical
    value = 0,03.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>).
    Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,02.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 0,8.
    '''
    tf1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf1</i>) (&gt; 0).
    Typical value = 1.
    '''
    tf2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf2</i>) (&gt;=
    0). Typical value = 0,8.
    '''
    tf3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf3</i>) (&gt;=
    0). Typical value = 0.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; 0). Typical value
    = 7,3.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0). Typical value
    =-7,3.
    '''
@dataclass
class ExcAC6A(ExcitationSystemDynamics):
    '''
    Modified IEEE AC6A alternator-supplied rectifier excitation system with
    speed input.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>1</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,214.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>2</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,044.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 536.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 0,173.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>Kd</i>)
    (&gt;= 0). Typical value = 1,91.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 1,6.
    '''
    kh: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limiter gain (<i>Kh</i>) (&gt;= 0). Typical value
    = 92.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>).
    Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt;= 0). Typical value =
    0,086.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    9.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    3.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 1.
    '''
    th: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limiter time constant (<i>Th</i>) (&gt; 0). Typical
    value = 0,08.
    '''
    tj: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limiter time constant (<i>Tj</i>) (&gt;= 0). Typical
    value = 0,02.
    '''
    tk: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tk</i>) (&gt;= 0). Typical value =
    0,18.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vamax</i>) (&gt; 0). Typical value
    = 75.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vamin</i>) (&lt; 0). Typical value
    = -75.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>1</sub></i>) (&gt; 0). Typical
    value = 7,4.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>2</sub></i>) (&gt; 0). Typical
    value = 5,55.
    '''
    vfelim: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limit reference (<i>Vfelim</i>) (&gt; 0). Typical
    value = 19.
    '''
    vhmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum field current limiter signal reference (<i>Vhmax</i>) (&gt; 0).
    Typical value = 75.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; 0). Typical value
    = 44.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0). Typical value
    = -36.
    '''
@dataclass
class ExcAC8B(ExcitationSystemDynamics):
    '''
    Modified IEEE AC8B alternator-supplied rectifier excitation system with
    speed input and input limiter.
    '''
    inlim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input limiter indicator.
    true = input limiter <i>Vimax</i> and <i>Vimin</i> is considered
    false = input limiter <i>Vimax </i>and <i>Vimin</i> is not considered.
    Typical value = true.
    '''
    pidlim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PID limiter indicator.
    true = input limiter <i>Vpidmax</i> and <i>Vpidmin</i> is considered
    false = input limiter <i>Vpidmax</i> and <i>Vpidmin</i> is not considered.
    Typical value = true.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>1</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,3.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>2</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 3.
    '''
    telim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector for the limiter on the block (<i>1/sTe</i>).
    See diagram for meaning of true and false.
    Typical value = false.
    '''
    vtmult: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Multiply by generator's terminal voltage indicator.
    true =the limits <i>Vrmax</i> and <i>Vrmin</i> are multiplied by the generator’s
    terminal voltage to represent a thyristor power stage fed from the generator
    terminals
    false = limits are not multiplied by generator's terminal voltage.
    Typical value = false.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 1.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 0,55.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>Kd</i>)
    (&gt;= 0). Typical value = 1,1.
    '''
    kdr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator derivative gain (<i>Kdr</i>) (&gt;= 0). Typical value
    = 10.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 1.
    '''
    kir: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>Kir</i>) (&gt;= 0). Typical value =
    5.
    '''
    kpr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>Kpr</i>) (&gt; 0 if ExcAC8B.kir
    = 0). Typical value = 80.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>).
    Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt;= 0). Typical value =
    0.
    '''
    tdr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>Tdr</i>) (&gt; 0 if ExcAC8B.kdr &gt; 0). Typical
    value = 0,1.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 1,2.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>1</sub></i>) (&gt; 0). Typical
    value = 6,5.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>2</sub></i>) (&gt; 0). Typical
    value = 9.
    '''
    vemin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum exciter voltage output (<i>Vemin</i>) (&lt;= 0). Typical value
    = 0.
    '''
    vfemax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limit reference (<i>Vfemax</i>). Typical value =
    6.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal maximum (<i>Vimax</i>) (&gt; ExcAC8B.vimin). Typical value
    = 35.
    '''
    vimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal minimum (<i>Vimin</i>) (&lt; ExcAC8B.vimax). Typical value
    = -10.
    '''
    vpidmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PID maximum controller output (<i>Vpidmax</i>) (&gt; ExcAC8B.vpidmin).
    Typical value = 35.
    '''
    vpidmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PID minimum controller output (<i>Vpidmin</i>) (&lt; ExcAC8B.vpidmax).
    Typical value = -10.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; 0). Typical value
    = 35.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0). Typical value
    = 0.
    '''
@dataclass
class ExcANS(ExcitationSystemDynamics):
    '''
    Italian excitation system. It represents static field voltage or excitation
    current feedback excitation system.
    '''
    blint: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor control flag (<i>BLINT</i>).
    0 = lead-lag regulator
    1 = proportional integral regulator.
    Typical value = 0.
    '''
    k2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter gain (<i>K</i><i><sub>2</sub></i>). Typical value = 20.
    '''
    k3: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR gain (<i>K</i><i><sub>3</sub></i>). Typical value = 1000.
    '''
    kce: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ceiling factor (<i>K</i><i><sub>CE</sub></i>). Typical value = 1.
    '''
    krvecc: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback enabling (<i>K</i><i><sub>RVECC</sub></i>).
    0 = open loop control
    1 = closed loop control.
    Typical value = 1.
    '''
    kvfif: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback signal flag (<i>K</i><i><sub>VFIF</sub></i>).
    0 = output voltage of the exciter
    1 = exciter field current.
    Typical value = 0.
    '''
    ifmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum exciter current (<i>I</i><i><sub>FMN</sub></i>). Typical value
    = -5,2.
    '''
    ifmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum exciter current (<i>I</i><i><sub>FMX</sub></i>). Typical value
    = 6,5.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>1</sub></i>) (&gt;= 0). Typical value =
    20.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>2</sub></i>) (&gt;= 0). Typical value =
    0,05.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>3</sub></i>) (&gt;= 0). Typical value =
    1,6.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0). Typical
    value = 0,04.
    '''
    vrmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum AVR output (<i>V</i><i><sub>RMN</sub></i>). Typical value = -5,2.
    '''
    vrmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum AVR output (<i>V</i><i><sub>RMX</sub></i>). Typical value = 6,5.
    '''
@dataclass
class ExcAVR1(ExcitationSystemDynamics):
    '''
    Italian excitation system corresponding to IEEE (1968) type 1 model. It
    represents an exciter dynamo and electromechanical regulator.
    '''
    ka: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR gain (<i>K</i><i><sub>A</sub></i>). Typical value = 500.
    '''
    kf: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback gain (<i>K</i><i><sub>F</sub></i>). Typical value = 0,12.
    '''
    se1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>1</sub></i> (<i>S[E</i><i><sub>1</sub></i><i>]</i>).
    Typical value = 0,1.
    '''
    se2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>2</sub></i> (<i>S[E</i><i><sub>2</sub></i><i>]</i>).
    Typical value = 0,03.
    '''
    e1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 1 (<i>E</i><i><sub>1</sub></i>). Typical value = 4.18.
    '''
    e2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 2 (<i>E</i><i><sub>2</sub></i>). Typical value = 3,14.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>A</sub></i>) (&gt;= 0). Typical value
    = 0,2.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant (<i>T</i><i><sub>E</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback time constant (<i>T</i><i><sub>F</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    vrmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum AVR output (<i>V</i><i><sub>RMN</sub></i>). Typical value = -6.
    '''
    vrmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum AVR output (<i>V</i><i><sub>RMX</sub></i>). Typical value = 7.
    '''
@dataclass
class ExcAVR2(ExcitationSystemDynamics):
    '''
    Italian excitation system corresponding to IEEE (1968) type 2 model. It
    represents an alternator and rotating diodes and electromechanic voltage
    regulators.
    '''
    ka: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR gain (<i>K</i><i><sub>A</sub></i>). Typical value = 500.
    '''
    kf: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback gain (<i>K</i><i><sub>F</sub></i>). Typical value = 0,12.
    '''
    se1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>1</sub></i> (<i>S[E</i><i><sub>1</sub></i><i>]</i>).
    Typical value = 0.1.
    '''
    se2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>2</sub></i> (<i>S[E</i><i><sub>2</sub></i><i>]</i>).
    Typical value = 0,03.
    '''
    e1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 1 (<i>E</i><i><sub>1</sub></i>). Typical value = 4,18.
    '''
    e2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 2 (<i>E</i><i><sub>2</sub></i>). Typical value = 3,14.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>A</sub></i>) (&gt;= 0). Typical value
    = 0,02.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant (<i>T</i><i><sub>E</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    tf1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback time constant (<i>T</i><i><sub>F1</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    tf2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback time constant (<i>T</i><i><sub>F2</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    vrmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum AVR output (<i>V</i><i><sub>RMN</sub></i>). Typical value = -6.
    '''
    vrmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum AVR output (<i>V</i><i><sub>RMX</sub></i>). Typical value = 7.
    '''
@dataclass
class ExcAVR3(ExcitationSystemDynamics):
    '''
    Italian excitation system. It represents an exciter dynamo and electric
    regulator.
    '''
    ka: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR gain (<i>K</i><i><sub>A</sub></i>). Typical value = 100.
    '''
    se1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>1</sub></i><i> </i>(<i>S[E</i><i><sub>1</sub></i><i>]</i>).
    Typical value = 0,1.
    '''
    se2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>2</sub></i><i> </i>(<i>S[E</i><i><sub>2</sub></i><i>]</i>).
    Typical value = 0,03.
    '''
    e1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 1 (<i>E</i><i><sub>1</sub></i>). Typical value = 4,18.
    '''
    e2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 2 (<i>E</i><i><sub>2</sub></i>). Typical value = 3,14.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>1</sub></i>) (&gt;= 0). Typical value
    = 20.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>2</sub></i>) (&gt;= 0). Typical value
    = 1,6.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>3</sub></i>) (&gt;= 0). Typical value
    = 0,66.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>4</sub></i>) (&gt;= 0). Typical value
    = 0,07.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant (<i>T</i><i><sub>E</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    vrmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum AVR output (<i>V</i><i><sub>RMN</sub></i>). Typical value = -7,5.
    '''
    vrmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum AVR output (<i>V</i><i><sub>RMX</sub></i>). Typical value = 7,5.
    '''
@dataclass
class ExcAVR4(ExcitationSystemDynamics):
    '''
    Italian excitation system. It represents a static exciter and electric
    voltage regulator.
    '''
    imul: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR output voltage dependency selector (<i>I</i><i><sub>MUL</sub></i>).
    true = selector is connected
    false = selector is not connected.
    Typical value = true.
    '''
    ka: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR gain (<i>K</i><i><sub>A</sub></i>). Typical value = 300.
    '''
    ke: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter gain (<i>K</i><i><sub>E</sub></i><i>)</i>. Typical value = 1.
    '''
    kif: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter internal reactance (<i>K</i><i><sub>IF</sub></i>). Typical value
    = 0.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>1</sub></i>) (&gt;= 0). Typical value
    = 4,8.
    '''
    t1if: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter current feedback time constant (<i>T</i><i><sub>1IF</sub></i>)
    (&gt;= 0). Typical value = 60.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>2</sub></i>) (&gt;= 0). Typical value
    = 1,5.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>3</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR time constant (<i>T</i><i><sub>4</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    tif: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter current feedback time constant (<i>T</i><i><sub>IF</sub></i>) (&gt;=
    0). Typical value = 0.
    '''
    vfmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum exciter output (<i>V</i><i><sub>FMN</sub></i>). Typical value =
    0.
    '''
    vfmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum exciter output (<i>V</i><i><sub>FMX</sub></i>). Typical value =
    5.
    '''
    vrmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum AVR output (<i>V</i><i><sub>RMN</sub></i>). Typical value = 0.
    '''
    vrmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum AVR output (<i>V</i><i><sub>RMX</sub></i>). Typical value = 5.
    '''
@dataclass
class ExcAVR5(ExcitationSystemDynamics):
    '''
    Manual excitation control with field circuit resistance. This model can
    be used as a very simple representation of manual voltage control.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Ka</i>).
    '''
    rex: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Effective output resistance (<i>Rex</i>). <i>Rex</i> represents the effective
    output resistance seen by the excitation system.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Ta</i>) (&gt;= 0).
    '''
@dataclass
class ExcAVR7(ExcitationSystemDynamics):
    '''
    IVO excitation system.
    '''
    a1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead coefficient (<i>A</i><i><sub>1</sub></i>). Typical value = 0,5.
    '''
    a2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag coefficient (<i>A</i><i><sub>2</sub></i>). Typical value = 0,5.
    '''
    a3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead coefficient (<i>A</i><i><sub>3</sub></i>). Typical value = 0,5.
    '''
    a4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag coefficient (<i>A</i><i><sub>4</sub></i>). Typical value = 0,5.
    '''
    a5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead coefficient (<i>A</i><i><sub>5</sub></i>). Typical value = 0,5.
    '''
    a6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag coefficient (<i>A</i><i><sub>6</sub></i>). Typical value = 0,5.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>1</sub></i>). Typical value = 1.
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>3</sub></i>). Typical value = 3.
    '''
    k5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>5</sub></i>). Typical value = 1.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant (<i>T</i><i><sub>1</sub></i>) (&gt;= 0). Typical value
    = 0,05.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>2</sub></i>) (&gt;= 0). Typical value
    = 0,1.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant (<i>T</i><i><sub>3</sub></i>) (&gt;= 0). Typical value
    = 0,1.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>4</sub></i>) (&gt;= 0). Typical value
    = 0,1.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant (<i>T</i><i><sub>5</sub></i>) (&gt;= 0). Typical value
    = 0,1.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>6</sub></i>) (&gt;= 0). Typical value
    = 0,1.
    '''
    vmax1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead-lag maximum limit (<i>Vmax1</i>) (&gt; ExcAVR7.vmin1). Typical value
    = 5.
    '''
    vmax3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead-lag maximum limit (<i>Vmax3</i>) (&gt; ExcAVR7.vmin3). Typical value
    = 5.
    '''
    vmax5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead-lag maximum limit (<i>Vmax5</i>) (&gt; ExcAVR7.vmin5). Typical value
    = 5.
    '''
    vmin1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead-lag minimum limit (<i>Vmin1</i>) (&lt; ExcAVR7.vmax1). Typical value
    = -5.
    '''
    vmin3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead-lag minimum limit (<i>Vmin3</i>) (&lt; ExcAVR7.vmax3). Typical value
    = -5.
    '''
    vmin5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead-lag minimum limit (<i>Vmin5</i>) (&lt; ExcAVR7.vmax5). Typical value
    = -2.
    '''
@dataclass
class ExcBBC(ExcitationSystemDynamics):
    '''
    Transformer fed static excitation system (static with ABB regulator). This
    model represents a static excitation system in which a gated thyristor
    bridge fed by a transformer at the main generator terminals feeds the main
    generator directly.
    '''
    switch: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Supplementary signal routing selector (<i>switch</i>).
    true = <i>Vs</i> connected to 3rd summing point
    false = <i>Vs</i> connected to 1st summing point (see diagram).
    Typical value = false.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum open circuit exciter voltage (<i>Efdmax</i>) (&gt; ExcBBC.efdmin).
    Typical value = 5.
    '''
    efdmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum open circuit exciter voltage (<i>Efdmin</i>) (&lt; ExcBBC.efdmax).
    Typical value = -5.
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steady state gain (<i>K</i>) (not = 0). Typical value = 300.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller time constant (<i>T1</i>) (&gt;= 0). Typical value = 6.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller time constant (<i>T2</i>) (&gt;= 0). Typical value = 1.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T3</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 0,05.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T4</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 0,01.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum control element output (<i>Vrmax</i>) (&gt; ExcBBC.vrmin). Typical
    value = 5.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum control element output (<i>Vrmin</i>) (&lt; ExcBBC.vrmax). Typical
    value = -5.
    '''
    xe: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Effective excitation transformer reactance (<i>Xe</i>) (&gt;= 0). <i>Xe</i>
    models the regulation of the transformer/rectifier unit. Typical value
    = 0,05.
    '''
@dataclass
class ExcCZ(ExcitationSystemDynamics):
    '''
    Czech proportion/integral exciter.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output maximum limit (<i>Efdmax</i>) (&gt; ExcCZ.efdmin).
    '''
    efdmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output minimum limit (<i>Efdmin</i>) (&lt; ExcCZ.efdmax).
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator gain (<i>Ka</i>).
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>).
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator proportional gain (<i>Kp</i>).
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator time constant (<i>Ta</i>) (&gt;= 0).
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator integral time constant (<i>Tc</i>) (&gt;= 0).
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt;= 0).
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator maximum limit (<i>Vrmax</i>) (&gt; ExcCZ.vrmin).
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator minimum limit (<i>Vrmin</i>) (&lt; ExcCZ.vrmax).
    '''
@dataclass
class ExcDC1A(ExcitationSystemDynamics):
    '''
    Modified IEEE DC1A direct current commutator exciter with speed input and
    without underexcitation limiters (UEL) inputs.
    '''
    exclim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>exclim</i>). IEEE standard is ambiguous about lower limit on exciter
    output.
    true = a lower limit of zero is applied to integrator output
    false = a lower limit of zero is not applied to integrator output.
    Typical value = true.
    '''
    seefd1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Efd</i><i><sub>1</sub></i> (<i>Se[Eefd</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,33.
    '''
    seefd2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Efd</i><i><sub>2</sub></i> (<i>Se[Eefd</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,1.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>Efd</i><i><sub>1</sub></i>)
    (&gt; 0). Typical value = 3,1.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>Efd</i><i><sub>2</sub></i>)
    (&gt; 0). Typical value = 2,3.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage exciter output limiter (<i>Efdmax</i>) (&gt; ExcDC1A.efdmin).
    Typical value = 99.
    '''
    efdmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage exciter output limiter (<i>Efdmin</i>) (&lt; ExcDC1A.edfmax).
    Typical value = -99.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 46.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 0.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>Kf</i>) (&gt;= 0). Typical
    value = 0,1.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>).
    Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,06.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 0,46.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf</i>) (&gt; 0).
    Typical value = 1.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; ExcDC1A.vrmin). Typical
    value = 1.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0 and &lt; ExcDC1A.vrmax).
    Typical value = -0,9.
    '''
@dataclass
class ExcDC2A(ExcitationSystemDynamics):
    '''
    Modified IEEE DC2A direct current commutator exciter with speed input,
    one more leg block in feedback loop and without underexcitation limiters
    (UEL) inputs. DC type 2 excitation system model with added speed multiplier,
    added lead-lag, and voltage-dependent limits.
    '''
    exclim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>exclim</i>). IEEE standard is ambiguous about lower limit on exciter
    output.
    true = a lower limit of zero is applied to integrator output
    false = a lower limit of zero is not applied to integrator output.
    Typical value = true.
    '''
    seefd1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Efd</i><i><sub>1</sub></i> (<i>Se[Efd</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,279.
    '''
    seefd2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Efd</i><i><sub>2</sub></i> (<i>Se[Efd</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,117.
    '''
    vtlim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>Vtlim</i>).
    true = limiter at the block (<i>Ka / [1 + sTa]</i>) is dependent on <i>Vt
    </i>
    false = limiter at the block is not dependent on <i>Vt</i>.
    Typical value = true.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>Efd</i><i><sub>1</sub></i>)
    (&gt; 0). Typical value = 3,05.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>Efd</i><i><sub>2</sub></i>)
    (&gt; 0). Typical value = 2,29.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 300.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). If <i>Ke</i>
    is entered as zero, the model calculates an effective value of <i>Ke</i>
    such that the initial condition value of <i>Vr</i> is zero. The zero value
    of <i>Ke</i> is not changed. If <i>Ke</i> is entered as non-zero, its value
    is used directly, without change. Typical value = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>Kf</i>) (&gt;= 0). Typical
    value = 0,1.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>).
    Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,01.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 1,33.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf</i>) (&gt; 0).
    Typical value = 0,675.
    '''
    tf1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf1</i>) (&gt;=
    0). Typical value = 0.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; ExcDC2A.vrmin). Typical
    value = 4,95.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0 and &lt; ExcDC2A.vrmax).
    Typical value = -4,9.
    '''
@dataclass
class ExcDC3A(ExcitationSystemDynamics):
    '''
    Modified IEEE DC3A direct current commutator exciter with speed input,
    and deadband. DC old type 4.
    '''
    efdlim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>Efdlim</i>).
    true = exciter output limiter is active
    false = exciter output limiter not active.
    Typical value = true.
    '''
    exclim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>exclim</i>). IEEE standard is ambiguous about lower limit on exciter
    output.
    true = a lower limit of zero is applied to integrator output
    false = a lower limit of zero not applied to integrator output.
    Typical value = true.
    '''
    seefd1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Efd</i><i><sub>1</sub></i> (<i>Se[Efd</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,1.
    '''
    seefd2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Efd</i><i><sub>2</sub></i> (<i>Se[Efd</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,35.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>Efd</i><i><sub>1</sub></i>)
    (&gt; 0). Typical value = 2,6.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>Efd</i><i><sub>2</sub></i>)
    (&gt; 0). Typical value = 3,45.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage exciter output limiter (<i>Efdmax</i>) (&gt; ExcDC3A.efdmin).
    Typical value = 99.
    '''
    efdmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage exciter output limiter (<i>Efdmin</i>) (&lt; ExcDC3A.efdmax).
    Typical value = -99.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 1.
    '''
    kr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Deadband (<i>Kr</i>). Typical value = 0.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>).
    Typical value = 0.
    '''
    kv: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fast raise/lower contact setting (<i>Kv</i>) (&gt; 0). Typical value =
    0,05.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 1,83.
    '''
    trh: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rheostat travel time (<i>Trh</i>) (&gt; 0). Typical value = 20.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; 0). Typical value
    = 5.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt;= 0). Typical value
    = 0.
    '''
@dataclass
class ExcDC3A1(ExcitationSystemDynamics):
    '''
    Modified old IEEE type 3 excitation system.
    '''
    exclim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>exclim</i>).
    true = lower limit of zero is applied to integrator output
    false = lower limit of zero not applied to integrator output.
    Typical value = true.
    '''
    vblim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Vb limiter indicator.
    true = exciter <i>Vbmax</i> limiter is active
    false = <i>Vb1max</i> is active.
    Typical value = true.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 300.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>Kf</i>) (&gt;= 0). Typical
    value = 0,1.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>Ki</i>) (&gt;= 0). Typical value
    = 4,83.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>Kp</i>) (&gt;= 0). Typical value
    = 4,37.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,01.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 1,83.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf</i>) (&gt;= 0).
    Typical value = 0,675.
    '''
    vb1max: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Available exciter voltage limiter (<i>Vb1max</i>) (&gt; 0). Typical value
    = 11,63.
    '''
    vbmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Available exciter voltage limiter (<i>Vbmax</i>) (&gt; 0). Typical value
    = 11,63.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; ExcDC3A1.vrmin).
    Typical value = 5.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0 and &lt; ExcDC3A1.vrmax).
    Typical value = 0.
    '''
@dataclass
class ExcELIN1(ExcitationSystemDynamics):
    '''
    Static PI transformer fed excitation system ELIN (VATECH) - simplified
    model. This model represents an all-static excitation system. A PI voltage
    controller establishes a desired field current set point for a proportional
    current controller. The integrator of the PI controller has a follow-up
    input to match its signal to the present field current. A power system
    stabilizer with power input is included in the model.
    '''
    dpnf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller follow up deadband (<i>Dpnf</i>). Typical value = 0.
    '''
    efmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum open circuit excitation voltage (<i>Efmax</i>) (&gt; ExcELIN1.efmin).
    Typical value = 5.
    '''
    efmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum open circuit excitation voltage (<i>Efmin</i>) (&lt; ExcELIN1.efmax).
    Typical value = -5.
    '''
    ks1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer gain 1 (<i>Ks1</i>). Typical value = 0.
    '''
    ks2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer gain 2 (<i>Ks2</i>). Typical value = 0.
    '''
    smax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer limit output (<i>smax</i>). Typical value = 0,1.
    '''
    tfi: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current transducer time constant (<i>Tfi</i>) (&gt;= 0). Typical value
    = 0.
    '''
    tnu: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller reset time constant (<i>Tnu</i>) (&gt;= 0). Typical value =
    2.
    '''
    ts1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer phase lag time constant (<i>Ts1</i>) (&gt;= 0). Typical value
    = 1.
    '''
    ts2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer filter time constant (<i>Ts2</i>) (&gt;= 0). Typical value =
    1.
    '''
    tsw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer parameters (<i>Tsw</i>) (&gt;= 0). Typical value = 3.
    '''
    vpi: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current controller gain (<i>Vpi</i>). Typical value = 12,45.
    '''
    vpnf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller follow up gain (<i>Vpnf</i>). Typical value = 2.
    '''
    vpu: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage controller proportional gain (<i>Vpu</i>). Typical value = 34,5.
    '''
    xe: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation transformer effective reactance (<i>Xe</i>) (&gt;= 0). <i>Xe</i>
    represents the regulation of the transformer/rectifier unit. Typical value
    = 0,06.
    '''
@dataclass
class ExcELIN2(ExcitationSystemDynamics):
    '''
    Detailed excitation system ELIN (VATECH). This model represents an all-static
    excitation system. A PI voltage controller establishes a desired field
    current set point for a proportional current controller. The integrator
    of the PI controller has a follow-up input to match its signal to the present
    field current. Power system stabilizer models used in conjunction with
    this excitation system model: PssELIN2, PssIEEE2B, Pss2B.
    '''
    efdbas: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Efdbas</i>). Typical value = 0,1.
    '''
    iefmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>I</i><i><sub>efmax</sub></i>) (&gt; ExcELIN2.iefmin). Typical
    value = 1.
    '''
    iefmax2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum open circuit excitation voltage (<i>I</i><i><sub>efmax2</sub></i>).
    Typical value = -5.
    '''
    iefmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>I</i><i><sub>efmin</sub></i>) (&lt; ExcELIN2.iefmax). Typical
    value = 1.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator input gain (<i>K1</i>). Typical value = 0.
    '''
    k1ec: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator input limit (<i>K1ec</i>). Typical value = 2.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K2</i>). Typical value = 5.
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K3</i>). Typical value = 0,1.
    '''
    k4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K4</i>). Typical value = 0.
    '''
    kd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage controller derivative gain (<i>Kd1</i>). Typical value = 34,5.
    '''
    ke2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Ke2</i>). Typical value = 0,1.
    '''
    ketb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Ketb</i>). Typical value = 0,06.
    '''
    pid1max: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller follow up gain (<i>PID1max</i>). Typical value = 2.
    '''
    seve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>1</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0.
    '''
    seve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>Ve</i><i><sub>2</sub></i>, back of commutating reactance (<i>Se[Ve</i><i><sub>2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 1.
    '''
    tb1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage controller derivative washout time constant (<i>Tb1</i>) (&gt;=
    0). Typical value = 12,45.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Te</i>) (&gt;= 0). Typical value = 0.
    '''
    te2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time Constant (<i>T</i><i><sub>e2</sub></i>) (&gt;= 0). Typical value =
    1.
    '''
    ti1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller follow up deadband (<i>Ti1</i>). Typical value = 0.
    '''
    ti3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>i3</sub></i>) (&gt;= 0). Typical value =
    3.
    '''
    ti4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>i4</sub></i>) (&gt;= 0). Typical value =
    0.
    '''
    tr4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>r4</sub></i>) (&gt;= 0). Typical value =
    1.
    '''
    upmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>Upmax</i>) (&gt; ExcELIN2.upmin). Typical value = 3.
    '''
    upmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>Upmin</i>) (&lt; ExcELIN2.upmax). Typical value = 0.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>1</sub></i>) (&gt; 0). Typical
    value = 3.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>Ve</i><i><sub>2</sub></i>) (&gt; 0). Typical
    value = 0.
    '''
    xp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation transformer effective reactance (<i>Xp</i>). Typical value =
    1.
    '''
@dataclass
class ExcHU(ExcitationSystemDynamics):
    '''
    Hungarian excitation system, with built-in voltage transducer.
    '''
    ke: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage base conversion constant (<i>Ke</i>). Typical value = 4,666.
    '''
    ki: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current base conversion constant (<i>Ki</i>). Typical value = 0,21428.
    '''
    ae: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Major loop PI tag gain factor (<i>Ae</i>). Typical value = 3.
    '''
    ai: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minor loop PI tag gain factor (<i>Ai</i>). Typical value = 22.
    '''
    atr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR constant (<i>Atr</i>). Typical value = 2,19.
    '''
    emax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage control signal upper limit on AVR base (<i>Emax</i>) (&gt;
    ExcHU.emin). Typical value = 0,996.
    '''
    emin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage control signal lower limit on AVR base (<i>Emin</i>) (&lt;
    ExcHU.emax). Typical value = -0,866.
    '''
    imax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Major loop PI tag output signal upper limit (<i>Imax</i>) (&gt; ExcHU.imin).
    Typical value = 2,19.
    '''
    imin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Major loop PI tag output signal lower limit (<i>Imin</i>) (&lt; ExcHU.imax).
    Typical value = 0,1.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Major loop PI tag integration time constant (<i>Te</i>) (&gt;= 0). Typical
    value = 0,154.
    '''
    ti: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minor loop PI control tag integration time constant (<i>Ti</i>) (&gt;=
    0). Typical value = 0,01333.
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant (<i>Tr</i>) (&gt;= 0). If a voltage compensator is
    used in conjunction with this excitation system model, <i>Tr </i>should
    be set to 0. Typical value = 0,01.
    '''
@dataclass
class ExcIEEEAC1A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type AC1A model. The model represents the field-controlled
    alternator-rectifier excitation systems designated type AC1A. These excitation
    systems consist of an alternator main exciter with non-controlled rectifiers.
    Reference: IEEE 421.5-2005, 6.1.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E1</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,1.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E2</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,03.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 400.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0,2.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>K</i><i><sub>D</sub></i>)
    (&gt;= 0). Typical value = 0,38.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>K</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 0,03.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt; 0).
    Typical value = 0,02.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 0,8.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt; 0). Typical value = 1.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>AMAX</sub></i>) (&gt;
    0). Typical value = 14,5.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>AMIN</sub></i>) (&lt;
    0). Typical value = -14,5.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E1</sub></i>) (&gt; 0). Typical
    value = 4,18.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E2</sub></i>) (&gt; 0). Typical
    value = 3,14.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator outputs (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 6,03.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator outputs (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -5,43.
    '''
@dataclass
class ExcIEEEAC2A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type AC2A model. The model represents a high initial response
    field-controlled alternator-rectifier excitation system. The alternator
    main exciter is used with non-controlled rectifiers. The type AC2A model
    is similar to that of type AC1A except for the inclusion of exciter time
    constant compensation and exciter field current limiting elements.
    Reference: IEEE 421.5-2005, 6.2.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E1</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,037.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E2</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,012.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 400.
    '''
    kb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second stage regulator gain (<i>K</i><i><sub>B</sub></i>) (&gt; 0). Typical
    value = 25.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0,28.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>K</i><i><sub>D</sub></i>)
    (&gt;= 0). Typical value = 0,35.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>K</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 0,03.
    '''
    kh: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current feedback gain (<i>K</i><i><sub>H</sub></i>) (&gt;=
    0). Typical value = 1.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt; 0).
    Typical value = 0,02.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 0,6.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt; 0). Typical value = 1.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>AMAX</sub></i>) (&gt;
    0). Typical value = 8.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>AMIN</sub></i>) (&lt;
    0). Typical value = -8.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E1</sub></i>) (&gt; 0). Typical
    value = 4,4.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E2</sub></i>) (&gt; 0). Typical
    value = 3,3.
    '''
    vfemax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limit reference (<i>V</i><i><sub>FEMAX</sub></i>)
    (&gt; 0). Typical value = 4,4.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator outputs (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 105.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator outputs (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -95.
    '''
@dataclass
class ExcIEEEAC3A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type AC3A model. The model represents the field-controlled
    alternator-rectifier excitation systems designated type AC3A. These excitation
    systems include an alternator main exciter with non-controlled rectifiers.
    The exciter employs self-excitation, and the voltage regulator power is
    derived from the exciter output voltage. Therefore, this system has an
    additional nonlinearity, simulated by the use of a multiplier whose inputs
    are the voltage regulator command signal, <i>Va</i>, and the exciter output
    voltage, <i>Efd</i>, times <i>K</i><i><sub>R</sub></i>. This model is applicable
    to excitation systems employing static voltage regulators.
    Reference: IEEE 421.5-2005, 6.3.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E1</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 1,143.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E2</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,1.
    '''
    efdn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value of <i>Efd </i>at which feedback gain changes (<i>E</i><i><sub>FDN</sub></i>)
    (&gt; 0). Typical value = 2,36.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 45,62.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0,104.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>K</i><i><sub>D</sub></i>)
    (&gt;= 0). Typical value = 0,499.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>K</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 0,143.
    '''
    kn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>K</i><i><sub>N</sub></i>)
    (&gt;= 0). Typical value = 0,05.
    '''
    kr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Constant associated with regulator and alternator field power supply (<i>K</i><i><sub>R</sub></i>)
    (&gt; 0). Typical value = 3,77.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt; 0).
    Typical value = 0,013.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 1,17.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt; 0). Typical value = 1.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>AMAX</sub></i>) (&gt;
    0). Typical value = 1.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>AMIN</sub></i>) (&lt;
    0). Typical value = -0,95.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E1</sub></i>) (&gt; 0). Typical
    value = 6,24.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E2</sub></i>) (&gt; 0). Typical
    value = 4,68.
    '''
    vemin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum exciter voltage output (<i>V</i><i><sub>EMIN</sub></i>) (&lt;=
    0). Typical value = 0.
    '''
    vfemax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limit reference (<i>V</i><i><sub>FEMAX</sub></i>)
    (&gt;= 0). Typical value = 16.
    '''
@dataclass
class ExcIEEEAC4A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type AC4A model. The model represents type AC4A alternator-supplied
    controlled-rectifier excitation system which is quite different from the
    other types of AC systems. This high initial response excitation system
    utilizes a full thyristor bridge in the exciter output circuit. The voltage
    regulator controls the firing of the thyristor bridges. The exciter alternator
    uses an independent voltage regulator to control its output voltage to
    a constant value. These effects are not modelled; however, transient loading
    effects on the exciter alternator are included.
    Reference: IEEE 421.5-2005, 6.4.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 200.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt; 0).
    Typical value = 0,015.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0).
    Typical value = 10.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0).
    Typical value = 1.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator input limit (<i>V</i><i><sub>IMAX</sub></i>)
    (&gt; 0). Typical value = 10.
    '''
    vimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator input limit (<i>V</i><i><sub>IMIN</sub></i>)
    (&lt; 0). Typical value = -10.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 5,64.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -4,53.
    '''
@dataclass
class ExcIEEEAC5A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type AC5A model. The model represents a simplified model
    for brushless excitation systems. The regulator is supplied from a source,
    such as a permanent magnet generator, which is not affected by system disturbances.
    Unlike other AC models, this model uses loaded rather than open circuit
    exciter saturation data in the same way as it is used for the DC models.
    Because the model has been widely implemented by the industry, it is sometimes
    used to represent other types of systems when either detailed data for
    them are not available or simplified models are required.
    Reference: IEEE 421.5-2005, 6.5.
    '''
    seefd1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD1</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,86.
    '''
    seefd2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD2</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,5.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD1</sub></i>)
    (&gt; 0). Typical value = 5,6.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD2</sub></i>)
    (&gt; 0). Typical value = 4,2.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 400.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>K</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 0,03.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt; 0).
    Typical value = 0,02.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 0,8.
    '''
    tf1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F1</sub></i>)
    (&gt; 0). Typical value = 1.
    '''
    tf2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F2</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    tf3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F3</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 7,3.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -7,3.
    '''
@dataclass
class ExcIEEEAC6A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type AC6A model. The model represents field-controlled
    alternator-rectifier excitation systems with system-supplied electronic
    voltage regulators. The maximum output of the regulator, <i>V</i><i><sub>R</sub></i>,
    is a function of terminal voltage, <i>V</i><i><sub>T</sub></i>. The field
    current limiter included in the original model AC6A remains in the 2005
    update.
    Reference: IEEE 421.5-2005, 6.6.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E1</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E1</sub></i><i>])</i>
    (&gt;= 0). Typical value = 0,214.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E2</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,044.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 536.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0,173.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>K</i><i><sub>D</sub></i>)
    (&gt;= 0). Typical value = 1,91.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 1,6.
    '''
    kh: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limiter gain (<i>K</i><i><sub>H</sub></i>) (&gt;=
    0). Typical value = 92.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt;= 0).
    Typical value = 0,086.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0).
    Typical value = 9.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0).
    Typical value = 3.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 1.
    '''
    th: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limiter time constant (<i>T</i><i><sub>H</sub></i>)
    (&gt; 0). Typical value = 0,08.
    '''
    tj: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limiter time constant (<i>T</i><i><sub>J</sub></i>)
    (&gt;= 0). Typical value = 0,02.
    '''
    tk: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>K</sub></i>) (&gt;= 0).
    Typical value = 0,18.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>AMAX</sub></i>) (&gt;
    0). Typical value = 75.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (V<sub>AMIN</sub>) (&lt; 0). Typical value
    = -75.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E1</sub></i>) (&gt; 0). Typical
    value = 7,4.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E2</sub></i>) (&gt; 0). Typical
    value = 5,55.
    '''
    vfelim: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limit reference (<i>V</i><i><sub>FELIM</sub></i>)
    (&gt; 0). Typical value = 19.
    '''
    vhmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum field current limiter signal reference (<i>V</i><i><sub>HMAX</sub></i>)
    (&gt; 0). Typical value = 75.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 44.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -36.
    '''
@dataclass
class ExcIEEEAC7B(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type AC7B model. The model represents excitation systems
    which consist of an AC alternator with either stationary or rotating rectifiers
    to produce the DC field requirements. It is an upgrade to earlier AC excitation
    systems, which replace only the controls but retain the AC alternator and
    diode rectifier bridge.
    Reference: IEEE 421.5-2005, 6.7. Note, however, that in IEEE 421.5-2005,
    the [1 / <i>sT</i><i><sub>E</sub></i>] block is shown as [1 / (1 + <i>sT</i><i><sub>E</sub></i>)],
    which is incorrect.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E1</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,44.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E2</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,075.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0,18.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>K</i><i><sub>D</sub></i>)
    (&gt;= 0). Typical value = 0,02.
    '''
    kdr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator derivative gain (<i>K</i><i><sub>DR</sub></i>) (&gt;=
    0). Typical value = 0.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 1.
    '''
    kf1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>K</i><i><sub>F1</sub></i>)
    (&gt;= 0). Typical value = 0,212.
    '''
    kf2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>K</i><i><sub>F2</sub></i>)
    (&gt;= 0). Typical value = 0.
    '''
    kf3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>K</i><i><sub>F3</sub></i>)
    (&gt;= 0). Typical value = 0.
    '''
    kia: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>K</i><i><sub>IA</sub></i>) (&gt;= 0).
    Typical value = 59,69.
    '''
    kir: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>K</i><i><sub>IR</sub></i>) (&gt;= 0).
    Typical value = 4,24.
    '''
    kl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field voltage lower limit parameter (<i>K</i><i><sub>L</sub></i>).
    Typical value = 10.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>P</sub></i>) (&gt;
    0). Typical value = 4,96.
    '''
    kpa: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>K</i><i><sub>PA</sub></i>) (&gt;
    0 if ExcIEEEAC7B.kia = 0). Typical value = 65,36.
    '''
    kpr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>K</i><i><sub>PR</sub></i>) (&gt;
    0 if ExcIEEEAC7B.kir = 0). Typical value = 4,24.
    '''
    tdr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>DR</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 1,1.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt; 0). Typical value = 1.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>AMAX</sub></i>) (&gt;
    0). Typical value = 1.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>AMIN</sub></i>) (&lt;
    0). Typical value = -0,95.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E1</sub></i>) (&gt; 0). Typical
    value = 6,3.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E2</sub></i>) (&gt; 0). Typical
    value = 3,02.
    '''
    vemin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum exciter voltage output (<i>V</i><i><sub>EMIN</sub></i>) (&lt;=
    0). Typical value = 0.
    '''
    vfemax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limit reference (<i>V</i><i><sub>FEMAX</sub></i>).
    Typical value = 6,9.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 5,79.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -5,79.
    '''
@dataclass
class ExcIEEEAC8B(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type AC8B model. This model represents a PID voltage regulator
    with either a brushless exciter or DC exciter. The AVR in this model consists
    of PID control, with separate constants for the proportional (<i>K</i><i><sub>PR</sub></i>),
    integral (<i>K</i><i><sub>IR</sub></i>), and derivative (<i>K</i><i><sub>DR</sub></i>)
    gains. The representation of the brushless exciter (<i>T</i><i><sub>E</sub></i>,
    <i>K</i><i><sub>E</sub></i>, <i>S</i><i><sub>E</sub></i>, <i>K</i><i><sub>C</sub></i>,
    <i>K</i><i><sub>D</sub></i>) is similar to the model type AC2A. The type
    AC8B model can be used to represent static voltage regulators applied to
    brushless excitation systems. Digitally based voltage regulators feeding
    DC rotating main exciters can be represented with the AC type AC8B model
    with the parameters <i>K</i><i><sub>C</sub></i> and <i>K</i><i><sub>D</sub></i>
    set to 0. For thyristor power stages fed from the generator terminals,
    the limits <i>V</i><i><sub>RMAX</sub></i> and <i>V</i><i><sub>RMIN</sub></i><i>
    </i>should be a function of terminal voltage: V<i><sub>T</sub></i> x <i>V</i><i><sub>RMAX</sub></i><sub>
    </sub>and <i>V</i><i><sub>T</sub></i> x <i>V</i><i><sub>RMIN</sub></i>.
    Reference: IEEE 421.5-2005, 6.8.
    '''
    seve1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E1</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,3.
    '''
    seve2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>V</i><i><sub>E2</sub></i>, back of commutating reactance (<i>S</i><i><sub>E</sub></i><i>[V</i><i><sub>E2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 3.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 1.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0,55.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Demagnetizing factor, a function of exciter alternator reactances (<i>K</i><i><sub>D</sub></i>)
    (&gt;= 0). Typical value = 1,1.
    '''
    kdr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator derivative gain (<i>K</i><i><sub>DR</sub></i>) (&gt;=
    0). Typical value = 10.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 1.
    '''
    kir: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>K</i><i><sub>IR</sub></i>) (&gt;= 0).
    Typical value = 5.
    '''
    kpr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>K</i><i><sub>PR</sub></i>) (&gt;
    0 if ExcIEEEAC8B.kir = 0). Typical value = 80.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tdr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>DR</sub></i>) (&gt; 0). Typical value
    = 0,1.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 1,2.
    '''
    ve1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E1</sub></i>) (&gt; 0). Typical
    value = 6,5.
    '''
    ve2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter alternator output voltages back of commutating reactance at which
    saturation is defined (<i>V</i><i><sub>E2</sub></i>) (&gt; 0). Typical
    value = 9.
    '''
    vemin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum exciter voltage output (<i>V</i><i><sub>EMIN</sub></i>) (&lt;=
    0). Typical value = 0.
    '''
    vfemax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field current limit reference (<i>V</i><i><sub>FEMAX</sub></i>).
    Typical value = 6.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 35.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;=
    0). Typical value = 0.
    '''
@dataclass
class ExcIEEEDC1A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type DC1A model. This model represents field-controlled
    DC commutator exciters with continuously acting voltage regulators (especially
    the direct-acting rheostatic, rotating amplifier, and magnetic amplifier
    types). Because this model has been widely implemented by the industry,
    it is sometimes used to represent other types of systems when detailed
    data for them are not available or when a simplified model is required.
    Reference: IEEE 421.5-2005, 5.1.
    '''
    exclim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>exclim</i>). IEEE standard is ambiguous about lower limit on exciter
    output.
    true = a lower limit of zero is applied to integrator output
    false = a lower limit of zero is not applied to integrator output.
    Typical value = true.
    '''
    seefd1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD1</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0.33.
    '''
    seefd2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD2</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,1.
    '''
    uelin: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL input (<i>uelin</i>).
    true = input is connected to the HV gate
    false = input connects to the error signal.
    Typical value = true.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD1</sub></i>)
    (&gt; 0). Typical value = 3,1.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD2</sub></i>)
    (&gt; 0). Typical value = 2,3.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 46.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 0.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>K</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 0.1.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt; 0).
    Typical value = 0,06.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 0,46.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt; 0). Typical value = 1.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    ExcIEEEDC1A.vrmin). Typical value = 1.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0 and &lt; ExcIEEEDC1A.vrmax). Typical value = -0,9.
    '''
@dataclass
class ExcIEEEDC2A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type DC2A model. This model represents field-controlled
    DC commutator exciters with continuously acting voltage regulators having
    supplies obtained from the generator or auxiliary bus. It differs from
    the type DC1A model only in the voltage regulator output limits, which
    are now proportional to terminal voltage <i>V</i><i><sub>T</sub></i>.
    It is representative of solid-state replacements for various forms of older
    mechanical and rotating amplifier regulating equipment connected to DC
    commutator exciters.
    Reference: IEEE 421.5-2005, 5.2.
    '''
    seefd1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD1</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,279.
    '''
    seefd2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD2</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,117.
    '''
    uelin: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL input (<i>uelin</i>).
    true = input is connected to the HV gate
    false = input connects to the error signal.
    Typical value = true.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD1</sub></i>)
    (&gt; 0). Typical value = 3,05.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD2</sub></i>)
    (&gt; 0). Typical value = 2,29.
    '''
    exclim: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>exclim</i>). IEEE standard is ambiguous about lower limit on exciter
    output. Typical value = - 999 which means that there is no limit applied.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 300.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>K</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 0,1.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt; 0).
    Typical value = 0,01.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 1,33.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt; 0). Typical value = 0,675.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>)(&gt;
    ExcIEEEDC2A.vrmin). Typical value = 4,95.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0 and &lt; ExcIEEEDC2A.vrmax). Typical value = -4,9.
    '''
@dataclass
class ExcIEEEDC3A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type DC3A model. This model represents older systems, in
    particular those DC commutator exciters with non-continuously acting regulators
    that were commonly used before the development of the continuously acting
    varieties. These systems respond at basically two different rates, depending
    upon the magnitude of voltage error. For small errors, adjustment is made
    periodically with a signal to a motor-operated rheostat. Larger errors
    cause resistors to be quickly shorted or inserted and a strong forcing
    signal applied to the exciter. Continuous motion of the motor-operated
    rheostat occurs for these larger error signals, even though it is bypassed
    by contactor action.
    Reference: IEEE 421.5-2005, 5.3.
    '''
    exclim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>exclim</i>). IEEE standard is ambiguous about lower limit on exciter
    output.
    true = a lower limit of zero is applied to integrator output
    false = a lower limit of zero is not applied to integrator output.
    Typical value = true.
    '''
    seefd1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD1</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,267.
    '''
    seefd2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD2</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,068.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD1</sub></i>)
    (&gt; 0). Typical value = 3,375.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD2</sub></i>)
    (&gt; 0). Typical value = 3,15.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 0,05.
    '''
    kv: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fast raise/lower contact setting (<i>K</i><i><sub>V</sub></i>) (&gt; 0).
    Typical value = 0,05.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 0,5.
    '''
    trh: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rheostat travel time (<i>T</i><i><sub>RH</sub></i>) (&gt; 0). Typical value
    = 20.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 1.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;=
    0). Typical value = 0.
    '''
@dataclass
class ExcIEEEDC4B(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type DC4B model. These excitation systems utilize a field-controlled
    DC commutator exciter with a continuously acting voltage regulator having
    supplies obtained from the generator or auxiliary bus.
    Reference: IEEE 421.5-2005, 5.4.
    '''
    oelin: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL input (<i>OELin</i>).
    true = LV gate
    false = subtract from error signal.
    Typical value = true.
    '''
    seefd1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD1</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD1</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,08.
    '''
    seefd2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter saturation function value at the corresponding exciter voltage,
    <i>E</i><i><sub>FD2</sub></i> (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>FD2</sub></i><i>]</i>)
    (&gt;= 0). Typical value = 0,27.
    '''
    uelin: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL input (<i>UELin</i>).
    true = HV gate
    false = add to error signal.
    Typical value = true.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD1</sub></i>)
    (&gt; 0). Typical value = 1,75.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter voltage at which exciter saturation is defined (<i>E</i><i><sub>FD2</sub></i>)
    (&gt; 0). Typical value = 2,33.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 1.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator derivative gain (<i>K</i><i><sub>D</sub></i>) (&gt;= 0). Typical
    value = 20.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>K</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 0.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator integral gain (<i>K</i><i><sub>I</sub></i>) (&gt;= 0). Typical
    value = 20.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator proportional gain (<i>K</i><i><sub>P</sub></i>) (&gt;= 0). Typical
    value = 20.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt; 0).
    Typical value = 0,2.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator derivative filter time constant (<i>T</i><i><sub>D</sub></i>)
    (&gt; 0 if ExcIEEEDC4B.kd &gt; 0). Typical value = 0,01.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 0,8.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    vemin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum exciter voltage output (<i>V</i><i><sub>EMIN</sub></i>) (&lt;=
    0). Typical value = 0.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    ExcIEEEDC4B.vrmin). Typical value = 2,7.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;=
    0 and &lt; ExcIEEEDC4B.vrmax). Typical value = -0,9.
    '''
@dataclass
class ExcIEEEST1A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type ST1A model. This model represents systems in which
    excitation power is supplied through a transformer from the generator terminals
    (or the unit’s auxiliary bus) and is regulated by a controlled rectifier.
    The maximum exciter voltage available from such systems is directly related
    to the generator terminal voltage.
    Reference: IEEE 421.5-2005, 7.1.
    '''
    pssin: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector of the Power System Stabilizer (PSS) input (<i>PSSin</i>).
    true = PSS input (<i>Vs</i>) added to error signal
    false = PSS input (<i>Vs</i>) added to voltage regulator output.
    Typical value = true.
    '''
    ilr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limit reference (<i>I</i><i><sub>LR</sub></i><i>)</i>.
    Typical value = 0.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 190.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0,08.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>K</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 0.
    '''
    klr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limiter gain (<i>K</i><i><sub>LR</sub></i>). Typical
    value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0).
    Typical value = 10.
    '''
    tb1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B1</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0).
    Typical value = 1.
    '''
    tc1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C1</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    uelin: Optional[ str | ExcIEEEST1AUELselectorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector of the connection of the UEL input (<i>UELin</i>). Typical value
    = ignoreUELsignal.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>AMAX</sub></i>) (&gt;
    0). Typical value = 14,5.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>AMIN</sub></i>) (&lt;
    0). Typical value = -14,5.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator input limit (<i>V</i><i><sub>IMAX</sub></i>)
    (&gt; 0). Typical value = 999.
    '''
    vimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator input limit (<i>V</i><i><sub>IMIN</sub></i>)
    (&lt; 0). Typical value = -999.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator outputs (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 7,8.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator outputs (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -6,7.
    '''
@dataclass
class ExcIEEEST2A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type ST2A model. Some static systems use both current and
    voltage sources (generator terminal quantities) to comprise the power source.
    The regulator controls the exciter output through controlled saturation
    of the power transformer components. These compound-source rectifier excitation
    systems are designated type ST2A and are represented by ExcIEEEST2A.
    Reference: IEEE 421.5-2005, 7.2.
    '''
    uelin: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL input (<i>UELin</i>).
    true = HV gate
    false = add to error signal.
    Typical value = true.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum field voltage (<i>E</i><i><sub>FDMax</sub></i>) (&gt;= 0). Typical
    value = 99.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). Typical
    value = 120.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 1,82.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>K</i><i><sub>E</sub></i>).
    Typical value = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>K</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 0,05.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>I</sub></i>) (&gt;=
    0). Typical value = 8.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>P</sub></i>) (&gt;=
    0). Typical value = 4,88.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt; 0).
    Typical value = 0,15.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>T</i><i><sub>E</sub></i>) (&gt; 0). Typical value = 0,5.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator outputs (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 1.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator outputs (<i>V</i><i><sub>RMIN</sub></i>) (&lt;=
    0). Typical value = 0.
    '''
@dataclass
class ExcIEEEST3A(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type ST3A model. Some static systems utilize a field voltage
    control loop to linearize the exciter control characteristic. This also
    makes the output independent of supply source variations until supply limitations
    are reached. These systems utilize a variety of controlled-rectifier designs:
    full thyristor complements or hybrid bridges in either series or shunt
    configurations. The power source can consist of only a potential source,
    either fed from the machine terminals or from internal windings. Some designs
    can have compound power sources utilizing both machine potential and current.
    These power sources are represented as phasor combinations of machine terminal
    current and voltage and are accommodated by suitable parameters in model
    type ST3A which is represented by ExcIEEEST3A.
    Reference: IEEE 421.5-2005, 7.3.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>K</i><i><sub>A</sub></i>) (&gt; 0). This is
    parameter <i>K</i> in the IEEE standard. Typical value = 200.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0,2.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback gain constant of the inner loop field regulator (<i>K</i><i><sub>G</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>I</sub></i>) (&gt;=
    0). Typical value = 0.
    '''
    km: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Forward gain constant of the inner loop field regulator (<i>K</i><i><sub>M</sub></i>)
    (&gt; 0). Typical value = 7,93.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>P</sub></i>) (&gt;
    0). Typical value = 6,15.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0).
    Typical value = 10.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0).
    Typical value = 1.
    '''
    thetap: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit phase angle (<i>thetap</i>). Typical value = 0.
    '''
    tm: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Forward time constant of inner loop field regulator (<i>T</i><i><sub>M</sub></i>)
    (&gt; 0). Typical value = 0,4.
    '''
    vbmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum excitation voltage (<i>V</i><i><sub>BMax</sub></i>) (&gt; 0). Typical
    value = 6,9.
    '''
    vgmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum inner loop feedback voltage (<i>V</i><i><sub>GMax</sub></i>) (&gt;=
    0). Typical value = 5,8.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator input limit (<i>V</i><i><sub>IMAX</sub></i>)
    (&gt; 0). Typical value = 0,2.
    '''
    vimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator input limit (<i>V</i><i><sub>IMIN</sub></i>)
    (&lt; 0). Typical value = -0,2.
    '''
    vmmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum inner loop output (<i>V</i><i><sub>MMax</sub></i>) (&gt; 0). Typical
    value = 1.
    '''
    vmmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum inner loop output (<i>V</i><i><sub>MMin</sub></i>) (&lt;= 0). Typical
    value = 0.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 10.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -10.
    '''
    xl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactance associated with potential source (<i>X</i><i><sub>L</sub></i>)
    (&gt;= 0). Typical value = 0,081.
    '''
@dataclass
class ExcIEEEST4B(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type ST4B model. This model is a variation of the type
    ST3A model, with a proportional plus integral (PI) regulator block replacing
    the lag-lead regulator characteristic that is in the ST3A model. Both potential
    and compound source rectifier excitation systems are modelled. The PI regulator
    blocks have non-windup limits that are represented. The voltage regulator
    of this model is typically implemented digitally.
    Reference: IEEE 421.5-2005, 7.4.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>K</i><i><sub>C</sub></i>)
    (&gt;= 0). Typical value = 0,113.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback gain constant of the inner loop field regulator (<i>K</i><i><sub>G</sub></i>)
    (&gt;= 0). Typical value = 0.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>I</sub></i>) (&gt;=
    0). Typical value = 0.
    '''
    kim: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain output (<i>K</i><i><sub>IM</sub></i>).
    Typical value = 0.
    '''
    kir: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>K</i><i><sub>IR</sub></i>). Typical
    value = 10,75.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>P</sub></i>) (&gt;
    0). Typical value = 9,3.
    '''
    kpm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain output (<i>K</i><i><sub>PM</sub></i>).
    Typical value = 1.
    '''
    kpr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>K</i><i><sub>PR</sub></i>). Typical
    value = 10,75.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>A</sub></i>) (&gt;= 0).
    Typical value = 0,02.
    '''
    thetap: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit phase angle (<i>thetap</i>). Typical value = 0.
    '''
    vbmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum excitation voltage (<i>V</i><i><sub>BMax</sub></i>) (&gt; 0). Typical
    value = 11,63.
    '''
    vmmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum inner loop output (<i>V</i><i><sub>MMax</sub></i>) (&gt; ExcIEEEST4B.vmmin).
    Typical value = 99.
    '''
    vmmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum inner loop output (<i>V</i><i><sub>MMin</sub></i>) (&lt; ExcIEEEST4B.vmmax).
    Typical value = -99.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 1.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -0,87.
    '''
    xl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactance associated with potential source (<i>X</i><i><sub>L</sub></i>)
    (&gt;= 0). Typical value = 0,124.
    '''
@dataclass
class ExcIEEEST5B(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type ST5B model. The type ST5B excitation system is a variation
    of the type ST1A model, with alternative overexcitation and underexcitation
    inputs and additional limits.
    The block diagram in the IEEE 421.5 standard has input signal <i>Vc </i>and
    does not indicate the summation point with <i>Vref</i>. The implementation
    of the ExcIEEEST5B shall consider summation point with <i>Vref</i>.
    Reference: IEEE 421.5-2005, 7.5.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier regulation factor (<i>K</i><i><sub>C</sub></i>) (&gt;= 0). Typical
    value = 0,004.
    '''
    kr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator gain (<i>K</i><i><sub>R</sub></i>) (&gt; 0). Typical value =
    200.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Firing circuit time constant (<i>T1</i>) (&gt;= 0). Typical value = 0,004.
    '''
    tb1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator lag time constant (<i>T</i><i><sub>B1</sub></i>) (&gt;= 0). Typical
    value = 6.
    '''
    tb2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator lag time constant (<i>T</i><i><sub>B2</sub></i>) (&gt;= 0). Typical
    value = 0,01.
    '''
    tc1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator lead time constant (<i>T</i><i><sub>C1</sub></i>) (&gt;= 0).
    Typical value = 0,8.
    '''
    tc2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator lead time constant (<i>T</i><i><sub>C2</sub></i>) (&gt;= 0).
    Typical value = 0,08.
    '''
    tob1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL lag time constant (<i>T</i><i><sub>OB1</sub></i>) (&gt;= 0). Typical
    value = 2.
    '''
    tob2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL lag time constant (<i>T</i><i><sub>OB2</sub></i>) (&gt;= 0). Typical
    value = 0,08.
    '''
    toc1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL lead time constant (<i>T</i><i><sub>OC1</sub></i>) (&gt;= 0). Typical
    value = 0,1.
    '''
    toc2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL lead time constant (<i>T</i><i><sub>OC2</sub></i>) (&gt;= 0). Typical
    value = 0,08.
    '''
    tub1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lag time constant (<i>T</i><i><sub>UB1</sub></i>) (&gt;= 0). Typical
    value = 10.
    '''
    tub2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lag time constant (<i>T</i><i><sub>UB2</sub></i>) (&gt;= 0). Typical
    value = 0,05.
    '''
    tuc1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lead time constant (<i>T</i><i><sub>UC1</sub></i>) (&gt;= 0). Typical
    value = 2.
    '''
    tuc2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lead time constant (<i>T</i><i><sub>UC2</sub></i>) (&gt;= 0). Typical
    value = 0,1.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 5.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -4.
    '''
@dataclass
class ExcIEEEST6B(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type ST6B model. This model consists of a PI voltage regulator
    with an inner loop field voltage regulator and pre-control. The field voltage
    regulator implements a proportional control. The pre-control and the delay
    in the feedback circuit increase the dynamic response.
    Reference: IEEE 421.5-2005, 7.6.
    '''
    ilr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limit reference (<i>I</i><i><sub>LR</sub></i>) (&gt;
    0). Typical value = 4,164.
    '''
    kci: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limit adjustment (<i>K</i><i><sub>CI</sub></i>)
    (&gt; 0). Typical value = 1,0577.
    '''
    kff: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pre-control gain constant of the inner loop field regulator (<i>K</i><i><sub>FF</sub></i>).
    Typical value = 1.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback gain constant of the inner loop field regulator (<i>K</i><i><sub>G</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    kia: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>K</i><i><sub>IA</sub></i>) (&gt; 0).
    Typical value = 45,094.
    '''
    klr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limiter gain (<i>K</i><i><sub>LR</sub></i>) (&gt;
    0). Typical value = 17,33.
    '''
    km: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Forward gain constant of the inner loop field regulator (<i>K</i><i><sub>M</sub></i>).
    Typical value = 1.
    '''
    kpa: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<u>K</u><u><sub>PA</sub></u>) (&gt;
    0). Typical value = 18,038.
    '''
    oelin: Optional[ str | ExcST6BOELselectorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL input selector (<i>OELin</i>). Typical value = noOELinput.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback time constant of inner loop field voltage regulator (<i>T</i><i><sub>G</sub></i>)
    (&gt;= 0). Typical value = 0,02.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (V<i><sub>AMAX</sub></i>) (&gt; 0). Typical
    value = 4,81.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>AMIN</sub></i>) (&lt;
    0). Typical value = -3,85.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 4,81.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -3,85.
    '''
@dataclass
class ExcIEEEST7B(ExcitationSystemDynamics):
    '''
    IEEE 421.5-2005 type ST7B model. This model is representative of static
    potential-source excitation systems. In this system, the AVR consists of
    a PI voltage regulator. A phase lead-lag filter in series allows the introduction
    of a derivative function, typically used with brushless excitation systems.
    In that case, the regulator is of the PID type. In addition, the terminal
    voltage channel includes a phase lead-lag filter. The AVR includes the
    appropriate inputs on its reference for overexcitation limiter (OEL1),
    underexcitation limiter (UEL), stator current limiter (SCL), and current
    compensator (DROOP). All these limitations, when they work at voltage reference
    level, keep the PSS (VS signal from PSS) in operation. However, the UEL
    limitation can also be transferred to the high value (HV) gate acting on
    the output signal. In addition, the output signal passes through a low
    value (LV) gate for a ceiling overexcitation limiter (OEL2).
    Reference: IEEE 421.5-2005, 7.7.
    '''
    kh: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High-value gate feedback gain (<i>K</i><i><sub>H</sub></i>) (&gt;= 0).
    Typical value = 1.
    '''
    kia: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>K</i><i><sub>IA</sub></i>) (&gt;= 0).
    Typical value = 1.
    '''
    kl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low-value gate feedback gain (<i>K</i><i><sub>L</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    kpa: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>K</i><i><sub>PA</sub></i>) (&gt;
    0). Typical value = 40.
    '''
    oelin: Optional[ str | ExcST7BOELselectorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL input selector (<i>OELin</i>). Typical value = noOELinput.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator lag time constant (<i>T</i><i><sub>B</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator lead time constant (<i>T</i><i><sub>C</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>T</i><i><sub>F</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback time constant of inner loop field voltage regulator (<i>T</i><i><sub>G</sub></i>)
    (&gt;= 0). Typical value = 1.
    '''
    tia: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback time constant (<i>T</i><i><sub>IA</sub></i>) (&gt;= 0). Typical
    value = 3.
    '''
    uelin: Optional[ str | ExcST7BUELselectorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL input selector (<i>UELin</i>). Typical value = noUELinput.
    '''
    vmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage reference signal (<i>V</i><i><sub>MAX</sub></i>) (&gt;
    0 and &gt; ExcIEEEST7B.vmin). Typical value = 1,1.
    '''
    vmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage reference signal (<i>V</i><i><sub>MIN</sub></i>) (&gt;
    0 and &lt; ExcIEEEST7B.vmax). Typical value = 0,9.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>V</i><i><sub>RMAX</sub></i>) (&gt;
    0). Typical value = 5.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>V</i><i><sub>RMIN</sub></i>) (&lt;
    0). Typical value = -4,5.
    '''
@dataclass
class ExcNI(ExcitationSystemDynamics):
    '''
    Bus or solid fed SCR (silicon-controlled rectifier) bridge excitation system
    model type NI (NVE).
    '''
    busFedSelector: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fed by selector (<i>BusFedSelector</i>).
    true = bus fed (switch is closed)
    false = solid fed (switch is open).
    Typical value = true.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 210.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gain (<i>Kf</i>) (&gt; 0). Typical
    value 0,01.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    <i>rc</i> / <i>rfd</i> (<i>R</i>) (&gt;= 0).
    0 means exciter has negative current capability
    &gt; 0 means exciter does not have negative current capability.
    Typical value = 5.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,02.
    '''
    tf1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf1</i>) (&gt; 0).
    Typical value = 1,0.
    '''
    tf2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf2</i>) (&gt; 0).
    Typical value = 0,1.
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tr</i>) (&gt;= 0). Typical value = 0,02.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator ouput (<i>Vrmax</i>) (&gt; ExcNI.vrmin). Typical
    value = 5,0.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator ouput (<i>Vrmin</i>) (&lt; ExcNI.vrmax). Typical
    value = -2,0.
    '''
@dataclass
class ExcOEX3T(ExcitationSystemDynamics):
    '''
    Modified IEEE type ST1 excitation system with semi-continuous and acting
    terminal voltage limiter.
    '''
    e1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation parameter (<i>E</i><i><sub>1</sub></i>).
    '''
    e2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation parameter (<i>E</i><i><sub>2</sub></i>).
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>A</sub></i>).
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>C</sub></i>).
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>D</sub></i>).
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>E</sub></i>).
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>F</sub></i>).
    '''
    see1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation parameter (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>1</sub></i><i>]</i>).
    '''
    see2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation parameter (<i>S</i><i><sub>E</sub></i><i>[E</i><i><sub>2</sub></i><i>]</i>).
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>1</sub></i>) (&gt;= 0).
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>2</sub></i>) (&gt;= 0).
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>3</sub></i>) (&gt;= 0).
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>4</sub></i>) (&gt;= 0).
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>5</sub></i>) (&gt;= 0).
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>6</sub></i>) (&gt;= 0).
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>E</sub></i>) (&gt;= 0).
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>F</sub></i>) (&gt;= 0).
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>V</i><i><sub>RMAX</sub></i>) (&gt; ExcOEX3T.vrmin).
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>V</i><i><sub>RMIN</sub></i>) (&lt; ExcOEX3T.vrmax).
    '''
@dataclass
class ExcPIC(ExcitationSystemDynamics):
    '''
    Proportional/integral regulator excitation system. This model can be used
    to represent excitation systems with a proportional-integral (PI) voltage
    regulator controller.
    '''
    e1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 1 (<i>E</i><i><sub>1</sub></i>). Typical value = 0.
    '''
    e2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 2 (<i>E</i><i><sub>2</sub></i>). Typical value = 0.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter maximum limit (<i>E</i><i><sub>fdmax</sub></i>) (&gt; ExcPIC.efdmin).
    Typical value = 8.
    '''
    efdmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter minimum limit (<i>E</i><i><sub>fdmin</sub></i>) (&lt; ExcPIC.efdmax).
    Typical value = -0,87.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller gain (<i>K</i><i><sub>a</sub></i>). Typical value = 3,15.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter regulation factor (<i>K</i><i><sub>c</sub></i>). Typical value
    = 0,08.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant (<i>K</i><i><sub>e</sub></i>). Typical value = 0.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback gain (<i>K</i><i><sub>f</sub></i>). Typical value = 0.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current source gain (<i>K</i><i><sub>i</sub></i>). Typical value = 0.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential source gain (<i>K</i><i><sub>p</sub></i>). Typical value = 6,5.
    '''
    se1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>1</sub></i> (<i>Se</i><i><sub>1</sub></i>).
    Typical value = 0.
    '''
    se2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>2</sub></i> (<i>Se</i><i><sub>2</sub></i>).
    Typical value = 0.
    '''
    ta1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller time constant (<i>T</i><i><sub>a1</sub></i>) (&gt;= 0). Typical
    value = 1.
    '''
    ta2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>T</i><i><sub>a2</sub></i>) (&gt;= 0).
    Typical value = 0,01.
    '''
    ta3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant (<i>T</i><i><sub>a3</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    ta4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>a4</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant (<i>T</i><i><sub>e</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tf1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback time constant (<i>T</i><i><sub>f1</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tf2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback lag time constant (<i>T</i><i><sub>f2</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    vr1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI maximum limit (<i>V</i><i><sub>r1</sub></i>). Typical value = 1.
    '''
    vr2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI minimum limit (<i>V</i><i><sub>r2</sub></i>). Typical value = -0,87.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator maximum limit (<i>V</i><i><sub>rmax</sub></i>) (&gt;
    ExcPIC.vrmin). Typical value = 1.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator minimum limit (<i>V</i><i><sub>rmin</sub></i>) (&lt;
    ExcPIC.vrmax). Typical value = -0,87.
    '''
@dataclass
class ExcREXS(ExcitationSystemDynamics):
    '''
    General purpose rotating excitation system. This model can be used to represent
    a wide range of excitation systems whose DC power source is an AC or DC
    generator. It encompasses IEEE type AC1, AC2, DC1, and DC2 excitation system
    models.
    '''
    e1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 1 (<i>E</i><i><sub>1</sub></i>). Typical value = 3.
    '''
    e2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage value 2 (<i>E</i><i><sub>2</sub></i>). Typical value = 4.
    '''
    fbf: Optional[ str | ExcREXSFeedbackSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback signal flag (<i>fbf</i>). Typical value = fieldCurrent.
    '''
    flimf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limit type flag (<i>Flimf</i>). Typical value = 0.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier regulation factor (<i>Kc</i>). Typical value = 0,05.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter regulation factor (<i>Kd</i>). Typical value = 2.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field proportional constant (<i>Ke</i>). Typical value = 1.
    '''
    kefd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage feedback gain (<i>Kefd</i>). Typical value = 0.
    '''
    kf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback gain (<i>Kf</i>) (&gt;= 0). Typical value = 0,05.
    '''
    kh: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage controller feedback gain (<i>Kh</i>). Typical value = 0.
    '''
    kii: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field current regulator integral gain (<i>Kii</i>). Typical value = 0.
    '''
    kip: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field current regulator proportional gain (<i>Kip</i>). Typical value =
    1.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>).
    Typical value = 0.
    '''
    kvi: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>Kvi</i>). Typical value = 0.
    '''
    kvp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>Kvp</i>). Typical value = 2800.
    '''
    kvphz: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    V/Hz limiter gain (<i>Kvphz</i>). Typical value = 0.
    '''
    nvphz: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pickup speed of V/Hz limiter (<i>Nvphz</i>). Typical value = 0.
    '''
    se1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>1</sub></i><i> </i>(<i>Se</i><i><sub>1</sub></i>).
    Typical value = 0,0001.
    '''
    se2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at <i>E</i><i><sub>2</sub></i> (<i>Se</i><i><sub>2</sub></i>).
    Typical value = 0,001.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt;= 0). If = 0, block is
    bypassed. Typical value = 0,01.
    '''
    tb1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>Tb1</i>) (&gt;= 0). If = 0, block is bypassed. Typical
    value = 0.
    '''
    tb2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>Tb2</i>) (&gt;= 0). If = 0, block is bypassed. Typical
    value = 0.
    '''
    tc1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant (<i>Tc1</i>) (&gt;= 0). Typical value = 0.
    '''
    tc2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant (<i>Tc2</i>) (&gt;= 0). Typical value = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter field time constant (<i>Te</i>) (&gt; 0). Typical value = 1,2.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate feedback time constant (<i>Tf</i>) (&gt;= 0). If = 0, the feedback
    path is not used. Typical value = 1.
    '''
    tf1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback lead time constant (<i>Tf1</i>) (&gt;= 0). Typical value = 0.
    '''
    tf2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback lag time constant (<i>Tf2</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 0.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field current bridge time constant (<i>Tp</i>) (&gt;= 0). Typical value
    = 0.
    '''
    vcmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum compounding voltage (<i>Vcmax</i>). Typical value = 0.
    '''
    vfmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum exciter field current (<i>Vfmax</i>) (&gt; ExcREXS.vfmin). Typical
    value = 47.
    '''
    vfmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum exciter field current (<i>Vfmin</i>) (&lt; ExcREXS.vfmax). Typical
    value = -20.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator input limit (<i>Vimax</i>). Typical value = 0,1.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum controller output (V<i>rmax</i>) (&gt; ExcREXS.vrmin). Typical
    value = 47.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum controller output (<i>Vrmin</i>) (&lt; ExcREXS.vrmax). Typical
    value = -20.
    '''
    xc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter compounding reactance (<i>Xc</i>). Typical value = 0.
    '''
@dataclass
class ExcRQB(ExcitationSystemDynamics):
    '''
    Excitation system type RQB (four-loop regulator, r?gulateur quatre boucles,
    developed in France) primarily used in nuclear or thermal generating units.
    This excitation system shall be always used together with power system
    stabilizer type PssRQB.
    '''
    ki0: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage reference input gain (<i>Ki0</i>). Typical value = 12,7.
    '''
    ki1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage input gain (<i>Ki1</i>). Typical value = -16,8.
    '''
    klir: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL input gain (<i>KLIR</i>). Typical value = 12,13.
    '''
    klus: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter gain (<i>KLUS</i>). Typical value = 50.
    '''
    lsat: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integrator limiter (<i>LSAT</i>). Typical value = 5,73.
    '''
    lus: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Setpoint (<i>LUS</i>). Typical value = 0,12.
    '''
    mesu: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage input time constant (<i>MESU</i>) (&gt;= 0). Typical value = 0,02.
    '''
    t4m: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input time constant (<i>T4M</i>) (&gt;= 0). Typical value = 5.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead lag time constant (<i>TC</i>) (&gt;= 0). Typical value = 0,02.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead lag time constant (<i>TE</i>) (&gt;= 0). Typical value = 0,22.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant (<i>TF</i>) (&gt;= 0). Typical value = 0,01.
    '''
    ucmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage reference limit (<i>UCMAX</i>) (&gt; ExcRQB.ucmin). Typical
    value = 1,1.
    '''
    ucmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage reference limit (<i>UCMIN</i>) (&lt; ExcRQB.ucmax). Typical
    value = 0,9.
    '''
@dataclass
class ExcSCRX(ExcitationSystemDynamics):
    '''
    Simple excitation system with generic characteristics typical of many excitation
    systems; intended for use where negative field current could be a problem.
    '''
    cswitch: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power source switch (<i>Cswitch</i>).
    true = fixed voltage of 1.0 PU
    false = generator terminal voltage.
    '''
    rcrfd: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ratio of field discharge resistance to field winding resistance ([<i>rc
    / rfd]</i>). Typical value = 0.
    '''
    tatb: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain reduction ratio of lag-lead element ([<i>Ta</i> / <i>Tb</i>]). The
    parameter <i>Ta</i> is not defined explicitly. Typical value = 0.1.
    '''
    emax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum field voltage output (<i>Emax</i>) (&gt; ExcSCRX.emin). Typical
    value = 5.
    '''
    emin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum field voltage output (<i>Emin</i>) (&lt; ExcSCRX.emax). Typical
    value = 0.
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i>) (&gt; 0). Typical value = 200.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Denominator time constant of lag-lead block (<i>Tb</i>) (&gt;= 0). Typical
    value = 10.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of gain block (<i>Te</i>) (&gt; 0). Typical value = 0,02.
    '''
@dataclass
class ExcSEXS(ExcitationSystemDynamics):
    '''
    Simplified excitation system.
    '''
    tatb: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain reduction ratio of lag-lead element (<i>[Ta / Tb]</i>). Typical value
    = 0,1.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage clipping maximum limit (<i>Efdmax</i>) (&gt; ExcSEXS.efdmin).
    Typical value = 5.
    '''
    efdmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage clipping minimum limit (<i>Efdmin</i>) (&lt; ExcSEXS.efdmax).
    Typical value = -5.
    '''
    emax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum field voltage output (<i>Emax</i>) (&gt; ExcSEXS.emin). Typical
    value = 5.
    '''
    emin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum field voltage output (<i>Emin</i>) (&lt; ExcSEXS.emax). Typical
    value = -5.
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i>) (&gt; 0). Typical value = 100.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller gain (<i>Kc</i>) (&gt; 0 if ExcSEXS.tc &gt; 0). Typical value
    = 0,08.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Denominator time constant of lag-lead block (<i>Tb</i>) (&gt;= 0). Typical
    value = 10.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller phase lead time constant (<i>Tc</i>) (&gt;= 0). Typical value
    = 0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of gain block (<i>Te</i>) (&gt; 0). Typical value = 0,05.
    '''
@dataclass
class ExcSK(ExcitationSystemDynamics):
    '''
    Slovakian excitation system. UEL and secondary voltage control are included
    in this model. When this model is used, there cannot be a separate underexcitation
    limiter or VAr controller model.
    '''
    qconoff: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Secondary voltage control state (<i>Qc_on_off</i>).
    true = secondary voltage control is on
    false = secondary voltage control is off.
    Typical value = false.
    '''
    remote: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector to apply automatic calculation in secondary controller model (<i>remote</i>).
    true = automatic calculation is activated
    false = manual set is active; the use of desired value of reactive power
    (<i>Qz</i>) is required.
    Typical value = true.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage clipping upper level limit (<i>Efdmax</i>) (&gt; ExcSK.efdmin).
    '''
    efdmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field voltage clipping lower level limit (<i>Efdmin</i>) (&lt; ExcSK.efdmax).
    '''
    emax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum field voltage output (<i>Emax</i>) (&gt; ExcSK.emin). Typical value
    = 20.
    '''
    emin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum field voltage output (<i>Emin</i>) (&lt; ExcSK.emax). Typical value
    = -20.
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i>). Typical value = 1.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Parameter of underexcitation limit (<i>K1</i>). Typical value = 0,1364.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Parameter of underexcitation limit (<i>K2</i>). Typical value = -0,3861.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller gain (<i>Kc</i>). Typical value = 70.
    '''
    kce: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier regulation factor (<i>Kce</i>). Typical value = 0.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter internal reactance (<i>Kd</i>). Typical value = 0.
    '''
    kgob: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    P controller gain (<i>Kgob</i>). Typical value = 10.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller gain (<i>Kp</i>). Typical value = 1.
    '''
    kqi: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller gain of integral component (<i>Kqi</i>). Typical value =
    0.
    '''
    kqob: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate of rise of the reactive power (<i>Kqob</i>).
    '''
    kqp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller gain (<i>Kqp</i>). Typical value = 0.
    '''
    nq: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Deadband of reactive power (<i>nq</i>). Determines the range of sensitivity.
    Typical value = 0,001.
    '''
    qz: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Desired value (setpoint) of reactive power, manual setting (<i>Qz</i>).
    '''
    sbase: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Apparent power of the unit (<i>Sbase</i>) (&gt; 0). Unit = MVA. Typical
    value = 259.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller phase lead time constant (<i>Tc</i>) (&gt;= 0). Typical value
    = 8.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of gain block (<i>Te</i>) (&gt;= 0). Typical value = 0,1.
    '''
    ti: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller phase lead time constant (<i>Ti</i>) (&gt;= 0). Typical value
    = 2.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tp</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage transducer time constant (<i>Tr</i>) (&gt;= 0). Typical value =
    0,01.
    '''
    uimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum error (<i>UImax</i>) (&gt; ExcSK.uimin). Typical value = 10.
    '''
    uimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum error (<i>UImin</i>) (&lt; ExcSK.uimax). Typical value = -10.
    '''
    urmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum controller output (<i>URmax</i>) (&gt; ExcSK.urmin). Typical value
    = 10.
    '''
    urmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum controller output (<i>URmin</i>) (&lt; ExcSK.urmax). Typical value
    = -10.
    '''
    vtmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum terminal voltage input (<i>Vtmax</i>) (&gt; ExcSK.vtmin). Determines
    the range of voltage deadband. Typical value = 1,05.
    '''
    vtmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum terminal voltage input (<i>Vtmin</i>) (&lt; ExcSK.vtmax). Determines
    the range of voltage deadband. Typical value = 0,95.
    '''
    yp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum output (<i>Yp</i>). Typical value = 1.
    '''
@dataclass
class ExcST1A(ExcitationSystemDynamics):
    '''
    Modification of an old IEEE ST1A static excitation system without overexcitation
    limiter (OEL) and underexcitation limiter (UEL).
    '''
    ilr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limit reference (<i>Ilr</i>). Typical value = 0.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 190.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 0,05.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>Kf</i>) (&gt;= 0). Typical
    value = 0.
    '''
    klr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limiter gain (<i>Klr</i>). Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt;= 0). Typical value =
    0,02.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    10.
    '''
    tb1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb1</i>) (&gt;= 0). Typical value =
    0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    1.
    '''
    tc1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc1</i>) (&gt;= 0). Typical value =
    0.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf</i>) (&gt;= 0).
    Typical value = 1.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vamax</i>) (&gt; 0). Typical value
    = 999.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vamin</i>) (&lt; 0). Typical value
    = -999.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator input limit (<i>Vimax</i>) (&gt; 0). Typical
    value = 999.
    '''
    vimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator input limit (<i>Vimin</i>) (&lt; 0). Typical
    value = -999.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator outputs (<i>Vrmax</i>) (&gt; 0) . Typical value
    = 7,8.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator outputs (<i>Vrmin</i>) (&lt; 0). Typical value
    = -6,7.
    '''
    xe: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation xfmr effective reactance (<i>Xe</i>). Typical value = 0,04.
    '''
@dataclass
class ExcST2A(ExcitationSystemDynamics):
    '''
    Modified IEEE ST2A static excitation system with another lead-lag block
    added to match the model defined by WECC.
    '''
    uelin: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL input (<i>UELin</i>).
    true = HV gate
    false = add to error signal.
    Typical value = false.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum field voltage (<i>Efdmax</i>) (&gt;= 0). Typical value = 99.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator gain (<i>Ka</i>) (&gt; 0). Typical value = 120.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 1,82.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter constant related to self-excited field (<i>Ke</i>). Typical value
    = 1.
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer gains (<i>kf</i>) (&gt;= 0). Typical
    value = 0,05.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>i</sub></i>) (&gt;=
    0). Typical value = 8.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>p</sub></i>) (&gt;=
    0). Typical value = 4,88.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt; 0). Typical value = 0,15.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    0.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter time constant, integration rate associated with exciter control
    (<i>Te</i>) (&gt; 0). Typical value = 0,5.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf</i>) (&gt;= 0).
    Typical value = 0,7.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator outputs (<i>Vrmax</i>) (&gt; 0). Typical value
    = 1.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator outputs (<i>Vrmin</i>) (&lt; 0). Typical value
    = -1.
    '''
@dataclass
class ExcST3A(ExcitationSystemDynamics):
    '''
    Modified IEEE ST3A static excitation system with added speed multiplier.
    '''
    efdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum AVR output (<i>Efdmax</i>) (&gt;= 0). Typical value = 6,9.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 1,1.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback gain constant of the inner loop field regulator (<i>Kg</i>) (&gt;=
    0). Typical value = 1.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>K</i><i><sub>i</sub></i>) (&gt;=
    0). Typical value = 4,83.
    '''
    kj: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    AVR gain (<i>Kj</i>) (&gt; 0). Typical value = 200.
    '''
    km: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Forward gain constant of the inner loop field regulator (<i>Km</i>) (&gt;
    0). Typical value = 7,04.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential source gain (<i>K</i><i><sub>p</sub></i>) (&gt; 0). Typical value
    = 4,37.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks</i>).
    Typical value = 0.
    '''
    ks1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient to allow different usage of the model-speed coefficient (<i>Ks1</i>).
    Typical value = 0.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tb</i>) (&gt;= 0). Typical value =
    6,67.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Tc</i>) (&gt;= 0). Typical value =
    1.
    '''
    thetap: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit phase angle (<i>theta</i><i><sub>p</sub></i>). Typical
    value = 20.
    '''
    tm: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Forward time constant of inner loop field regulator (<i>Tm</i>) (&gt; 0).
    Typical value = 1.
    '''
    vbmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum excitation voltage (<i>Vbmax</i>) (&gt; 0). Typical value = 8,63.
    '''
    vgmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum inner loop feedback voltage (<i>Vgmax</i>) (&gt;= 0). Typical value
    = 6,53.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator input limit (<i>Vimax</i>) (&gt; 0). Typical
    value = 0,2.
    '''
    vimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator input limit (<i>Vimin</i>) (&lt; 0). Typical
    value = -0,2.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; 0). Typical value
    = 1.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0). Typical value
    = -1.
    '''
    xl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactance associated with potential source (<i>Xl</i>) (&gt;= 0). Typical
    value = 0,09.
    '''
@dataclass
class ExcST4B(ExcitationSystemDynamics):
    '''
    Modified IEEE ST4B static excitation system with maximum inner loop feedback
    gain <i>Vgmax</i>.
    '''
    lvgate: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector (<i>LVGate</i>).
    true = <i>LVGate</i> is part of the block diagram
    false = <i>LVGate</i> is not part of the block diagram.
    Typical value = false.
    '''
    uel: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector (<i>UEL</i>).
    true = <i>UEL</i> is part of block diagram
    false = <i>UEL</i> is not part of block diagram.
    Typical value = false.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier loading factor proportional to commutating reactance (<i>Kc</i>)
    (&gt;= 0). Typical value = 0,113.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback gain constant of the inner loop field regulator (<i>Kg</i>) (&gt;=
    0). Typical value = 0.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>Ki</i>) (&gt;= 0). Typical value
    = 0.
    '''
    kim: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain output (<i>Kim</i>). Typical value = 0.
    '''
    kir: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>Kir</i>). Typical value = 10,75.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit gain coefficient (<i>Kp</i>) (&gt; 0). Typical value
    = 9,3.
    '''
    kpm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain output (<i>Kpm</i>). Typical value
    = 1.
    '''
    kpr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>Kpr</i>). Typical value = 10,75.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator time constant (<i>Ta</i>) (&gt;= 0). Typical value =
    0,02.
    '''
    thetap: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential circuit phase angle (<i>theta</i><i><sub>p</sub></i>). Typical
    value = 0.
    '''
    vbmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum excitation voltage (<i>Vbmax</i>) (&gt; 0). Typical value = 11,63.
    '''
    vgmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum inner loop feedback voltage (<i>Vgmax</i>) (&gt;= 0). Typical value
    = 5,8.
    '''
    vmmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum inner loop output (<i>Vmmax</i>) (&gt; ExcST4B.vmmin). Typical
    value = 99.
    '''
    vmmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum inner loop output (<i>Vmmin</i>) (&lt; ExcST4B.vmmax). Typical
    value = -99.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; 0). Typical value
    = 1.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0). Typical value
    = -0,87.
    '''
    xl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactance associated with potential source (<i>Xl</i>) (&gt;= 0). Typical
    value = 0,124.
    '''
@dataclass
class ExcST6B(ExcitationSystemDynamics):
    '''
    Modified IEEE ST6B static excitation system with PID controller and optional
    inner feedback loop.
    '''
    k1: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector (<i>K1</i>).
    true = feedback is from <i>Ifd</i>
    false = feedback is not from <i>Ifd</i>.
    Typical value = true.
    '''
    vilim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector (<i>Vilim</i>).
    true = <i>Vimin</i>-<i>Vimax</i> limiter is active
    false = <i>Vimin</i>-<i>Vimax</i> limiter is not active.
    Typical value = true.
    '''
    vmult: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector (<i>vmult</i>).
    true = multiply regulator output by terminal voltage
    false = do not multiply regulator output by terminal voltage.
    Typical value = true.
    '''
    ilr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limit reference (<i>Ilr</i>) (&gt; 0). Typical value
    = 4,164.
    '''
    kcl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limit adjustment (<i>Kcl</i>) (&gt; 0). Typical
    value = 1,0577.
    '''
    kff: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pre-control gain constant of the inner loop field regulator (<i>Kff</i>).
    Typical value = 1.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback gain constant of the inner loop field regulator (<i>Kg</i>) (&gt;=
    0). Typical value = 1.
    '''
    kia: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>Kia</i>) (&gt; 0). Typical value =
    45,094.
    '''
    klr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exciter output current limit adjustment (<i>Kcl</i>) (&gt; 0). Typical
    value = 17,33.
    '''
    km: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Forward gain constant of the inner loop field regulator (<i>Km</i>). Typical
    value = 1.
    '''
    kpa: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>Kpa</i>) (&gt; 0). Typical value
    = 18,038.
    '''
    kvd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator derivative gain (<i>Kvd</i>). Typical value = 0.
    '''
    oelin: Optional[ str | ExcST6BOELselectorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL input selector (<i>OELin</i>). Typical value = noOELinput (corresponds
    to <i>OELin</i> = 0 on diagram).
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback time constant of inner loop field voltage regulator (<i>Tg</i>)
    (&gt;= 0). Typical value = 0,02.
    '''
    ts: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier firing time constant (<i>Ts</i>) (&gt;= 0). Typical value = 0.
    '''
    tvd: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator derivative gain (<i>Tvd</i>) (&gt;= 0). Typical value
    = 0.
    '''
    vamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vamax</i>) (&gt; 0). Typical value
    = 4,81.
    '''
    vamin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vamin</i>) (&lt; 0). Typical value
    = -3,85.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator input limit (<i>Vimax</i>) (&gt; ExcST6B.vimin).
    Typical value = 10.
    '''
    vimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator input limit (<i>Vimin</i>) (&lt; ExcST6B.vimax).
    Typical value = -10.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; 0). Typical value
    = 4,81.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0). Typical value
    = -3,85.
    '''
    xc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation source reactance (<i>Xc</i>). Typical value = 0,05.
    '''
@dataclass
class ExcST7B(ExcitationSystemDynamics):
    '''
    Modified IEEE ST7B static excitation system without stator current limiter
    (SCL) and current compensator (DROOP) inputs.
    '''
    kh: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High-value gate feedback gain (<i>Kh</i>) (&gt;= 0). Typical value = 1.
    '''
    kia: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator integral gain (<i>Kia</i>) (&gt;= 0). Typical value =
    1.
    '''
    kl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low-value gate feedback gain (<i>Kl</i>) (&gt;= 0). Typical value = 1.
    '''
    kpa: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator proportional gain (<i>Kpa</i>) (&gt; 0). Typical value
    = 40.
    '''
    oelin: Optional[ str | ExcST7BOELselectorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL input selector (<i>OELin</i>). Typical value = noOELinput.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator lag time constant (<i>Tb</i>) (&gt;= 0). Typical value = 1.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Regulator lead time constant (<i>Tc</i>) (&gt;= 0). Typical value = 1.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation control system stabilizer time constant (<i>Tf</i>) (&gt;= 0).
    Typical value = 1.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback time constant of inner loop field voltage regulator (<i>Tg</i>)
    (&gt;= 0). Typical value = 1.
    '''
    tia: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback time constant (<i>Tia</i>) (&gt;= 0). Typical value = 3.
    '''
    ts: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rectifier firing time constant (<i>Ts</i>) (&gt;= 0). Typical value = 0.
    '''
    uelin: Optional[ str | ExcST7BUELselectorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL input selector (<i>UELin</i>). Typical value = noUELinput.
    '''
    vmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage reference signal (<i>Vmax</i>) (&gt; 0 and &gt; ExcST7B.vmin)).
    Typical value = 1,1.
    '''
    vmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage reference signal (<i>Vmin</i>) (&gt; 0 and &lt; ExcST7B.vmax).
    Typical value = 0,9.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage regulator output (<i>Vrmax</i>) (&gt; 0). Typical value
    = 5.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage regulator output (<i>Vrmin</i>) (&lt; 0). Typical value
    = -4,5.
    '''
@dataclass
class ExcitationSystemUserDefined(ExcitationSystemDynamics):
    '''
    Excitation system function block whose dynamic behaviour is described by
    <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class HVDCDynamics(DynamicsFunctionBlock):
    '''
    HVDC whose behaviour is described by reference to a standard model <font
    color="#0f0f0f">or by definition of a user-defined model.</font>
    '''
@dataclass
class CSCDynamics(HVDCDynamics):
    '''
    CSC function block whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''
    CSConverter: Optional[ str | CsConverter ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CsConverter.CSCDynamics'
        })
    '''
    Current source converter to which current source converter dynamics model
    applies.
    '''
@dataclass
class CSCUserDefined(CSCDynamics):
    '''
    Current source converter (CSC) function block whose dynamic behaviour is
    described by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class CSCtype1(CSCDynamics):
    '''
    '''
    IgnAngleContInverter: Optional[ str | IgnAngleContInverter ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_2F9E4B3A_A9A7_43b4_8FAD_55865942D1B6-B'
        })
    '''
    '''
    IdcInverterControl: Optional[ str | IdcInverterControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_339D9BE1_B6FE_4ebd_B884_707C77DA6C91-B'
        })
    '''
    '''
    CCArectifierControl: Optional[ str | CCArectifierControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_AF476A35_E037_4efb_9B03_02299D031FDA-B'
        })
    '''
    '''
    CCAinverter: Optional[ str | CCAinverter ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_C028CE96_6309_4883_89A5_E1B91BD9EF2D-B'
        })
    '''
    '''
@dataclass
class VSCDynamics(HVDCDynamics):
    '''
    VSC function block whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''
    VsConverter: Optional[ str | VsConverter ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VsConverter.VSCDynamics'
        })
    '''
    Voltage source converter to which voltage source converter dynamics model
    applies.
    '''
@dataclass
class VSCUserDefined(VSCDynamics):
    '''
    Voltage source converter (VSC) function block whose dynamic behaviour is
    described by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class VSCtype1(VSCDynamics):
    '''
    '''
    BlockingFunction: Optional[ str | BlockingFunction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BlockingFunction.VSCtype1'
        })
    '''
    '''
    DCvoltageControl: Optional[ str | DCvoltageControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCvoltageControl.VSCtype1'
        })
    '''
    '''
    Pcontrol: Optional[ str | Pcontrol ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Pcontrol.VSCtype1'
        })
    '''
    '''
    PFmodel: Optional[ str | PFmode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PFmode.VSCtype1'
        })
    '''
    '''
    Qlimiter: Optional[ str | Qlimiter ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Qlimiter.VSCtype1'
        })
    '''
    '''
    Qmode: Optional[ str | Qmode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Qmode.VSCtype1'
        })
    '''
    '''
    Qregulator: Optional[ str | Qregulator ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Qregulator.VSCtype1'
        })
    '''
    '''
    Umode: Optional[ str | Umode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Umode.VSCtype1'
        })
    '''
    '''
@dataclass
class MechanicalLoadDynamics(DynamicsFunctionBlock):
    '''
    Mechanical load function block whose behaviour is described by reference
    to a standard model <font color="#0f0f0f">or by definition of a user-defined
    model.</font>
    '''
    AsynchronousMachineDynamics: Optional[ str | AsynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AsynchronousMachineDynamics.MechanicalLoadDynamics'
        })
    '''
    Asynchronous machine model with which this mechanical load model is associated.
    MechanicalLoadDynamics shall have either an association to SynchronousMachineDynamics
    or to AsynchronousMachineDynamics.
    '''
    SynchronousMachineDynamics: Optional[ str | SynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachineDynamics.MechanicalLoadDynamics'
        })
    '''
    Synchronous machine model with which this mechanical load model is associated.
    MechanicalLoadDynamics shall have either an association to SynchronousMachineDynamics
    or AsynchronousMachineDyanmics.
    '''
@dataclass
class MechLoad1(MechanicalLoadDynamics):
    '''
    Mechanical load model type 1.
    '''
    a: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed squared coefficient (<i>a</i>).
    '''
    b: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed coefficient (<i>b</i>).
    '''
    d: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed to the exponent coefficient (<i>d</i>).
    '''
    e: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exponent (<i>e</i>).
    '''
@dataclass
class MechanicalLoadUserDefined(MechanicalLoadDynamics):
    '''
    Mechanical load function block whose dynamic behaviour is described by
    <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class OverexcitationLimiterDynamics(DynamicsFunctionBlock):
    '''
    Overexcitation limiter function block whose behaviour is described by reference
    to a standard model <font color="#0f0f0f">or by definition of a user-defined
    model.</font>
    '''
    ExcitationSystemDynamics: Optional[ str | ExcitationSystemDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ExcitationSystemDynamics.OverexcitationLimiterDynamics'
        })
    '''
    Excitation system model with which this overexcitation limiter model is
    associated.
    '''
@dataclass
class OverexcLim2(OverexcitationLimiterDynamics):
    '''
    Different from LimIEEEOEL, LimOEL2 has a fixed pickup threshold and reduces
    the excitation set-point by means of a non-windup integral regulator.
    <i>Irated</i> is the rated machine excitation current (calculated from
    nameplate conditions: <i>V</i><i><sub>nom</sub></i>, <i>P</i><i><sub>nom</sub></i>,
    <i>CosPhi</i><i><sub>nom</sub></i>).
    '''
    ifdlim: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limit value of rated field current (<i>I</i><i><sub>FDLIM</sub></i>). Typical
    value = 1,05.
    '''
    koi: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain Over excitation limiter (<i>K</i><i><sub>OI</sub></i>). Typical value
    = 0,1.
    '''
    voimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum error signal (<i>V</i><i><sub>OIMAX</sub></i>) (&gt; OverexcLim2.voimin).
    Typical value = 0.
    '''
    voimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum error signal (<i>V</i><i><sub>OIMIN</sub></i>) (&lt; OverexcLim2.voimax).
    Typical value = -9999.
    '''
@dataclass
class OverexcLimIEEE(OverexcitationLimiterDynamics):
    '''
    The over excitation limiter model is intended to represent the significant
    features of OELs necessary for some large-scale system studies. It is the
    result of a pragmatic approach to obtain a model that can be widely applied
    with attainable data from generator owners. An attempt to include all variations
    in the functionality of OELs and duplicate how they interact with the rest
    of the excitation systems would likely result in a level of application
    insufficient for the studies for which they are intended.
    Reference: IEEE OEL 421.5-2005, 9.
    '''
    kramp: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL ramped limit rate (<i>K</i><i><sub>RAMP</sub></i>). Unit = PU / s.
    Typical value = 10.
    '''
    hyst: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL pickup/drop-out hysteresis (<i>HYST</i>). Typical value = 0,03.
    '''
    ifdlim: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL timed field current limit (<i>I</i><i><sub>FDLIM</sub></i>). Typical
    value = 1,05.
    '''
    ifdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL instantaneous field current limit (<i>I</i><i><sub>FDMAX</sub></i>).
    Typical value = 1,5.
    '''
    itfpu: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL timed field current limiter pickup level (<i>I</i><i><sub>TFPU</sub></i>).
    Typical value = 1,05.
    '''
    kcd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    OEL cooldown gain (<i>K</i><i><sub>CD</sub></i>). Typical value = 1.
    '''
@dataclass
class OverexcLimX1(OverexcitationLimiterDynamics):
    '''
    Field voltage over excitation limiter.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low voltage point on the inverse time characteristic (<i>EFD</i><i><sub>1</sub></i>).
    Typical value = 1,1.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Mid voltage point on the inverse time characteristic (<i>EFD</i><i><sub>2</sub></i>).
    Typical value = 1,2.
    '''
    efd3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High voltage point on the inverse time characteristic (<i>EFD</i><i><sub>3</sub></i>).
    Typical value = 1,5.
    '''
    efddes: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Desired field voltage (<i>EFD</i><i><sub>DES</sub></i>). Typical value
    = 0,9.
    '''
    efdrated: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated field voltage (<i>EFD</i><i><sub>RATED</sub></i>). Typical value
    = 1,05.
    '''
    kmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>MX</sub></i>). Typical value = 0,01.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time to trip the exciter at the low voltage point on the inverse time characteristic
    (<i>TIME</i><i><sub>1</sub></i>) (&gt;= 0). Typical value = 120.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time to trip the exciter at the mid voltage point on the inverse time characteristic
    (<i>TIME</i><i><sub>2</sub></i>) (&gt;= 0). Typical value = 40.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time to trip the exciter at the high voltage point on the inverse time
    characteristic (<i>TIME</i><i><sub>3</sub></i>) (&gt;= 0). Typical value
    = 15.
    '''
    vlow: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low voltage limit (<i>V</i><i><sub>LOW</sub></i>) (&gt; 0).
    '''
@dataclass
class OverexcLimX2(OverexcitationLimiterDynamics):
    '''
    Field voltage or current overexcitation limiter designed to protect the
    generator field of an AC machine with automatic excitation control from
    overheating due to prolonged overexcitation.
    '''
    m: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>m</i>).
    true = IFD limiting
    false = EFD limiting.
    '''
    efd1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low voltage or current point on the inverse time characteristic (<i>EFD</i><i><sub>1</sub></i>).
    Typical value = 1,1.
    '''
    efd2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Mid voltage or current point on the inverse time characteristic (<i>EFD</i><i><sub>2</sub></i>).
    Typical value = 1,2.
    '''
    efd3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High voltage or current point on the inverse time characteristic (<i>EFD</i><i><sub>3</sub></i>).
    Typical value = 1,5.
    '''
    efddes: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Desired field voltage if <i>m</i> = false or desired field current if <i>m
    </i>= true (<i>EFD</i><i><sub>DES</sub></i>). Typical value = 1.
    '''
    efdrated: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated field voltage if m = false or rated field current if m = true (<i>EFD</i><i><sub>RATED</sub></i>).
    Typical value = 1,05.
    '''
    kmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>MX</sub></i>). Typical value = 0,002.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time to trip the exciter at the low voltage or current point on the inverse
    time characteristic (<i>TIME</i><i><sub>1</sub></i>) (&gt;= 0). Typical
    value = 120.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time to trip the exciter at the mid voltage or current point on the inverse
    time characteristic (<i>TIME</i><i><sub>2</sub></i>) (&gt;= 0). Typical
    value = 40.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time to trip the exciter at the high voltage or current point on the inverse
    time characteristic (<i>TIME</i><i><sub>3</sub></i>) (&gt;= 0). Typical
    value = 15.
    '''
    vlow: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low voltage limit (<i>V</i><i><sub>LOW</sub></i>) (&gt; 0).
    '''
@dataclass
class OverexcitationLimiterUserDefined(OverexcitationLimiterDynamics):
    '''
    Overexcitation limiter system function block whose dynamic behaviour is
    described by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class PFVArControllerType1Dynamics(DynamicsFunctionBlock):
    '''
    Power factor or VAr controller type 1 function block whose behaviour is
    described by reference to a standard model <font color="#0f0f0f">or by
    definition of a user-defined model.</font>
    '''
    ExcitationSystemDynamics: Optional[ str | ExcitationSystemDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ExcitationSystemDynamics.PFVArControllerType1Dynamics'
        })
    '''
    Excitation system model with which this power actor or VAr controller type
    1 model is associated.
    '''
    RemoteInputSignal: Optional[ str | RemoteInputSignal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteInputSignal.PFVArControllerType1Dynamics'
        })
    '''
    Remote input signal used by this power factor or VAr controller type 1
    model.
    '''
    VoltageAdjusterDynamics: Optional[ str | VoltageAdjusterDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VoltageAdjusterDynamics.PFVArControllerType1Dynamics'
        })
    '''
    Voltage adjuster model associated with this power factor or VAr controller
    type 1 model.
    '''
@dataclass
class PFVArControllerType1UserDefined(PFVArControllerType1Dynamics):
    '''
    Power factor or VAr controller type 1 function block whose dynamic behaviour
    is described by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class PFVArType1IEEEPFController(PFVArControllerType1Dynamics):
    '''
    IEEE PF controller type 1 which operates by moving the voltage reference
    directly.
    Reference: IEEE 421.5-2005, 11.2.
    '''
    ovex: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Overexcitation Flag (<i>OVEX</i>)
    true = overexcited
    false = underexcited.
    '''
    vpfcbw: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PF controller deadband (<i>V</i><i><sub>PFC_BW</sub></i>). Typical value
    = 0,05.
    '''
    tpfc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PF controller time delay (<i>T</i><i><sub>PFC</sub></i>) (&gt;= 0). Typical
    value = 5.
    '''
    vitmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum machine terminal current needed to enable pf/var controller (<i>V</i><i><sub>ITMIN</sub></i>).
    '''
    vpf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Synchronous machine power factor (<i>V</i><i><sub>PF</sub></i>).
    '''
    vpfref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PF controller reference (<i>V</i><i><sub>PFREF</sub></i>).
    '''
    vvtmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum machine terminal voltage needed for pf/var controller to be enabled
    (<i>V</i><i><sub>VTMAX</sub></i>) (&gt; PFVArType1IEEEPFController.vvtmin).
    '''
    vvtmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum machine terminal voltage needed to enable pf/var controller (<i>V</i><i><sub>VTMIN</sub></i>)
    (&lt; PFVArType1IEEEPFController.vvtmax).
    '''
@dataclass
class PFVArType1IEEEVArController(PFVArControllerType1Dynamics):
    '''
    IEEE VAR controller type 1 which operates by moving the voltage reference
    directly.
    Reference: IEEE 421.5-2005, 11.3.
    '''
    vvarcbw: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Var controller deadband (<i>V</i><i><sub>VARC_BW</sub></i>). Typical value
    = 0,02.
    '''
    tvarc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Var controller time delay (<i>T</i><i><sub>VARC</sub></i>) (&gt;= 0). Typical
    value = 5.
    '''
    vvar: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Synchronous machine power factor (<i>V</i><i><sub>VAR</sub></i>).
    '''
    vvarref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Var controller reference (<i>V</i><i><sub>VARREF</sub></i>).
    '''
    vvtmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum machine terminal voltage needed for pf/VAr controller to be enabled
    (<i>V</i><i><sub>VTMAX</sub></i>) (&gt; PVFArType1IEEEVArController.vvtmin).
    '''
    vvtmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum machine terminal voltage needed to enable pf/var controller (<i>V</i><i><sub>VTMIN</sub></i>)
    (&lt; PVFArType1IEEEVArController.vvtmax).
    '''
@dataclass
class PFVArControllerType2Dynamics(DynamicsFunctionBlock):
    '''
    Power factor or VAr controller type 2 function block whose behaviour is
    described by reference to a standard model <font color="#0f0f0f">or by
    definition of a user-defined model.</font>
    '''
    ExcitationSystemDynamics: Optional[ str | ExcitationSystemDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ExcitationSystemDynamics.PFVArControllerType2Dynamics'
        })
    '''
    Excitation system model with which this power factor or VAr controller
    type 2 is associated.
    '''
@dataclass
class PFVArControllerType2UserDefined(PFVArControllerType2Dynamics):
    '''
    Power factor or VAr controller type 2 function block whose dynamic behaviour
    is described by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class PFVArType2Common1(PFVArControllerType2Dynamics):
    '''
    Power factor / reactive power regulator. This model represents the power
    factor or reactive power controller such as the Basler SCP-250. The controller
    measures power factor or reactive power (PU on generator rated power) and
    compares it with the operator's set point.
    [Footnote: Basler SCP-250 is an example of a suitable product available
    commercially. This information is given for the convenience of users of
    this document and does not constitute an endorsement by IEC of this product.]
    '''
    j: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector (<i>J</i>).
    true = control mode for reactive power
    false = control mode for power factor.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reset gain (<i>Ki</i>).
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain (<i>Kp</i>).
    '''
    max: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Output limit (<i>max</i>).
    '''
    ref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reference value of reactive power or power factor (<i>Ref</i>).
    The reference value is initialised by this model. This initialisation can
    override the value exchanged by this attribute to represent a plant operator's
    change of the reference setting.
    '''
@dataclass
class PFVArType2IEEEPFController(PFVArControllerType2Dynamics):
    '''
    IEEE PF controller type 2 which is a summing point type controller making
    up the outside loop of a two-loop system. This controller is implemented
    as a slow PI type controller. The voltage regulator forms the inner loop
    and is implemented as a fast controller.
    Reference: IEEE 421.5-2005, 11.4.
    '''
    exlon: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Overexcitation or under excitation flag (<i>EXLON</i>)
    true = 1 (not in the overexcitation or underexcitation state, integral
    action is active)
    false = 0 (in the overexcitation or underexcitation state, so integral
    action is disabled to allow the limiter to play its role).
    '''
    vs: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Generator sensing voltage (<i>V</i><i><sub>S</sub></i>).
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain of the pf controller (<i>K</i><i><sub>I</sub></i>). Typical
    value = 1.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain of the pf controller (<i>K</i><i><sub>P</sub></i>). Typical
    value = 1.
    '''
    pfref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power factor reference (<i>P</i><i><sub>FREF</sub></i>).
    '''
    vclmt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum output of the pf controller (<i>V</i><i><sub>CLMT</sub></i>). Typical
    value = 0,1.
    '''
    vref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator reference (<i>V</i><i><sub>REF</sub></i>).
    '''
@dataclass
class PFVArType2IEEEVArController(PFVArControllerType2Dynamics):
    '''
    IEEE VAR controller type 2 which is a summing point type controller. It
    makes up the outside loop of a two-loop system. This controller is implemented
    as a slow PI type controller, and the voltage regulator forms the inner
    loop and is implemented as a fast controller.
    Reference: IEEE 421.5-2005, 11.5.
    '''
    exlon: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Overexcitation or under excitation flag (<i>EXLON</i>)
    true = 1 (not in the overexcitation or underexcitation state, integral
    action is active)
    false = 0 (in the overexcitation or underexcitation state, so integral
    action is disabled to allow the limiter to play its role).
    '''
    vs: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Generator sensing voltage (<i>V</i><i><sub>S</sub></i>).
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain of the pf controller (<i>K</i><i><sub>I</sub></i>).
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain of the pf controller (<i>K</i><i><sub>P</sub></i>).
    '''
    qref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power reference (<i>Q</i><i><sub>REF</sub></i>).
    '''
    vclmt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum output of the pf controller (<i>V</i><i><sub>CLMT</sub></i>).
    '''
    vref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage regulator reference (<i>V</i><i><sub>REF</sub></i>).
    '''
@dataclass
class PowerSystemStabilizerDynamics(DynamicsFunctionBlock):
    '''
    Power system stabilizer function block whose behaviour is described by
    reference to a standard model <font color="#0f0f0f">or by definition of
    a user-defined model.</font>
    '''
    ExcitationSystemDynamics: Optional[ str | ExcitationSystemDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ExcitationSystemDynamics.PowerSystemStabilizerDynamics'
        })
    '''
    Excitation system model with which this power system stabilizer model is
    associated.
    '''
@dataclass
class PowerSystemStabilizerUserDefined(PowerSystemStabilizerDynamics):
    '''
    <font color="#0f0f0f">Power system stabilizer</font> function block whose
    dynamic behaviour is described by <font color="#0f0f0f">a user-defined
    model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class Pss1(PowerSystemStabilizerDynamics):
    '''
    Italian PSS with three inputs (speed, frequency, power).
    '''
    kf: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency power input gain (<i>K</i><i><sub>F</sub></i>). Typical value
    = 5.
    '''
    komega: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Shaft speed power input gain (<i>K</i><i><sub>omega</sub></i>). Typical
    value = 0.
    '''
    kpe: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electric power input gain (<i>K</i><i><sub>PE</sub></i>). Typical value
    = 0,3.
    '''
    ks: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PSS gain (<i>Ks</i>). Typical value = 1.
    '''
    vadat: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    <font color="#0f0f0f">Signal selector (<i>V</i><i><sub>ADAT</sub></i>).</font>
    <font color="#0f0f0f">true = closed (generator power is greater than <i>Pmin</i>)</font>
    <font color="#0f0f0f">false = open (<i>Pe</i> is smaller than <i>Pmin</i>).</font>
    <font color="#0f0f0f">Typical value = true.</font>
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum power PSS enabling (<i>Pmin</i>). Typical value = 0,25.
    '''
    t10: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>10</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout (<i>T</i><i><sub>5</sub></i>) (&gt;= 0). Typical value = 3,5.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant (<i>T</i><i><sub>6</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    t7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>7</sub></i>) (&gt;= 0). If = 0,
    both blocks are bypassed. Typical value = 0.
    '''
    t8: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>8</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    t9: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>9</sub></i>) (&gt;= 0). If = 0,
    both blocks are bypassed. Typical value = 0.
    '''
    tpe: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electric power filter time constant (<i>T</i><i><sub>PE</sub></i>) (&gt;=
    0). Typical value = 0,05.
    '''
    vsmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output maximum limit (<i>V</i><i><sub>SMN</sub></i>). Typical
    value = -0,06.
    '''
    vsmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output minimum limit (<i>V</i><i><sub>SMX</sub></i>). Typical
    value = 0,06.
    '''
@dataclass
class Pss1A(PowerSystemStabilizerDynamics):
    '''
    Single input power system stabilizer. It is a modified version in order
    to allow representation of various vendors' implementations on PSS type
    1A.
    '''
    kd: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector (<i>Kd</i>).
    true = e<sup>-sTdelay</sup> used
    false = e<sup>-sTdelay</sup> not used.
    '''
    a1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A</i><i><sub>1</sub></i>).
    '''
    a2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A</i><i><sub>2</sub></i>).
    '''
    a3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A</i><i><sub>3</sub></i>).
    '''
    a4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A</i><i><sub>4</sub></i>).
    '''
    a5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A</i><i><sub>5</sub></i>).
    '''
    a6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A</i><i><sub>6</sub></i>).
    '''
    a7: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A</i><i><sub>7</sub></i>).
    '''
    a8: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A</i><i><sub>8</sub></i>).
    '''
    inputSignalType: Optional[ str | InputSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of input signal (rotorAngularFrequencyDeviation, busFrequencyDeviation,
    generatorElectricalPower, generatorAcceleratingPower, busVoltage, or busVoltageDerivative).
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer gain (<i>K</i><i><sub>s</sub></i>).
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>1</sub></i>) (&gt;= 0).
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>2</sub></i>) (&gt;= 0).
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>3</sub></i>) (&gt;= 0).
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>4</sub></i>) (&gt;= 0).
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>T</i><i><sub>5</sub></i>) (&gt;= 0).
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transducer time constant (<i>T</i><i><sub>6</sub></i>) (&gt;= 0).
    '''
    tdelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tdelay</i>) (&gt;= 0).
    '''
    vcl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer input cutoff threshold (<i>Vcl</i>).
    '''
    vcu: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer input cutoff threshold (<i>Vcu</i>).
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum stabilizer output (<i>Vrmax</i>) (&gt; Pss1A.vrmin).
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum stabilizer output (<i>Vrmin</i>) (&lt; Pss1A.vrmax).
    '''
@dataclass
class Pss2B(PowerSystemStabilizerDynamics):
    '''
    Modified IEEE PSS2B. Extra lead/lag (or rate) block added at end (up to
    4 lead/lags total).
    '''
    a: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Numerator constant (<i>a</i>). Typical value = 1.
    '''
    m: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Denominator order of ramp tracking filter (<i>m</i>). Typical value = 5.
    '''
    n: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Order of ramp tracking filter (<i>n</i>). Typical value = 1.
    '''
    ks1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer gain (<i>Ks1</i>). Typical value = 12.
    '''
    ks2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain on signal #2 (<i>Ks2</i>). Typical value = 0,2.
    '''
    ks3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain on signal #2 input before ramp-tracking filter (<i>Ks3</i>). Typical
    value = 1.
    '''
    ks4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain on signal #2 input after ramp-tracking filter (<i>Ks4</i>). Typical
    value = 1.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>1</sub></i>) (&gt;= 0). Typical
    value = 0,12.
    '''
    t10: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>10</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    t11: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>11</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>2</sub></i>) (&gt;= 0). Typical
    value = 0,02.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>3</sub></i>) (&gt;= 0). Typical
    value = 0,3.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>4</sub></i>) (&gt;= 0). Typical
    value = 0,02.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant on signal #1 (<i>T</i><i><sub>6</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    t7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant on signal #2 (<i>T</i><i><sub>7</sub></i>) (&gt;= 0). Typical
    value = 2.
    '''
    t8: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead of ramp tracking filter (<i>T</i><i><sub>8</sub></i>) (&gt;= 0). Typical
    value = 0,2.
    '''
    t9: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag of ramp tracking filter (<i>T</i><i><sub>9</sub></i>) (&gt;= 0). Typical
    value = 0,1.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead constant (<i>T</i><i><sub>a</sub></i>) (&gt;= 0). Typical value =
    0.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>b</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    tw1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First washout on signal #1 (<i>T</i><i><sub>w1</sub></i>) (&gt;= 0). Typical
    value = 2.
    '''
    tw2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second washout on signal #1 (<i>T</i><i><sub>w2</sub></i>) (&gt;= 0). Typical
    value = 2.
    '''
    tw3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First washout on signal #2 (<i>T</i><i><sub>w3</sub></i>) (&gt;= 0). Typical
    value = 2.
    '''
    tw4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second washout on signal #2 (<i>T</i><i><sub>w4</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    vsi1max: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal #1 maximum limit (<i>Vsi1max</i>) (&gt; Pss2B.vsi1min). Typical
    value = 2.
    '''
    vsi1min: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal #1 minimum limit (<i>Vsi1min</i>) (&lt; Pss2B.vsi1max). Typical
    value = -2.
    '''
    vsi2max: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal #2 maximum limit (<i>Vsi2max</i>) (&gt; Pss2B.vsi2min). Typical
    value = 2.
    '''
    vsi2min: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal #2 minimum limit (<i>Vsi2min</i>) (&lt; Pss2B.vsi2max). Typical
    value = -2.
    '''
    vstmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output maximum limit (<i>Vstmax</i>) (&gt; Pss2B.vstmin). Typical
    value = 0,1.
    '''
    vstmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output minimum limit (<i>Vstmin</i>) (&lt; Pss2B.vstmax). Typical
    value = -0,1.
    '''
@dataclass
class Pss2ST(PowerSystemStabilizerDynamics):
    '''
    PTI microprocessor-based stabilizer type 1.
    '''
    inputSignal1Type: Optional[ str | InputSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of input signal #1 (rotorAngularFrequencyDeviation, busFrequencyDeviation,
    generatorElectricalPower, generatorAcceleratingPower, busVoltage, or busVoltageDerivative
    - shall be different than Pss2ST.inputSignal2Type). Typical value = rotorAngularFrequencyDeviation.
    '''
    inputSignal2Type: Optional[ str | InputSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of input signal #2 (rotorAngularFrequencyDeviation, busFrequencyDeviation,
    generatorElectricalPower, generatorAcceleratingPower, busVoltage, or busVoltageDerivative
    - shall be different than Pss2ST.inputSignal1Type). Typical value = busVoltageDerivative.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>1</sub></i>).
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i><i><sub>2</sub></i>).
    '''
    lsmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>L</i><i><sub>SMAX</sub></i>) (&gt; Pss2ST.lsmin).
    '''
    lsmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>L</i><i><sub>SMIN</sub></i>) (&lt; Pss2ST.lsmax).
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>1</sub></i>) (&gt;= 0).
    '''
    t10: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>10</sub></i>) (&gt;= 0).
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>2</sub></i>) (&gt;= 0).
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>3</sub></i>) (&gt;= 0).
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>4</sub></i>) (&gt;= 0).
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>5</sub></i>) (&gt;= 0).
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>6</sub></i>) (&gt;= 0).
    '''
    t7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>7</sub></i>) (&gt;= 0).
    '''
    t8: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>8</sub></i>) (&gt;= 0).
    '''
    t9: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>9</sub></i>) (&gt;= 0).
    '''
    vcl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Cutoff limiter (<i>V</i><i><sub>CL</sub></i>).
    '''
    vcu: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Cutoff limiter (<i>V</i><i><sub>CU</sub></i>).
    '''
@dataclass
class Pss5(PowerSystemStabilizerDynamics):
    '''
    Detailed Italian PSS.
    '''
    ctw2: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector for second washout enabling (<i>C</i><i><sub>TW2</sub></i>).
    true = second washout filter is bypassed
    false = second washout filter in use.
    Typical value = true.
    '''
    isfreq: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Selector for frequency/shaft speed input (<i>isFreq</i>).
    true = speed (same meaning as InputSignaKind.rotorSpeed)
    false = frequency (same meaning as InputSignalKind.busFrequency).
    Typical value = true (same meaning as InputSignalKind.rotorSpeed).
    '''
    kf: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency/shaft speed input gain (<i>K</i><i><sub>F</sub></i>). Typical
    value = 5.
    '''
    kpe: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electric power input gain (<i>K</i><i><sub>PE</sub></i>). Typical value
    = 0,3.
    '''
    kpss: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PSS gain (<i>K</i><i><sub>PSS</sub></i>). Typical value = 1.
    '''
    vadat: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    <font color="#0f0f0f">Signal selector (<i>V</i><i><sub>adAtt</sub></i>).</font>
    <font color="#0f0f0f">true = closed (generator power is greater than <i>Pmin</i>)</font>
    <font color="#0f0f0f">false = open (<i>Pe</i> is smaller than <i>Pmin</i>).</font>
    <font color="#0f0f0f">Typical value = true.</font>
    '''
    deadband: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output deadband (<i>DEADBAND</i>). Typical value = 0.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum power PSS enabling (<i>Pmin</i>). Typical value = 0,25.
    '''
    tl1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>L1</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tl2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>L2</sub></i>) (&gt;= 0). If = 0,
    both blocks are bypassed. Typical value = 0.
    '''
    tl3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T</i><i><sub>L3</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tl4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (T<sub>L4</sub>) (&gt;= 0). If = 0, both blocks
    are bypassed. Typical value = 0.
    '''
    tpe: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electric power filter time constant (<i>T</i><i><sub>PE</sub></i>) (&gt;=
    0). Typical value = 0,05.
    '''
    tw1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First washout (<i>T</i><i><sub>W1</sub></i>) (&gt;= 0). Typical value =
    3,5.
    '''
    tw2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second washout (<i>T</i><i><sub>W2</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    vsmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output maximum limit (<i>V</i><i><sub>SMN</sub></i>). Typical
    value = -0,1.
    '''
    vsmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output minimum limit (<i>V</i><i><sub>SMX</sub></i>). Typical
    value = 0,1.
    '''
@dataclass
class PssELIN2(PowerSystemStabilizerDynamics):
    '''
    Power system stabilizer typically associated with ExcELIN2 (though PssIEEE2B
    or Pss2B can also be used).
    '''
    apss: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient (<i>a_PSS</i>). Typical value = 0,1.
    '''
    ks1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Ks1</i>). Typical value = 1.
    '''
    ks2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Ks2</i>). Typical value = 0,1.
    '''
    ppss: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient (<i>p_PSS</i>) (&gt;= 0 and &lt;= 4). Typical value = 0,1.
    '''
    psslim: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PSS limiter (<i>psslim</i>). Typical value = 0,1.
    '''
    ts1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Ts1</i>) (&gt;= 0). Typical value = 0.
    '''
    ts2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Ts2</i>) (&gt;= 0). Typical value = 1.
    '''
    ts3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Ts3</i>) (&gt;= 0). Typical value = 1.
    '''
    ts4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Ts4</i>) (&gt;= 0). Typical value = 0,1.
    '''
    ts5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Ts5</i>) (&gt;= 0). Typical value = 0.
    '''
    ts6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Ts6</i>) (&gt;= 0). Typical value = 1.
    '''
@dataclass
class PssIEEE1A(PowerSystemStabilizerDynamics):
    '''
    IEEE 421.5-2005 type PSS1A power system stabilizer model. PSS1A is the
    generalized form of a PSS with a single input signal.
    Reference: IEEE 1A 421.5-2005, 8.1.
    '''
    a1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PSS signal conditioning frequency filter constant (<i>A1</i>). Typical
    value = 0,061.
    '''
    a2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PSS signal conditioning frequency filter constant (<i>A2</i>). Typical
    value = 0,0017.
    '''
    inputSignalType: Optional[ str | InputSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of input signal (rotorAngularFrequencyDeviation, generatorElectricalPower,
    or busFrequencyDeviation). Typical value = rotorAngularFrequencyDeviation.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer gain (<i>Ks</i>). Typical value = 5.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T1</i>) (&gt;= 0). Typical value = 0,3.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T2</i>) (&gt;= 0). Typical value = 0,03.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T3</i>) (&gt;= 0). Typical value = 0,3.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T4</i>) (&gt;= 0). Typical value = 0,03.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>T5</i>) (&gt;= 0). Typical value = 10.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transducer time constant (<i>T6</i>) (&gt;= 0). Typical value = 0,01.
    '''
    vrmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum stabilizer output (<i>Vrmax</i>) (&gt; PssIEEE1A.vrmin). Typical
    value = 0,05.
    '''
    vrmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum stabilizer output (<i>Vrmin</i>) (&lt; PssIEEE1A.vrmax). Typical
    value = -0,05.
    '''
@dataclass
class PssIEEE2B(PowerSystemStabilizerDynamics):
    '''
    IEEE 421.5-2005 type PSS2B power system stabilizer model. This stabilizer
    model is designed to represent a variety of dual-input stabilizers, which
    normally use combinations of power and speed or frequency to derive the
    stabilizing signal.
    Reference: IEEE 2B 421.5-2005, 8.2.
    '''
    m: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Denominator order of ramp tracking filter (<i>M</i>). Typical value = 5.
    '''
    n: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Order of ramp tracking filter (<i>N</i>). Typical value = 1.
    '''
    inputSignal1Type: Optional[ str | InputSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of input signal #1 (rotorAngularFrequencyDeviation, busFrequencyDeviation).
    Typical value = rotorAngularFrequencyDeviation.
    '''
    inputSignal2Type: Optional[ str | InputSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of input signal #2 (generatorElectricalPower). Typical value = generatorElectricalPower.
    '''
    ks1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer gain (<i>Ks1</i>). Typical value = 12.
    '''
    ks2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain on signal #2 (<i>Ks2</i>). Typical value = 0,2.
    '''
    ks3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain on signal #2 input before ramp-tracking filter (<i>Ks3</i>). Typical
    value = 1.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T1</i>) (&gt;= 0). Typical value = 0,12.
    '''
    t10: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T10</i>) (&gt;= 0). Typical value = 0.
    '''
    t11: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T11</i>) (&gt;= 0). Typical value = 0.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T2</i>) (&gt;= 0). Typical value = 0,02.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T3</i>) (&gt;= 0). Typical value = 0,3.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead/lag time constant (<i>T4</i>) (&gt;= 0). Typical value = 0,02.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant on signal #1 (<i>T6</i>) (&gt;= 0). Typical value = 0.
    '''
    t7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant on signal #2 (<i>T7</i>) (&gt;= 0). Typical value = 2.
    '''
    t8: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead of ramp tracking filter (<i>T8</i>) (&gt;= 0). Typical value = 0,2.
    '''
    t9: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag of ramp tracking filter (<i>T9</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tw1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First washout on signal #1 (<i>Tw1</i>) (&gt;= 0). Typical value = 2.
    '''
    tw2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second washout on signal #1 (<i>Tw2</i>) (&gt;= 0). Typical value = 2.
    '''
    tw3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First washout on signal #2 (<i>Tw3</i>) (&gt;= 0). Typical value = 2.
    '''
    tw4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second washout on signal #2 (<i>Tw4</i>) (&gt;= 0). Typical value = 0.
    '''
    vsi1max: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal #1 maximum limit (<i>Vsi1max</i>) (&gt; PssIEEE2B.vsi1min).
    Typical value = 2.
    '''
    vsi1min: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal #1 minimum limit (<i>Vsi1min</i>) (&lt; PssIEEE2B.vsi1max).
    Typical value = -2.
    '''
    vsi2max: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal #2 maximum limit (<i>Vsi2max</i>) (&gt; PssIEEE2B.vsi2min).
    Typical value = 2.
    '''
    vsi2min: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal #2 minimum limit (<i>Vsi2min</i>) (&lt; PssIEEE2B.vsi2max).
    Typical value = -2.
    '''
    vstmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output maximum limit (<i>Vstmax</i>) (&gt; PssIEEE2B.vstmin).
    Typical value = 0,1.
    '''
    vstmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output minimum limit (<i>Vstmin</i>) (&lt; PssIEEE2B.vstmax).
    Typical value = -0,1.
    '''
@dataclass
class PssIEEE3B(PowerSystemStabilizerDynamics):
    '''
    IEEE 421.5-2005 type PSS3B power system stabilizer model. The PSS model
    PSS3B has dual inputs of electrical power and rotor angular frequency deviation.
    The signals are used to derive an equivalent mechanical power signal.
    This model has 2 input signals. They have the following fixed types (expressed
    in terms of InputSignalKind values): the first one is of rotorAngleFrequencyDeviation
    type and the second one is of generatorElectricalPower type.
    Reference: IEEE 3B 421.5-2005, 8.3.
    '''
    a1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A1</i>). Typical value = 0,359.
    '''
    a2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A2</i>). Typical value = 0,586.
    '''
    a3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A3</i>). Typical value = 0,429.
    '''
    a4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A4</i>). Typical value = 0,564.
    '''
    a5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A5</i>). Typical value = 0,001.
    '''
    a6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A6</i>). Typical value = 0.
    '''
    a7: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A7</i>). Typical value = 0,031.
    '''
    a8: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter parameter (<i>A8</i>). Typical value = 0.
    '''
    ks1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain on signal # 1 (<i>Ks1</i>). Typical value = -0,602.
    '''
    ks2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain on signal # 2 (<i>Ks2</i>). Typical value = 30,12.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transducer time constant (<i>T1</i>) (&gt;= 0). Typical value = 0,012.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transducer time constant (<i>T2</i>) (&gt;= 0). Typical value = 0,012.
    '''
    tw1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>Tw1</i>) (&gt;= 0). Typical value = 0,3.
    '''
    tw2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>Tw2</i>) (&gt;= 0). Typical value = 0,3.
    '''
    tw3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>Tw3</i>) (&gt;= 0). Typical value = 0,6.
    '''
    vstmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output maximum limit (<i>Vstmax</i>) (&gt; PssIEEE3B.vstmin).
    Typical value = 0,1.
    '''
    vstmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output minimum limit (<i>Vstmin</i>) (&lt; PssIEEE3B.vstmax).
    Typical value = -0,1.
    '''
@dataclass
class PssIEEE4B(PowerSystemStabilizerDynamics):
    '''
    IEEE 421.5-2005 type PSS4B power system stabilizer. The PSS4B model represents
    a structure based on multiple working frequency bands. Three separate bands,
    respectively dedicated to the low-, intermediate- and high-frequency modes
    of oscillations, are used in this delta omega (speed input) PSS.
    There is an error in the in IEEE 421.5-2005 PSS4B model: the <i>Pe</i>
    input should read –<i>Pe</i>. This implies that the input <i>Pe</i> needs
    to be multiplied by -1.
    Reference: IEEE 4B 421.5-2005, 8.4.
    Parameter details:
    This model has 2 input signals. They have the following fixed types (expressed
    in terms of InputSignalKind values): the first one is of rotorAngleFrequencyDeviation
    type and the second one is of generatorElectricalPower type.
    '''
    bwh1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter 1 (high-frequency band): three dB bandwidth (<i>B</i><i><sub>wi</sub></i>).
    '''
    bwh2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter 2 (high-frequency band): three dB bandwidth (<i>B</i><i><sub>wi</sub></i>).
    '''
    bwl1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter 1 (low-frequency band): three dB bandwidth (<i>B</i><i><sub>wi</sub></i>).
    '''
    bwl2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter 2 (low-frequency band): three dB bandwidth (<i>B</i><i><sub>wi</sub></i>).
    '''
    omeganh1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter 1 (high-frequency band): filter frequency (<i>omega</i><i><sub>ni</sub></i>).
    '''
    omeganh2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter 2 (high-frequency band): filter frequency (<i>omega</i><i><sub>ni</sub></i>).
    '''
    omeganl1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter 1 (low-frequency band): filter frequency (<i>omega</i><i><sub>ni</sub></i>).
    '''
    omeganl2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Notch filter 2 (low-frequency band): filter frequency (<i>omega</i><i><sub>ni</sub></i>).
    '''
    kh: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band gain (<i>K</i><i><sub>H</sub></i>). Typical value = 120.
    '''
    kh1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band differential filter gain (<i>K</i><i><sub>H1</sub></i>). Typical
    value = 66.
    '''
    kh11: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band first lead-lag blocks coefficient (<i>K</i><i><sub>H11</sub></i>).
    Typical value = 1.
    '''
    kh17: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band first lead-lag blocks coefficient (<i>K</i><i><sub>H17</sub></i>).
    Typical value = 1.
    '''
    kh2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band differential filter gain (<i>K</i><i><sub>H2</sub></i>). Typical
    value = 66.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band gain (<i>K</i><i><sub>I</sub></i>). Typical value = 30.
    '''
    ki1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band differential filter gain (<i>K</i><i><sub>I1</sub></i>).
    Typical value = 66.
    '''
    ki11: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band first lead-lag blocks coefficient (<i>K</i><i><sub>I11</sub></i>).
    Typical value = 1.
    '''
    ki17: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band first lead-lag blocks coefficient (<i>K</i><i><sub>I17</sub></i>).
    Typical value = 1.
    '''
    ki2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band differential filter gain (<i>K</i><i><sub>I2</sub></i>).
    Typical value = 66.
    '''
    kl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band gain (<i>K</i><i><sub>L</sub></i>). Typical value = 7.5.
    '''
    kl1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band differential filter gain (<i>K</i><i><sub>L1</sub></i>). Typical
    value = 66.
    '''
    kl11: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band first lead-lag blocks coefficient (<i>K</i><i><sub>L11</sub></i>).
    Typical value = 1.
    '''
    kl17: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band first lead-lag blocks coefficient (<i>K</i><i><sub>L17</sub></i>).
    Typical value = 1.
    '''
    kl2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band differential filter gain (<i>K</i><i><sub>L2</sub></i>). Typical
    value = 66.
    '''
    th1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H1</sub></i>) (&gt;= 0). Typical
    value = 0,01513.
    '''
    th10: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H10</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    th11: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H11</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    th12: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H12</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    th2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H2</sub></i>) (&gt;= 0). Typical
    value = 0,01816.
    '''
    th3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H3</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    th4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H4</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    th5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H5</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    th6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H6</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    th7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H7</sub></i>) (&gt;= 0). Typical
    value = 0,01816.
    '''
    th8: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H8</sub></i>) (&gt;= 0). Typical
    value = 0,02179.
    '''
    th9: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band time constant (<i>T</i><i><sub>H9</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    ti1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I1</sub></i>) (&gt;= 0).
    Typical value = 0,173.
    '''
    ti10: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I10</sub></i>) (&gt;=
    0). Typical value = 0.
    '''
    ti11: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I11</sub></i>) (&gt;=
    0). Typical value = 0.
    '''
    ti12: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I12</sub></i>) (&gt;=
    0). Typical value = 0.
    '''
    ti2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I2</sub></i>) (&gt;= 0).
    Typical value = 0,2075.
    '''
    ti3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I3</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    ti4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I4</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    ti5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I5</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    ti6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I6</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    ti7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I7</sub></i>) (&gt;= 0).
    Typical value = 0,2075.
    '''
    ti8: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I8</sub></i>) (&gt;= 0).
    Typical value = 0,2491.
    '''
    ti9: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band time constant (<i>T</i><i><sub>I9</sub></i>) (&gt;= 0).
    Typical value = 0.
    '''
    tl1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L1</sub></i>) (&gt;= 0). Typical
    value = 1,73.
    '''
    tl10: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L10</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tl11: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L11</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tl12: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L12</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tl2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L2</sub></i>) (&gt;= 0). Typical
    value = 2,075.
    '''
    tl3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L3</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tl4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L4</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tl5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L5</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tl6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L6</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tl7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L7</sub></i>) (&gt;= 0). Typical
    value = 2,075.
    '''
    tl8: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L8</sub></i>) (&gt;= 0). Typical
    value = 2,491.
    '''
    tl9: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band time constant (<i>T</i><i><sub>L9</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    vhmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band output maximum limit (<i>V</i><i><sub>Hmax</sub></i>) (&gt; PssIEEE4B.vhmin).
    Typical value = 0,6.
    '''
    vhmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High band output minimum limit (<i>V</i><i><sub>Hmin</sub></i>) (&lt; PssIEEE4V.vhmax).
    Typical value = -0,6.
    '''
    vimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band output maximum limit (<i>V</i><i><sub>Imax</sub></i>)
    (&gt; PssIEEE4B.vimin). Typical value = 0,6.
    '''
    vimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate band output minimum limit (<i>V</i><i><sub>Imin</sub></i>)
    (&lt; PssIEEE4B.vimax). Typical value = -0,6.
    '''
    vlmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band output maximum limit (<i>V</i><i><sub>Lmax</sub></i>) (&gt; PssIEEE4B.vlmin).
    Typical value = 0,075.
    '''
    vlmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low band output minimum limit (<i>V</i><i><sub>Lmin</sub></i>) (&lt; PssIEEE4B.vlmax).
    Typical value = -0,075.
    '''
    vstmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PSS output maximum limit (<i>V</i><i><sub>STmax</sub></i>) (&gt; PssIEEE4B.vstmin).
    Typical value = 0,15.
    '''
    vstmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PSS output minimum limit (<i>V</i><i><sub>STmin</sub></i>) (&lt; PssIEEE4B.vstmax).
    Typical value = -0,15.
    '''
@dataclass
class PssPTIST1(PowerSystemStabilizerDynamics):
    '''
    PTI microprocessor-based stabilizer type 1.
    '''
    dtc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time step related to activation of controls (<i>deltatc</i>) (&gt;= 0).
    Typical value = 0,025.
    '''
    dtf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time step frequency calculation (<i>deltatf</i>) (&gt;= 0). Typical value
    = 0,025.
    '''
    dtp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time step active power calculation (<i>deltatp</i>) (&gt;= 0). Typical
    value = 0,0125.
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i>). Typical value = 9.
    '''
    m: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>M</i>). <i>M </i>= 2 x <i>H</i>. Typical value = 5.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T1</i>) (&gt;= 0). Typical value = 0,3.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T2</i>) (&gt;= 0). Typical value = 1.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T3</i>) (&gt;= 0). Typical value = 0,2.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T4</i>) (&gt;= 0). Typical value = 0,05.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tf</i>) (&gt;= 0). Typical value = 0,2.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tp</i>) (&gt;= 0). Typical value = 0,2.
    '''
@dataclass
class PssPTIST3(PowerSystemStabilizerDynamics):
    '''
    PTI microprocessor-based stabilizer type 3.
    '''
    isw: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Digital/analogue output switch (<i>Isw</i>).
    true = produce analogue output
    false = convert to digital output, using tap selection table.
    '''
    nav: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number of control outputs to average (<i>NAV</i>) (1 &lt;= <i>NAV</i> &lt;=
    16). Typical value = 4.
    '''
    ncl: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number of counts at limit to active limit function (<i>NCL</i>) (&gt; 0).
    '''
    ncr: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number of counts until reset after limit function is triggered (<i>NCR</i>).
    '''
    a0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>A0</i>).
    '''
    a1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>Al</i>).
    '''
    a2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>A2</i>).
    '''
    a3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>A3</i>).
    '''
    a4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>A4</i>).
    '''
    a5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>A5</i>).
    '''
    al: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>Al</i>).
    '''
    athres: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Threshold value above which output averaging will be bypassed (<i>Athres</i>).
    Typical value = 0,005.
    '''
    b0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>B0</i>).
    '''
    b1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>B1</i>).
    '''
    b2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>B2</i>).
    '''
    b3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>B3</i>).
    '''
    b4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>B4</i>).
    '''
    b5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter coefficient (<i>B5</i>).
    '''
    dl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>Dl</i>).
    '''
    dtc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time step related to activation of controls (<i>deltatc</i>) (&gt;= 0).
    Typical value = 0,025 (0,03 for 50 Hz).
    '''
    dtf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time step frequency calculation (<i>deltatf</i>) (&gt;= 0). Typical value
    = 0,025 (0,03 for 50 Hz).
    '''
    dtp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time step active power calculation (<i>deltatp</i>) (&gt;= 0). Typical
    value = 0,0125 (0,015 for 50 Hz).
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K</i>). Typical value = 9.
    '''
    lthres: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Threshold value (<i>Lthres</i>).
    '''
    m: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>M</i>). <i>M</i> = 2 x <i>H</i>. Typical value = 5.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>Pmin</i>).
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T1</i>) (&gt;= 0). Typical value = 0,3.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T2</i>) (&gt;= 0). Typical value = 1.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T3</i>) (&gt;= 0). Typical value = 0,2.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T4</i>) (&gt;= 0). Typical value = 0,05.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T5</i>) (&gt;= 0).
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T6</i>) (&gt;= 0).
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tf</i>) (&gt;= 0). Typical value = 0,2.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tp</i>) (&gt;= 0). Typical value = 0,2.
    '''
@dataclass
class PssRQB(PowerSystemStabilizerDynamics):
    '''
    Power system stabilizer type RQB. This power system stabilizer is intended
    to be used together with excitation system type ExcRQB, which is primarily
    used in nuclear or thermal generating units.
    '''
    kdpm: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead lag gain (<i>KDPM</i>). Typical value = 0,185.
    '''
    ki2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed input gain (<i>Ki2</i>). Typical value = 3,43.
    '''
    ki3: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electrical power input gain (<i>Ki3</i>). Typical value = -11,45.
    '''
    ki4: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Mechanical power input gain (<i>Ki4</i>). Typical value = 11,86.
    '''
    sibv: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed deadband (<i>SIBV</i>). Typical value = 0,006.
    '''
    t4f: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead lag time constant (<i>T4F</i>) (&gt;= 0). Typical value = 0,045.
    '''
    t4m: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input time constant (<i>T4M</i>) (&gt;= 0). Typical value = 5.
    '''
    t4mom: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed time constant (<i>T4MOM</i>) (&gt;= 0). Typical value = 1,27.
    '''
    tomd: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed delay (<i>TOMD</i>) (&gt;= 0). Typical value = 0,02.
    '''
    tomsl: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed time constant (<i>TOMSL</i>) (&gt;= 0). Typical value = 0,04.
    '''
@dataclass
class PssSB4(PowerSystemStabilizerDynamics):
    '''
    Power sensitive stabilizer model.
    '''
    kx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Kx</i>). Typical value = 2,7.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Ta</i>) (&gt;= 0). Typical value = 0,37.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tb</i>) (&gt;= 0). Typical value = 0,37.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tc</i>) (&gt;= 0). Typical value = 0,035.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Td</i>) (&gt;= 0). Typical value = 0,0.
    '''
    te: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Te</i>) (&gt;= 0). Typical value = 0,0169.
    '''
    tt: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tt</i>) (&gt;= 0). Typical value = 0,18.
    '''
    tx1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reset time constant (<i>Tx1</i>) (&gt;= 0). Typical value = 0,035.
    '''
    tx2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tx2</i>) (&gt;= 0). Typical value = 5,0.
    '''
    vsmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>Vsmax</i>) (&gt; PssSB4.vsmin). Typical value = 0,062.
    '''
    vsmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limiter (<i>Vsmin</i>) (&lt; PssSB4.vsmax). Typical value = -0,062.
    '''
@dataclass
class PssSH(PowerSystemStabilizerDynamics):
    '''
    Siemens<sup>TM</sup> “H infinity” power system stabilizer with generator
    electrical power input.
    [Footnote: Siemens "H infinity" power system stabilizers are an example
    of suitable products available commercially. This information is given
    for the convenience of users of this document and does not constitute an
    endorsement by IEC of these products.]
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Main gain (<i>K</i>). Typical value = 1.
    '''
    k0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain 0 (<i>K0</i>). Typical value = 0,012.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain 1 (<i>K1</i>). Typical value = 0,488.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain 2 (<i>K2</i>). Typical value = 0,064.
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain 3 (<i>K3</i>). Typical value = 0,224.
    '''
    k4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain 4 (<i>K4</i>). Typical value = 0,1.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant 1 (<i>T1</i>) (&gt; 0). Typical value = 0,076.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant 2 (<i>T2</i>) (&gt; 0). Typical value = 0,086.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant 3 (<i>T3</i>) (&gt; 0). Typical value = 1,068.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant 4 (<i>T4</i>) (&gt; 0). Typical value = 1,913.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input time constant (<i>T</i><i><sub>d</sub></i>) (&gt;= 0). Typical value
    = 10.
    '''
    vsmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Output maximum limit (<i>Vsmax</i>) (&gt; PssSH.vsmin). Typical value =
    0,1.
    '''
    vsmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Output minimum limit (<i>Vsmin</i>) (&lt; PssSH.vsmax). Typical value =
    -0,1.
    '''
@dataclass
class PssSK(PowerSystemStabilizerDynamics):
    '''
    Slovakian PSS with three inputs.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain <i>P</i> (<i>K</i><i><sub>1</sub></i>). Typical value = -0,3.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain <i>f</i><i><sub>E</sub></i><i> </i>(<i>K</i><i><sub>2</sub></i>).
    Typical value = -0,15.
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain <i>I</i><i><sub>f</sub></i><i> </i>(<i>K</i><i><sub>3</sub></i>).
    Typical value = 10.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Denominator time constant (<i>T</i><i><sub>1</sub></i>) (&gt; 0,005). Typical
    value = 0,3.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant (<i>T</i><i><sub>2</sub></i>) (&gt; 0,005). Typical
    value = 0,35.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Denominator time constant (<i>T</i><i><sub>3</sub></i>) (&gt; 0,005). Typical
    value = 0,22.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant (<i>T</i><i><sub>4</sub></i>) (&gt; 0,005). Typical
    value = 0,02.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Denominator time constant (<i>T</i><i><sub>5</sub></i>) (&gt; 0,005). Typical
    value = 0,02.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant (<i>T</i><i><sub>6</sub></i>) (&gt; 0,005). Typical
    value = 0,02.
    '''
    vsmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output maximum limit (<i>V</i><i><sub>SMAX</sub></i>) (&gt;
    PssSK.vsmin). Typical value = 0,4.
    '''
    vsmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output minimum limit (<i>V</i><i><sub>SMIN</sub></i>) (&lt;
    PssSK.vsmax). Typical value = -0.4.
    '''
@dataclass
class PssSTAB2A(PowerSystemStabilizerDynamics):
    '''
    Power system stabilizer part of an ABB excitation system.
    [Footnote: ABB excitation systems are an example of suitable products available
    commercially. This information is given for the convenience of users of
    this document and does not constitute an endorsement by IEC of these products.]
    '''
    hlim: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer output limiter (<i>H</i><i><sub>LIM</sub></i>). Typical value
    = 0,5.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K2</i>). Typical value = 1,0.
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K3</i>). Typical value = 0,25.
    '''
    k4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K4</i>). Typical value = 0,075.
    '''
    k5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K5</i>). Typical value = 2,5.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T2</i>). Typical value = 4,0.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T3</i>). Typical value = 2,0.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T5</i>). Typical value = 4,5.
    '''
@dataclass
class PssWECC(PowerSystemStabilizerDynamics):
    '''
    Dual input power system stabilizer, based on IEEE type 2, with modified
    output limiter defined by WECC (Western Electricity Coordinating Council,
    USA).
    '''
    inputSignal1Type: Optional[ str | InputSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of input signal #1 (rotorAngularFrequencyDeviation, busFrequencyDeviation,
    generatorElectricalPower, generatorAcceleratingPower, busVoltage, or busVoltageDerivative
    - shall be different than PssWECC.inputSignal2Type). Typical value = rotorAngularFrequencyDeviation.
    '''
    inputSignal2Type: Optional[ str | InputSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of input signal #2 (rotorAngularFrequencyDeviation, busFrequencyDeviation,
    generatorElectricalPower, generatorAcceleratingPower, busVoltage, busVoltageDerivative
    - shall be different than PssWECC.inputSignal1Type). Typical value = busVoltageDerivative.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal 1 gain (<i>K</i><i><sub>1</sub></i>). Typical value = 1,13.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal 2 gain (<i>K</i><i><sub>2</sub></i>). Typical value = 0,0.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal 1 transducer time constant (<i>T</i><i><sub>1</sub></i>) (&gt;=
    0). Typical value = 0,037.
    '''
    t10: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>10</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal 2 transducer time constant (<i>T</i><i><sub>2</sub></i>) (&gt;=
    0). Typical value = 0,0.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer washout time constant (<i>T</i><i><sub>3</sub></i>) (&gt;= 0).
    Typical value = 9,5.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stabilizer washout time lag constant (<i>T</i><i><sub>4</sub></i>) (&gt;=
    0). Typical value = 9,5.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant (<i>T</i><i><sub>5</sub></i>) (&gt;= 0). Typical value
    = 1,7.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>6</sub></i>) (&gt;= 0). Typical value
    = 1,5.
    '''
    t7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant (<i>T</i><i><sub>7</sub></i>) (&gt;= 0). Typical value
    = 1,7.
    '''
    t8: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>8</sub></i>) (&gt;= 0). Typical value
    = 1,5.
    '''
    t9: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant (<i>T</i><i><sub>9</sub></i>) (&gt;= 0). Typical value
    = 0.
    '''
    vcl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum value for voltage compensator output (<i>V</i><i><sub>CL</sub></i>).
    Typical value = 0.
    '''
    vcu: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum value for voltage compensator output (<i>V</i><i><sub>CU</sub></i>).
    Typical value = 0.
    '''
    vsmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum output signal (<i>Vsmax</i>) (&gt; PssWECC.vsmin). Typical value
    = 0,05.
    '''
    vsmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum output signal (<i>Vsmin</i>) (&lt; PssWECC.vsmax). Typical value
    = -0,05.
    '''
@dataclass
class RotatingMachineDynamics(DynamicsFunctionBlock):
    '''
    Abstract parent class for all synchronous and asynchronous machine standard
    models.
    '''
    damping: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damping torque coefficient (<i>D</i>) (&gt;= 0). A proportionality constant
    that, when multiplied by the angular velocity of the rotor poles with respect
    to the magnetic field (frequency), results in the damping torque. This
    value is often zero when the sources of damping torques (generator damper
    windings, load damping effects, etc.) are modelled in detail. Typical value
    = 0.
    '''
    saturationFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at rated terminal voltage (<i>S1</i>) (&gt;= 0). Not
    used by simplified model. Defined by defined by <i>S</i>(<i>E1</i>) in
    the SynchronousMachineSaturationParameters diagram. Typical value = 0,02.
    '''
    saturationFactor120: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation factor at 120% of rated terminal voltage (<i>S12</i>) (&gt;=
    RotatingMachineDynamics.saturationFactor). Not used by the simplified model,
    defined by <i>S</i>(<i>E2</i>) in the SynchronousMachineSaturationParameters
    diagram. Typical value = 0,12.
    '''
    inertia: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inertia constant of generator or motor and mechanical load (<i>H</i>) (&gt;
    0). This is the specification for the stored energy in the rotating mass
    when operating at rated speed. For a generator, this includes the generator
    plus all other elements (turbine, exciter) on the same shaft and has units
    of MW x s. For a motor, it includes the motor plus its mechanical load.
    Conventional units are PU on the generator MVA base, usually expressed
    as MW x s / MVA or just s. This value is used in the accelerating power
    reference frame for operator training simulator solutions. Typical value
    = 3.
    '''
    statorLeakageReactance: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stator leakage reactance (<i>Xl</i>) (&gt;= 0). Typical value = 0,15.
    '''
    statorResistance: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stator (armature) resistance (<i>Rs</i>) (&gt;= 0). Typical value = 0,005.
    '''
@dataclass
class AsynchronousMachineDynamics(RotatingMachineDynamics):
    '''
    Asynchronous machine whose behaviour is described by reference to a standard
    model expressed in either time constant reactance form or equivalent circuit
    form <font color="#0f0f0f">or by definition of a user-defined model.</font>
    Parameter details:
    <ol>
    <li>Asynchronous machine parameters such as <i>Xl, Xs,</i> etc. are actually
    used as inductances in the model, but are commonly referred to as reactances
    since, at nominal frequency, the PU values are the same. However, some
    references use the symbol <i>L</i> instead of <i>X</i>.</li>
    </ol>
    '''
    AsynchronousMachine: Optional[ str | AsynchronousMachine ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AsynchronousMachine.AsynchronousMachineDynamics'
        })
    '''
    Asynchronous machine to which this asynchronous machine dynamics model
    applies.
    '''
    MechanicalLoadDynamics: Optional[ str | MechanicalLoadDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MechanicalLoadDynamics.AsynchronousMachineDynamics'
        })
    '''
    Mechanical load model associated with this asynchronous machine model.
    '''
    TurbineGovernorDynamics: Optional[ str | TurbineGovernorDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TurbineGovernorDynamics.AsynchronousMachineDynamics'
        })
    '''
    Turbine-governor model associated with this asynchronous machine model.
    '''
    WindTurbineType1or2Dynamics: Optional[ str | WindTurbineType1or2Dynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType1or2Dynamics.AsynchronousMachineDynamics'
        })
    '''
    Wind generator type 1 or type 2 model associated with this asynchronous
    machine model.
    '''
@dataclass
class AsynchronousMachineEquivalentCircuit(AsynchronousMachineDynamics):
    '''
    The electrical equations of all variations of the asynchronous model are
    based on the AsynchronousEquivalentCircuit diagram for the direct- and
    quadrature- axes, with two equivalent rotor windings in each axis.
    Equations for conversion between equivalent circuit and time constant reactance
    forms:
    <i>Xs</i> = <i>Xm</i> + <i>Xl</i>
    <i>X'</i> = <i>Xl</i> + <i>Xm</i> x <i>Xlr1 </i>/ (<i>Xm </i>+ <i>Xlr1</i>)
    <i>X''</i> = <i>Xl</i> + <i>Xm</i> x <i>Xlr1</i> x <i>Xlr2</i> / (<i>Xm</i>
    x <i>Xlr1</i> + <i>Xm</i> x <i>Xlr2</i> + <i>Xlr1</i> x <i>Xlr2</i>)
    <i>T'o</i> = (<i>Xm</i> + <i>Xlr1</i>) / (<i>omega</i><i><sub>0</sub></i>
    x <i>Rr1</i>)
    <i>T''o</i> = (<i>Xm</i> x <i>Xlr1</i> + <i>Xm</i> x <i>Xlr2</i> + <i>Xlr1</i>
    x <i>Xlr2</i>) / (<i>omega</i><i><sub>0</sub></i> x <i>Rr2</i> x (<i>Xm</i>
    + <i>Xlr1</i>)
    Same equations using CIM attributes from AsynchronousMachineTimeConstantReactance
    class on left of "=" and AsynchronousMachineEquivalentCircuit class on
    right (except as noted):
    xs = xm + RotatingMachineDynamics.statorLeakageReactance
    xp = RotatingMachineDynamics.statorLeakageReactance + xm x xlr1 / (xm +
    xlr1)
    xpp = RotatingMachineDynamics.statorLeakageReactance + xm x xlr1 x xlr2
    / (xm x xlr1 + xm x xlr2 + xlr1 x xlr2)
    tpo = (xm + xlr1) / (2 x pi x nominal frequency x rr1)
    tppo = (xm x xlr1 + xm x xlr2 + xlr1 x xlr2) / (2 x pi x nominal frequency
    x rr2 x (xm + xlr1).
    '''
    rr1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damper 1 winding resistance.
    '''
    rr2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damper 2 winding resistance.
    '''
    xlr1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damper 1 winding leakage reactance.
    '''
    xlr2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damper 2 winding leakage reactance.
    '''
    xm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Magnetizing reactance.
    '''
@dataclass
class AsynchronousMachineTimeConstantReactance(AsynchronousMachineDynamics):
    '''
    Parameter details:
    <ol>
    <li>If <i>X'' </i>=<i> X'</i>, a single cage (one equivalent rotor winding
    per axis) is modelled.</li>
    <li>The “<i>p</i>” in the attribute names is a substitution for a “prime”
    in the usual parameter notation, e.g. <i>tpo</i> refers to <i>T'o</i>.</li>
    </ol>
    The parameters used for models expressed in time constant reactance form
    include:
    - RotatingMachine.ratedS (<i>MVAbase</i>);
    - RotatingMachineDynamics.damping (<i>D</i>);
    - RotatingMachineDynamics.inertia (<i>H</i>);
    - RotatingMachineDynamics.saturationFactor (<i>S1</i>);
    - RotatingMachineDynamics.saturationFactor120 (<i>S12</i>);
    - RotatingMachineDynamics.statorLeakageReactance (<i>Xl</i>);
    - RotatingMachineDynamics.statorResistance (<i>Rs</i>);
    - .xs (<i>Xs</i>);
    - .xp (<i>X'</i>);
    - .xpp (<i>X''</i>);
    - .tpo (<i>T'o</i>);
    - .tppo (<i>T''o</i>).
    '''
    tpo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient rotor time constant (<i>T'o</i>) (&gt; AsynchronousMachineTimeConstantReactance.tppo).
    Typical value = 5.
    '''
    tppo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Subtransient rotor time constant (<i>T''o</i>) (&gt; 0). Typical value
    = 0,03.
    '''
    xp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient reactance (unsaturated) (<i>X'</i>) (&gt;= AsynchronousMachineTimeConstantReactance.xpp).
    Typical value = 0,5.
    '''
    xpp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Subtransient reactance (unsaturated) (<i>X''</i>) (&gt; RotatingMachineDynamics.statorLeakageReactance).
    Typical value = 0,2.
    '''
    xs: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Synchronous reactance (<i>Xs</i>) (&gt;= AsynchronousMachineTimeConstantReactance.xp).
    Typical value = 1,8.
    '''
@dataclass
class AsynchronousMachineUserDefined(AsynchronousMachineDynamics):
    '''
    Asynchronous machine whose dynamic behaviour is described by a user-defined
    model.
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class SynchronousMachineDynamics(RotatingMachineDynamics):
    '''
    Synchronous machine whose behaviour is described by reference to a standard
    model expressed in one of the following forms:
    - simplified (or classical), where a group of generators or motors is not
    modelled in detail;
    - detailed, in equivalent circuit form;
    - detailed, in time constant reactance form; or
    <font color="#0f0f0f">- by definition of a user-defined model.</font>
    <font color="#0f0f0f">It is a common practice to represent small generators
    by a negative load rather than by a dynamic generator model when performing
    dynamics simulations. In this case, a SynchronousMachine in the static
    model is not represented by anything in the dynamics model, instead it
    is treated as an ordinary load.</font>
    <font color="#0f0f0f">Parameter details:</font>
    <ol>
    <li><font color="#0f0f0f">Synchronous machine parameters such as <i>Xl,
    Xd, Xp</i> etc. are actually used as inductances in the models,</font>
    but are commonly referred to as reactances since, at nominal frequency,
    the PU values are the same. However, some references use the symbol <i>L</i>
    instead of <i>X</i>.</li>
    </ol>
    '''
    CrossCompoundTurbineGovernorDyanmics: Optional[ str | CrossCompoundTurbineGovernorDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CrossCompoundTurbineGovernorDynamics.HighPressureSynchronousMachineDynamics'
        })
    '''
    The cross-compound turbine governor with which this high-pressure synchronous
    machine is associated.
    '''
    CrossCompoundTurbineGovernorDynamics: Optional[ str | CrossCompoundTurbineGovernorDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CrossCompoundTurbineGovernorDynamics.LowPressureSynchronousMachineDynamics'
        })
    '''
    The cross-compound turbine governor with which this low-pressure synchronous
    machine is associated.
    '''
    ExcitationSystemDynamics: Optional[ str | ExcitationSystemDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ExcitationSystemDynamics.SynchronousMachineDynamics'
        })
    '''
    Excitation system model associated with this synchronous machine model.
    '''
    MechanicalLoadDynamics: Optional[ str | MechanicalLoadDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MechanicalLoadDynamics.SynchronousMachineDynamics'
        })
    '''
    Mechanical load model associated with this synchronous machine model.
    '''
    SynchronousMachine: Optional[ str | SynchronousMachine ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachine.SynchronousMachineDynamics'
        })
    '''
    Synchronous machine to which synchronous machine dynamics model applies.
    '''
@dataclass
class SynchronousMachineDetailed(SynchronousMachineDynamics):
    '''
    All synchronous machine detailed types use a subset of the same data parameters
    and input/output variables.
    The several variations differ in the following ways:
    - the number of equivalent windings that are included;
    - the way in which saturation is incorporated into the model;
    - whether or not “subtransient saliency” (<i>X''q</i> not = <i>X''d</i>)
    is represented.
    It is not necessary for each simulation tool to have separate models for
    each of the model types. The same model can often be used for several types
    by alternative logic within the model. Also, differences in saturation
    representation might not result in significant model performance differences
    so model substitutions are often acceptable.
    '''
    efdBaseRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ratio (exciter voltage/generator voltage) of <i>Efd</i> bases of exciter
    and generator models (&gt; 0). Typical value = 1.
    '''
    saturationFactor120QAxis: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis saturation factor at 120% of rated terminal voltage (<i>S12q</i>)
    (&gt;= SynchonousMachineDetailed.saturationFactorQAxis). Typical value
    = 0,12.
    '''
    saturationFactorQAxis: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis saturation factor at rated terminal voltage (<i>S1q</i>)
    (&gt;= 0). Typical value = 0,02.
    '''
    ifdBaseType: Optional[ str | IfdBaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation base system mode. It should be equal to the value of <i>WLMDV</i>
    given by the user. <i>WLMDV</i> is the PU ratio between the field voltage
    and the excitation current: <i>Efd</i> = <i>WLMDV</i> x <i>Ifd</i>. Typical
    value = ifag.
    '''
@dataclass
class SynchronousMachineEquivalentCircuit(SynchronousMachineDetailed):
    '''
    The electrical equations for all variations of the synchronous models are
    based on the SynchronousEquivalentCircuit diagram for the direct- and quadrature-
    axes.
    Equations for conversion between equivalent circuit and time constant reactance
    forms:
    <i>Xd</i> = <i>Xad </i>+<i> Xl</i>
    <i>X’d</i> = <i>Xl</i> + <i>Xad</i> x <i>Xfd</i> / (<i>Xad</i> + <i>Xfd</i>)
    <i>X”d</i> = <i>Xl</i> + <i>Xad</i> x <i>Xfd</i> x <i>X1d</i> / (<i>Xad</i>
    x <i>Xfd</i> + <i>Xad</i> x <i>X1d</i> + <i>Xfd</i> x <i>X1d</i>)
    <i>Xq</i> = <i>Xaq</i> + <i>Xl</i>
    <i>X’q</i> = <i>Xl</i> + <i>Xaq</i> x <i>X1q</i> / (<i>Xaq</i> + <i>X1q</i>)
    <i>X”q</i> = <i>Xl</i> + <i>Xaq</i> x <i>X1q</i> x <i>X2q</i> / (<i>Xaq</i>
    x <i>X1q</i> + <i>Xaq</i> x <i>X2q</i> + <i>X1q</i> x <i>X2q</i>)
    <i>T’do</i> = (<i>Xad</i> + <i>Xfd</i>) / (<i>omega</i><i><sub>0</sub></i>
    x <i>Rfd</i>)
    <i>T”do</i> = (<i>Xad</i> x <i>Xfd</i> + <i>Xad</i> x <i>X1d</i> + <i>Xfd</i>
    x <i>X1d</i>) / (<i>omega</i><i><sub>0</sub></i> x <i>R1d</i> x (<i>Xad</i>
    + <i>Xfd</i>)
    <i>T’qo</i> = (<i>Xaq</i> + <i>X1q</i>) / (<i>omega</i><i><sub>0</sub></i>
    x <i>R1q</i>)
    <i>T”qo</i> = (<i>Xaq</i> x <i>X1q</i> + <i>Xaq</i> x <i>X2q</i> + <i>X1q</i>
    x <i>X2q</i>) / (<i>omega</i><i><sub>0</sub></i> x <i>R2q</i> x (<i>Xaq</i>
    + <i>X1q</i>)
    Same equations using CIM attributes from SynchronousMachineTimeConstantReactance
    class on left of "=" and SynchronousMachineEquivalentCircuit class on right
    (except as noted):
    xDirectSync = xad + RotatingMachineDynamics.statorLeakageReactance
    xDirectTrans = RotatingMachineDynamics.statorLeakageReactance + xad x xfd
    / (xad + xfd)
    xDirectSubtrans = RotatingMachineDynamics.statorLeakageReactance + xad
    x xfd x x1d / (xad x xfd + xad x x1d + xfd x x1d)
    xQuadSync = xaq + RotatingMachineDynamics.statorLeakageReactance
    xQuadTrans = RotatingMachineDynamics.statorLeakageReactance + xaq x x1q
    / (xaq+ x1q)
    xQuadSubtrans = RotatingMachineDynamics.statorLeakageReactance + xaq x
    x1q x x2q / (xaq x x1q + xaq x x2q + x1q x x2q)
    tpdo = (xad + xfd) / (2 x pi x nominal frequency x rfd)
    tppdo = (xad x xfd + xad x x1d + xfd x x1d) / (2 x pi x nominal frequency
    x r1d x (xad + xfd)
    tpqo = (xaq + x1q) / (2 x pi x nominal frequency x r1q)
    tppqo = (xaq x x1q + xaq x x2q + x1q x x2q) / (2 x pi x nominal frequency
    x r2q x (xaq + x1q)
    These are only valid for a simplified model where "Canay" reactance is
    zero.
    '''
    r1d: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axis damper 1 winding resistance.
    '''
    r1q: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis damper 1 winding resistance.
    '''
    r2q: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis damper 2 winding resistance.
    '''
    rfd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field winding resistance.
    '''
    x1d: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axis damper 1 winding leakage reactance.
    '''
    x1q: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis damper 1 winding leakage reactance.
    '''
    x2q: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis damper 2 winding leakage reactance.
    '''
    xad: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axis mutual reactance.
    '''
    xaq: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis mutual reactance.
    '''
    xf1d: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Differential mutual (“Canay”) reactance.
    '''
    xfd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Field winding leakage reactance.
    '''
@dataclass
class SynchronousMachineTimeConstantReactance(SynchronousMachineDetailed):
    '''
    Synchronous machine detailed modelling types are defined by the combination
    of the attributes SynchronousMachineTimeConstantReactance.modelType and
    SynchronousMachineTimeConstantReactance.rotorType.
    Parameter details:
    <ol>
    <li>The “p” in the time-related attribute names is a substitution for a
    “prime” in the usual parameter notation, e.g. tpdo refers to <i>T'do</i>.</li>
    <li>The parameters used for models expressed in time constant reactance
    form include:</li>
    </ol>
    - RotatingMachine.ratedS (<i>MVAbase</i>);
    - RotatingMachineDynamics.damping (<i>D</i>);
    - RotatingMachineDynamics.inertia (<i>H</i>);
    - RotatingMachineDynamics.saturationFactor (<i>S1</i>);
    - RotatingMachineDynamics.saturationFactor120 (<i>S12</i>);
    - RotatingMachineDynamics.statorLeakageReactance (<i>Xl</i>);
    - RotatingMachineDynamics.statorResistance (<i>Rs</i>);
    - SynchronousMachineTimeConstantReactance.ks (<i>Ks</i>);
    - SynchronousMachineDetailed.saturationFactorQAxis (<i>S1q</i>);
    - SynchronousMachineDetailed.saturationFactor120QAxis (<i>S12q</i>);
    - SynchronousMachineDetailed.efdBaseRatio;
    - SynchronousMachineDetailed.ifdBaseType;
    - .xDirectSync (<i>Xd</i>);
    - .xDirectTrans (<i>X'd</i>);
    - .xDirectSubtrans (<i>X''d</i>);
    - .xQuadSync (<i>Xq</i>);
    - .xQuadTrans (<i>X'q</i>);
    - .xQuadSubtrans (<i>X''q</i>);
    - .tpdo (<i>T'do</i>);
    - .tppdo (<i>T''do</i>);
    - .tpqo (<i>T'qo</i>);
    - .tppqo (<i>T''qo</i>);
    - .tc.
    '''
    ks: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturation loading correction factor (<i>Ks</i>) (&gt;= 0). Used only by
    type J model. Typical value = 0.
    '''
    modelType: Optional[ str | SynchronousMachineModelKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of synchronous machine model used in dynamic simulation applications.
    '''
    rotorType: Optional[ str | RotorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of rotor on physical machine.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damping time constant for “Canay” reactance (&gt;= 0). Typical value =
    0.
    '''
    tpdo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axis transient rotor time constant (<i>T'do</i>) (&gt; SynchronousMachineTimeConstantReactance.tppdo).
    Typical value = 5.
    '''
    tppdo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axis subtransient rotor time constant (<i>T''do</i>) (&gt; 0). Typical
    value = 0,03.
    '''
    tppqo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis subtransient rotor time constant (<i>T''qo</i>) (&gt; 0).
    Typical value = 0,03.
    '''
    tpqo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis transient rotor time constant (<i>T'qo</i>) (&gt; SynchronousMachineTimeConstantReactance.tppqo).
    Typical value = 0,5.
    '''
    xDirectSubtrans: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axis subtransient reactance (unsaturated) (<i>X''d</i>) (&gt; RotatingMachineDynamics.statorLeakageReactance).
    Typical value = 0,2.
    '''
    xDirectSync: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axis synchronous reactance (<i>Xd</i>) (&gt;= SynchronousMachineTimeConstantReactance.xDirectTrans).
    The quotient of a sustained value of that AC component of armature voltage
    that is produced by the total direct-axis flux due to direct-axis armature
    current and the value of the AC component of this current, the machine
    running at rated speed. Typical value = 1,8.
    '''
    xDirectTrans: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axis transient reactance (unsaturated) (<i>X'd</i>) (&gt;= SynchronousMachineTimeConstantReactance.xDirectSubtrans).
    Typical value = 0,5.
    '''
    xQuadSubtrans: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis subtransient reactance (<i>X''q</i>) (&gt; RotatingMachineDynamics.statorLeakageReactance).
    Typical value = 0,2.
    '''
    xQuadSync: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis synchronous reactance (<i>Xq</i>) (&gt;= SynchronousMachineTimeConstantReactance.xQuadTrans).
    The ratio of the component of reactive armature voltage, due to the quadrature-axis
    component of armature current, to this component of current, under steady
    state conditions and at rated frequency. Typical value = 1,6.
    '''
    xQuadTrans: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Quadrature-axis transient reactance (<i>X'q</i>) (&gt;= SynchronousMachineTimeConstantReactance.xQuadSubtrans).
    Typical value = 0,3.
    '''
@dataclass
class SynchronousMachineSimplified(SynchronousMachineDynamics):
    '''
    The simplified model represents a synchronous generator as a constant internal
    voltage behind an impedance<i> </i>(<i>Rs + jXp</i>) as shown in the Simplified
    diagram.
    Since internal voltage is held constant, there is no <i>Efd</i> input and
    any excitation system model will be ignored. There is also no <i>Ifd</i>
    output.
    This model should not be used for representing a real generator except,
    perhaps, small generators whose response is insignificant.
    The parameters used for the simplified model include:
    - RotatingMachineDynamics.damping (<i>D</i>);
    - RotatingMachineDynamics.inertia (<i>H</i>);
    - RotatingMachineDynamics.statorLeakageReactance (used to exchange <i>jXp
    </i>for SynchronousMachineSimplified);
    - RotatingMachineDynamics.statorResistance (<i>Rs</i>).
    '''
@dataclass
class SynchronousMachineUserDefined(SynchronousMachineDynamics):
    '''
    Synchronous machine whose dynamic behaviour is described by a user-defined
    model.
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class StaticVarCompensatorDynamics(DynamicsFunctionBlock):
    '''
    Static var compensator whose behaviour is described by reference to a standard
    model <font color="#0f0f0f">or by definition of a user-defined model.</font>
    '''
    StaticVarCompensator: Optional[ str | StaticVarCompensator ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StaticVarCompensator.StaticVarCompensatorDynamics'
        })
    '''
    Static Var Compensator to which Static Var Compensator dynamics model applies.
    '''
@dataclass
class SVCUserDefined(StaticVarCompensatorDynamics):
    '''
    Static var compensator (SVC) function block whose dynamic behaviour is
    described by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class TurbineGovernorDynamics(DynamicsFunctionBlock):
    '''
    Turbine-governor function block whose behaviour is described by reference
    to a standard model <font color="#0f0f0f">or by definition of a user-defined
    model.</font>
    '''
    AsynchronousMachineDynamics: Optional[ str | AsynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AsynchronousMachineDynamics.TurbineGovernorDynamics'
        })
    '''
    Asynchronous machine model with which this turbine-governor model is associated.
    TurbineGovernorDynamics shall have either an association to SynchronousMachineDynamics
    or to AsynchronousMachineDynamics.
    '''
    SynchronousMachineDynamics: Optional[ str | SynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachineDynamics.TurbineGovernorDynamics'
        })
    '''
    Synchronous machine model with which this turbine-governor model is associated.
    TurbineGovernorDynamics shall have either an association to SynchronousMachineDynamics
    or to AsynchronousMachineDynamics.
    '''
    TurbineLoadControllerDynamics: Optional[ str | TurbineLoadControllerDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TurbineLoadControllerDynamics.TurbineGovernorDynamics'
        })
    '''
    Turbine load controller providing input to this turbine-governor.
    '''
@dataclass
class GovCT1(TurbineGovernorDynamics):
    '''
    General model for any prime mover with a PID governor, used primarily for
    combustion turbine and combined cycle units.
    This model can be used to represent a variety of prime movers controlled
    by PID governors. It is suitable, for example, for the representation of:
    <ul>
    <li>gas turbine and single shaft combined cycle turbines</li>
    </ul>
    <ul>
    <li>diesel engines with modern electronic or digital governors </li>
    </ul>
    <ul>
    <li>steam turbines where steam is supplied from a large boiler drum or
    a large header whose pressure is substantially constant over the period
    under study</li>
    <li>simple hydro turbines in dam configurations where the water column
    length is short and water inertia effects are minimal.</li>
    </ul>
    Additional information on this model is available in the 2012 IEEE report,
    <i><u>Dynamic Models for Turbine-Governors in Power System Studies</u></i>,
    3.1.2.3 pages 3-4 (GGOV1).
    '''
    aset: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Acceleration limiter setpoint (<i>Aset</i>). Unit = PU / s. Typical value
    = 0,01.
    '''
    rclose: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve closing rate (<i>Rclose</i>). Unit = PU / s. Typical value
    = -0,1.
    '''
    ropen: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening rate (<i>Ropen</i>). Unit = PU / s. Typical value
    = 0.10.
    '''
    wfspd: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Switch for fuel source characteristic to recognize that fuel flow, for
    a given fuel valve stroke, can be proportional to engine speed (<i>Wfspd</i>).
    true = fuel flow proportional to speed (for some gas turbines and diesel
    engines with positive displacement fuel injectors)
    false = fuel control system keeps fuel flow independent of engine speed.
    Typical value = true.
    '''
    db: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed governor deadband in PU speed (<i>db</i>). In the majority of applications,
    it is recommended that this value be set to zero. Typical value = 0.
    '''
    dm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed sensitivity coefficient (<i>Dm</i>). <i>Dm</i> can represent either
    the variation of the engine power with the shaft speed or the variation
    of maximum power capability with shaft speed. If it is positive it describes
    the falling slope of the engine speed verses power characteristic as speed
    increases. A slightly falling characteristic is typical for reciprocating
    engines and some aero-derivative turbines. If it is negative the engine
    power is assumed to be unaffected by the shaft speed, but the maximum permissible
    fuel flow is taken to fall with falling shaft speed. This is characteristic
    of single-shaft industrial turbines due to exhaust temperature limits.
    Typical value = 0.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Acceleration limiter gain (<i>Ka</i>). Typical value = 10.
    '''
    kdgov: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor derivative gain (<i>Kdgov</i>). Typical value = 0.
    '''
    kigov: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor integral gain (<i>Kigov</i>). Typical value = 2.
    '''
    kiload: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Load limiter integral gain for PI controller (<i>Kiload</i>). Typical value
    = 0,67.
    '''
    kimw: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power controller (reset) gain (<i>Kimw</i>). The default value of 0,01
    corresponds to a reset time of 100 s. A value of 0,001 corresponds to a
    relatively slow-acting load controller. Typical value = 0,01.
    '''
    kpgov: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor proportional gain (<i>Kpgov</i>). Typical value = 10.
    '''
    kpload: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Load limiter proportional gain for PI controller (<i>Kpload</i>). Typical
    value = 2.
    '''
    kturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine gain (<i>Kturb</i>) (&gt; 0). Typical value = 1,5.
    '''
    ldref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Load limiter reference value (<i>Ldref</i>). Typical value = 1.
    '''
    maxerr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum value for speed error signal (<i>maxerr</i>) (&gt; GovCT1.minerr).
    Typical value = 0,05.
    '''
    minerr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum value for speed error signal (<i>minerr</i>) (&lt; GovCT1.maxerr).
    Typical value = -0,05.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop (<i>R</i>). Typical value = 0,04.
    '''
    rdown: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum rate of load limit decrease (<i>Rdown</i>). Typical value = -99.
    '''
    rselect: Optional[ str | DroopSignalFeedbackKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback signal for droop (<i>Rselect</i>). Typical value = electricalPower.
    '''
    rup: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum rate of load limit increase (<i>Rup</i>). Typical value = 99.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Acceleration limiter time constant (<i>Ta</i>) (&gt; 0). Typical value
    = 0,1.
    '''
    tact: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Actuator time constant (<i>Tact</i>) (&gt;= 0). Typical value = 0,5.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine lag time constant (<i>Tb</i>) (&gt; 0). Typical value = 0,5.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine lead time constant (<i>Tc</i>) (&gt;= 0). Typical value = 0.
    '''
    tdgov: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor derivative controller time constant (<i>Tdgov</i>) (&gt;= 0).
    Typical value = 1.
    '''
    teng: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transport time delay for diesel engine used in representing diesel engines
    where there is a small but measurable transport delay between a change
    in fuel flow setting and the development of torque (<i>Teng</i>) (&gt;=
    0). <i>Teng</i> should be zero in all but special cases where this transport
    delay is of particular concern. Typical value = 0.
    '''
    tfload: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Load-limiter time constant (<i>Tfload</i>) (&gt; 0). Typical value = 3.
    '''
    tpelec: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electrical power transducer time constant (<i>Tpelec</i>) (&gt; 0). Typical
    value = 1.
    '''
    tsa: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature detection lead time constant (<i>Tsa</i>) (&gt;= 0). Typical
    value = 4.
    '''
    tsb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature detection lag time constant (<i>Tsb</i>) (&gt;= 0). Typical
    value = 5.
    '''
    vmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve position limit (<i>Vmax</i>) (&gt; GovCT1.vmin). Typical
    value = 1.
    '''
    vmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve position limit (<i>Vmin</i>) (&lt; GovCT1.vmax). Typical
    value = 0,15.
    '''
    wfnl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    No load fuel flow (<i>Wfnl</i>). Typical value = 0,2.
    '''
@dataclass
class GovCT2(TurbineGovernorDynamics):
    '''
    General governor with frequency-dependent fuel flow limit. This model is
    a modification of the GovCT1<b> </b>model in order to represent the frequency-dependent
    fuel flow limit of a specific gas turbine manufacturer.
    '''
    aset: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Acceleration limiter setpoint (<i>Aset</i>). Unit = PU / s. Typical value
    = 10.
    '''
    rclose: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve closing rate (<i>Rclose</i>). Unit = PU / s. Typical value
    = -99.
    '''
    ropen: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening rate (<i>Ropen</i>). Unit = PU / s. Typical value
    = 99.
    '''
    wfspd: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Switch for fuel source characteristic to recognize that fuel flow, for
    a given fuel valve stroke, can be proportional to engine speed (<i>Wfspd</i>).
    true = fuel flow proportional to speed (for some gas turbines and diesel
    engines with positive displacement fuel injectors)
    false = fuel control system keeps fuel flow independent of engine speed.
    Typical value = false.
    '''
    db: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed governor deadband in PU speed (<i>db</i>). In the majority of applications,
    it is recommended that this value be set to zero. Typical value = 0.
    '''
    dm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed sensitivity coefficient (<i>Dm</i>). <i>Dm</i> can represent either
    the variation of the engine power with the shaft speed or the variation
    of maximum power capability with shaft speed. If it is positive it describes
    the falling slope of the engine speed verses power characteristic as speed
    increases. A slightly falling characteristic is typical for reciprocating
    engines and some aero-derivative turbines. If it is negative the engine
    power is assumed to be unaffected by the shaft speed, but the maximum permissible
    fuel flow is taken to fall with falling shaft speed. This is characteristic
    of single-shaft industrial turbines due to exhaust temperature limits.
    Typical value = 0.
    '''
    flim1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 1 (<i>Flim1</i>). Unit = Hz. Typical value = 59.
    '''
    flim10: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 10 (<i>Flim10</i>). Unit = Hz. Typical value = 0.
    '''
    flim2: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 2 (<i>Flim2</i>). Unit = Hz. Typical value = 0.
    '''
    flim3: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 3 (<i>Flim3</i>). Unit = Hz. Typical value = 0.
    '''
    flim4: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 4 (<i>Flim4</i>). Unit = Hz. Typical value = 0.
    '''
    flim5: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 5 (<i>Flim5</i>). Unit = Hz. Typical value = 0.
    '''
    flim6: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 6 (<i>Flim6</i>). Unit = Hz. Typical value = 0.
    '''
    flim7: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 7 (<i>Flim7</i>). Unit = Hz. Typical value = 0.
    '''
    flim8: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 8 (<i>Flim8</i>). Unit = Hz. Typical value = 0.
    '''
    flim9: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency threshold 9 (<i>Flim9</i>). Unit = Hz. Typical value = 0.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Acceleration limiter gain (<i>Ka</i>). Typical value = 10.
    '''
    kdgov: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor derivative gain (<i>Kdgov</i>). Typical value = 0.
    '''
    kigov: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor integral gain (<i>Kigov</i>). Typical value = 0,45.
    '''
    kiload: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Load limiter integral gain for PI controller (<i>Kiload</i>). Typical value
    = 1.
    '''
    kimw: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power controller (reset) gain (<i>Kimw</i>). The default value of 0,01
    corresponds to a reset time of 100 seconds. A value of 0,001 corresponds
    to a relatively slow-acting load controller. Typical value = 0.
    '''
    kpgov: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor proportional gain (<i>Kpgov</i>). Typical value = 4.
    '''
    kpload: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Load limiter proportional gain for PI controller (<i>Kpload</i>). Typical
    value = 1.
    '''
    kturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine gain (<i>Kturb</i>). Typical value = 1,9168.
    '''
    ldref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Load limiter reference value (<i>Ldref</i>). Typical value = 1.
    '''
    maxerr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum value for speed error signal (<i>Maxerr</i>) (&gt; GovCT2.minerr).
    Typical value = 1.
    '''
    minerr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum value for speed error signal (<i>Minerr</i>) (&lt; GovCT2.maxerr).
    Typical value = -1.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    plim1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power limit 1 (<i>Plim1</i>). Typical value = 0,8325.
    '''
    plim10: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power limit 10 (<i>Plim10</i>). Typical value = 0.
    '''
    plim2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power limit 2 (Plim2). Typical value = 0.
    '''
    plim3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power limit 3 (<i>Plim3</i>). Typical value = 0.
    '''
    plim4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power limit 4 (<i>Plim4</i>). Typical value = 0.
    '''
    plim5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power limit 5 (<i>Plim5</i>). Typical value = 0.
    '''
    plim6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power limit 6 (<i>Plim6</i>). Typical value = 0.
    '''
    plim7: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power limit 7 (<i>Plim7</i>). Typical value = 0.
    '''
    plim8: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power limit 8 (<i>Plim8</i>). Typical value = 0.
    '''
    plim9: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power Limit 9 (<i>Plim9</i>). Typical value = 0.
    '''
    prate: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ramp rate for frequency-dependent power limit (<i>Prate</i>). Typical value
    = 0,017.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop (<i>R</i>). Typical value = 0,05.
    '''
    rdown: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum rate of load limit decrease (<i>Rdown</i>). Typical value = -99.
    '''
    rselect: Optional[ str | DroopSignalFeedbackKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback signal for droop (<i>Rselect</i>). Typical value = electricalPower.
    '''
    rup: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum rate of load limit increase (<i>Rup</i>). Typical value = 99.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Acceleration limiter time constant (<i>Ta</i>) (&gt;= 0). Typical value
    = 1.
    '''
    tact: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Actuator time constant (<i>Tact</i>) (&gt;= 0). Typical value = 0,4.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine lag time constant (<i>Tb</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine lead time constant (<i>Tc</i>) (&gt;= 0). Typical value = 0.
    '''
    tdgov: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor derivative controller time constant (<i>Tdgov</i>) (&gt;= 0).
    Typical value = 1.
    '''
    teng: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transport time delay for diesel engine used in representing diesel engines
    where there is a small but measurable transport delay between a change
    in fuel flow setting and the development of torque (<i>Teng</i>) (&gt;=
    0). <i>Teng</i> should be zero in all but special cases where this transport
    delay is of particular concern. Typical value = 0.
    '''
    tfload: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Load limiter time constant (<i>Tfload</i>) (&gt;= 0). Typical value = 3.
    '''
    tpelec: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electrical power transducer time constant (<i>Tpelec</i>) (&gt;= 0). Typical
    value = 2,5.
    '''
    tsa: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature detection lead time constant (<i>Tsa</i>) (&gt;= 0). Typical
    value = 0.
    '''
    tsb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature detection lag time constant (<i>Tsb</i>) (&gt;= 0). Typical
    value = 50.
    '''
    vmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve position limit (<i>Vmax</i>) (&gt; GovCT2.vmin). Typical
    value = 1.
    '''
    vmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve position limit (<i>Vmin</i>) (&lt; GovCT2.vmax). Typical
    value = 0,175.
    '''
    wfnl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    No load fuel flow (<i>Wfnl</i>). Typical value = 0,187.
    '''
@dataclass
class GovGAST(TurbineGovernorDynamics):
    '''
    Single shaft gas turbine.
    '''
    at: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ambient temperature load limit (<i>Load Limit</i>). Typical value = 1.
    '''
    dturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine damping factor (<i>Dturb</i>). Typical value = 0,18.
    '''
    kt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature limiter gain (<i>Kt</i>). Typical value = 3.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop (<i>R</i>) (&gt;0). Typical value = 0,04.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor mechanism time constant (<i>T1</i>) (&gt;= 0). <i>T1</i> represents
    the natural valve positioning time constant of the governor for small disturbances,
    as seen when rate limiting is not in effect. Typical value = 0,5.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine power time constant (<i>T2</i>) (&gt;= 0). <i>T2</i> represents
    delay due to internal energy storage of the gas turbine engine. <i>T2</i>
    can be used to give a rough approximation to the delay associated with
    acceleration of the compressor spool of a multi-shaft engine, or with the
    compressibility of gas in the plenum of a free power turbine of an aero-derivative
    unit, for example. Typical value = 0,5.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine exhaust temperature time constant (<i>T3</i>) (&gt;= 0). Typical
    value = 3.
    '''
    vmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum turbine power, PU of MWbase (<i>Vmax</i>) (&gt; GovGAST.vmin).
    Typical value = 1.
    '''
    vmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum turbine power, PU of MWbase (<i>Vmin</i>) (&lt; GovGAST.vmax).
    Typical value = 0.
    '''
@dataclass
class GovGAST1(TurbineGovernorDynamics):
    '''
    Modified single shaft gas turbine.
    '''
    a: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine power time constant numerator scale factor (<i>a</i>). Typical
    value = 0,8.
    '''
    b: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine power time constant denominator scale factor (<i>b</i>) (&gt;0).
    Typical value = 1.
    '''
    ltrate: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum long term fuel valve opening rate (<i>Ltrate</i>). Typical value
    = 0,02.
    '''
    rmax: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum fuel valve opening rate (<i>Rmax</i>). Unit = PU / s. Typical value
    = 1.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional dead-band width (<i>db1</i>). Unit = Hz. Typical value = 0.
    '''
    db2: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unintentional dead-band (<i>db2</i>). Unit = MW. Typical value = 0.
    '''
    eps: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional db hysteresis (<i>eps</i>). Unit = Hz. Typical value = 0.
    '''
    fidle: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel flow at zero power output (<i>Fidle</i>). Typical value = 0,18.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU gv (<i>Gv1</i>). Typical value = 0.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2,PU gv (<i>Gv2</i>). Typical value = 0.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU gv (<i>Gv3</i>). Typical value = 0.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU gv (<i>Gv4</i>). Typical value = 0.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU gv (<i>Gv5</i>). Typical value = 0.
    '''
    gv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU gv (<i>Gv6</i>). Typical value = 0.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor gain (<i>Ka</i>). Typical value = 0.
    '''
    kt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature limiter gain (<i>Kt</i>). Typical value = 3.
    '''
    lmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ambient temperature load limit (<i>Lmax</i>). <i>Lmax</i> is the turbine
    power output corresponding to the limiting exhaust gas temperature. Typical
    value = 1.
    '''
    loadinc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve position change allowed at fast rate (<i>Loadinc</i>). Typical value
    = 0,05.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU power (<i>Pgv1</i>). Typical value = 0.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU power (<i>Pgv2</i>). Typical value = 0.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU power (<i>Pgv3</i>). Typical value = 0.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU power (<i>Pgv4</i>). Typical value = 0.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU power (<i>Pgv5</i>). Typical value = 0.
    '''
    pgv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU power (<i>Pgv6</i>). Typical value = 0.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop (<i>R</i>) (&gt;0). Typical value = 0,04.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor mechanism time constant (<i>T1</i>) (&gt;= 0). <i>T1</i> represents
    the natural valve positioning time constant of the governor for small disturbances,
    as seen when rate limiting is not in effect. Typical value = 0,5.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine power time constant (<i>T2</i>) (&gt;= 0). <i>T2</i> represents
    delay due to internal energy storage of the gas turbine engine. <i>T2</i>
    can be used to give a rough approximation to the delay associated with
    acceleration of the compressor spool of a multi-shaft engine, or with the
    compressibility of gas in the plenum of the free power turbine of an aero-derivative
    unit, for example. Typical value = 0,5.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine exhaust temperature time constant (<i>T3</i>) (&gt;= 0). <i>T3</i>
    represents delay in the exhaust temperature and load limiting system. Typical
    value = 3.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lead time constant (<i>T4</i>) (&gt;= 0). Typical value = 0.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lag time constant (<i>T5</i>) (&gt;= 0). If = 0, entire gain and
    lead-lag block is bypassed. Typical value = 0.
    '''
    tltr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve position averaging time constant (<i>Tltr</i>) (&gt;= 0). Typical
    value = 10.
    '''
    vmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum turbine power, PU of MWbase (<i>Vmax</i>) (&gt; GovGAST1.vmin).
    Typical value = 1.
    '''
    vmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum turbine power, PU of MWbase (<i>Vmin</i>) (&lt; GovGAST1.vmax).
    Typical value = 0.
    '''
@dataclass
class GovGAST2(TurbineGovernorDynamics):
    '''
    Gas turbine.
    '''
    a: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve positioner (<i>A</i>).
    '''
    b: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve positioner (<i>B</i>).
    '''
    c: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve positioner (<i>C</i>).
    '''
    z: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor mode (<i>Z</i>).
    1 = droop
    0 = isochronous.
    '''
    af1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exhaust temperature parameter (<i>Af1</i>). Unit = PU temperature. Based
    on temperature in degrees C.
    '''
    af2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient equal to 0,5(1-speed) (<i>Af2</i>).
    '''
    bf1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>Bf1</i>). <i>Bf1</i> = <i>E</i>(1 - <i>W</i>) where <i>E</i> (speed
    sensitivity coefficient) is 0,55 to 0,65 x <i>Tr</i>. Unit = PU temperature.
    Based on temperature in degrees C.
    '''
    bf2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine torque coefficient K<sub>hhv</sub> (depends on heating value of
    fuel stream in combustion chamber) (<i>Bf2</i>).
    '''
    cf2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient defining fuel flow where power output is 0% (<i>Cf2</i>). Synchronous
    but no output. Typically 0,23 x K<sub>hhv</sub> (23% fuel flow).
    '''
    ecr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Combustion reaction time delay (<i>Ecr</i>) (&gt;= 0).
    '''
    etd: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine and exhaust delay (<i>Etd</i>) (&gt;= 0).
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ratio of fuel adjustment (<i>K3</i>).
    '''
    k4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain of radiation shield (<i>K4</i>).
    '''
    k5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain of radiation shield (<i>K5</i>).
    '''
    k6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum fuel flow (<i>K6</i>).
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel system feedback (<i>Kf</i>).
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    t: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel control time constant (<i>T</i>) (&gt;= 0).
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Radiation shield time constant (<i>T3</i>) (&gt;= 0).
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Thermocouple time constant (<i>T4</i>) (&gt;= 0).
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature control time constant (<i>T5</i>) (&gt;= 0).
    '''
    tc: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature control (<i>Tc</i>). Unit = °F or °C depending on parameters
    <i>Af1</i> and <i>Bf1</i>.
    '''
    tcd: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Compressor discharge time constant (<i>Tcd</i>) (&gt;= 0).
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel system time constant (<i>Tf</i>) (&gt;= 0).
    '''
    tmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum turbine limit (<i>Tmax</i>) (&gt; GovGAST2.tmin).
    '''
    tmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum turbine limit (<i>Tmin</i>) (&lt; GovGAST2.tmax).
    '''
    tr: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated temperature (<i>Tr</i>). Unit = °C depending on parameters<i> Af1
    </i>and <i>Bf1</i>.
    '''
    trate: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine rating (<i>Trate</i>). Unit = MW.
    '''
    tt: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature controller integration rate (<i>Tt</i>) (&gt;= 0).
    '''
    w: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor gain (1/droop) on turbine rating (<i>W</i>).
    '''
    x: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lead time constant (<i>X</i>) (&gt;= 0).
    '''
    y: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lag time constant (<i>Y</i>) (&gt; 0).
    '''
@dataclass
class GovGAST3(TurbineGovernorDynamics):
    '''
    Generic turbogas with acceleration and temperature controller.
    '''
    bca: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Acceleration limit set-point (<i>Bca</i>). Unit = 1/s. Typical value =
    0,01.
    '''
    kac: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel system feedback (<i>K</i><i><sub>AC</sub></i>). Typical value = 0.
    '''
    kca: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Acceleration control integral gain (<i>Kca</i>). Unit = 1/s. Typical value
    = 100.
    '''
    ksi: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain of radiation shield (<i>Ksi</i>). Typical value = 0,8.
    '''
    ky: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient of transfer function of fuel valve positioner (<i>Ky</i>).
    Typical value = 1.
    '''
    bp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Droop (<i>bp</i>). Typical value = 0,05.
    '''
    dtc: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exhaust temperature variation due to fuel flow increasing from 0 to 1 PU
    (<i>deltaTc</i>). Typical value = 390.
    '''
    ka: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum fuel flow (<i>Ka</i>). Typical value = 0,23.
    '''
    mnef: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel flow maximum negative error value (<i>MNef</i>). Typical value = -0,05.
    '''
    mxef: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel flow maximum positive error value (<i>MXef</i>). Typical value = 0,05.
    '''
    rcmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum fuel flow (<i>RCMN</i>). Typical value = -0,1.
    '''
    rcmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum fuel flow (<i>RCMX</i>). Typical value = 1.
    '''
    tac: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel control time constant (<i>Tac</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Compressor discharge volume time constant (<i>Tc</i>) (&gt;= 0). Typical
    value = 0,2.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature controller derivative gain (<i>Td</i>) (&gt;= 0). Typical value
    = 3,3.
    '''
    tfen: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine rated exhaust temperature correspondent to Pm=1 PU (<i>Tfen</i>).
    Typical value = 540.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of speed governor (<i>Tg</i>) (&gt;= 0). Typical value =
    0,05.
    '''
    tsi: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of radiation shield (<i>Tsi</i>) (&gt;= 0). Typical value
    = 15.
    '''
    tt: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature controller integration rate (<i>Tt</i>). Typical value = 250.
    '''
    ttc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of thermocouple (<i>Ttc</i>) (&gt;= 0). Typical value = 2,5.
    '''
    ty: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of fuel valve positioner (<i>Ty</i>) (&gt;= 0). Typical value
    = 0,2.
    '''
@dataclass
class GovGAST4(TurbineGovernorDynamics):
    '''
    Generic turbogas.
    '''
    bp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Droop (<i>b</i><i><sub>p</sub></i>). Typical value = 0,05.
    '''
    ktm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Compressor gain (<i>Ktm</i>). Typical value = 0.
    '''
    mnef: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel flow maximum negative error value (<i>MNef</i>). Typical value = -0,05.
    '''
    mxef: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel flow maximum positive error value (<i>MXef</i>). Typical value = 0,05.
    '''
    rymn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve opening (<i>RYMN</i>). Typical value = 0.
    '''
    rymx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening (<i>RYMX</i>). Typical value = 1,1.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>TA</i>) (&gt;= 0). Typical value = 3.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>TC</i>) (&gt;= 0). Typical value = 0,5.
    '''
    tcm: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel control time constant (<i>Tcm</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tm: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Compressor discharge volume time constant (<i>Tm</i>) (&gt;= 0). Typical
    value = 0,2.
    '''
    ty: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of fuel valve positioner (<i>Ty</i>) (&gt;= 0). Typical value
    = 0,1.
    '''
@dataclass
class GovGASTWD(TurbineGovernorDynamics):
    '''
    Woodward™ gas turbine governor.
    [Footnote: Woodward gas turbines are an example of suitable products available
    commercially. This information is given for the convenience of users of
    this document and does not constitute an endorsement by IEC of these products.]
    '''
    a: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve positioner (<i>A</i>).
    '''
    b: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve positioner (<i>B</i>).
    '''
    c: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve positioner (<i>C</i>).
    '''
    af1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exhaust temperature parameter (<i>Af1</i>).
    '''
    af2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient equal to 0,5(1-speed) (<i>Af2</i>).
    '''
    bf1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>Bf1</i>). <i>Bf1</i> = <i>E</i>(1-<i>w</i>) where <i>E</i> (speed sensitivity
    coefficient) is 0,55 to 0,65 x <i>Tr</i>.
    '''
    bf2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine torque coefficient K<sub>hhv</sub> (depends on heating value of
    fuel stream in combustion chamber) (<i>Bf2</i>).
    '''
    cf2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient defining fuel flow where power output is 0 % (<i>Cf2</i>).
    Synchronous but no output. Typically 0,23 x K<sub>hhv </sub>(23 % fuel
    flow).
    '''
    ecr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Combustion reaction time delay (<i>Ecr</i>) (&gt;= 0).
    '''
    etd: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine and exhaust delay (<i>Etd</i>) (&gt;= 0).
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ratio of fuel adjustment (<i>K3</i>).
    '''
    k4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain of radiation shield (<i>K4</i>).
    '''
    k5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain of radiation shield (<i>K5</i>).
    '''
    k6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum fuel flow (<i>K6</i>).
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Drop governor gain (<i>Kd</i>).
    '''
    kdroop: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>Kdroop</i>) (&gt;= 0).
    '''
    kf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel system feedback (<i>Kf</i>).
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Isochronous Governor Gain (<i>Ki</i>).
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PID proportional gain (<i>Kp</i>).
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    t: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel control time constant (<i>T</i>) (&gt;= 0).
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Radiation shield time constant (<i>T3</i>) (&gt;= 0).
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Thermocouple time constant (<i>T4</i>) (&gt;= 0).
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature control time constant (<i>T5</i>) (&gt;= 0).
    '''
    tc: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature control (<i>Tc</i>).
    '''
    tcd: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Compressor discharge time constant (<i>Tcd</i>) (&gt;= 0).
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power transducer time constant (<i>Td</i>) (&gt;= 0).
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel system time constant (<i>Tf</i>) (&gt;= 0).
    '''
    tmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum Turbine limit (<i>Tmax</i>) (&gt; GovGASTWD.tmin).
    '''
    tmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum turbine limit (<i>Tmin</i>) (&lt; GovGASTWD.tmax).
    '''
    tr: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated temperature (<i>Tr</i>).
    '''
    trate: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine rating (<i>Trate</i>). Unit = MW.
    '''
    tt: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature controller integration rate (<i>Tt</i>) (&gt;= 0).
    '''
@dataclass
class GovHydro1(TurbineGovernorDynamics):
    '''
    Basic hydro turbine governor.
    '''
    velm: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate velocity (<i>Vlem</i>) (&gt; 0). Typical value = 0,2.
    '''
    at: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine gain (<i>At</i>) (&gt; 0). Typical value = 1,2.
    '''
    dturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine damping factor (<i>Dturb</i>) (&gt;= 0). Typical value = 0,5.
    '''
    gmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening (<i>Gmax</i>) (&gt; 0 and &gt; GovHydro.gmin). Typical
    value = 1.
    '''
    gmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening (<i>Gmin</i>) (&gt;= 0 and &lt; GovHydro1.gmax). Typical
    value = 0.
    '''
    hdam: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine nominal head (<i>hdam</i>). Typical value = 1.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    qnl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    No-load flow at nominal head (<i>qnl</i>) (&gt;= 0). Typical value = 0,08.
    '''
    rperm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop (<i>R</i>) (&gt; 0). Typical value = 0,04.
    '''
    rtemp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temporary droop (<i>r</i>) (&gt; GovHydro1.rperm). Typical value = 0,3.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant (<i>Tf</i>) (&gt; 0). Typical value = 0,05.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tg</i>) (&gt; 0). Typical value = 0,5.
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>Tr</i>) (&gt; 0). Typical value = 5.
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Tw</i>) (&gt; 0). Typical value = 1.
    '''
@dataclass
class GovHydro2(TurbineGovernorDynamics):
    '''
    IEEE hydro turbine governor with straightforward penstock configuration
    and hydraulic-dashpot governor.
    '''
    uc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Uc</i>) (&lt; 0). Unit = PU / s. Typical
    value = -0,1.
    '''
    uo: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Uo</i>). Unit = PU / s. Typical value
    = 0,1.
    '''
    aturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine numerator multiplier (<i>Aturb</i>). Typical value = -1.
    '''
    bturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine denominator multiplier (<i>Bturb</i>) (&gt; 0). Typical value =
    0,5.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional deadband width (<i>db1</i>). Unit = Hz. Typical value = 0.
    '''
    db2: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unintentional deadband (<i>db2</i>). Unit = MW. Typical value = 0.
    '''
    eps: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional db hysteresis (<i>eps</i>). Unit = Hz. Typical value = 0.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU gv (<i>Gv1</i>). Typical value = 0.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU gv (<i>Gv2</i>). Typical value = 0.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU gv (<i>Gv3</i>). Typical value = 0.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU gv (<i>Gv4</i>). Typical value = 0.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU gv (<i>Gv5</i>). Typical value = 0.
    '''
    gv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU gv (<i>Gv6</i>). Typical value = 0.
    '''
    kturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine gain (<i>Kturb</i>). Typical value = 1.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU power (<i>Pgv1</i>). Typical value = 0.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU power (<i>Pgv2</i>). Typical value = 0.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU power (<i>Pgv3</i>). Typical value = 0.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU power (P<i>gv4</i>). Typical value = 0.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU power (<i>Pgv5</i>). Typical value = 0.
    '''
    pgv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU power (<i>Pgv6</i>). Typical value = 0.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening (<i>Pmax</i>) (&gt; GovHydro2.pmin). Typical value
    = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening (<i>Pmin</i>) (&lt; GovHydro2.pmax). Typical value
    = 0.
    '''
    rperm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop (<i>Rperm</i>). Typical value = 0,05.
    '''
    rtemp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temporary droop (<i>Rtemp</i>). Typical value = 0,5.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tg</i>) (&gt; 0). Typical value = 0,5.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pilot servo valve time constant (<i>Tp</i>) (&gt;= 0). Typical value =
    0,03.
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Dashpot time constant (<i>Tr</i>) (&gt;= 0). Typical value = 12.
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Tw</i>) (&gt;= 0). Typical value = 2.
    '''
@dataclass
class GovHydro3(TurbineGovernorDynamics):
    '''
    Modified IEEE hydro governor-turbine. This model differs from that defined
    in the IEEE modelling guideline paper in that the limits on gate position
    and velocity do not permit "wind up" of the upstream signals.
    '''
    governorControl: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor control flag (<i>Cflag</i>).
    true = PID control is active
    false = double derivative control is active.
    Typical value = true.
    '''
    velcl: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Velcl</i>). Unit = PU / s. Typical value
    = -0,2.
    '''
    velop: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Velop</i>). Unit = PU / s. Typical value
    = 0,2.
    '''
    at: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine gain (<i>At</i>) (&gt;0). Typical value = 1,2.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional dead-band width (<i>db1</i>). Unit = Hz. Typical value = 0.
    '''
    db2: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unintentional dead-band (<i>db2</i>). Unit = MW. Typical value = 0.
    '''
    dturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine damping factor (<i>Dturb</i>). Typical value = 0,2.
    '''
    eps: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional db hysteresis (<i>eps</i>). Unit = Hz. Typical value = 0.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU gv (<i>Gv1</i>). Typical value = 0.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU gv (<i>Gv2</i>). Typical value = 0.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU gv (<i>Gv3</i>). Typical value = 0.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU gv (<i>Gv4</i>). Typical value = 0.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU gv (<i>Gv5</i>). Typical value = 0.
    '''
    gv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU gv (<i>Gv6</i>). Typical value = 0.
    '''
    h0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine nominal head (<i>H0</i>). Typical value = 1.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative gain (<i>K1</i>). Typical value = 0,01.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Double derivative gain, if <i>Cflag</i> = -1 (<i>K2</i>). Typical value
    = 2,5.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo gain (<i>Kg</i>). Typical value = 2.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain (<i>Ki</i>). Typical value = 0,5.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU power (<i>Pgv1</i>). Typical value = 0.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU power (<i>Pgv2</i>). Typical value = 0.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU power (<i>Pgv3</i>). Typical value = 0.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU power (<i>Pgv4</i>). Typical value = 0.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU power (<i>Pgv5</i>). Typical value = 0.
    '''
    pgv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU power (<i>Pgv6</i>). Typical value = 0.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening, PU of MWbase (<i>Pmax</i>) (&gt; GovHydro3.pmin).
    Typical value = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening, PU of <i>MWbase</i> (<i>Pmin</i>) (&lt; GovHydro3.pmax).
    Typical value = 0.
    '''
    qnl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    No-load turbine flow at nominal head (<i>Qnl</i>). Typical value = 0,08.
    '''
    relec: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steady-state droop, PU, for electrical power feedback (<i>Relec</i>). Typical
    value = 0,05.
    '''
    rgate: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steady-state droop, PU, for governor output feedback (<i>Rgate</i>). Typical
    value = 0.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input filter time constant (<i>Td</i>) (&gt;= 0). Typical value = 0,05.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>Tf</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tp</i>) (&gt;= 0). Typical value = 0,05.
    '''
    tt: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power feedback time constant (<i>Tt</i>) (&gt;= 0). Typical value = 0,2.
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Tw</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 1.
    '''
@dataclass
class GovHydro4(TurbineGovernorDynamics):
    '''
    Hydro turbine and governor. Represents plants with straight-forward penstock
    configurations and hydraulic governors of the traditional 'dashpot' type.
    This model can be used to represent simple, Francis/Pelton or Kaplan turbines.
    '''
    bmax: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum blade adjustment factor (<i>Bmax</i>) (= 0 for simple, = 0 for
    Francis/Pelton). Typical value for Kaplan = 1,1276.
    '''
    uc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Max gate closing velocity (<i>Uc</i>). Typical value = 0,2.
    '''
    uo: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Max gate opening velocity (<i>Uo</i>). Typical value = 0,2.
    '''
    at: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine gain (<i>At</i>). Typical value = 1,2.
    '''
    bgv0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kaplan blade servo point 0 (<i>Bgv0</i>) (= 0 for simple, = 0 for Francis/Pelton).
    Typical value for Kaplan = 0.
    '''
    bgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kaplan blade servo point 1 (<i>Bgv1</i>) (= 0 for simple, = 0 for Francis/Pelton).
    Typical value for Kaplan = 0.
    '''
    bgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kaplan blade servo point 2 (<i>Bgv2</i>) (= 0 for simple, = 0 for Francis/Pelton).
    Typical value for Kaplan = 0,1.
    '''
    bgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kaplan blade servo point 3 (<i>Bgv3</i>) (= 0 for simple, = 0 for Francis/Pelton).
    Typical value for Kaplan = 0,667.
    '''
    bgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kaplan blade servo point 4 (<i>Bgv4</i>) (= 0 for simple, = 0 for Francis/Pelton).
    Typical value for Kaplan = 0,9.
    '''
    bgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kaplan blade servo point 5 (<i>Bgv5</i>) (= 0 for simple, = 0 for Francis/Pelton).
    Typical value for Kaplan = 1.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional deadband width (<i>db1</i>). Unit = Hz. Typical value = 0.
    '''
    db2: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unintentional dead-band (<i>db2</i>). Unit = MW. Typical value = 0.
    '''
    dturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine damping factor (<i>Dturb</i>). Unit = delta P (PU of <i>MWbase</i>)
    / delta speed (PU). Typical value for simple = 0,5, Francis/Pelton = 1,1,
    Kaplan = 1,1.
    '''
    eps: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional db hysteresis (<i>eps</i>). Unit = Hz. Typical value = 0.
    '''
    gmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening, PU of <i>MWbase</i> (<i>Gmax</i>) (&gt; GovHydro4.gmin).
    Typical value = 1.
    '''
    gmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening, PU of <i>MWbase</i> (<i>Gmin</i>) (&lt; GovHydro4.gmax).
    Typical value = 0.
    '''
    gv0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 0, PU gv (<i>Gv0</i>) (= 0 for simple). Typical for
    Francis/Pelton = 0,1, Kaplan = 0,1.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU gv (<i>Gv1</i>) (= 0 for simple, &gt; GovHydro4.gv0
    for Francis/Pelton and Kaplan). Typical value for Francis/Pelton = 0,4,
    Kaplan = 0,4.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU gv (<i>Gv2</i>) (= 0 for simple, &gt; GovHydro4.gv1
    for Francis/Pelton and Kaplan). Typical value for Francis/Pelton = 0,5,
    Kaplan = 0,5.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU gv (<i>Gv3</i>) (= 0 for simple, &gt; GovHydro4.gv2
    for Francis/Pelton and Kaplan). Typical value for Francis/Pelton = 0,7,
    Kaplan = 0,7.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU gv (<i>Gv4</i>) (= 0 for simple, &gt; GovHydro4.gv3
    for Francis/Pelton and Kaplan). Typical value for Francis/Pelton = 0,8,
    Kaplan = 0,8.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU gv (<i>Gv5</i>) (= 0 for simple, &lt; 1 and
    &gt; GovHydro4.gv4 for Francis/Pelton and Kaplan). Typical value for Francis/Pelton
    = 0,9, Kaplan = 0,9.
    '''
    hdam: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Head available at dam (<i>hdam</i>). Typical value = 1.
    '''
    model: Optional[ str | GovHydro4ModelKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The kind of model being represented (simple, Francis/Pelton or Kaplan).
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 0, PU power (<i>Pgv0</i>) (= 0 for simple). Typical
    value = 0.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU power (<i>Pgv1</i>) (= 0 for simple).
    Typical value for Francis/Pelton = 0,42, Kaplan = 0,35.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU power (<i>Pgv2</i>) (= 0 for simple).
    Typical value for Francis/Pelton = 0,56, Kaplan = 0,468.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU power (<i>Pgv3</i>) (= 0 for simple).
    Typical value for Francis/Pelton = 0,8, Kaplan = 0,796.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU power (<i>Pgv4</i>) (= 0 for simple).
    Typical value for Francis/Pelton = 0,9, Kaplan = 0,917.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU power (<i>Pgv5</i>) (= 0 for simple).
    Typical value for Francis/Pelton = 0,97, Kaplan = 0,99.
    '''
    qnl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    No-load flow at nominal head (<i>Qnl</i>).
    Typical value for simple = 0,08, Francis/Pelton = 0, Kaplan = 0.
    '''
    rperm: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop (<i>Rperm</i>) (&gt;= 0). Typical value = 0,05.
    '''
    rtemp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temporary droop (<i>Rtemp</i>) (&gt;= 0). Typical value = 0,3.
    '''
    tblade: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Blade servo time constant (<i>Tblade</i>) (&gt;= 0). Typical value = 100.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tg</i>) (&gt; 0). Typical value = 0,5.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pilot servo time constant (<i>Tp</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Dashpot time constant (<i>Tr</i>) (&gt;= 0). Typical value = 5.
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Tw</i>) (&gt; 0). Typical value = 1.
    '''
@dataclass
class GovHydroDD(TurbineGovernorDynamics):
    '''
    Double derivative hydro governor and turbine.
    '''
    inputSignal: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal switch (<i>Flag</i>).
    true = <i>Pe</i> input is used
    false = feedback is received from <i>CV</i>.
    <i>Flag</i> is normally dependent on <i>Tt</i>. If <i>Tt</i> is zero, <i>Flag</i>
    is set to false. If <i>Tt</i> is not zero, <i>Flag</i> is set to true.
    Typical value = true.
    '''
    velcl: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Velcl</i>). Unit = PU / s. Typical value
    = -0,14.
    '''
    velop: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Velop</i>). Unit = PU / s. Typical value
    = 0,09.
    '''
    aturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine numerator multiplier (<i>Aturb</i>) (see parameter detail 3). Typical
    value = -1.
    '''
    bturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine denominator multiplier (<i>Bturb</i>) (see parameter detail 3).
    Typical value = 0,5.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional dead-band width (<i>db1</i>). Unit = Hz. Typical value = 0.
    '''
    db2: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unintentional dead-band (<i>db2</i>). Unit = MW. Typical value = 0.
    '''
    eps: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional db hysteresis (<i>eps</i>). Unit = Hz. Typical value = 0.
    '''
    gmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening (<i>Gmax</i>) (&gt; GovHydroDD.gmin). Typical value
    = 0.
    '''
    gmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening (<i>Gmin</i>) (&lt; GovHydroDD.gmax). Typical value
    = 0.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU gv (<i>Gv1</i>). Typical value = 0.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU gv (<i>Gv2</i>). Typical value = 0.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU gv (<i>Gv3</i>). Typical value = 0.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU gv (<i>Gv4</i>). Typical value = 0.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU gv (<i>Gv5</i>). Typical value = 0.
    '''
    gv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU gv (<i>Gv6</i>). Typical value = 0.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Single derivative gain (<i>K1</i>). Typical value = 3,6.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Double derivative gain (<i>K2</i>). Typical value = 0,2.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo gain (<i>Kg</i>). Typical value = 3.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain (<i>Ki</i>). Typical value = 1.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt;0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU power (<i>Pgv1</i>). Typical value = 0.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU power (<i>Pgv2</i>). Typical value = 0.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU power (<i>Pgv3</i>). Typical value = 0.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU power (<i>Pgv4</i>). Typical value = 0.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU power (<i>Pgv5</i>). Typical value = 0.
    '''
    pgv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU power (<i>Pgv6</i>). Typical value = 0.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening, PU of <i>MWbase</i> (<i>Pmax</i>) (&gt; GovHydroDD.pmin).
    Typical value = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening, PU of <i>MWbase</i> (<i>Pmin</i>) (&gt; GovHydroDD.pmax).
    Typical value = 0.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steady state droop (<i>R</i>). Typical value = 0,05.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input filter time constant (<i>Td</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 0.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>Tf</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tp</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 0,35.
    '''
    tt: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power feedback time constant (<i>Tt</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 0,02.
    '''
    tturb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine time constant (<i>Tturb</i>) (&gt;= 0). See parameter detail 3.
    Typical value = 0,8.
    '''
@dataclass
class GovHydroFrancis(TurbineGovernorDynamics):
    '''
    Detailed hydro unit - Francis model. This model can be used to represent
    three types of governors.
    A schematic of the hydraulic system of detailed hydro unit models, such
    as Francis and Pelton, is provided in the DetailedHydroModelHydraulicSystem
    diagram.
    '''
    va: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Va</i>). Unit = PU / s. Typical value
    = 0,06.
    '''
    vc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Vc</i>). Unit = PU / s. Typical value
    = -0,06.
    '''
    waterTunnelSurgeChamberSimulation: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water tunnel and surge chamber simulation (<i>Tflag</i>).
    true = enable of water tunnel and surge chamber simulation
    false = inhibit of water tunnel and surge chamber simulation.
    Typical value = false.
    '''
    am: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Opening section <i>S</i><i><sub>EFF</sub></i> at the maximum efficiency
    (<i>Am</i>). Typical value = 0,7.
    '''
    av0: Optional[ float | Area ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Area of the surge tank (<i>A</i><i><sub>V0</sub></i>). Unit = m<sup>2</sup>.
    Typical value = 30.
    '''
    av1: Optional[ float | Area ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Area of the compensation tank (<i>A</i><i><sub>V1</sub></i>). Unit = m<sup>2</sup>.
    Typical value = 700.
    '''
    bp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Droop (<i>Bp</i>). Typical value = 0,05.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional dead-band width (<i>DB1</i>). Unit = Hz. Typical value = 0.
    '''
    etamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum efficiency (<i>EtaMax</i>). Typical value = 1,05.
    '''
    governorControl: Optional[ str | FrancisGovernorControlKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor control flag (<i>Cflag</i>). Typical value = mechanicHydrolicTachoAccelerator.
    '''
    h1: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Head of compensation chamber water level with respect to the level of penstock
    (<i>H</i><i><sub>1</sub></i>). Unit = km. Typical value = 0,004.
    '''
    h2: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Head of surge tank water level with respect to the level of penstock (<i>H</i><i><sub>2</sub></i>).
    Unit = km. Typical value = 0,040.
    '''
    hn: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated hydraulic head (<i>H</i><i><sub>n</sub></i>). Unit = km. Typical
    value = 0,250.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Penstock loss coefficient (due to friction) (<i>Kc</i>). Typical value
    = 0,025.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water tunnel and surge chamber loss coefficient (due to friction) (<i>Kg</i>).
    Typical value = 0,025.
    '''
    kt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout gain (<i>Kt</i>). Typical value = 0,25.
    '''
    qc0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    No-load turbine flow at nominal head (<i>Qc0</i>). Typical value = 0,1.
    '''
    qn: Optional[ float | VolumeFlowRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated flow (<i>Q</i><i><sub>n</sub></i>). Unit = m<sup>3</sup>/s. Typical
    value = 250.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative gain (<i>Ta</i>) (&gt;= 0). Typical value = 3.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>Td</i>) (&gt;= 0). Typical value = 6.
    '''
    ts: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Ts</i>) (&gt;= 0). Typical value = 0,5.
    '''
    twnc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Twnc</i>) (&gt;= 0). Typical value = 1.
    '''
    twng: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water tunnel and surge chamber inertia time constant (<i>Twng</i>) (&gt;=
    0). Typical value = 3.
    '''
    tx: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative feedback gain (<i>Tx</i>) (&gt;= 0). Typical value = 1.
    '''
    valvmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening (<i>ValvMax</i>) (&gt; GovHydroFrancis.valvmin). Typical
    value = 1,1.
    '''
    valvmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening (<i>ValvMin</i>) (&lt; GovHydroFrancis.valvmax). Typical
    value = 0.
    '''
    zsfc: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Head of upper water level with respect to the level of penstock (<i>Zsfc</i>).
    Unit = km. Typical value = 0,025.
    '''
@dataclass
class GovHydroIEEE0(TurbineGovernorDynamics):
    '''
    IEEE simplified hydro governor-turbine model. Used for mechanical-hydraulic
    and electro-hydraulic turbine governors, with or without steam feedback.
    Typical values given are for mechanical-hydraulic turbine-governor.
    Ref<font color="#0f0f0f">erence: IEEE Transactions on Power Apparatus and
    Systems, November/December 1973, Volume PAS-92, Number 6, <i><u>Dynamic
    Models for Steam and Hydro Turbines in Power System Studies</u></i>, page
    1904.</font>
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor gain (<i>K)</i>.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate maximum (<i>Pmax</i>) (&gt; GovHydroIEEE0.pmin).
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate minimum (<i>Pmin</i>) (&lt; GovHydroIEEE.pmax).
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lag time constant (<i>T1</i>) (&gt;= 0). Typical value = 0,25.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lead time constant (<i>T2)</i> (&gt;= 0). Typical value = 0.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate actuator time constant (<i>T3</i>) (&gt;= 0). Typical value = 0,1.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water starting time (<i>T4</i>) (&gt;= 0).
    '''
@dataclass
class GovHydroIEEE2(TurbineGovernorDynamics):
    '''
    IEEE hydro turbine governor model represents plants with straightforward
    penstock configurations and hydraulic-dashpot governors.
    Ref<font color="#0f0f0f">erence: IEEE Transactions on Power Apparatus and
    Systems, November/December 1973, Volume PAS-92, Number 6, <i><u>Dynamic
    Models for Steam and Hydro Turbines in Power System Studies</u></i>, page
    1904.</font>
    '''
    uc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Uc</i>) (&lt;0). Typical value = -0,1.
    '''
    uo: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Uo</i>). Unit = PU / s. Typical value
    = 0,1.
    '''
    aturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine numerator multiplier (<i>Aturb</i>). Typical value = -1.
    '''
    bturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine denominator multiplier (<i>Bturb</i>) (&gt; 0). Typical value =
    0,5.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU gv (<i>Gv1</i>). Typical value = 0.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU gv (<i>Gv2</i>). Typical value = 0.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU gv (<i>Gv3</i>). Typical value = 0.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU gv (<i>Gv4</i>). Typical value = 0.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU gv (<i>Gv5</i>). Typical value = 0.
    '''
    gv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU gv (<i>Gv6</i>). Typical value = 0.
    '''
    kturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine gain (<i>Kturb</i>). Typical value = 1.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU power (<i>Pgv1</i>). Typical value = 0.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU power (<i>Pgv2</i>). Typical value = 0.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU power (<i>Pgv3</i>). Typical value = 0.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU power (<i>Pgv4</i>). Typical value = 0.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU power (<i>Pgv5</i>). Typical value = 0.
    '''
    pgv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU power (<i>Pgv6</i>). Typical value = 0.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening (<i>Pmax</i>) (&gt; GovHydroIEEE2.pmin). Typical value
    = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening (<i>Pmin</i>) (&lt;GovHydroIEEE2.pmax). Typical value
    = 0.
    '''
    rperm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop (<i>Rperm</i>). Typical value = 0,05.
    '''
    rtemp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temporary droop (<i>Rtemp</i>). Typical value = 0,5.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tg</i>) (&gt;= 0). Typical value = 0,5.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pilot servo valve time constant (<i>Tp</i>) (&gt;= 0). Typical value =
    0,03.
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Dashpot time constant (<i>Tr</i>) (&gt;= 0). Typical value = 12.
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Tw</i>) (&gt;= 0). Typical value = 2.
    '''
@dataclass
class GovHydroPID(TurbineGovernorDynamics):
    '''
    PID governor and turbine.
    '''
    inputSignal: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal switch (<i>Flag</i>).
    true = <i>Pe</i> input is used
    false = feedback is received from <i>CV</i>.
    <i>Flag</i> is normally dependent on <i>Tt</i>. If <i>Tt </i>is zero, <i>Flag</i>
    is set to false. If <i>Tt</i> is not zero, <i>Flag</i> is set to true.
    Typical value = true.
    '''
    velcl: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Velcl</i>). Unit = PU / s. Typical value
    = -0,14.
    '''
    velop: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Velop</i>). Unit = PU / s. Typical value
    = 0,09.
    '''
    aturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine numerator multiplier (<i>Aturb</i>) (see parameter detail 3). Typical
    value -1.
    '''
    bturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine denominator multiplier (<i>Bturb</i>) (see parameter detail 3).
    Typical value = 0,5.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional dead-band width (<i>db1</i>). Unit = Hz. Typical value = 0.
    '''
    db2: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unintentional dead-band (<i>db2</i>). Unit = MW. Typical value = 0.
    '''
    eps: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional db hysteresis (<i>eps</i>). Unit = Hz. Typical value = 0.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU gv (<i>Gv1</i>). Typical value = 0.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU gv (<i>Gv2</i>). Typical value = 0.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU gv (<i>Gv3</i>). Typical value = 0.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU gv (<i>Gv4</i>). Typical value = 0.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU gv (<i>Gv5</i>). Typical value = 0.
    '''
    gv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU gv (<i>Gv6</i>). Typical value = 0.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative gain (<i>Kd</i>). Typical value = 1,11.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo gain (<i>Kg</i>). Typical value = 2,5.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain (<i>Ki</i>). Typical value = 0,36.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain (<i>Kp</i>). Typical value = 0,1.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU power (<i>Pgv1</i>). Typical value = 0.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU power (<i>Pgv2</i>). Typical value = 0.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU power (<i>Pgv3</i>). Typical value = 0.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU power (<i>Pgv4</i>). Typical value = 0.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU power (<i>Pgv5</i>). Typical value = 0.
    '''
    pgv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU power (<i>Pgv6</i>). Typical value = 0.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening, PU of MWbase (<i>Pmax</i>) (&gt; GovHydroPID.pmin).
    Typical value = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening, PU of MWbase (<i>Pmin</i>) (&lt; GovHydroPID.pmax).
    Typical value = 0.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steady state droop (<i>R</i>). Typical value = 0,05.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input filter time constant (<i>Td</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 0.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Washout time constant (<i>Tf</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tp</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 0,35.
    '''
    tt: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power feedback time constant (<i>Tt</i>) (&gt;= 0). If = 0, block is bypassed.
    Typical value = 0,02.
    '''
    tturb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine time constant (<i>Tturb</i>) (&gt;= 0). See Parameter detail 3.
    Typical value = 0,8.
    '''
@dataclass
class GovHydroPID2(TurbineGovernorDynamics):
    '''
    Hydro turbine and governor. Represents plants with straightforward penstock
    configurations and "three term" electro-hydraulic governors (i.e. Woodward<sup>TM</sup>
    electronic).
    [Footnote: Woodward electronic governors are an example of suitable products
    available commercially. This information is given for the convenience of
    users of this document and does not constitute an endorsement by IEC of
    these products.]
    '''
    feedbackSignal: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback signal type flag (<i>Flag</i>).
    true = use gate position feedback signal
    false = use Pe.
    '''
    ki: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reset gain (<i>Ki</i>). Unit = PU/s. Typical value = 0.
    '''
    velmax: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Velmax</i>) (&lt; GovHydroPID2.velmin).
    Unit = PU / s. Typical value = 0.
    '''
    velmin: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Velmin</i>) (&gt; GovHydroPID2.velmax).
    Unit = PU / s. Typical value = 0.
    '''
    atw: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Factor multiplying <i>Tw</i> (<i>Atw</i>). Typical value = 0.
    '''
    d: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine damping factor (<i>D</i>). Unit = delta P / delta speed. Typical
    value = 0.
    '''
    g0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate opening at speed no load (<i>G0</i>). Typical value = 0.
    '''
    g1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate gate opening (<i>G1</i>). Typical value = 0.
    '''
    g2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intermediate gate opening (<i>G2</i>). Typical value = 0.
    '''
    gmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening (<i>Gmax</i>) (&gt; GovHydroPID2.gmin). Typical value
    = 0.
    '''
    gmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening (<i>Gmin</i>) (&gt; GovHydroPID2.gmax). Typical value
    = 0.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative gain (<i>Kd</i>). Typical value = 0.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain (<i>Kp</i>). Typical value = 0.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt;0). Unit = MW.
    '''
    p1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power at gate opening <i>G1</i> (<i>P1</i>). Typical value = 0.
    '''
    p2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power at gate opening G2 (<i>P2</i>). Typical value = 0.
    '''
    p3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power at full opened gate (<i>P3</i>). Typical value = 0.
    '''
    rperm: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent drop (<i>Rperm</i>). Typical value = 0.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller time constant (<i>Ta</i>) (&gt;= 0). Typical value = 0.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tb</i>) (&gt; 0).
    '''
    treg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed detector time constant (<i>Treg</i>) (&gt;= 0). Typical value = 0.
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Tw</i>) (&gt;= 0). Typical value = 0.
    '''
@dataclass
class GovHydroPelton(TurbineGovernorDynamics):
    '''
    Detailed hydro unit - Pelton model. This model can be used to represent
    the dynamic related to water tunnel and surge chamber.
    The DetailedHydroModelHydraulicSystem diagram, located under the GovHydroFrancis
    class, provides a schematic of the hydraulic system of detailed hydro unit
    models, such as Francis and Pelton.
    '''
    simplifiedPelton: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Simplified Pelton model simulation (<i>Sflag</i>).
    true = enable of simplified Pelton model simulation
    false = enable of complete Pelton model simulation (non-linear gain).
    Typical value = true.
    '''
    staticCompensating: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Static compensating characteristic (<i>Cflag</i>). It should be true if
    simplifiedPelton = false.
    true = enable of static compensating characteristic
    false = inhibit of static compensating characteristic.
    Typical value = false.
    '''
    va: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Va</i>). Unit = PU / s. Typical value
    = 0,06.
    '''
    vc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Vc</i>). Unit = PU / s. Typical value
    = -0,06.
    '''
    waterTunnelSurgeChamberSimulation: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water tunnel and surge chamber simulation (<i>Tflag</i>).
    true = enable of water tunnel and surge chamber simulation
    false = inhibit of water tunnel and surge chamber simulation.
    Typical value = false.
    '''
    av0: Optional[ float | Area ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Area of the surge tank (<i>A</i><i><sub>V0</sub></i>). Unit = m<sup>2</sup>.
    Typical value = 30.
    '''
    av1: Optional[ float | Area ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Area of the compensation tank (<i>A</i><i><sub>V1</sub></i>). Unit = m<sup>2</sup>.
    Typical value = 700.
    '''
    bp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Droop (<i>bp</i>). Typical value = 0,05.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional dead-band width (<i>DB1</i>). Unit = Hz. Typical value = 0.
    '''
    db2: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional dead-band width of valve opening error (<i>DB2</i>). Unit =
    Hz. Typical value = 0,01.
    '''
    h1: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Head of compensation chamber water level with respect to the level of penstock
    (<i>H</i><i><sub>1</sub></i>). Unit = km. Typical value = 0,004.
    '''
    h2: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Head of surge tank water level with respect to the level of penstock (<i>H</i><i><sub>2</sub></i>).
    Unit = km. Typical value = 0,040.
    '''
    hn: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated hydraulic head (<i>H</i><i><sub>n</sub></i>). Unit = km. Typical
    value = 0,250.
    '''
    kc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Penstock loss coefficient (due to friction) (<i>Kc</i>). Typical value
    = 0,025.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water tunnel and surge chamber loss coefficient (due to friction) (<i>Kg</i>).
    Typical value = 0,025.
    '''
    qc0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    No-load turbine flow at nominal head (<i>Qc0</i>). Typical value = 0,05.
    '''
    qn: Optional[ float | VolumeFlowRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated flow (<i>Q</i><i><sub>n</sub></i>). Unit = m<sup>3</sup>/s. Typical
    value = 250.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative gain (accelerometer time constant) (<i>Ta</i>) (&gt;= 0). Typical
    value = 3.
    '''
    ts: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Ts</i>) (&gt;= 0). Typical value = 0,15.
    '''
    tv: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Servomotor integrator time constant (<i>Tv</i>) (&gt;= 0). Typical value
    = 0,3.
    '''
    twnc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Twnc</i>) (&gt;= 0). Typical value = 1.
    '''
    twng: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water tunnel and surge chamber inertia time constant (<i>Twng</i>) (&gt;=
    0). Typical value = 3.
    '''
    tx: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electronic integrator time constant (<i>Tx</i>) (&gt;= 0). Typical value
    = 0,5.
    '''
    valvmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening (<i>ValvMax</i>) (&gt; GovHydroPelton.valvmin). Typical
    value = 1,1.
    '''
    valvmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening (<i>ValvMin</i>) (&lt; GovHydroPelton.valvmax). Typical
    value = 0.
    '''
    vav: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum servomotor valve opening velocity (<i>Vav</i>). Typical value =
    0,1.
    '''
    vcv: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum servomotor valve closing velocity (<i>Vcv</i>). Typical value =
    -0,1.
    '''
    zsfc: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Head of upper water level with respect to the level of penstock (<i>Zsfc</i>).
    Unit = km. Typical value = 0,025.
    '''
@dataclass
class GovHydroR(TurbineGovernorDynamics):
    '''
    Fourth order lead-lag governor and hydro turbine.
    '''
    inputSignal: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input signal switch (<i>Flag</i>).
    true = <i>Pe</i> input is used
    false = feedback is received from <i>CV</i>.
    <i>Flag</i> is normally dependent on <i>Tt</i>. If <i>Tt </i>is zero, <i>Flag</i>
    is set to false. If <i>Tt</i> is not zero, <i>Flag</i> is set to true.
    Typical value = true.
    '''
    velcl: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Velcl</i>). Unit = PU / s. Typical value
    = -0,2.
    '''
    velop: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Velop</i>). Unit = PU / s. Typical value
    = 0,2.
    '''
    at: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine gain (<i>At</i>). Typical value = 1,2.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional dead-band width (<i>db1</i>). Unit = Hz. Typical value = 0.
    '''
    db2: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unintentional dead-band (<i>db2</i>). Unit = MW. Typical value = 0.
    '''
    dturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine damping factor (<i>Dturb</i>). Typical value = 0,2.
    '''
    eps: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional db hysteresis (<i>eps</i>). Unit = Hz. Typical value = 0.
    '''
    gmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum governor output (<i>Gmax</i>) (&gt; GovHydroR.gmin). Typical value
    = 1,05.
    '''
    gmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum governor output (<i>Gmin</i>) (&lt; GovHydroR.gmax). Typical value
    = -0,05.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU gv (<i>Gv1</i>). Typical value = 0.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU gv (<i>Gv2</i>). Typical value = 0.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU gv (<i>Gv3</i>). Typical value = 0.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU gv (<i>Gv4</i>). Typical value = 0.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU gv (<i>Gv5</i>). Typical value = 0.
    '''
    gv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU gv (<i>Gv6</i>). Typical value = 0.
    '''
    h0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine nominal head (<i>H0</i>). Typical value = 1.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo gain (<i>Kg</i>). Typical value = 2.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain (<i>Ki</i>). Typical value = 0,5.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 1, PU power (<i>Pgv1</i>). Typical value = 0.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 2, PU power (<i>Pgv2</i>). Typical value = 0.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 3, PU power (<i>Pgv3</i>). Typical value = 0.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 4, PU power (<i>Pgv4</i>). Typical value = 0.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 5, PU power (<i>Pgv5</i>). Typical value = 0.
    '''
    pgv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain point 6, PU power (<i>Pgv6</i>). Typical value = 0.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening, PU of <i>MWbase</i> (<i>Pmax</i>) (&gt; GovHydroR.pmin).
    Typical value = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate opening, PU of <i>MWbase</i> (<i>Pmin</i>) (&lt; GovHydroR.pmax).
    Typical value = 0.
    '''
    qnl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    No-load turbine flow at nominal head (<i>Qnl</i>). Typical value = 0,08.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steady-state droop (<i>R</i>). Typical value = 0,05.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant 1 (<i>T1</i>) (&gt;= 0). Typical value = 1,5.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant 1 (<i>T2</i>) (&gt;= 0). Typical value = 0,1.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant 2 (<i>T3</i>) (&gt;= 0). Typical value = 1,5.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant 2 (<i>T4</i>) (&gt;= 0). Typical value = 0,1.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant 3 (<i>T5</i>) (&gt;= 0). Typical value = 0.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant 3 (<i>T6</i>) (&gt;= 0). Typical value = 0,05.
    '''
    t7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant 4 (<i>T7</i>) (&gt;= 0). Typical value = 0.
    '''
    t8: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant 4 (<i>T8</i>) (&gt;= 0). Typical value = 0,05.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input filter time constant (<i>Td</i>) (&gt;= 0). Typical value = 0,05.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tp</i>) (&gt;= 0). Typical value = 0,05.
    '''
    tt: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power feedback time constant (<i>Tt</i>) (&gt;= 0). Typical value = 0.
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Tw</i>) (&gt; 0). Typical value = 1.
    '''
@dataclass
class GovHydroWEH(TurbineGovernorDynamics):
    '''
    Woodward<sup>TM </sup>electric hydro governor.
    [Footnote: Woodward electric hydro governors are an example of suitable
    products available commercially. This information is given for the convenience
    of users of this document and does not constitute an endorsement by IEC
    of these products.]
    '''
    feedbackSignal: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback signal selection (<i>Sw</i>).
    true = PID output (if <i>R-Perm-Gate </i>= droop and <i>R-Perm-Pe </i>=
    0)
    false = electrical power (if <i>R-Perm-Gate </i>= 0 and <i>R-Perm-Pe </i>=
    droop) or
    false = gate position (if R<i>-Perm-Gate </i>= droop and <i>R-Perm-Pe </i>=
    0).
    Typical value = false.
    '''
    rpg: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop for governor output feedback (<i>R-Perm-Gate</i>).
    '''
    rpp: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop for electrical power feedback (<i>R-Perm-Pe</i>).
    '''
    db: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed deadband (<i>db</i>).
    '''
    dicn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value to allow the integral controller to advance beyond the gate limits
    (<i>Dicn</i>).
    '''
    dpv: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value to allow the pilot valve controller to advance beyond the gate limits
    (<i>Dpv</i>).
    '''
    dturb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine damping factor (<i>Dturb</i>). Unit = delta P (PU of <i>MWbase</i>)
    / delta speed (PU).
    '''
    fl1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flowgate 1 (<i>Fl1</i>). Flow value for gate position point 1 for lookup
    table representing water flow through the turbine as a function of gate
    position to produce steady state flow.
    '''
    fl2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flowgate 2 (<i>Fl2</i>). Flow value for gate position point 2 for lookup
    table representing water flow through the turbine as a function of gate
    position to produce steady state flow.
    '''
    fl3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flowgate 3 (<i>Fl3</i>). Flow value for gate position point 3 for lookup
    table representing water flow through the turbine as a function of gate
    position to produce steady state flow.
    '''
    fl4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flowgate 4 (<i>Fl4</i>). Flow value for gate position point 4 for lookup
    table representing water flow through the turbine as a function of gate
    position to produce steady state flow.
    '''
    fl5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flowgate 5 (<i>Fl5</i>). Flow value for gate position point 5 for lookup
    table representing water flow through the turbine as a function of gate
    position to produce steady state flow.
    '''
    fp1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P1 (<i>Fp1</i>). Turbine flow value for point 1 for lookup table representing
    PU mechanical power on machine MVA rating as a function of turbine flow.
    '''
    fp10: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P10 (<i>Fp10</i>). Turbine flow value for point 10 for lookup table
    representing PU mechanical power on machine MVA rating as a function of
    turbine flow.
    '''
    fp2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P2 (<i>Fp2</i>). Turbine flow value for point 2 for lookup table representing
    PU mechanical power on machine MVA rating as a function of turbine flow.
    '''
    fp3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P3 (<i>Fp3</i>). Turbine flow value for point 3 for lookup table representing
    PU mechanical power on machine MVA rating as a function of turbine flow.
    '''
    fp4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P4 (<i>Fp4</i>). Turbine flow value for point 4 for lookup table representing
    PU mechanical power on machine MVA rating as a function of turbine flow.
    '''
    fp5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P5 (<i>Fp5</i>). Turbine flow value for point 5 for lookup table representing
    PU mechanical power on machine MVA rating as a function of turbine flow.
    '''
    fp6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P6 (<i>Fp6</i>). Turbine flow value for point 6 for lookup table representing
    PU mechanical power on machine MVA rating as a function of turbine flow.
    '''
    fp7: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P7 (<i>Fp7</i>). Turbine flow value for point 7 for lookup table representing
    PU mechanical power on machine MVA rating as a function of turbine flow.
    '''
    fp8: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P8 (<i>Fp8</i>). Turbine flow value for point 8 for lookup table representing
    PU mechanical power on machine MVA rating as a function of turbine flow.
    '''
    fp9: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flow P9 (<i>Fp9</i>). Turbine flow value for point 9 for lookup table representing
    PU mechanical power on machine MVA rating as a function of turbine flow.
    '''
    gmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate position (<i>Gmax</i>) (&gt; GovHydroWEH.gmin).
    '''
    gmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum gate position (<i>Gmin</i>) (&lt; GovHydroWEH.gmax).
    '''
    gtmxcl: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing rate (<i>Gtmxcl</i>).
    '''
    gtmxop: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening rate (<i>Gtmxop</i>).
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate 1 (<i>Gv1</i>). Gate Position value for point 1 for lookup table representing
    water flow through the turbine as a function of gate position to produce
    steady state flow.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate 2 (<i>Gv2</i>). Gate Position value for point 2 for lookup table representing
    water flow through the turbine as a function of gate position to produce
    steady state flow.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate 3 (<i>Gv3</i>). Gate Position value for point 3 for lookup table representing
    water flow through the turbine as a function of gate position to produce
    steady state flow.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate 4 (<i>Gv4</i>). Gate Position value for point 4 for lookup table representing
    water flow through the turbine as a function of gate position to produce
    steady state flow.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate 5 (<i>Gv5</i>). Gate Position value for point 5 for lookup table representing
    water flow through the turbine as a function of gate position to produce
    steady state flow.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative controller derivative gain (<i>Kd</i>).
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative controller Integral gain (<i>Ki</i>).
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative control gain (<i>Kp</i>).
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pmss1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P1 (<i>Pmss1</i>). Mechanical power output for turbine flow point
    1 for lookup table representing PU mechanical power on machine MVA rating
    as a function of turbine flow.
    '''
    pmss10: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P10 (<i>Pmss10</i>). Mechanical power output for turbine flow
    point 10 for lookup table representing PU mechanical power on machine MVA
    rating as a function of turbine flow.
    '''
    pmss2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P2 (<i>Pmss2</i>). Mechanical power output for turbine flow point
    2 for lookup table representing PU mechanical power on machine MVA rating
    as a function of turbine flow.
    '''
    pmss3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P3 (<i>Pmss3</i>). Mechanical power output for turbine flow point
    3 for lookup table representing PU mechanical power on machine MVA rating
    as a function of turbine flow.
    '''
    pmss4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P4 (<i>Pmss4</i>). Mechanical power output for turbine flow point
    4 for lookup table representing PU mechanical power on machine MVA rating
    as a function of turbine flow.
    '''
    pmss5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P5 (<i>Pmss5</i>). Mechanical power output for turbine flow point
    5 for lookup table representing PU mechanical power on machine MVA rating
    as a function of turbine flow.
    '''
    pmss6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P6 (<i>Pmss6</i>). Mechanical power output for turbine flow point
    6 for lookup table representing PU mechanical power on machine MVA rating
    as a function of turbine flow.
    '''
    pmss7: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P7 (<i>Pmss7</i>). Mechanical power output for turbine flow point
    7 for lookup table representing PU mechanical power on machine MVA rating
    as a function of turbine flow.
    '''
    pmss8: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P8 (<i>Pmss8</i>). Mechanical power output for turbine flow point
    8 for lookup table representing PU mechanical power on machine MVA rating
    as a function of turbine flow.
    '''
    pmss9: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pmss flow P9 (<i>Pmss9</i>). Mechanical power output for turbine flow point
    9 for lookup table representing PU mechanical power on machine MVA rating
    as a function of turbine flow.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative controller time constant (<i>Td</i>) (&gt;= 0). Limits the derivative
    characteristic beyond a breakdown frequency to avoid amplification of high-frequency
    noise.
    '''
    tdv: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Distributive valve time lag time constant (<i>Tdv</i>) (&gt;= 0).
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value to allow the distribution valve controller to advance beyond the
    gate movement rate limit (<i>Tg</i>) (&gt;= 0).
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pilot valve time lag time constant (<i>Tp</i>) (&gt;= 0).
    '''
    tpe: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electrical power droop time constant (<i>Tpe</i>) (&gt;= 0).
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Tw</i>) (&gt; 0).
    '''
@dataclass
class GovHydroWPID(TurbineGovernorDynamics):
    '''
    Woodward<sup>TM</sup> PID hydro governor.
    [Footnote: Woodward PID hydro governors are an example of suitable products
    available commercially. This information is given for the convenience of
    users of this document and does not constitute an endorsement by IEC of
    these products.]
    '''
    d: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine damping factor (<i>D</i>). Unit = delta P / delta speed.
    '''
    gatmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate opening limit maximum (<i>Gatmax</i>) (&gt; GovHydroWPID.gatmin).
    '''
    gatmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate opening limit minimum (<i>Gatmin</i>) (&lt; GovHydroWPID.gatmax).
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate position 1 (<i>Gv1</i>).
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate position 2 (<i>Gv2</i>).
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate position 3 (<i>Gv3</i>) (= 1,0).
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative gain (<i>Kd</i>). Typical value = 1,11.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reset gain (<i>Ki</i>). Typical value = 0,36.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain (<i>Kp</i>). Typical value = 0,1.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Output at <i>Gv1</i> PU of <i>MWbase</i> (<i>Pgv1</i>).
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Output at <i>Gv2</i> PU of <i>MWbase</i> (<i>Pgv2</i>).
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Output at <i>Gv3</i> PU of <i>MWbase</i> (<i>Pgv3</i>).
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum power output (<i>Pmax</i>) (&gt; GovHydroWPID.pmin).
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum power output (<i>Pmin</i>) (&lt; GovHydroWPID.pmax).
    '''
    reg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent drop (<i>Reg</i>).
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller time constant (<i>Ta</i>) (&gt;= 0). Typical value = 0.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate servo time constant (<i>Tb</i>) (&gt;= 0). Typical value = 0.
    '''
    treg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed detector time constant (<i>Treg</i>) (&gt;= 0).
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water inertia time constant (<i>Tw</i>) (&gt;= 0). Typical value = 0.
    '''
    velmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate opening velocity (<i>Velmax</i>) (&gt; GovHydroWPID.velmin).
    Unit = PU / s. Typical value = 0.
    '''
    velmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum gate closing velocity (<i>Velmin</i>) (&lt; GovHydroWPID.velmax).
    Unit = PU / s. Typical value = 0.
    '''
@dataclass
class GovSteam0(TurbineGovernorDynamics):
    '''
    A simplified steam turbine governor.
    '''
    dt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Turbine damping coefficient (<i>Dt</i>). Unit = delta P / delta speed.
    Typical value = 0.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Permanent droop (<i>R</i>). Typical value = 0,05.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steam bowl time constant (<i>T1</i>) (&gt; 0). Typical value = 0,5.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Numerator time constant of <i>T2</i>/<i>T3</i> block (<i>T2</i>) (&gt;=
    0). Typical value = 3.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reheater time constant (<i>T3</i>) (&gt; 0). Typical value = 10.
    '''
    vmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve position, PU of <i>mwcap</i> (<i>Vmax</i>) (&gt; GovSteam0.vmin).
    Typical value = 1.
    '''
    vmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve position, PU of <i>mwcap</i> (<i>Vmin</i>) (&lt; GovSteam0.vmax).
    Typical value = 0.
    '''
@dataclass
class GovSteam1(TurbineGovernorDynamics):
    '''
    Steam turbine governor, based on the GovSteamIEEE1 (with optional deadband
    and nonlinear valve gain added).
    '''
    k1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of HP shaft power after first boiler pass (<i>K1</i>). Typical
    value = 0,2.
    '''
    k2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of LP shaft power after first boiler pass (<i>K2</i>). Typical
    value = 0.
    '''
    k3: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of HP shaft power after second boiler pass (<i>K3</i>). Typical
    value = 0,3.
    '''
    k4: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of LP shaft power after second boiler pass (<i>K4</i>). Typical
    value = 0.
    '''
    k5: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of HP shaft power after third boiler pass (<i>K5</i>). Typical
    value = 0,5.
    '''
    k6: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of LP shaft power after third boiler pass (<i>K6</i>). Typical
    value = 0.
    '''
    k7: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of HP shaft power after fourth boiler pass (<i>K7</i>). Typical
    value = 0.
    '''
    k8: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of LP shaft power after fourth boiler pass (<i>K8</i>). Typical
    value = 0.
    '''
    sdb1: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional deadband indicator.
    true = intentional deadband is applied
    false = intentional deadband is not applied.
    Typical value = true.
    '''
    sdb2: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unintentional deadband location.
    true = intentional deadband is applied before point "A"
    false = intentional deadband is applied after point "A".
    Typical value = true.
    '''
    uc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve closing velocity (<i>Uc</i>) (&lt; 0). Unit = PU / s. Typical
    value = -10.
    '''
    uo: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening velocity (<i>Uo</i>) (&gt; 0). Unit = PU / s. Typical
    value = 1.
    '''
    valve: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear valve characteristic.
    true = nonlinear valve characteristic is used
    false = nonlinear valve characteristic is not used.
    Typical value = true.
    '''
    db1: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional deadband width (<i>db1</i>). Unit = Hz. Typical value = 0.
    '''
    db2: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unintentional deadband (<i>db2</i>). Unit = MW. Typical value = 0.
    '''
    eps: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intentional db hysteresis (<i>eps</i>). Unit = Hz. Typical value = 0.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 1 (<i>GV1</i>). Typical value = 0.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 2 (<i>GV2</i>). Typical value = 0,4.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 3 (<i>GV3</i>). Typical value = 0,5.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 4 (<i>GV4</i>). Typical value = 0,6.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 5 (<i>GV5</i>). Typical value = 1.
    '''
    gv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 6 (<i>GV6</i>). Typical value = 0.
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor gain (reciprocal of droop) (<i>K</i>) (&gt; 0). Typical value
    = 25.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 1 (<i>Pgv1</i>). Typical value = 0.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 2 (<i>Pgv2</i>). Typical value = 0,75.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 3 (<i>Pgv3</i>). Typical value = 0,91.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 4 (<i>Pgv4</i>). Typical value = 0,98.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 5 (<i>Pgv5</i>). Typical value = 1.
    '''
    pgv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 6 (<i>Pgv6</i>). Typical value = 0.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening (<i>Pmax</i>) (&gt; GovSteam1.pmin). Typical value
    = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve opening (<i>Pmin</i>) (&gt;= 0 and &lt; GovSteam1.pmax).
    Typical value = 0.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lag time constant (<i>T1</i>) (&gt;= 0). Typical value = 0.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lead time constant (<i>T2</i>) (&gt;= 0). Typical value = 0.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve positioner time constant (<i>T3) </i>(&gt; 0). Typical value = 0,1.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inlet piping/steam bowl time constant (<i>T4</i>) (&gt;= 0). Typical value
    = 0,3.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of second boiler pass (<i>T5</i>) (&gt;= 0). Typical value
    = 5.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of third boiler pass (<i>T6</i>) (&gt;= 0). Typical value
    = 0,5.
    '''
    t7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of fourth boiler pass (<i>T7</i>) (&gt;= 0). Typical value
    = 0.
    '''
@dataclass
class GovSteam2(TurbineGovernorDynamics):
    '''
    Simplified governor.
    '''
    k: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor gain (reciprocal of droop) (<i>K</i>). Typical value = 20.
    '''
    dbf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency deadband (<i>DBF</i>). Typical value = 0.
    '''
    mnef: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel flow maximum negative error value (<i>MN</i><i><sub>EF</sub></i>).
    Typical value = -1.
    '''
    mxef: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel flow maximum positive error value (<i>MX</i><i><sub>EF</sub></i>).
    Typical value = 1.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum fuel flow (<i>P</i><i><sub>MAX</sub></i>) (&gt; GovSteam2.pmin).
    Typical value = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum fuel flow (<i>P</i><i><sub>MIN</sub></i>) (&lt; GovSteam2.pmax).
    Typical value = 0.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lag time constant (<i>T</i><i><sub>1</sub></i>) (&gt; 0). Typical
    value = 0,45.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lead time constant (<i>T</i><i><sub>2</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
@dataclass
class GovSteamBB(TurbineGovernorDynamics):
    '''
    European governor model.
    '''
    peflag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electric power input selection (Peflag).
    true = electric power input
    false = feedback signal.
    Typical value = false.
    '''
    fcut: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency deadband (<i>f</i><i><sub>cut</sub></i>) (&gt;= 0). Typical value
    = 0,002.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K2</i>). Typical value = 0,75.
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>K3</i>). Typical value = 0,5.
    '''
    kd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Kd</i>). Typical value = 1,0.
    '''
    kg: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Kg</i>). Typical value = 1,0.
    '''
    kls: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Kls</i>) (&gt; 0). Typical value = 0,1.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Kp</i>). Typical value = 1,0.
    '''
    ks: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain (<i>Ks</i>). Typical value = 21,0.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High power limit (<i>Pmax</i>) (&gt; GovSteamBB.pmin). Typical value =
    1,0.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low power limit (<i>Pmin</i>) (&lt; GovSteamBB.pmax). Typical value = 0.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T1</i>). Typical value = 0,05.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T4</i>). Typical value = 0,15.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T5</i>). Typical value = 12,0.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T6</i>). Typical value = 0,75.
    '''
    td: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Td</i>) (&gt; 0). Typical value = 1,0.
    '''
    tn: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>Tn</i>) (&gt; 0). Typical value = 1,0.
    '''
@dataclass
class GovSteamEU(TurbineGovernorDynamics):
    '''
    Simplified boiler and steam turbine with PID governor.
    '''
    chc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Control valves rate closing limit (<i>Chc</i>). Unit = PU / s. Typical
    value = -3,3.
    '''
    cho: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Control valves rate opening limit (<i>Cho</i>). Unit = PU / s. Typical
    value = 0,17.
    '''
    cic: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intercept valves rate closing limit (<i>Cic</i>). Typical value = -2,2.
    '''
    cio: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intercept valves rate opening limit (<i>Cio</i>). Typical value = 0,123.
    '''
    db1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Deadband of the frequency corrector (<i>db1</i>). Typical value = 0.
    '''
    db2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Deadband of the speed governor (<i>db2</i>). Typical value = 0,0004.
    '''
    hhpmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum control valve position (<i>Hhpmax</i>). Typical value = 1.
    '''
    ke: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain of the power controller (<i>Ke</i>). Typical value = 0,65.
    '''
    kfcor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain of the frequency corrector (<i>Kfcor</i>). Typical value = 20.
    '''
    khp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of total turbine output generated by HP part (<i>Khp</i>). Typical
    value = 0,277.
    '''
    klp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of total turbine output generated by HP part (<i>Klp</i>). Typical
    value = 0,723.
    '''
    komegacor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain of the speed governor (<i>Kwcor</i>). Typical value = 20.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximal active power of the turbine (<i>Pmax</i>). Typical value = 1.
    '''
    prhmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum low pressure limit (<i>Prhmax</i>). Typical value = 1,4.
    '''
    simx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intercept valves transfer limit (<i>Simx</i>). Typical value = 0,425.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Boiler time constant (<i>Tb</i>) (&gt;= 0). Typical value = 100.
    '''
    tdp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative time constant of the power controller (<i>Tdp</i>) (&gt;= 0).
    Typical value = 0.
    '''
    ten: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electro hydraulic transducer (<i>Ten</i>) (&gt;= 0). Typical value = 0,1.
    '''
    tf: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency transducer time constant (<i>Tf</i>) (&gt;= 0). Typical value
    = 0.
    '''
    tfp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of the power controller (<i>Tfp</i>) (&gt;= 0). Typical value
    = 0.
    '''
    thp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High pressure (HP) time constant of the turbine (<i>Thp</i>) (&gt;= 0).
    Typical value = 0,31.
    '''
    tip: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral time constant of the power controller (<i>Tip</i>) (&gt;= 0).
    Typical value = 2.
    '''
    tlp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low pressure (LP) time constant of the turbine (<i>Tlp</i>) (&gt;= 0).
    Typical value = 0,45.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power transducer time constant (<i>Tp</i>) (&gt;= 0). Typical value = 0,07.
    '''
    trh: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reheater time constant of the turbine (<i>Trh</i>) (&gt;= 0). Typical value
    = 8.
    '''
    tvhp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Control valves servo time constant (<i>Tvhp</i>) (&gt;= 0). Typical value
    = 0,1.
    '''
    tvip: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intercept valves servo time constant (<i>Tvip</i>) (&gt;= 0). Typical value
    = 0,15.
    '''
    tw: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed transducer time constant (<i>Tw</i>) (&gt;= 0). Typical value = 0,02.
    '''
    wfmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Upper limit for frequency correction (<i>Wfmax</i>) (&gt; GovSteamEU.wfmin).
    Typical value = 0,05.
    '''
    wfmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lower limit for frequency correction (<i>Wfmin</i>) (&lt; GovSteamEU.wfmax).
    Typical value = -0,05.
    '''
    wmax1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Emergency speed control lower limit (<i>wmax1</i>). Typical value = 1,025.
    '''
    wmax2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Emergency speed control upper limit (<i>wmax2</i>). Typical value = 1,05.
    '''
    wwmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Upper limit for the speed governor (<i>Wwmax</i>) (&gt; GovSteamEU.wwmin).
    Typical value = 0,1.
    '''
    wwmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lower limit for the speed governor frequency correction (<i>Wwmin</i>)
    (&lt; GovSteamEU.wwmax). Typical value = -1.
    '''
@dataclass
class GovSteamFV2(TurbineGovernorDynamics):
    '''
    Steam turbine governor with reheat time constants and modelling of the
    effects of fast valve closing to reduce mechanical power.
    '''
    dt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>Dt</i>).
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of the turbine power developed by turbine sections not involved
    in fast valving (<i>K</i>).
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Alternate base used instead of machine base in equipment model if necessary
    (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>R</i>).
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor time constant (<i>T1</i>) (&gt;= 0).
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reheater time constant (<i>T3</i>) (&gt;= 0).
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time after initial time for valve to close (<i>Ta</i>) (&gt;= 0).
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time after initial time for valve to begin opening (<i>Tb</i>) (&gt;= 0).
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time after initial time for valve to become fully open (<i>Tc</i>) (&gt;=
    0).
    '''
    tt: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant with which power falls off after intercept valve closure
    (<i>Tt</i>) (&gt;= 0).
    '''
    vmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>Vmax</i>) (&gt; GovSteamFV2.vmin).
    '''
    vmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (<i>Vmin</i>) (&lt; GovSteamFV2.vmax).
    '''
@dataclass
class GovSteamFV3(TurbineGovernorDynamics):
    '''
    Simplified GovSteamIEEE1 steam turbine governor with Prmax limit and fast
    valving.
    '''
    uc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve closing velocity (<i>Uc</i>). Unit = PU / s. Typical value
    = -1.
    '''
    uo: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening velocity (<i>Uo</i>). Unit = PU / s. Typical value
    = 0,1.
    '''
    gv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 1 (<i>GV1</i>). Typical value = 0.
    '''
    gv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 2 (<i>GV2</i>). Typical value = 0,4.
    '''
    gv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 3 (<i>GV3</i>). Typical value = 0,5.
    '''
    gv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 4 (<i>GV4</i>). Typical value = 0,6.
    '''
    gv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 5 (<i>GV5</i>). Typical value = 1.
    '''
    gv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain valve position point 6 (<i>GV6</i>). Typical value = 0.
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor gain, (reciprocal of droop) (<i>K</i>). Typical value = 20.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of turbine power developed after first boiler pass (<i>K1</i>).
    Typical value = 0,2.
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of turbine power developed after second boiler pass (<i>K2</i>).
    Typical value = 0,2.
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of hp turbine power developed after crossover or third boiler
    pass (<i>K3</i>). Typical value = 0,6.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pgv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 1 (<i>Pgv1</i>). Typical value = 0.
    '''
    pgv2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 2 (<i>Pgv2</i>). Typical value = 0,75.
    '''
    pgv3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 3 (<i>Pgv3</i>). Typical value = 0,91.
    '''
    pgv4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 4 (<i>Pgv4</i>). Typical value = 0,98.
    '''
    pgv5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 5 (<i>Pgv5</i>). Typical value = 1.
    '''
    pgv6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nonlinear gain power value point 6 (<i>Pgv6</i>). Typical value = 0.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening, PU of <i>MWbase</i> (<i>Pmax</i>) (&gt; GovSteamFV3.pmin).
    Typical value = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve opening, PU of <i>MWbase</i> (<i>Pmin</i>) (&lt; GovSteamFV3.pmax).
    Typical value = 0.
    '''
    prmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Max. pressure in reheater (<i>Prmax</i>). Typical value = 1.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lead time constant (<i>T1</i>) (&gt;= 0). Typical value = 0.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lag time constant (<i>T2</i>) (&gt;= 0). Typical value = 0.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve positioner time constant (<i>T3</i>) (&gt; 0). Typical value = 0.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inlet piping/steam bowl time constant (<i>T4</i>) (&gt;= 0). Typical value
    = 0,2.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of second boiler pass (i.e. reheater) (<i>T5</i>) (&gt; 0
    if fast valving is used, otherwise &gt;= 0). Typical value = 0,5.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of crossover or third boiler pass (<i>T6</i>) (&gt;= 0).
    Typical value = 10.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time to close intercept valve (IV) (<i>Ta</i>) (&gt;= 0). Typical value
    = 0,97.
    '''
    tb: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time until IV starts to reopen (<i>Tb</i>) (&gt;= 0). Typical value = 0,98.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time until IV is fully open (<i>Tc</i>) (&gt;= 0). Typical value = 0,99.
    '''
@dataclass
class GovSteamFV4(TurbineGovernorDynamics):
    '''
    Detailed electro-hydraulic governor for steam unit.
    '''
    svmn: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum regulator gate closing velocity (<i>Svmn</i>). Typical value =
    -0,0333.
    '''
    svmx: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum regulator gate opening velocity (<i>Svmx</i>). Typical value =
    0,0333.
    '''
    cpsmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum value of pressure regulator output (<i>Cpsmn</i>). Typical value
    = -1.
    '''
    cpsmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum value of pressure regulator output (<i>Cpsmx</i>). Typical value
    = 1.
    '''
    crmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum value of regulator set-point (<i>Crmn</i>). Typical value = 0.
    '''
    crmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum value of regulator set-point (<i>Crmx</i>). Typical value = 1,2.
    '''
    kdc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative gain of pressure regulator (<i>Kdc</i>). Typical value = 1.
    '''
    kf1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency bias (reciprocal of droop) (<i>Kf1</i>). Typical value = 20.
    '''
    kf3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency control (reciprocal of droop) (<i>Kf3</i>). Typical value = 20.
    '''
    khp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of total turbine output generated by HP part (<i>Khp</i>). Typical
    value = 0,35.
    '''
    kic: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain of pressure regulator (<i>Kic</i>). Typical value = 0,0033.
    '''
    kip: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain of pressure feedback regulator (<i>Kip</i>). Typical value
    = 0,5.
    '''
    kit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain of electro-hydraulic regulator (<i>Kit</i>). Typical value
    = 0,04.
    '''
    kmp1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First gain coefficient of intercept valves characteristic (<i>Kmp1</i>).
    Typical value = 0,5.
    '''
    kmp2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second gain coefficient of intercept valves characteristic (<i>Kmp2</i>).
    Typical value = 3,5.
    '''
    kpc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain of pressure regulator (<i>Kpc</i>). Typical value = 0,5.
    '''
    kpp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain of pressure feedback regulator (<i>Kpp</i>). Typical
    value = 1.
    '''
    kpt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain of electro-hydraulic regulator (<i>Kpt</i>). Typical
    value = 0,3.
    '''
    krc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum variation of fuel flow (<i>Krc</i>). Typical value = 0,05.
    '''
    ksh: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure loss due to flow friction in the boiler tubes (<i>Ksh</i>). Typical
    value = 0,08.
    '''
    lpi: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum negative power error (<i>Lpi</i>). Typical value = -0,15.
    '''
    lps: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum positive power error (<i>Lps</i>). Typical value = 0,03.
    '''
    mnef: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lower limit for frequency correction (<i>MN</i><i><sub>EF</sub></i>). Typical
    value = -0,05.
    '''
    mxef: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Upper limit for frequency correction (<i>MX</i><i><sub>EF</sub></i>). Typical
    value = 0,05.
    '''
    pr1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First value of pressure set point static characteristic (<i>Pr1</i>). Typical
    value = 0,2.
    '''
    pr2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second value of pressure set point static characteristic, corresponding
    to <i>Ps0</i> = 1,0 PU (<i>Pr2</i>). Typical value = 0,75.
    '''
    psmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum value of pressure set point static characteristic (<i>Psmn</i>).
    Typical value = 1.
    '''
    rsmimn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum value of integral regulator (<i>Rsmimn</i>). Typical value = 0.
    '''
    rsmimx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum value of integral regulator (<i>Rsmimx</i>). Typical value = 1,1.
    '''
    rvgmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum value of integral regulator (<i>Rvgmn</i>). Typical value = 0.
    '''
    rvgmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum value of integral regulator (<i>Rvgmx</i>). Typical value = 1,2.
    '''
    srmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve opening (<i>Srmn</i>). Typical value = 0.
    '''
    srmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening (<i>Srmx</i>). Typical value = 1,1.
    '''
    srsmp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intercept valves characteristic discontinuity point (<i>Srsmp</i>). Typical
    value = 0,43.
    '''
    ta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Control valves rate opening time (<i>Ta</i>) (&gt;= 0). Typical value =
    0,8.
    '''
    tam: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intercept valves rate opening time (<i>Tam</i>) (&gt;= 0). Typical value
    = 0,8.
    '''
    tc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Control valves rate closing time (<i>Tc</i>) (&gt;= 0). Typical value =
    0,5.
    '''
    tcm: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intercept valves rate closing time (<i>Tcm</i>) (&gt;= 0). Typical value
    = 0,5.
    '''
    tdc: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Derivative time constant of pressure regulator (<i>Tdc</i>) (&gt;= 0).
    Typical value = 90.
    '''
    tf1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of fuel regulation (<i>Tf1</i>) (&gt;= 0). Typical value
    = 10.
    '''
    tf2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of steam chest (<i>Tf2</i>) (&gt;= 0). Typical value = 10.
    '''
    thp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High pressure (HP) time constant of the turbine (<i>Thp</i>) (&gt;= 0).
    Typical value = 0,15.
    '''
    tmp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low pressure (LP) time constant of the turbine (<i>Tmp</i>) (&gt;= 0).
    Typical value = 0,4.
    '''
    trh: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reheater time constant of the turbine (<i>Trh</i>) (&gt;= 0). Typical value
    = 10.
    '''
    tv: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Boiler time constant (<i>Tv</i>) (&gt;= 0). Typical value = 60.
    '''
    ty: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Control valves servo time constant (<i>Ty</i>) (&gt;= 0). Typical value
    = 0,1.
    '''
    y: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient of linearized equations of turbine (Stodola formulation) (<i>Y</i>).
    Typical value = 0,13.
    '''
    yhpmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum control valve position (<i>Yhpmn</i>). Typical value = 0.
    '''
    yhpmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum control valve position (<i>Yhpmx</i>). Typical value = 1,1.
    '''
    ympmn: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum intercept valve position (<i>Ympmn</i>). Typical value = 0.
    '''
    ympmx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum intercept valve position (<i>Ympmx</i>). Typical value = 1,1.
    '''
@dataclass
class GovSteamIEEE1(TurbineGovernorDynamics):
    '''
    IEEE steam turbine governor model.
    Ref<font color="#0f0f0f">erence: IEEE Transactions on Power Apparatus and
    Systems, November/December 1973, Volume PAS-92, Number 6, <i><u>Dynamic
    Models for Steam and Hydro Turbines in Power System Studies</u></i>, page
    1904.</font>
    '''
    k1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of HP shaft power after first boiler pass (<i>K1</i>). Typical
    value = 0,2.
    '''
    k2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of LP shaft power after first boiler pass (<i>K2</i>). Typical
    value = 0.
    '''
    k3: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of HP shaft power after second boiler pass (<i>K3</i>). Typical
    value = 0,3.
    '''
    k4: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of LP shaft power after second boiler pass (<i>K4</i>). Typical
    value = 0.
    '''
    k5: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of HP shaft power after third boiler pass (<i>K5</i>). Typical
    value = 0,5.
    '''
    k6: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of LP shaft power after third boiler pass (<i>K6</i>). Typical
    value = 0.
    '''
    k7: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of HP shaft power after fourth boiler pass (<i>K7</i>). Typical
    value = 0.
    '''
    k8: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of LP shaft power after fourth boiler pass (<i>K8</i>). Typical
    value = 0.
    '''
    uc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve closing velocity (<i>Uc</i>) (&lt; 0). Unit = PU / s. Typical
    value = -10.
    '''
    uo: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening velocity (<i>Uo</i>) (&gt; 0). Unit = PU / s. Typical
    value = 1.
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor gain (reciprocal of droop) (<i>K</i>) (&gt; 0). Typical value
    = 25.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0)<i>. </i>Unit = MW.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum valve opening (<i>Pmax</i>) (&gt; GovSteamIEEE1.pmin). Typical
    value = 1.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum valve opening (<i>Pmin</i>) (&gt;= 0 and &lt; GovSteamIEEE1.pmax).
    Typical value = 0.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lag time constant (<i>T1</i>) (&gt;= 0). Typical value = 0.
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lead time constant (<i>T2</i>) (&gt;= 0). Typical value = 0.
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve positioner time constant (<i>T3</i>) (&gt; 0). Typical value = 0,1.
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inlet piping/steam bowl time constant (<i>T4</i>) (&gt;= 0). Typical value
    = 0,3.
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of second boiler pass (<i>T5</i>) (&gt;= 0). Typical value
    = 5.
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of third boiler pass (<i>T6</i>) (&gt;= 0). Typical value
    = 0,5.
    '''
    t7: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of fourth boiler pass (<i>T7</i>) (&gt;= 0). Typical value
    = 0.
    '''
@dataclass
class GovSteamSGO(TurbineGovernorDynamics):
    '''
    Simplified steam turbine governor.
    '''
    k1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    One / PU regulation (<i>K1</i>).
    '''
    k2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction (<i>K2</i>).
    '''
    k3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction (<i>K3</i>).
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Upper power limit (<i>Pmax</i>) (&gt; GovSteamSGO.pmin).
    '''
    pmin: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lower power limit (<i>Pmin</i>) (&gt;= 0 and &lt; GovSteamSGO.pmax).
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller lag (<i>T1</i>) (&gt;= 0).
    '''
    t2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller lead compensation (<i>T2</i>) (&gt;= 0).
    '''
    t3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor lag (<i>T3</i>) (&gt; 0).
    '''
    t4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Delay due to steam inlet volumes associated with steam chest and inlet
    piping (<i>T4</i>) (&gt;= 0).
    '''
    t5: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reheater delay including hot and cold leads (<i>T5</i>) (&gt;= 0).
    '''
    t6: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Delay due to IP-LP turbine, crossover pipes and LP end hoods (<i>T6</i>)
    (&gt;= 0).
    '''
@dataclass
class TurbineGovernorUserDefined(TurbineGovernorDynamics):
    '''
    Turbine-governor function block whose dynamic behaviour is described by
    <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class TurbineLoadControllerDynamics(DynamicsFunctionBlock):
    '''
    Turbine load controller function block whose behaviour is described by
    reference to a standard model <font color="#0f0f0f">or by definition of
    a user-defined model.</font>
    '''
    TurbineGovernorDynamics: Optional[ str | TurbineGovernorDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TurbineGovernorDynamics.TurbineLoadControllerDynamics'
        })
    '''
    Turbine-governor controlled by this turbine load controller.
    '''
@dataclass
class TurbLCFB1(TurbineLoadControllerDynamics):
    '''
    Turbine load controller model developed by WECC. This model represents
    a supervisory turbine load controller that acts to maintain turbine power
    at a set value by continuous adjustment of the turbine governor speed-load
    reference. This model is intended to represent slow reset 'outer loop'
    controllers managing the action of the turbine governor.
    '''
    fbf: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency bias flag (<i>Fbf</i>).
    true = enable frequency bias
    false = disable frequency bias.
    Typical value = false.
    '''
    pbf: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power controller flag (<i>Pbf</i>).
    true = enable load controller
    false = disable load controller.
    Typical value = false.
    '''
    speedReferenceGovernor: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of turbine governor reference (<i>Type</i>).
    true = speed reference governor
    false = load reference governor.
    Typical value = true.
    '''
    db: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Controller deadband (<i>db</i>). Typical value = 0.
    '''
    emax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum control error (<i>Emax</i>) (see parameter detail 4). Typical value
    = 0,02.
    '''
    fb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency bias gain (<i>Fb</i>). Typical value = 0.
    '''
    irmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum turbine speed/load reference bias (<i>Irmax</i>) (see parameter
    detail 3). Typical value = 0.
    '''
    ki: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain (<i>Ki</i>). Typical value = 0.
    '''
    kp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain (<i>Kp</i>). Typical value = 0.
    '''
    mwbase: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base for power values (<i>MWbase</i>) (&gt; 0). Unit = MW.
    '''
    pmwset: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power controller setpoint (<i>Pmwset</i>) (see parameter detail 1). Unit
    = MW. Typical value = 0.
    '''
    tpelec: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power transducer time constant (<i>Tpelec</i>) (&gt;= 0). Typical value
    = 0.
    '''
@dataclass
class TurbineLoadControllerUserDefined(TurbineLoadControllerDynamics):
    '''
    Turbine load controller function block whose dynamic behaviour is described
    by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class UnderexcitationLimiterDynamics(DynamicsFunctionBlock):
    '''
    Underexcitation limiter function block whose behaviour is described by
    reference to a standard model <font color="#0f0f0f">or by definition of
    a user-defined model.</font>
    '''
    ExcitationSystemDynamics: Optional[ str | ExcitationSystemDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ExcitationSystemDynamics.UnderexcitationLimiterDynamics'
        })
    '''
    Excitation system model with which this underexcitation limiter model is
    associated.
    '''
    RemoteInputSignal: Optional[ str | RemoteInputSignal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteInputSignal.UnderexcitationLimiterDynamics'
        })
    '''
    Remote input signal used by this underexcitation limiter model.
    '''
@dataclass
class UnderexcLim2Simplified(UnderexcitationLimiterDynamics):
    '''
    Simplified type UEL2 underexcitation limiter. This model can be derived
    from UnderexcLimIEEE2. The limit characteristic (look –up table) is a single
    straight-line, the same as UnderexcLimIEEE2 (see Figure 10.4 (p 32), IEEE
    421.5-2005 Section 10.2).
    '''
    kui: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain Under excitation limiter (<i>K</i><i><sub>UI</sub></i>). Typical value
    = 0,1.
    '''
    p0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Segment P initial point (<i>P</i><i><sub>0</sub></i>). Typical value =
    0.
    '''
    p1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Segment P end point (<i>P</i><i><sub>1</sub></i>). Typical value = 1.
    '''
    q0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Segment Q initial point (<i>Q</i><i><sub>0</sub></i>). Typical value =
    -0,31.
    '''
    q1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Segment Q end point (<i>Q</i><i><sub>1</sub></i>). Typical value = -0,1.
    '''
    vuimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum error signal (<i>V</i><i><sub>UIMAX</sub></i>) (&gt; UnderexcLim2Simplified.vuimin).
    Typical value = 1.
    '''
    vuimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum error signal (<i>V</i><i><sub>UIMIN</sub></i>) (&lt; UnderexcLim2Simplified.vuimax).
    Typical value = 0.
    '''
@dataclass
class UnderexcLimIEEE1(UnderexcitationLimiterDynamics):
    '''
    Type UEL1 model which has a circular limit boundary when plotted in terms
    of machine reactive power vs. real power output.
    Reference: IEEE UEL1 421.5-2005, 10.1.
    '''
    kuc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL centre setting (<i>K</i><i><sub>UC</sub></i>). Typical value = 1,38.
    '''
    kuf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL excitation system stabilizer gain (<i>K</i><i><sub>UF</sub></i>). Typical
    value = 3,3.
    '''
    kui: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL integral gain (<i>K</i><i><sub>UI</sub></i>). Typical value = 0.
    '''
    kul: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL proportional gain (<i>K</i><i><sub>UL</sub></i>). Typical value = 100.
    '''
    kur: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL radius setting (<i>K</i><i><sub>UR</sub></i>). Typical value = 1,95.
    '''
    tu1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lead time constant (<i>T</i><i><sub>U1</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tu2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lag time constant (<i>T</i><i><sub>U2</sub></i>) (&gt;= 0). Typical
    value = 0,05.
    '''
    tu3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lead time constant (<i>T</i><i><sub>U3</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tu4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lag time constant (<i>T</i><i><sub>U4</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    vucmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL maximum limit for operating point phasor magnitude (<i>V</i><i><sub>UCMAX</sub></i>).
    Typical value = 5,8.
    '''
    vuimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL integrator output maximum limit (<i>V</i><i><sub>UIMAX</sub></i>) (&gt;
    UnderexcLimIEEE1.vuimin).
    '''
    vuimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL integrator output minimum limit (<i>V</i><i><sub>UIMIN</sub></i>) (&lt;
    UnderexcLimIEEE1.vuimax).
    '''
    vulmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL output maximum limit (<i>V</i><i><sub>ULMAX</sub></i>) (&gt; UnderexcLimIEEE1.vulmin).
    Typical value = 18.
    '''
    vulmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL output minimum limit (<i>V</i><i><sub>ULMIN</sub></i>) (&lt; UnderexcLimIEEE1.vulmax).
    Typical value = -18.
    '''
    vurmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL maximum limit for radius phasor magnitude (<i>V</i><i><sub>URMAX</sub></i>).
    Typical value = 5,8.
    '''
@dataclass
class UnderexcLimIEEE2(UnderexcitationLimiterDynamics):
    '''
    Type UEL2 underexcitation limiter which has either a straight-line or multi-segment
    characteristic when plotted in terms of machine reactive power output vs.
    real power output.
    Reference: IEEE UEL2 421.5-2005, 10.2 (limit characteristic lookup table
    shown in Figure 10.4 (p 32)).
    '''
    k1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL terminal voltage exponent applied to real power input to UEL limit
    look-up table (<i>k1</i>). Typical value = 2.
    '''
    k2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL terminal voltage exponent applied to reactive power output from UEL
    limit look-up table (<i>k2</i>). Typical value = 2.
    '''
    kfb: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain associated with optional integrator feedback input signal to UEL (<i>K</i><i><sub>FB</sub></i>).
    Typical value = 0.
    '''
    kuf: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL excitation system stabilizer gain (<i>K</i><i><sub>UF</sub></i>). Typical
    value = 0.
    '''
    kui: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL integral gain (<i>K</i><i><sub>UI</sub></i>). Typical value = 0,5.
    '''
    kul: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL proportional gain (<i>K</i><i><sub>UL</sub></i>). Typical value = 0,8.
    '''
    p0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>0</sub></i>). Typical
    value = 0.
    '''
    p1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>1</sub></i>). Typical
    value = 0,3.
    '''
    p10: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>10</sub></i>).
    '''
    p2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>2</sub></i>). Typical
    value = 0,6.
    '''
    p3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>3</sub></i>). Typical
    value = 0,9.
    '''
    p4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>4</sub></i>). Typical
    value = 1,02.
    '''
    p5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>5</sub></i>).
    '''
    p6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>6</sub></i>).
    '''
    p7: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>7</sub></i>).
    '''
    p8: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>8</sub></i>).
    '''
    p9: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power values for endpoints (<i>P</i><i><sub>9</sub></i>).
    '''
    q0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>0</sub></i>). Typical
    value = -0,31.
    '''
    q1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>1</sub></i>). Typical
    value = -0,31.
    '''
    q10: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>10</sub></i>).
    '''
    q2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>2</sub></i>). Typical
    value = -0,28.
    '''
    q3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>3</sub></i>). Typical
    value = -0,21.
    '''
    q4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>4</sub></i>). Typical
    value = 0.
    '''
    q5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>5</sub></i>).
    '''
    q6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>6</sub></i>).
    '''
    q7: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>7</sub></i>).
    '''
    q8: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>8</sub></i>).
    '''
    q9: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power values for endpoints (<i>Q</i><i><sub>9</sub></i>).
    '''
    tu1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lead time constant (<i>T</i><i><sub>U1</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tu2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lag time constant (<i>T</i><i><sub>U2</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tu3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lead time constant (<i>T</i><i><sub>U3</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tu4: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL lag time constant (<i>T</i><i><sub>U4</sub></i>) (&gt;= 0). Typical
    value = 0.
    '''
    tul: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant associated with optional integrator feedback input signal
    to UEL (<i>T</i><i><sub>UL</sub></i>) (&gt;= 0). Typical value = 0.
    '''
    tup: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power filter time constant (<i>T</i><i><sub>UP</sub></i>) (&gt;= 0).
    Typical value = 5.
    '''
    tuq: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power filter time constant (<i>T</i><i><sub>UQ</sub></i>) (&gt;=
    0). Typical value = 0.
    '''
    tuv: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage filter time constant (<i>T</i><i><sub>UV</sub></i>) (&gt;= 0).
    Typical value = 5.
    '''
    vuimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL integrator output maximum limit (<i>V</i><i><sub>UIMAX</sub></i>) (&gt;
    UnderexcLimIEEE2.vuimin). Typical value = 0,25.
    '''
    vuimin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL integrator output minimum limit (<i>V</i><i><sub>UIMIN</sub></i>) (&lt;
    UnderexcLimIEEE2.vuimax). Typical value = 0.
    '''
    vulmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL output maximum limit (<i>V</i><i><sub>ULMAX</sub></i>) (&gt; UnderexcLimIEEE2.vulmin).
    Typical value = 0,25.
    '''
    vulmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    UEL output minimum limit (<i>V</i><i><sub>ULMIN</sub></i>) (&lt; UnderexcLimIEEE2.vulmax).
    Typical value = 0.
    '''
@dataclass
class UnderexcLimX1(UnderexcitationLimiterDynamics):
    '''
    <font color="#0f0f0f">Allis-Chalmers minimum excitation limiter.</font>
    '''
    k: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum excitation limit slope (<i>K</i>) (&gt; 0).
    '''
    kf2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Differential gain (<i>K</i><i><sub>F2</sub></i>).
    '''
    km: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum excitation limit gain (<i>K</i><i><sub>M</sub></i>).
    '''
    melmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum excitation limit value (<i>MELMAX</i>).
    '''
    tf2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Differential time constant (<i>T</i><i><sub>F2</sub></i>) (&gt;= 0).
    '''
    tm: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum excitation limit time constant (<i>T</i><i><sub>M</sub></i>) (&gt;=
    0).
    '''
@dataclass
class UnderexcLimX2(UnderexcitationLimiterDynamics):
    '''
    <font color="#0f0f0f">Westinghouse minimum excitation limiter.</font>
    '''
    kf2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Differential gain (<i>K</i><i><sub>F2</sub></i>).
    '''
    km: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum excitation limit gain (<i>K</i><i><sub>M</sub></i>).
    '''
    melmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum excitation limit value (<i>MELMAX</i>).
    '''
    qo: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation centre setting (<i>Q</i><i><sub>O</sub></i>).
    '''
    r: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Excitation radius (<i>R</i>).
    '''
    tf2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Differential time constant (<i>T</i><i><sub>F2</sub></i>) (&gt;= 0).
    '''
    tm: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum excitation limit time constant (<i>T</i><i><sub>M</sub></i>) (&gt;=
    0).
    '''
@dataclass
class UnderexcitationLimiterUserDefined(UnderexcitationLimiterDynamics):
    '''
    Underexcitation limiter function block whose dynamic behaviour is described
    by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class VoltageAdjusterDynamics(DynamicsFunctionBlock):
    '''
    Voltage adjuster function block whose behaviour is described by reference
    to a standard model <font color="#0f0f0f">or by definition of a user-defined
    model.</font>
    '''
    PFVArControllerType1Dynamics: Optional[ str | PFVArControllerType1Dynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PFVArControllerType1Dynamics.VoltageAdjusterDynamics'
        })
    '''
    Power factor or VAr controller type 1 model with which this voltage adjuster
    is associated.
    '''
@dataclass
class VAdjIEEE(VoltageAdjusterDynamics):
    '''
    IEEE voltage adjuster which is used to represent the voltage adjuster in
    either a power factor or VAr control system.
    Reference: IEEE 421.5-2005, 11.1.
    '''
    adjslew: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate at which output of adjuster changes (<i>ADJ_SLEW</i>). Unit = s /
    PU. Typical value = 300.
    '''
    vadjf: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Set high to provide a continuous raise or lower (<i>V</i><i><sub>ADJF</sub></i>).
    '''
    taoff: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time that adjuster pulses are off (<i>T</i><i><sub>AOFF</sub></i>) (&gt;=
    0). Typical value = 0,5.
    '''
    taon: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time that adjuster pulses are on (<i>T</i><i><sub>AON</sub></i>) (&gt;=
    0). Typical value = 0,1.
    '''
    vadjmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum output of the adjuster (<i>V</i><i><sub>ADJMAX</sub></i>) (&gt;
    VAdjIEEE.vadjmin). Typical value = 1,1.
    '''
    vadjmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum output of the adjuster (<i>V</i><i><sub>ADJMIN</sub></i>) (&lt;
    VAdjIEEE.vadjmax). Typical value = 0,9.
    '''
@dataclass
class VoltageAdjusterUserDefined(VoltageAdjusterDynamics):
    '''
    <font color="#0f0f0f">Voltage adjuster</font> function block whose dynamic
    behaviour is described by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class VoltageCompensatorDynamics(DynamicsFunctionBlock):
    '''
    Voltage compensator function block whose behaviour is described by reference
    to a standard model <font color="#0f0f0f">or by definition of a user-defined
    model.</font>
    '''
    ExcitationSystemDynamics: Optional[ str | ExcitationSystemDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ExcitationSystemDynamics.VoltageCompensatorDynamics'
        })
    '''
    Excitation system model with which this voltage compensator is associated.
    '''
    RemoteInputSignal: Optional[ str | RemoteInputSignal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteInputSignal.VoltageCompensatorDynamics'
        })
    '''
    Remote input signal used by this voltage compensator model.
    '''
@dataclass
class VCompIEEEType1(VoltageCompensatorDynamics):
    '''
    <font color="#0f0f0f">Terminal voltage transducer and load compensator
    as defined in IEEE 421.5-2005, 4. This model is common to all excitation
    system models described in the IEEE Standard. </font>
    <font color="#0f0f0f">Parameter details:</font>
    <ol>
    <li><font color="#0f0f0f">If <i>Rc</i> and <i>Xc</i> are set to zero, the
    l</font>oad compensation is not employed and the behaviour is as a simple
    sensing circuit.</li>
    </ol>
    <ol>
    <li>If all parameters (<i>Rc</i>, <i>Xc</i> and <i>Tr</i>) are set to zero,
    the standard model VCompIEEEType1 is bypassed.</li>
    </ol>
    Reference: IEEE 421.5-2005 4.
    '''
    rc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    <font color="#0f0f0f">Resistive component of compensation of a generator
    (<i>Rc</i>) (&gt;= 0).</font>
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    <font color="#0f0f0f">Time constant which is used for the combined voltage
    sensing and compensation signal (<i>Tr</i>) (&gt;= 0).</font>
    '''
    xc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    <font color="#0f0f0f">Reactive component of compensation of a generator
    (<i>Xc</i>) (&gt;= 0).</font>
    '''
@dataclass
class VCompIEEEType2(VoltageCompensatorDynamics):
    '''
    <font color="#0f0f0f">Terminal voltage transducer and load compensator
    as defined in IEEE 421.5-2005, 4. This model is designed to cover the following
    types of compensation: </font>
    <ul>
    <li><font color="#0f0f0f">reactive droop;</font></li>
    <li><font color="#0f0f0f">transformer-drop or line-drop compensation;</font></li>
    <li><font color="#0f0f0f">reactive differential compensation known also
    as cross-current compensation.</font></li>
    </ul>
    <font color="#0f0f0f">Reference: IEEE 421.5-2005, 4.</font>
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    <font color="#0f0f0f">Time constant which is used for the combined voltage
    sensing and compensation signal (<i>Tr</i>) (&gt;= 0).</font>
    '''
@dataclass
class VoltageCompensatorUserDefined(VoltageCompensatorDynamics):
    '''
    Voltage compensator function block whose dynamic behaviour is described
    by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class WindPlantDynamics(DynamicsFunctionBlock):
    '''
    Parent class supporting relationships to wind turbines type 3 and type
    4 and wind plant IEC and user-defined wind plants including their control
    models.
    '''
    RemoteInputSignal: Optional[ str | RemoteInputSignal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteInputSignal.WindPlantDynamics'
        })
    '''
    The remote signal with which this power plant is associated.
    '''
@dataclass
class WindPlantIEC(WindPlantDynamics):
    '''
    Simplified IEC type plant level model.
    Reference: IEC 61400-27-1:2015, Annex D.
    '''
    WindPlantFreqPcontrolIEC: Optional[ str | WindPlantFreqPcontrolIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPlantFreqPcontrolIEC.WindPlantIEC'
        })
    '''
    Wind plant frequency and active power control model associated with this
    wind plant.
    '''
    WindPlantReactiveControlIEC: Optional[ str | WindPlantReactiveControlIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPlantReactiveControlIEC.WindPlantIEC'
        })
    '''
    Wind plant model with which this wind reactive control is associated.
    '''
@dataclass
class WindPlantUserDefined(WindPlantDynamics):
    '''
    Wind plant function block whose dynamic behaviour is described by <font
    color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class WindTurbineType1or2Dynamics(DynamicsFunctionBlock):
    '''
    Parent class supporting relationships to wind turbines type 1 and type
    2 and their control models. Generator model for wind turbine of type 1
    or type 2 is a standard asynchronous generator model.
    '''
    AsynchronousMachineDynamics: Optional[ str | AsynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AsynchronousMachineDynamics.WindTurbineType1or2Dynamics'
        })
    '''
    Asynchronous machine model with which this wind generator type 1 or type
    2 model is associated.
    '''
    RemoteInputSignal: Optional[ str | RemoteInputSignal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteInputSignal.WindTurbineType1or2Dynamics'
        })
    '''
    Remote input signal used by this wind generator type 1 or type 2 model.
    '''
@dataclass
class WindTurbineType1or2IEC(WindTurbineType1or2Dynamics):
    '''
    Parent class supporting relationships to IEC wind turbines type 1 and type
    2 including their control models.
    Generator model for wind turbine of IEC type 1 or type 2 is a standard
    asynchronous generator model.
    Reference: IEC 61400-27-1:2015, 5.5.2 and 5.5.3.
    '''
    WindMechIEC: Optional[ str | WindMechIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindMechIEC.WindTurbineType1or2IEC'
        })
    '''
    Wind mechanical model associated with this wind generator type 1 or type
    2 model.
    '''
    WindProtectionIEC: Optional[ str | WindProtectionIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindProtectionIEC.WindTurbineType1or2IEC'
        })
    '''
    Wind turbune protection model associated with this wind generator type
    1 or type 2 model.
    '''
@dataclass
class WindGenTurbineType1aIEC(WindTurbineType1or2IEC):
    '''
    Wind turbine IEC type 1A.
    Reference: IEC 61400-27-1:2015, 5.5.2.2.
    '''
    WindAeroConstIEC: Optional[ str | WindAeroConstIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindAeroConstIEC.WindGenTurbineType1aIEC'
        })
    '''
    Wind aerodynamic model associated with this wind turbine type 1A model.
    '''
@dataclass
class WindGenTurbineType1bIEC(WindTurbineType1or2IEC):
    '''
    Wind turbine IEC type 1B.
    Reference: IEC 61400-27-1:2015, 5.5.2.3.
    '''
    WindPitchContPowerIEC: Optional[ str | WindPitchContPowerIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPitchContPowerIEC.WindGenTurbineType1bIEC'
        })
    '''
    Pitch control power model associated with this wind turbine type 1B model.
    '''
@dataclass
class WindGenTurbineType2IEC(WindTurbineType1or2IEC):
    '''
    Wind turbine IEC type 2.
    Reference: IEC 61400-27-1:2015, 5.5.3.
    '''
    WindContRotorRIEC: Optional[ str | WindContRotorRIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContRotorRIEC.WindGenTurbineType2IEC'
        })
    '''
    Wind control rotor resistance model associated with wind turbine type 2
    model.
    '''
    WindPitchContPowerIEC: Optional[ str | WindPitchContPowerIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPitchContPowerIEC.WindGenTurbineType2IEC'
        })
    '''
    Pitch control power model associated with this wind turbine type 2 model.
    '''
@dataclass
class WindType1or2UserDefined(WindTurbineType1or2Dynamics):
    '''
    Wind type 1 or type 2 function block whose dynamic behaviour is described
    by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class WindTurbineType3or4Dynamics(DynamicsFunctionBlock):
    '''
    Parent class supporting relationships to wind turbines type 3 and type
    4 and wind plant including their control models.
    '''
    PowerElectronicsConnection: Optional[ str | PowerElectronicsConnection ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerElectronicsConnection.WindTurbineType3or4Dynamics'
        })
    '''
    The power electronics connection associated with this wind turbine type
    3 or type 4 dynamics model.
    '''
    RemoteInputSignal: Optional[ str | RemoteInputSignal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteInputSignal.WindTurbineType3or4Dynamics'
        })
    '''
    Remote input signal used by these wind turbine type 3 or type 4 models.
    '''
    WindPlantDynamics: Optional[ str | WindPlantDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPlantDynamics.WindTurbineType3or4Dynamics'
        })
    '''
    The wind plant with which the wind turbines type 3 or type 4 are associated.
    '''
@dataclass
class WindTurbineType3or4IEC(WindTurbineType3or4Dynamics):
    '''
    Parent class supporting relationships to IEC wind turbines type 3 and type
    4 including their control models.
    '''
    WindContCurrLimIEC: Optional[ str | WindContCurrLimIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContCurrLimIEC.WindTurbineType3or4IEC'
        })
    '''
    Wind control current limitation model associated with this wind turbine
    type 3 or type 4 model.
    '''
    WIndContQIEC: Optional[ str | WindContQIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContQIEC.WindTurbineType3or4IEC'
        })
    '''
    Wind control Q model associated with this wind turbine type 3 or type 4
    model.
    '''
    WindContQLimIEC: Optional[ str | WindContQLimIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContQLimIEC.WindTurbineType3or4IEC'
        })
    '''
    Constant Q limitation model associated with this wind generator type 3
    or type 4 model.
    '''
    WindContQPQULimIEC: Optional[ str | WindContQPQULimIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContQPQULimIEC.WindTurbineType3or4IEC'
        })
    '''
    QP and QU limitation model associated with this wind generator type 3 or
    type 4 model.
    '''
    WindProtectionIEC: Optional[ str | WindProtectionIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindProtectionIEC.WindTurbineType3or4IEC'
        })
    '''
    Wind turbune protection model associated with this wind generator type
    3 or type 4 model.
    '''
    WindRefFrameRotIEC: Optional[ str | WindRefFrameRotIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindRefFrameRotIEC.WindTurbineType3or4IEC'
        })
    '''
    Reference frame rotation model associated with this wind turbine type 3
    or type 4 model.
    '''
@dataclass
class WindTurbineType3IEC(WindTurbineType3or4IEC):
    '''
    Parent class supporting relationships to IEC wind turbines type 3 including
    their control models.
    '''
    WindAeroOneDimIEC: Optional[ str | WindAeroOneDimIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindAeroOneDimIEC.WindTurbineType3IEC'
        })
    '''
    Wind aerodynamic model associated with this wind generator type 3 model.
    '''
    WindAeroTwoDimIEC: Optional[ str | WindAeroTwoDimIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindAeroTwoDimIEC.WindTurbineType3IEC'
        })
    '''
    Wind aerodynamic model associated with this wind turbine type 3 model.
    '''
    WindContPitchAngleIEC: Optional[ str | WindContPitchAngleIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContPitchAngleIEC.WindTurbineType3IEC'
        })
    '''
    Wind control pitch angle model associated with this wind turbine type 3.
    '''
    WindContPType3IEC: Optional[ str | WindContPType3IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContPType3IEC.WindTurbineType3IEC'
        })
    '''
    Wind control P type 3 model associated with this wind turbine type 3 model.
    '''
    WindGenType3IEC: Optional[ str | WindGenType3IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindGenType3IEC.WindTurbineType3IEC'
        })
    '''
    Wind generator type 3 model associated with this wind turbine type 3 model.
    '''
    WindMechIEC: Optional[ str | WindMechIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindMechIEC.WindTurbineType3IEC'
        })
    '''
    Wind mechanical model associated with this wind turbine type 3 model.
    '''
@dataclass
class WindTurbineType4IEC(WindTurbineType3or4IEC):
    '''
    Parent class supporting relationships to IEC wind turbines type 4 including
    their control models.
    '''
    WindGenType3aIEC: Optional[ str | WindGenType3aIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindGenType3aIEC.WindTurbineType4IEC'
        })
    '''
    Wind generator type 3A model associated with this wind turbine type 4 model.
    '''
@dataclass
class WindTurbineType4aIEC(WindTurbineType4IEC):
    '''
    Wind turbine IEC type 4A.
    Reference: IEC 61400-27-1:2015, 5.5.5.2.
    '''
    WindContPType4aIEC: Optional[ str | WindContPType4aIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContPType4aIEC.WindTurbineType4aIEC'
        })
    '''
    Wind control P type 4A model associated with this wind turbine type 4A
    model.
    '''
    WindGenType4IEC: Optional[ str | WindGenType4IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindGenType4IEC.WindTurbineType4aIEC'
        })
    '''
    Wind generator type 4 model associated with this wind turbine type 4A model.
    '''
@dataclass
class WindTurbineType4bIEC(WindTurbineType4IEC):
    '''
    Wind turbine IEC type 4B.
    Reference: IEC 61400-27-1:2015, 5.5.5.3.
    '''
    WindContPType4bIEC: Optional[ str | WindContPType4bIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContPType4bIEC.WindTurbineType4bIEC'
        })
    '''
    Wind control P type 4B model associated with this wind turbine type 4B
    model.
    '''
    WindGenType4IEC: Optional[ str | WindGenType4IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindGenType4IEC.WindTurbineType4bIEC'
        })
    '''
    Wind generator type 4 model associated with this wind turbine type 4B model.
    '''
    WindMechIEC: Optional[ str | WindMechIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindMechIEC.WindTurbineType4bIEC'
        })
    '''
    Wind mechanical model associated with this wind turbine type 4B model.
    '''
@dataclass
class WindType3or4UserDefined(WindTurbineType3or4Dynamics):
    '''
    Wind type 3 or type 4 function block whose dynamic behaviour is described
    by <font color="#0f0f0f">a user-defined model.</font>
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class EnergyArea(IdentifiedObject):
    '''
    Describes an area having energy production or consumption. Specializations
    are intended to support the load allocation function as typically required
    in energy management systems or planning studies to allocate hypothesized
    load levels to individual load points for power flow analysis. Often the
    energy area can be linked to both measured and forecast load levels.
    '''
    ControlArea: Optional[ str | ControlArea ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ControlArea.EnergyArea'
        })
    '''
    The control area specification that is used for the load forecast.
    '''
@dataclass
class LoadArea(EnergyArea):
    '''
    The class is the root or first level in a hierarchical structure for grouping
    of loads for the purpose of load flow load scaling.
    '''
@dataclass
class SubLoadArea(EnergyArea):
    '''
    The class is the second level in a hierarchical structure for grouping
    of loads for the purpose of load flow load scaling.
    '''
    LoadArea: Optional[ str | LoadArea ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'LoadArea.SubLoadAreas'
        })
    '''
    The LoadArea where the SubLoadArea belongs.
    '''
@dataclass
class EnergyComponent(IdentifiedObject):
    '''
    '''
    EnergyGroup: Optional[ str | EnergyGroup ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_58AE497B_672B_4bcb_AABC_468888BDB9A9-A'
        })
    '''
    '''
    EnergyConnection: Optional[ str | EnergyConnection ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_B5880CAA_2E1F_4e7e_8CBF_6E8FE1C9519B-B'
        })
    '''
    '''
@dataclass
class BlockDispatchComponent(EnergyComponent):
    '''
    '''
@dataclass
class ProportionalDistributionComponent(EnergyComponent):
    '''
    '''
    distributionFactor: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
@dataclass
class EnergyConsumerAction(IdentifiedObject):
    '''
    Action to connect or disconnect the Energy Consumer from its Terminal
    '''
@dataclass
class EnergySchedulingType(IdentifiedObject):
    '''
    Used to define the type of generation for scheduling purposes.
    '''
@dataclass
class EnergySourceAction(IdentifiedObject):
    '''
    Action on energy source as a switching step.
    '''
@dataclass
class EnergyTypeReference(IdentifiedObject):
    '''
    '''
    kind: Optional[ str | EnergyTypeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
@dataclass
class EquipmentLimitSeriesComponent(IdentifiedObject):
    '''
    This represents one instance of an equipment that contributes to the calculation
    of an operational limit.
    '''
    Equipment: Optional[ str | Equipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Equipment.EqiupmentLimitSeriesComponent'
        })
    '''
    Equipment contributing toward the series limit. The reference here is to
    Equipment rather than a specific limit on the equipment so the grouiping
    can be reused for multiple limits of different types on the same instance
    of equipment.
    '''
    SeriesEquipmentDependentLimit: Optional[ str | SeriesEquipmentDependentLimit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SeriesEquipmentDependentLimit.EquipmentLimitSeriesComponent'
        })
    '''
    Calculation in which the refernce to equipment applies.
    '''
@dataclass
class EquipmentUnavailabilitySchedule(IdentifiedObject):
    '''
    '''
    Equipment: Optional[ str | Equipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_D5BE88A6_8696_43ec_A291_81AFED41113B-A'
        })
    '''
    '''
    UnavailablitySchedule: Optional[ str | UnavailablitySchedule ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_E688F5A4_D2F9_4a84_85F2_980B6307E7AB-A'
        })
    '''
    '''
@dataclass
class Fault(IdentifiedObject):
    '''
    Abnormal condition causing current flow through conducting equipment, such
    as caused by equipment failure or short circuits from objects not typically
    modelled (for example, a tree falling on a line).
    '''
    occurredDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date and time at which the fault occurred.
    '''
    kind: Optional[ str | PhaseConnectedFaultKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The kind of phase fault.
    '''
    phases: Optional[ str | PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The phases participating in the fault. The fault connections into these
    phases are further specified by the type of fault.
    '''
    FaultyEquipment: Optional[ str | Equipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Equipment.Faults'
        })
    '''
    Equipment carrying this fault.
    '''
    impedance: Optional[ str | FaultImpedance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': ''
        })
    '''
    Fault impedance. Its usage is described by 'kind'.
    '''
    Location: Optional[ str | Location ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Location.Fault'
        })
    '''
    Location of this fault.
    '''
    Outage: Optional[ str | Outage ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Outage.Faults'
        })
    '''
    Outage associated with this fault.
    '''
@dataclass
class EquipmentFault(Fault):
    '''
    A fault applied at the terminal, external to the equipment. This class
    is not used to specify faults internal to the equipment.
    '''
    Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.EquipmentFaults'
        })
    '''
    The terminal connecting to the bus to which the fault is applied.
    '''
@dataclass
class LineFault(Fault):
    '''
    A fault that occurs on an AC line segment at some point along the length.
    '''
    lengthFromTerminal1: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The length to the place where the fault is located starting from terminal
    with sequence number 1 of the faulted line segment.
    '''
    ACLineSegment: Optional[ str | ACLineSegment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.LineFaults'
        })
    '''
    The line segment of this line fault.
    '''
@dataclass
class FaultCauseType(IdentifiedObject):
    '''
    Type of cause of the fault.
    '''
@dataclass
class FossilFuel(IdentifiedObject):
    '''
    The fossil fuel consumed by the non-nuclear thermal generating unit. For
    example, coal, oil, gas, etc. These are the specific fuels that the generating
    unit can consume.
    '''
    fuelHeatContent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The amount of heat per weight (or volume) of the given type of fuel.
    '''
    fossilFuelType: Optional[ str | FuelType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The type of fossil fuel, such as coal, oil, or gas.
    '''
    fuelCost: Optional[ float | CostPerHeatUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The cost in terms of heat value for the given type of fuel.
    '''
    fuelDispatchCost: Optional[ float | CostPerHeatUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The cost of fuel used for economic dispatching which includes: fuel cost,
    transportation cost, and incremental maintenance cost.
    '''
    fuelEffFactor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The efficiency factor for the fuel (per unit) in terms of the effective
    energy absorbed.
    '''
    fuelHandlingCost: Optional[ float | CostPerHeatUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Handling and processing cost associated with this fuel.
    '''
    fuelMixture: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Relative amount of the given type of fuel, when multiple fuels are being
    consumed.
    '''
    fuelSulfur: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The fuel's fraction of pollution credit per unit of heat content.
    '''
    highBreakpointP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The active power output level of the unit at which the given type of fuel
    is switched on. This fuel (e.g., oil) is sometimes used to supplement the
    base fuel (e.g., coal) at high active power output levels.
    '''
    lowBreakpointP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The active power output level of the unit at which the given type of fuel
    is switched off. This fuel (e.g., oil) is sometimes used to stabilize the
    base fuel (e.g., coal) at low active power output levels.
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.FossilFuels'
        })
    '''
    A thermal generating unit may have one or more fossil fuels.
    '''
@dataclass
class Gate(IdentifiedObject):
    '''
    Logical gate than support logical operation based on the input.
    '''
    kind: Optional[ str | GateLogicKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The logical operation of the gate.
    '''
@dataclass
class GateInputPin(IdentifiedObject):
    '''
    Input pin for a logical gate. The condition described in the input pin
    will give a logical true or false. Result from measurement and calculation
    are converted to a true or false.
    '''
    absoluteValue: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If true, use the absolute value for compare..
    '''
    negate: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Invert/negate the result of the compare.
    '''
    thresholdValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The threshold value that should be used for compare with the input value.
    '''
    aDLogicKind: Optional[ str | AnalogToDigitalLogicKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The compare operation.
    '''
    duration: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The duration the compare condition need to be present before given a true.
    Default is 0 seconds.
    '''
    thresholdPercentage: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The threshold percentage that should be used for compare with the percentage
    change between input value and threshold value.
    '''
    Gate: Optional[ str | Gate ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Gate.GateInputPin'
        })
    '''
    '''
@dataclass
class PinBranchGroup(GateInputPin):
    '''
    Value associated with branch group is used as compare.
    '''
    kind: Optional[ str | PinBranchGroupKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The compare operation done on the branch group.
    '''
    BranchGroup: Optional[ str | BranchGroup ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BranchGroup.PinBranchGroup'
        })
    '''
    The branch group that should be used in compare.
    '''
@dataclass
class PinEquipment(GateInputPin):
    '''
    Value associated with Equipment is used as compare.
    '''
    kind: Optional[ str | PinEquipmentKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The compare operation done on the equipment.
    '''
    Equipment: Optional[ str | Equipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Equipment.PinEquipment'
        })
    '''
    The Equipment that should be used in compare.
    '''
@dataclass
class PinGate(GateInputPin):
    '''
    An output from one gate represent an input to another gate.
    '''
    GateOutput: Optional[ str | Gate ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Gate.PinGate'
        })
    '''
    '''
@dataclass
class PinMeasurement(GateInputPin):
    '''
    Gate input pin that is associated with a Measurement or a calculation of
    Measurement.
    '''
    Measurement: Optional[ str | Measurement ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Measurement.PinMeasurement'
        })
    '''
    The Measurement that should be used in compare.
    '''
    MeasurementCalculator: Optional[ str | MeasurementCalculator ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MeasurementCalculator.PinMeasurement'
        })
    '''
    Result of the calculation used as input to a gate.
    '''
@dataclass
class PinTerminal(GateInputPin):
    '''
    Value associated with Terminal is used as compare.
    '''
    kind: Optional[ str | PinTerminalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The compare operation done on the terminal.
    '''
    Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.PinTerminal'
        })
    '''
    The Terminal that should be used in compare.
    '''
@dataclass
class GenICompensationForGenJ(IdentifiedObject):
    '''
    Resistive and reactive components of compensation for generator associated
    with IEEE type 2 voltage compensator for current flow out of another generator
    in the interconnection.
    '''
    rcij: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    <font color="#0f0f0f">Resistive component of compensation of generator
    associated with this IEEE type 2 voltage compensator for current flow out
    of another generator (<i>Rcij</i>).</font>
    '''
    xcij: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    <font color="#0f0f0f">Reactive component of compensation of generator associated
    with this IEEE type 2 voltage compensator for current flow out of another
    generator (<i>Xcij</i>).</font>
    '''
    SynchronousMachineDynamics: Optional[ str | SynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachineDynamics.GenICompensationForGenJ'
        })
    '''
    Standard synchronous machine out of which current flow is being compensated
    for.
    '''
    VcompIEEEType2: Optional[ str | VCompIEEEType2 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VCompIEEEType2.GenICompensationForGenJ'
        })
    '''
    The standard IEEE type 2 voltage compensator of this compensation.
    '''
@dataclass
class GeographicalRegion(IdentifiedObject):
    '''
    A geographical region of a power system network model.
    '''
@dataclass
class GroundAction(IdentifiedObject):
    '''
    Action on ground as a switching step.
    '''
@dataclass
class ICCPInformationMessage(IdentifiedObject):
    '''
    This class represents the TASE.2 Information Message Object. The IdentifiedObject.name
    attribute must be non-null. The value of the attribute shall be used as
    the TASE.2 Information Reference, as specified by 60870-6-503.
    '''
    localReference: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The Local Reference attribute specifies a value agreed upon between sender
    and receiver of the Information Message. It further identifies the Information
    Message.
    '''
    scope: Optional[ str | ICCPScopeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates if the Point is global scoped (e.g. VCC) or accessible only to
    the Bilateral table peer (e.g. ICC).
    '''
@dataclass
class IOPoint(IdentifiedObject):
    '''
    The class describe a measurement or control value. The purpose is to enable
    having attributes and associations common for measurement and control.
    '''
    IOPointSource: Optional[ str | IOPointSource ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'IOPointSource.IOPoint'
        })
    '''
    Local merasurement value source for an ICCP point.
    '''
@dataclass
class Control(IOPoint):
    '''
    Control is used for supervisory/device control. It represents control outputs
    that are used to change the state in a process, e.g. close or open breaker,
    a set point value or a raise lower command.
    '''
    controlType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the type of Control. For example, this specifies if the Control
    represents BreakerOpen, BreakerClose, GeneratorVoltageSetPoint, GeneratorRaise,
    GeneratorLower, etc.
    '''
    operationInProgress: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates that a client is currently sending control commands that has
    not completed.
    '''
    timeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The last time a control output was sent.
    '''
    unitMultiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The unit multiplier of the controlled quantity.
    '''
    unitSymbol: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The unit of measure of the controlled quantity.
    '''
    ControlAction: Optional[ str | ControlAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ControlAction.Control'
        })
    '''
    The control action that is performed on the control
    '''
    PowerSystemResource: Optional[ str | PowerSystemResource ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.Controls'
        })
    '''
    Regulating device governed by this control output.
    '''
    RemoteControl: Optional[ str | RemoteControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteControl.Control'
        })
    '''
    The remote point controlling the physical actuator.
    '''
@dataclass
class AccumulatorReset(Control):
    '''
    This command resets the counter value to zero.
    '''
    AccumulatorValue: Optional[ str | AccumulatorValue ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AccumulatorValue.AccumulatorReset'
        })
    '''
    The accumulator value that is reset by the command.
    '''
@dataclass
class AnalogControl(Control):
    '''
    An analog control used for supervisory control.
    '''
    maxValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal value range maximum for any of the Control.value. Used for scaling,
    e.g. in bar graphs.
    '''
    minValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal value range minimum for any of the Control.value. Used for scaling,
    e.g. in bar graphs.
    '''
    AnalogValue: Optional[ str | AnalogValue ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AnalogValue.AnalogControl'
        })
    '''
    The MeasurementValue that is controlled.
    '''
@dataclass
class RaiseLowerCommand(AnalogControl):
    '''
    An analog control that increases or decreases a set point value with pulses.
    Unless otherwise specified, one pulse moves the set point by one.
    '''
    ValueAliasSet: Optional[ str | ValueAliasSet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ValueAliasSet.RaiseLowerCommands'
        })
    '''
    The ValueAliasSet used for translation of a Control value to a name.
    '''
@dataclass
class SetPoint(AnalogControl):
    '''
    An analog control that issues a set point value.
    '''
    normalValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal value for Control.value e.g. used for percentage scaling.
    '''
    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The value representing the actuator output.
    '''
@dataclass
class Command(Control):
    '''
    A Command is a discrete control used for supervisory control.
    '''
    normalValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal value for Control.value e.g. used for percentage scaling.
    '''
    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The value representing the actuator output.
    '''
    DiscreteValue: Optional[ str | DiscreteValue ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DiscreteValue.Command'
        })
    '''
    The MeasurementValue that is controlled.
    '''
    ValueAliasSet: Optional[ str | ValueAliasSet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ValueAliasSet.Commands'
        })
    '''
    The ValueAliasSet used for translation of a Control value to a name.
    '''
@dataclass
class MeasurementValue(IOPoint):
    '''
    The current state for a measurement. A state value is an instance of a
    measurement from a specific source. Measurements can be associated with
    many state values, each representing a different source for the measurement.
    '''
    timeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The time when the value was last updated.
    '''
    sensorAccuracy: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The limit, expressed as a percentage of the sensor maximum, that errors
    will not exceed when the sensor is used under reference conditions.
    '''
    CalculationMethodHierarchy: Optional[ str | CalculationMethodHierarchy ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CalculationMethodHierarchy.MeasurementValue'
        })
    '''
    '''
    ErpPerson: Optional[ str | OldPerson ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OldPerson.MeasurementValues'
        })
    '''
    '''
    MeasurementValueQuality: Optional[ str | MeasurementValueQuality ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MeasurementValueQuality.MeasurementValue'
        })
    '''
    A MeasurementValue has a MeasurementValueQuality associated with it.
    '''
    MeasurementValueSource: Optional[ str | MeasurementValueSource ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MeasurementValueSource.MeasurementValues'
        })
    '''
    A reference to the type of source that updates the MeasurementValue, e.g.
    SCADA, CCLink, manual, etc. User conventions for the names of sources are
    contained in the introduction to IEC 61970-301.
    '''
    RemoteSource: Optional[ str | RemoteSource ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteSource.MeasurementValue'
        })
    '''
    Link to the physical telemetered point associated with this measurement.
    '''
@dataclass
class AccumulatorValue(MeasurementValue):
    '''
    AccumulatorValue represents an accumulated (counted) MeasurementValue.
    '''
    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The value to supervise. The value is positive.
    '''
    Accumulator: Optional[ str | Accumulator ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Accumulator.AccumulatorValues'
        })
    '''
    Measurement to which this value is connected.
    '''
    AccumulatorReset: Optional[ str | AccumulatorReset ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AccumulatorReset.AccumulatorValue'
        })
    '''
    The command that resets the accumulator value.
    '''
@dataclass
class AnalogValue(MeasurementValue):
    '''
    AnalogValue represents an analog MeasurementValue.
    '''
    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The value to supervise.
    '''
    Analog: Optional[ str | Analog ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Analog.AnalogValues'
        })
    '''
    Measurement to which this value is connected.
    '''
    AnalogControl: Optional[ str | AnalogControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AnalogControl.AnalogValue'
        })
    '''
    The Control variable associated with the MeasurementValue.
    '''
@dataclass
class DiscreteValue(MeasurementValue):
    '''
    DiscreteValue represents a discrete MeasurementValue.
    '''
    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The value to supervise.
    '''
    Command: Optional[ str | Command ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Command.DiscreteValue'
        })
    '''
    The Control variable associated with the MeasurementValue.
    '''
    Discrete: Optional[ str | Discrete ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Discrete.DiscreteValues'
        })
    '''
    Measurement to which this value is connected.
    '''
@dataclass
class StringMeasurementValue(MeasurementValue):
    '''
    StringMeasurementValue represents a measurement value of type string.
    '''
    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The value to supervise.
    '''
    StringMeasurement: Optional[ str | StringMeasurement ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StringMeasurement.StringMeasurementValues'
        })
    '''
    Measurement to which this value is connected.
    '''
@dataclass
class JumperAction(IdentifiedObject):
    '''
    Action on jumper as a switching step.
    '''
@dataclass
class Limit(IdentifiedObject):
    '''
    Specifies one limit value for a Measurement. A Measurement typically has
    several limits that are kept together by the LimitSet class. The actual
    meaning and use of a Limit instance (i.e., if it is an alarm or warning
    limit or if it is a high or low limit) is not captured in the Limit class.
    However the name of a Limit instance may indicate both meaning and use.
    '''
@dataclass
class AccumulatorLimit(Limit):
    '''
    Limit values for Accumulator measurements.
    '''
    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The value to supervise against. The value is positive.
    '''
    LimitSet: Optional[ str | AccumulatorLimitSet ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AccumulatorLimitSet.Limits'
        })
    '''
    The set of limits.
    '''
@dataclass
class AnalogLimit(Limit):
    '''
    Limit values for Analog measurements.
    '''
    value: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The value to supervise against.
    '''
    LimitSet: Optional[ str | AnalogLimitSet ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AnalogLimitSet.Limits'
        })
    '''
    The set of limits.
    '''
@dataclass
class LimitDependency(IdentifiedObject):
    '''
    A limit calculation model used to compute an operational limit based on
    external input such as temperature. These are intended to be shared among
    operational limits with the same calculation form that apply to a piece
    of equipment..
    '''
    Equipment: Optional[ str | Equipment ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Equipment.LimitDependencyModel'
        })
    '''
    The equipment for which this limit dependency model is organized under.
    '''
@dataclass
class EnvironmentalDependentLimit(LimitDependency):
    '''
    This is a environmental based limit dependency model for calculating operational
    limits.
    '''
@dataclass
class TemperatureDependentLimitTable(EnvironmentalDependentLimit):
    '''
    This is a table lookup that provides limit values corresponding to a temperature
    input.
    '''
@dataclass
class TemperaturePolynomialLimit(EnvironmentalDependentLimit):
    '''
    This describes the coefficients of a polynomial function that has temperature
    as input and calculates limit values as output.
    '''
    coefficient0: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The polinomial coefficent of power 0.
    '''
    coefficient1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The polinomial coefficent of power 1.
    '''
    coefficient2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The polinomial coefficent of power 2.
    '''
    coefficient3: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The polinomial coefficent of power 3.
    '''
    coefficient4: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The polinomial coefficent of power 4.
    '''
@dataclass
class LimitScalingLimit(LimitDependency):
    '''
    Specifies an operational limit is calculated by scaling another operational
    limit.
    '''
    limitScalingPercent: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The associated source limit is scaled by this value to compute the limit
    of the dependency model.
    '''
    SourceOperationalLimit: Optional[ str | OperationalLimit ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OperationalLimit.LimitScalingLimit'
        })
    '''
    '''
@dataclass
class ScheduledLimitDependency(LimitDependency):
    '''
    '''
@dataclass
class SeriesEquipmentDependentLimit(LimitDependency):
    '''
    Limit based on most restrictive series equipment limit.
    A specification of of equipment that determines the calculated operational
    limit values based upon other equipment and their ratings. The most restrictive
    limit connected in series within the group is used. The physical connection
    based on switch status for example may also impact which elements in the
    group are considered. Any equipment in the group that are presently connected
    in series with the equipment of the directly associated operational limit
    are used. This provides a means to indicate which potentially series equipment
    limits are considered for a computed operational limit. The operational
    limit of the same operational limit type is assumed to be used from the
    grouped equipment. It is also possible to make assumptions or calculations
    regarding how flow might split if the equipment is not simply in series.
    '''
@dataclass
class LimitSet(IdentifiedObject):
    '''
    Specifies a set of Limits that are associated with a Measurement. A Measurement
    may have several LimitSets corresponding to seasonal or other changing
    conditions. The condition is captured in the name and description attributes.
    The same LimitSet may be used for several Measurements. In particular percentage
    limits are used this way.
    '''
    isPercentageLimits: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Tells if the limit values are in percentage of normalValue or the specified
    Unit for Measurements and Controls.
    '''
@dataclass
class AccumulatorLimitSet(LimitSet):
    '''
    An AccumulatorLimitSet specifies a set of Limits that are associated with
    an Accumulator measurement.
    '''
@dataclass
class AnalogLimitSet(LimitSet):
    '''
    An AnalogLimitSet specifies a set of Limits that are associated with an
    Analog measurement.
    '''
@dataclass
class LoadDynamics(IdentifiedObject):
    '''
    Load whose behaviour is described by reference to a standard model <font
    color="#0f0f0f">or by definition of a user-defined model.</font>
    A standard feature of dynamic load behaviour modelling is the ability to
    associate the same behaviour to multiple energy consumers by means of a
    single load definition. The load model is always applied to individual
    bus loads (energy consumers).
    '''
@dataclass
class LoadAggregate(LoadDynamics):
    '''
    Aggregate loads are used to represent all or part of the real and reactive
    load from one or more loads in the static (power flow) data. This load
    is usually the aggregation of many individual load devices and the load
    model is an approximate representation of the aggregate response of the
    load devices to system disturbances.
    Standard aggregate load model comprised of static and/or dynamic components.
    A static load model represents the sensitivity of the real and reactive
    power consumed by the load to the amplitude and frequency of the bus voltage.
    A dynamic load model can be used to represent the aggregate response of
    the motor components of the load.
    '''
    LoadMotor: Optional[ str | LoadMotor ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'LoadMotor.LoadAggregate'
        })
    '''
    Aggregate motor (dynamic) load associated with this aggregate load.
    '''
    LoadStatic: Optional[ str | LoadStatic ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'LoadStatic.LoadAggregate'
        })
    '''
    Aggregate static load associated with this aggregate load.
    '''
@dataclass
class LoadComposite(LoadDynamics):
    '''
    Combined static load and induction motor load effects.
    The dynamics of the motor are simplified by linearizing the induction machine
    equations.
    '''
    epfd: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active load-frequency dependence index (dynamic) (<i>Epfd</i>). Typical
    value = 1,5.
    '''
    epfs: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active load-frequency dependence index (static) (<i>Epfs</i>). Typical
    value = 1,5.
    '''
    epvd: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active load-voltage dependence index (dynamic) (<i>Epvd</i>). Typical value
    = 0,7.
    '''
    epvs: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active load-voltage dependence index (static) (<i>Epvs</i>). Typical value
    = 0,7.
    '''
    eqfd: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive load-frequency dependence index (dynamic) (<i>Eqfd</i>). Typical
    value = 0.
    '''
    eqfs: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive load-frequency dependence index (static) (<i>Eqfs</i>). Typical
    value = 0.
    '''
    eqvd: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive load-voltage dependence index (dynamic) (<i>Eqvd</i>). Typical
    value = 2.
    '''
    eqvs: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive load-voltage dependence index (static) (<i>Eqvs</i>). Typical
    value = 2.
    '''
    lfac: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Loading factor (<i>L</i><i><sub>fac</sub></i>). The ratio of initial <i>P</i>
    to motor MVA base. Typical value = 0,8.
    '''
    pfrac: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of constant-power load to be represented by this motor model (<i>P</i><i><sub>FRAC</sub></i>)
    (&gt;= 0,0 and &lt;= 1,0). Typical value = 0,5.
    '''
    h: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inertia constant (<i>H</i>) (&gt;= 0). Typical value = 2,5.
    '''
@dataclass
class LoadGenericNonLinear(LoadDynamics):
    '''
    Generic non-linear dynamic (GNLD) load. This model can be used in mid-term
    and long-term voltage stability simulations (i.e., to study voltage collapse),
    as it can replace a more detailed representation of aggregate load, including
    induction motors, thermostatically controlled and static loads.
    '''
    bs: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steady state voltage index for reactive power (<i>BS</i>).
    '''
    bt: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient voltage index for reactive power (<i>BT</i>).
    '''
    ls: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steady state voltage index for active power (<i>LS</i>).
    '''
    lt: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient voltage index for active power (<i>LT</i>).
    '''
    genericNonLinearLoadModelType: Optional[ str | GenericNonLinearLoadModelKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of generic non-linear load model.
    '''
    tp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of lag function of active power (<i>T</i><i><sub>P</sub></i>)
    (&gt; 0).
    '''
    tq: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant of lag function of reactive power (<i>T</i><i><sub>Q</sub></i>)
    (&gt; 0).
    '''
@dataclass
class LoadUserDefined(LoadDynamics):
    '''
    Load whose dynamic behaviour is described by a user-defined model.
    '''
    proprietary: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Behaviour is based on a proprietary model as opposed to a detailed model.
    true = user-defined model is proprietary with behaviour mutually understood
    by sending and receiving applications and parameters passed as general
    attributes
    false = user-defined model is explicitly defined in terms of control blocks
    and their input and output signals.
    '''
@dataclass
class LoadGroup(IdentifiedObject):
    '''
    The class is the third level in a hierarchical structure for grouping of
    loads for the purpose of load flow load scaling.
    '''
    SubLoadArea: Optional[ str | SubLoadArea ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SubLoadArea.LoadGroups'
        })
    '''
    The SubLoadArea where the Loadgroup belongs.
    '''
@dataclass
class ConformLoadGroup(LoadGroup):
    '''
    A group of loads conforming to an allocation pattern.
    '''
@dataclass
class NonConformLoadGroup(LoadGroup):
    '''
    Loads that do not follow a daily and seasonal load variation pattern.
    '''
@dataclass
class LoadMotor(IdentifiedObject):
    '''
    Aggregate induction motor load. This model is used to represent a fraction
    of an ordinary load as "induction motor load". It allows a load that is
    treated as an ordinary constant power in power flow analysis to be represented
    by an induction motor in dynamic simulation. This model is intended for
    representation of aggregations of many motors dispersed through a load
    represented at a high voltage bus but where there is no information on
    the characteristics of individual motors.
    Either a "one-cage" or "two-cage" model of the induction machine can be
    modelled. Magnetic saturation is not modelled.
    This model treats a fraction of the constant power part of a load as a
    motor. During initialisation, the initial power drawn by the motor is set
    equal to <i>Pfrac</i> times the constant <i>P</i> part of the static load.
    The remainder of the load is left as a static load.
    The reactive power demand of the motor is calculated during initialisation
    as a function of voltage at the load bus. This reactive power demand can
    be less than or greater than the constant <i>Q</i> component of the load.
    If the motor's reactive demand is greater than the constant <i>Q</i> component
    of the load, the model inserts a shunt capacitor at the terminal of the
    motor to bring its reactive demand down to equal the constant <i>Q</i>
    reactive load.
    If an induction motor load model and a static load model are both present
    for a load, the motor <i>Pfrac</i> is assumed to be subtracted from the
    power flow constant <i>P</i> load before the static load model is applied.
    The remainder of the load, if any, is then represented by the static load
    model.
    '''
    d: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damping factor (<i>D</i>). Unit = delta <i>P</i>/delta speed. Typical value
    = 2.
    '''
    lfac: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Loading factor (<i>Lfac</i>). The ratio of initial <i>P</i> to motor MVA
    base. Typical value = 0,8.
    '''
    pfrac: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of constant-power load to be represented by this motor model (<i>Pfrac</i>)
    (&gt;= 0,0 and &lt;= 1,0). Typical value = 0,3.
    '''
    h: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inertia constant (<i>H</i>) (&gt;= 0). Typical value = 0,4.
    '''
    lp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient reactance (<i>Lp</i>). Typical value = 0,15.
    '''
    lpp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Subtransient reactance (<i>Lpp</i>). Typical value = 0,15.
    '''
    ls: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Synchronous reactance (<i>Ls</i>). Typical value = 3,2.
    '''
    ra: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Stator resistance (<i>Ra</i>). Typical value = 0.
    '''
    tbkr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Circuit breaker operating time (<i>Tbkr</i>) (&gt;= 0). Typical value =
    0,08.
    '''
    tpo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient rotor time constant (<i>Tpo</i>) (&gt;= 0). Typical value = 1.
    '''
    tppo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Subtransient rotor time constant (<i>Tppo</i>) (&gt;= 0). Typical value
    = 0,02.
    '''
    tv: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage trip pickup time (<i>Tv</i>) (&gt;= 0). Typical value = 0,1.
    '''
    vt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage threshold for tripping (<i>Vt</i>). Typical value = 0,7.
    '''
    LoadAggregate: Optional[ str | LoadAggregate ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'LoadAggregate.LoadMotor'
        })
    '''
    Aggregate load to which this aggregate motor (dynamic) load belongs.
    '''
@dataclass
class LoadResponseCharacteristic(IdentifiedObject):
    '''
    Models the characteristic response of the load demand due to changes in
    system conditions such as voltage and frequency. It is not related to demand
    response.
    If LoadResponseCharacteristic.exponentModel is True, the exponential voltage
    or frequency dependent models are specified and used as to calculate active
    and reactive power components of the load model.
    The equations to calculate active and reactive power components of the
    load model are internal to the power flow calculation, hence they use different
    quantities depending on the use case of the data exchange.
    The equations for exponential voltage dependent load model injected power
    are:
    pInjection= Pnominal* (Voltage/cim:BaseVoltage.nominalVoltage) ** cim:LoadResponseCharacteristic.pVoltageExponent
    qInjection= Qnominal* (Voltage/cim:BaseVoltage.nominalVoltage) ** cim:LoadResponseCharacteristic.qVoltageExponent
    Where:
    1) * means "multiply" and ** is "raised to power of";
    2) Pnominal and Qnominal represent the active power and reactive power
    at nominal voltage as any load described by the voltage exponential model
    shall be given at nominal voltage. This means that EnergyConsumer.p and
    EnergyConsumer.q are at nominal voltage.
    3) After power flow is solved:
    -pInjection and qInjection correspond to SvPowerflow.p and SvPowerflow.q
    respectively.
    - Voltage corresponds to SvVoltage.v at the TopologicalNode where the load
    is connected.
    '''
    exponentModel: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates the exponential voltage dependency model is to be used. If false,
    the coefficient model is to be used.
    The exponential voltage dependency model consist of the attributes:
    - pVoltageExponent
    - qVoltageExponent
    - pFrequencyExponent
    - qFrequencyExponent.
    The coefficient model consist of the attributes:
    - pConstantImpedance
    - pConstantCurrent
    - pConstantPower
    - qConstantImpedance
    - qConstantCurrent
    - qConstantPower.
    The sum of pConstantImpedance, pConstantCurrent and pConstantPower shall
    equal 1.
    The sum of qConstantImpedance, qConstantCurrent and qConstantPower shall
    equal 1.
    '''
    pConstantCurrent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Portion of active power load modelled as constant current.
    '''
    pConstantImpedance: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Portion of active power load modelled as constant impedance.
    '''
    pConstantPower: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Portion of active power load modelled as constant power.
    '''
    pFrequencyExponent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exponent of per unit frequency effecting active power.
    '''
    pVoltageExponent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exponent of per unit voltage effecting real power.
    '''
    qConstantCurrent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Portion of reactive power load modelled as constant current.
    '''
    qConstantImpedance: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Portion of reactive power load modelled as constant impedance.
    '''
    qConstantPower: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Portion of reactive power load modelled as constant power.
    '''
    qFrequencyExponent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exponent of per unit frequency effecting reactive power.
    '''
    qVoltageExponent: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Exponent of per unit voltage effecting reactive power.
    '''
@dataclass
class LoadStatic(IdentifiedObject):
    '''
    General static load. This model represents the sensitivity of the real
    and reactive power consumed by the load to the amplitude and frequency
    of the bus voltage.
    '''
    ep1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First term voltage exponent for active power (<i>Ep1</i>). Used only when
    .staticLoadModelType = exponential.
    '''
    ep2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second term voltage exponent for active power (<i>Ep2</i>). Used only when
    .staticLoadModelType = exponential.
    '''
    ep3: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Third term voltage exponent for active power (<i>Ep3</i>). Used only when
    .staticLoadModelType = exponential.
    '''
    eq1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First term voltage exponent for reactive power (<i>Eq1</i>). Used only
    when .staticLoadModelType = exponential.
    '''
    eq2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second term voltage exponent for reactive power (<i>Eq2</i>). Used only
    when .staticLoadModelType = exponential.
    '''
    eq3: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Third term voltage exponent for reactive power (<i>Eq3</i>). Used only
    when .staticLoadModelType = exponential.
    '''
    kp1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First term voltage coefficient for active power (<i>K</i><i><sub>p1</sub></i>).
    Not used when .staticLoadModelType = constantZ.
    '''
    kp2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second term voltage coefficient for active power (<i>K</i><i><sub>p2</sub></i>).
    Not used when .staticLoadModelType = constantZ.
    '''
    kp3: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Third term voltage coefficient for active power (<i>K</i><i><sub>p3</sub></i>).
    Not used when .staticLoadModelType = constantZ.
    '''
    kp4: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency coefficient for active power (<i>K</i><i><sub>p4</sub></i>) (not
    = 0 if .staticLoadModelType = zIP2). Used only when .staticLoadModelType
    = zIP2.
    '''
    kpf: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency deviation coefficient for active power (<i>K</i><i><sub>pf</sub></i>).
    Not used when .staticLoadModelType = constantZ.
    '''
    kq1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First term voltage coefficient for reactive power (<i>K</i><i><sub>q1</sub></i>).
    Not used when .staticLoadModelType = constantZ.
    '''
    kq2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second term voltage coefficient for reactive power (<i>K</i><i><sub>q2</sub></i>).
    Not used when .staticLoadModelType = constantZ.
    '''
    kq3: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Third term voltage coefficient for reactive power (<i>K</i><i><sub>q3</sub></i>).
    Not used when .staticLoadModelType = constantZ.
    '''
    kq4: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency coefficient for reactive power (<i>K</i><i><sub>q4</sub></i>)
    (not = 0 when .staticLoadModelType = zIP2). Used only when .staticLoadModelType
    - zIP2.
    '''
    kqf: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency deviation coefficient for reactive power (<i>K</i><i><sub>qf</sub></i>).
    Not used when .staticLoadModelType = constantZ.
    '''
    staticLoadModelType: Optional[ str | StaticLoadModelKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of static load model. Typical value = constantZ.
    '''
    LoadAggregate: Optional[ str | LoadAggregate ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'LoadAggregate.LoadStatic'
        })
    '''
    Aggregate load to which this aggregate static load belongs.
    '''
@dataclass
class Location(IdentifiedObject):
    '''
    The place, scene, or point of something where someone or something has
    been, is, and/or will be at a given moment in time. It can be defined with
    one or more position points (coordinates) in a given coordinate system.
    '''
@dataclass
class Measurement(IdentifiedObject):
    '''
    A Measurement represents any measured, calculated or non-measured non-calculated
    quantity. Any piece of equipment may contain Measurements, e.g. a substation
    may have temperature measurements and door open indications, a transformer
    may have oil temperature and tank pressure measurements, a bay may contain
    a number of power flow measurements and a Breaker may contain a switch
    status measurement.
    The PSR - Measurement association is intended to capture this use of Measurement
    and is included in the naming hierarchy based on EquipmentContainer. The
    naming hierarchy typically has Measurements as leaves, e.g. Substation-VoltageLevel-Bay-Switch-Measurement.
    Some Measurements represent quantities related to a particular sensor location
    in the network, e.g. a voltage transformer (VT) or potential transformer
    (PT) at a busbar or a current transformer (CT) at the bar between a breaker
    and an isolator. The sensing position is not captured in the PSR - Measurement
    association. Instead it is captured by the Measurement - Terminal association
    that is used to define the sensing location in the network topology. The
    location is defined by the connection of the Terminal to ConductingEquipment.
    If both a Terminal and PSR are associated, and the PSR is of type ConductingEquipment,
    the associated Terminal should belong to that ConductingEquipment instance.
    When the sensor location is needed both Measurement-PSR and Measurement-Terminal
    are used. The Measurement-Terminal association is never used alone.
    '''
    measurementType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the type of measurement. For example, this specifies if the measurement
    represents an indoor temperature, outdoor temperature, bus voltage, line
    flow, etc.
    When the measurementType is set to "Specialization", the type of Measurement
    is defined in more detail by the specialized class which inherits from
    Measurement.
    '''
    phases: Optional[ str | PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates to which phases the measurement applies and avoids the need to
    use 'measurementType' to also encode phase information (which would explode
    the types). The phase information in Measurement, along with 'measurementType'
    and 'phases' uniquely defines a Measurement for a device, based on normal
    network phase. Their meaning will not change when the computed energizing
    phasing is changed due to jumpers or other reasons.
    If the attribute is missing three phases (ABC) shall be assumed.
    '''
    unitMultiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The unit multiplier of the measured quantity.
    '''
    unitSymbol: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The unit of measure of the measured quantity.
    '''
    Asset: Optional[ str | Asset ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Asset.Measurements'
        })
    '''
    Asset that has a measurement
    '''
    CalculationMethodHierarchy: Optional[ str | CalculationMethodHierarchy ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CalculationMethodHierarchy.Measurement'
        })
    '''
    Calculation method hierarchy which applies to this analog.
    '''
    MeasurementAction: Optional[ str | MeasurementAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MeasurementAction.Measurement'
        })
    '''
    The measurement action that is performed on the measurement
    '''
    PowerSystemResource: Optional[ str | PowerSystemResource ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.Measurements'
        })
    '''
    The power system resource that contains the measurement.
    '''
    Terminal: Optional[ str | ACDCTerminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ACDCTerminal.Measurements'
        })
    '''
    One or more measurements may be associated with a terminal in the network.
    '''
@dataclass
class Accumulator(Measurement):
    '''
    Accumulator represents an accumulated (counted) Measurement, e.g. an energy
    value.
    '''
    maxValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal value range maximum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
@dataclass
class Analog(Measurement):
    '''
    Analog represents an analog Measurement.
    '''
    maxValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal value range maximum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
    minValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal value range minimum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
    normalValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal measurement value, e.g., used for percentage calculations.
    '''
    positiveFlowIn: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If true then this measurement is an active power, reactive power or current
    with the convention that a positive value measured at the Terminal means
    power is flowing into the related PowerSystemResource.
    '''
@dataclass
class Discrete(Measurement):
    '''
    Discrete represents a discrete Measurement, i.e. a Measurement representing
    discrete values, e.g. a Breaker position.
    '''
    maxValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal value range maximum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
    minValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal value range minimum for any of the MeasurementValue.values. Used
    for scaling, e.g. in bar graphs or of telemetered raw values.
    '''
    normalValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal measurement value, e.g., used for percentage calculations.
    '''
    ValueAliasSet: Optional[ str | ValueAliasSet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ValueAliasSet.Discretes'
        })
    '''
    The ValueAliasSet used for translation of a MeasurementValue.value to a
    name.
    '''
@dataclass
class StringMeasurement(Measurement):
    '''
    StringMeasurement represents a measurement with values of type string.
    '''
@dataclass
class MeasurementAction(IdentifiedObject):
    '''
    Measurement taken as a switching step.
    '''
@dataclass
class MeasurementCalculator(IdentifiedObject):
    '''
    Result of a calculation of one or more measurement.
    '''
    kind: Optional[ str | CalculationKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Calculation operation executed on the operants.
    '''
@dataclass
class MeasurementCalculatorInput(IdentifiedObject):
    '''
    Input to measurement calculation. Support Analog, Discrete and Accumulator.
    '''
    absoluteValue: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If true, use the absolute value for the calculation.
    '''
    order: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive number that defines the order of the operant in the calculation.
    0 = default. The order is not relevant (e.g. summation).
    '''
    Measurement: Optional[ str | Measurement ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Measurement.MeasurementCalculatorInput'
        })
    '''
    Measurement used as input to a calculation.
    '''
    MeasurementCalculator: Optional[ str | MeasurementCalculator ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MeasurementCalculator.MeasurementCalculatorInput'
        })
    '''
    '''
@dataclass
class MeasurementValueSource(IdentifiedObject):
    '''
    MeasurementValueSource describes the alternative sources updating a MeasurementValue.
    User conventions for how to use the MeasurementValueSource attributes are
    defined in IEC 61970-301.
    '''
@dataclass
class IOPointSource(MeasurementValueSource):
    '''
    Indicates the point source for an IO Point.
    '''
@dataclass
class ModelAuthority(IdentifiedObject):
    '''
    A Modeling Authority is an entity responsible for supplying and maintaining
    the data defining a specific set of objects in a network model.
    '''
@dataclass
class ModelAuthoritySet(IdentifiedObject):
    '''
    A Modeling Authority Set is a group of objects in a network model where
    the data is supplied and maintained by the same Modeling Authority.
    This class is typically not included in instance data exchange as this
    information is tracked by other mechanisms in the exchange.
    '''
    ModelingAuthority: Optional[ str | ModelAuthority ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ModelAuthority.ModelingAuthoritySets'
        })
    '''
    Modeling Authority suppliying and maintaining the data for the objects
    in this Modeling Authority Set.
    '''
@dataclass
class FrameworkPart(ModelAuthoritySet):
    '''
    The type of alternate model frame. For example, it could be generator group
    used to represent generators in state estimator, planning, planning dynamics,
    short circuit, or real-time dynamics etc., but does not specifically represent
    any one alternative model. This need to know what objects to be removed
    in the realization of any one alternate model.
    '''
    Frame: Optional[ str | NetworkFrame ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkFrame.FrameworkPart'
        })
    '''
    '''
    ModelFrameType: Optional[ str | ModelFrameType ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ModelFrameType.ModelFrame'
        })
    '''
    Model frame type of the model frame.
    '''
@dataclass
class NetworkBoundary(FrameworkPart):
    '''
    A framework part that is a boundary between 2 frames.
    '''
    NetworkFrame: Optional[ str | NetworkFrame ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_695E7BFC_35D6_4d1d_AAA2_D5F42AA026BB-A'
        })
    '''
    '''
    NetworkFrame: Optional[ str | NetworkFrame ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_CA21CE47_5254_4798_BFEE_38C0883A3CC1-A'
        })
    '''
    '''
@dataclass
class NetworkFrame(FrameworkPart):
    '''
    A region isolated by boundaries.
    '''
@dataclass
class ModelFrameType(IdentifiedObject):
    '''
    Examples would be "Boundary" or "Region" type of frame.
    '''
@dataclass
class ModelOperation(IdentifiedObject):
    '''
    An operation performed on models.
    '''
    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Sequence number within a operation sequence, lower is first. Normally starts
    with 1.
    '''
    ModelOperationDescription: Optional[ str | ModelOperationDescription ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ModelOperationDescription.ModelOperation'
        })
    '''
    The type of the model operation.
    '''
    OperationSequence: Optional[ str | ModelOperationSequence ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ModelOperationSequence.ModelOperation'
        })
    '''
    '''
@dataclass
class ModelOperationArg(IdentifiedObject):
    '''
    Describes the role a dataset plays in a model operation. The role is applicable
    only in the context of a single operation.
    '''
    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The sequence number of the argument in an operation. Argument entries are
    considered in numerical order where the operation requires an ordering.
    '''
    ModelOperation: Optional[ str | ModelOperation ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ModelOperation.ModelOperationArg'
        })
    '''
    The opeation for the operation argument.
    '''
@dataclass
class DatasetArg(ModelOperationArg):
    '''
    A model operation argument referencing a dataset instance.
    '''
    Dataset: Optional[ str | InstanceSet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'InstanceSet.DatasetArg'
        })
    '''
    Dataset referenced by this argument of a model operation..
    '''
    OperationDatasetArgDescription: Optional[ str | DatasetArgDescription ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DatasetArgDescription.OperationDatasetArg'
        })
    '''
    The type of role for this dataset role. Should only reference role types
    that belong to the operation type of the associated operation.
    '''
@dataclass
class IncrementalDatasetArg(ModelOperationArg):
    '''
    A generic model operation argument referencing an incremental change description.
    '''
    IncrementalDataset: Optional[ str | ChangeSet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ChangeSet.IncrementalDatasetArg'
        })
    '''
    '''
    IncrementalDatasetArgDescription: Optional[ str | IncrementalDatasetArgDescription ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'IncrementalDatasetArgDescription.IncrementalDatasetArg'
        })
    '''
    '''
@dataclass
class ModelOperationArgDescription(IdentifiedObject):
    '''
    The type of custom operation dataset role for an operation description.
    '''
    multiplicityMaximum: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum multiplicity of the instance arguments that should be supplied
    for a single operation. Use -1 to indicate unlimited.
    '''
    multiplicityMinimum: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum multiplicity of the instance arguments that should be supplied
    for a single operation. Use zero to indicate optional.
    '''
    ModelOperationDefinition: Optional[ str | ModelOperationDescription ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ModelOperationDescription.OperationDatasetArgDescription'
        })
    '''
    The type of operation for this type of dataset role. Operations referencing
    the dataset role type should only belong to operations that reference the
    operation type.
    '''
@dataclass
class DatasetArgDescription(ModelOperationArgDescription):
    '''
    '''
@dataclass
class IncrementalDatasetArgDescription(ModelOperationArgDescription):
    '''
    '''
@dataclass
class ModelOperationDescription(IdentifiedObject):
    '''
    The type of model operation. This class is referenced by model operations
    and defines the kind of operation.
    '''
@dataclass
class ModelOperationSequence(IdentifiedObject):
    '''
    A concrete sequence of operations. For example, this may be used to describe
    a specific audit trail, a script or other specific set of actions on specific
    datasets.
    '''
@dataclass
class ModelPartSpecification(IdentifiedObject):
    '''
    The type of model. For example, state estimator, planning, planning dynamics,
    short circuit, or real-time dynamics etc. The model must conform to a profile.
    '''
    FrameworkPart: Optional[ str | ModelAuthoritySet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ModelAuthoritySet.ModelSpecification'
        })
    '''
    Model frame of the model part.
    '''
@dataclass
class ModelToBeDeleted(IdentifiedObject):
    '''
    A Model is a collection of Datasets.
    '''
@dataclass
class CompleteModelToBeDeleted(ModelToBeDeleted):
    '''
    A complete model can be used in applications to perform meaningful calculations,
    e.g. a study case in offline tools or a real time model in a SCADA/EMS.
    '''
@dataclass
class ModelPartVersion(ModelToBeDeleted):
    '''
    This is a version of a part of a model. New instances of this class with
    new identity are instantiated upon changes to the content of this class
    or changes to the associated data set. Instances of this class are considered
    immutable. The case audit trail can reference this immutable data to exactly
    reproduce a case.
    '''
    ModelSpecification: Optional[ str | ModelPartSpecification ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ModelPartSpecification.Model'
        })
    '''
    Model specification of the modelt.
    '''
@dataclass
class MutualCoupling(IdentifiedObject):
    '''
    This class represents the zero sequence line mutual coupling.
    '''
    b0ch: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence mutual coupling shunt (charging) susceptance, uniformly distributed,
    of the entire line section.
    '''
    distance11: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Distance to the start of the coupled region from the first line's terminal
    having sequence number equal to 1.
    '''
    distance12: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Distance to the end of the coupled region from the first line's terminal
    with sequence number equal to 1.
    '''
    distance21: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Distance to the start of coupled region from the second line's terminal
    with sequence number equal to 1.
    '''
    distance22: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Distance to the end of coupled region from the second line's terminal with
    sequence number equal to 1.
    '''
    g0ch: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence mutual coupling shunt (charging) conductance, uniformly distributed,
    of the entire line section.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence branch-to-branch mutual impedance coupling, resistance.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence branch-to-branch mutual impedance coupling, reactance.
    '''
    First_Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.HasFirstMutualCoupling'
        })
    '''
    The starting terminal for the calculation of distances along the first
    branch of the mutual coupling. Normally MutualCoupling would only be used
    for terminals of AC line segments. The first and second terminals of a
    mutual coupling should point to different AC line segments.
    '''
    Second_Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.HasSecondMutualCoupling'
        })
    '''
    The starting terminal for the calculation of distances along the second
    branch of the mutual coupling.
    '''
@dataclass
class NetworkModelProjectChangeVersion(IdentifiedObject):
    '''
    Describes the status and the planned implementation of the associated change
    set into the as-built model. New instances of this class with new identity
    are instantiated upon changes to the content of this class or changes to
    the associated change set. Instances of this class are considered immutable.
    The case audit trail can reference this immutable data to exactly reproduce
    a case.
    '''
    comment: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    A user provided comment describing the changes in this version from the
    previous version.
    '''
    effectiveDateTime: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date/time the change set is included in the model.
    '''
    timeStamp: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date/time this version was finalized and thus made immutable.
    '''
    ChangeSet: Optional[ str | ChangeSet ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ChangeSet.NetworkModelProjectChangeVersion'
        })
    '''
    The details of model changes for this project. The change set should have
    a new identifier if it changes.
    '''
    NetworkModelProjectChange: Optional[ str | NetworkModelProjectChange ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectChange.NetworkModelProjectChangeVersion'
        })
    '''
    The persistent network model project change to which this version applies.
    '''
    NetworkModelProjectState: Optional[ str | NetworkModelProjectState ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectState.NetworkModelProjectChangeVersion'
        })
    '''
    The state of this network model project version.
    '''
    SupercededBy: Optional[ str | NetworkModelProjectChangeVersion ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectChangeVersion.Supercedes'
        })
    '''
    The project version that will supercede this project version.
    '''
    Supercedes: Optional[ str | NetworkModelProjectChangeVersion ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectChangeVersion.SupercededBy'
        })
    '''
    Project version that is being superceded.
    '''
@dataclass
class NetworkModelProjectComponent(IdentifiedObject):
    '''
    Abstract class for both a network model project and network model change.
    '''
    ContainingProject: Optional[ str | NetworkModelProject ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProject.ContainedProject'
        })
    '''
    The parent project of this project.
    '''
@dataclass
class NetworkModelProject(NetworkModelProjectComponent):
    '''
    A grouping of network model change descriptions. Primarily used to organize
    the phases of an overall project.
    '''
@dataclass
class NetworkModelProjectChange(NetworkModelProjectComponent):
    '''
    Network model project change described by versions of an associated change
    set. Has persistent identity over multiple versions of the associated change
    set.
    '''
@dataclass
class NetworkModelProjectComponent2(IdentifiedObject):
    '''
    '''
    closed: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    created: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    updated: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    version: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    CurrentState: Optional[ str | CurrentState ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_955D5BF8_C371_455c_9915_2EDD3CA75C50-A'
        })
    '''
    '''
    Parent: Optional[ str | NetworkModelProject2 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProject2.Child'
        })
    '''
    '''
@dataclass
class NetworkModelProject2(NetworkModelProjectComponent2):
    '''
    '''
@dataclass
class NetworkModelProjectStage(NetworkModelProjectComponent2):
    '''
    '''
    changesetVersion: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    commissionedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    plannedCommissionedDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    DependencyDependentOnStage: Optional[ str | AnnotatedProjectDependency ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AnnotatedProjectDependency.DependentOnStage'
        })
    '''
    '''
@dataclass
class NetworkModelProjectRelationship(IdentifiedObject):
    '''
    A relationship that assists humans and software building cases by assembling
    project changes in the correct sequence. This class may be specialized
    to create specific types of relationships.
    '''
    ProjectA: Optional[ str | NetworkModelProjectComponent ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectComponent.ProjectARelationships'
        })
    '''
    '''
    ProjectB: Optional[ str | NetworkModelProjectComponent ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NetworkModelProjectComponent.ProjectBRelationships'
        })
    '''
    '''
@dataclass
class ProjectAlternative(NetworkModelProjectRelationship):
    '''
    Project B is an alternative to project A. Project A is the primary alternative.
    Multiple project alternatives should not be selected into a single network
    study case.
    '''
@dataclass
class ProjectDependency(NetworkModelProjectRelationship):
    '''
    Project A change sets should be applied before Project B during case creation.
    '''
@dataclass
class NetworkModelProjectState(IdentifiedObject):
    '''
    A network model project version state. States are agreed upon by the exchange
    community. Examples are "approved", "proposed", "withdrawn", "committed"
    etc.
    '''
@dataclass
class OldPerson(IdentifiedObject):
    '''
    General purpose information for name and other information to contact people.
    '''
@dataclass
class OperatingParticipant(IdentifiedObject):
    '''
    An operator of multiple power system resource objects. Note multple operating
    participants may operate the same power system resource object. This can
    be used for modeling jointly owned units where each owner operates as a
    contractual share.
    '''
@dataclass
class OperationalLimit(IdentifiedObject):
    '''
    A value and normal value associated with a specific kind of limit.
    The sub class value and normalValue attributes vary inversely to the associated
    OperationalLimitType.acceptableDuration (acceptableDuration for short).
    If a particular piece of equipment has multiple operational limits of the
    same kind (apparent power, current, etc.), the limit with the greatest
    acceptableDuration shall have the smallest limit value and the limit with
    the smallest acceptableDuration shall have the largest limit value. Note:
    A large current can only be allowed to flow through a piece of equipment
    for a short duration without causing damage, but a lesser current can be
    allowed to flow for a longer duration.
    '''
    OperationalLimitSet: Optional[ str | OperationalLimitSet ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OperationalLimitSet.OperationalLimitValue'
        })
    '''
    The limit set to which the limit values belong.
    '''
    OperationalLimitType: Optional[ str | OperationalLimitType ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OperationalLimitType.OperationalLimit'
        })
    '''
    The limit type associated with this limit.
    '''
@dataclass
class ActivePowerLimit(OperationalLimit):
    '''
    Limit on active power flow.
    '''
    normalValue: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The normal value of active power limit. The attribute shall be a positive
    value or zero.
    '''
    value: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value of active power limit. The attribute shall be a positive value or
    zero.
    '''
@dataclass
class ApparentPowerLimit(OperationalLimit):
    '''
    Apparent power limit.
    '''
    normalValue: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The normal apparent power limit. The attribute shall be a positive value
    or zero.
    '''
    value: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The apparent power limit. The attribute shall be a positive value or zero.
    '''
@dataclass
class CurrentLimit(OperationalLimit):
    '''
    Operational limit on current.
    '''
    normalValue: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The normal value for limit on current flow. The attribute shall be a positive
    value or zero.
    '''
    value: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limit on current flow. The attribute shall be a positive value or zero.
    '''
@dataclass
class VoltageLimit(OperationalLimit):
    '''
    Operational limit applied to voltage.
    The use of operational VoltageLimit is preferred instead of limits defined
    at VoltageLevel. The operational VoltageLimits are used, if present.
    '''
    normalValue: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The normal limit on voltage. High or low limit nature of the limit depends
    upon the properties of the operational limit type. The attribute shall
    be a positive value or zero.
    '''
    value: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limit on voltage. High or low limit nature of the limit depends upon the
    properties of the operational limit type. The attribute shall be a positive
    value or zero.
    '''
@dataclass
class OperationalLimitSet(IdentifiedObject):
    '''
    A set of limits associated with equipment. Sets of limits might apply to
    a specific temperature, or season for example. A set of limits may contain
    different severities of limit levels that would apply to the same equipment.
    The set may contain limits of different types such as apparent power and
    current limits or high and low voltage limits that are logically applied
    together as a set.
    '''
    Equipment: Optional[ str | Equipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Equipment.OperationalLimitSet'
        })
    '''
    The equipment to which the limit set applies.
    '''
    Terminal: Optional[ str | ACDCTerminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ACDCTerminal.OperationalLimitSet'
        })
    '''
    The terminal where the operational limit set apply.
    '''
@dataclass
class OperationalLimitType(IdentifiedObject):
    '''
    The operational meaning of a category of limits.
    '''
    isInfiniteDuration: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Defines if the operational limit type has infinite duration. If true, the
    limit has infinite duration. If false, the limit has definite duration
    which is defined by the attribute acceptableDuration.
    '''
    acceptableDuration: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The nominal acceptable duration of the limit. Limits are commonly expressed
    in terms of the time limit for which the limit is normally acceptable.
    The actual acceptable duration of a specific limit may depend on other
    local factors such as temperature or wind speed. The attribute has meaning
    only if the flag isInfiniteDuration is set to false, hence it shall not
    be exchanged when isInfiniteDuration is set to true.
    '''
    direction: Optional[ str | OperationalLimitDirectionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The direction of the limit.
    '''
    TargetOperationalLimitmTypeScaling: Optional[ str | OperatonalLimitTypeScaling ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OperatonalLimitTypeScaling.TargetOperationalLimit'
        })
    '''
    '''
@dataclass
class Outage(IdentifiedObject):
    '''
    Document describing details of an active or planned outage in a part of
    the electrical network.
    A non-planned outage may be created upon:
    - a breaker trip,
    - a fault indicator status change,
    - a meter event indicating customer outage,
    - a reception of one or more customer trouble calls, or
    - an operator command, reflecting information obtained from the field crew.
    Outage restoration may be performed using a switching plan which complements
    the outage information with detailed switching activities, including the
    relationship to the crew and work.
    A planned outage may be created upon:
    - a request for service, maintenance or construction work in the field,
    or
    - an operator-defined outage for what-if/contingency network analysis.
    '''
@dataclass
class PSRType(IdentifiedObject):
    '''
    Classifying instances of the same class, e.g. overhead and underground
    ACLineSegments. This classification mechanism is intended to provide flexibility
    outside the scope of this document, i.e. provide customisation that is
    non standard.
    '''
@dataclass
class PerLengthLineParameter(IdentifiedObject):
    '''
    Common type for per-length electrical catalogues describing line parameters.
    '''
    WireAssemblyInfo: Optional[ str | WireAssemblyInfo ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WireAssemblyInfo.PerLengthLineParameter'
        })
    '''
    A WireAssemblyInfo is used to compute the PerLengthParameter data in the
    Wires package
    '''
@dataclass
class PerLengthDCLineParameter(PerLengthLineParameter):
    '''
    Common type for per-length electrical catalogues describing DC line parameters.
    '''
    capacitance: Optional[ float | CapacitancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Capacitance per unit of length of the DC line segment; significant for
    cables only.
    '''
    inductance: Optional[ float | InductancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inductance per unit of length of the DC line segment.
    '''
    resistance: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance per length of the DC line segment.
    '''
@dataclass
class PerLengthImpedance(PerLengthLineParameter):
    '''
    Common type for per-length impedance electrical catalogues.
    '''
@dataclass
class PerLengthPhaseImpedance(PerLengthImpedance):
    '''
    Impedance and admittance parameters per unit length for n-wire unbalanced
    lines, in matrix form.
    '''
    conductorCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number of phase, neutral, and other wires retained. Constrains the number
    of matrix elements and the phase codes that can be used with this matrix.
    '''
@dataclass
class PerLengthSequenceImpedance(PerLengthImpedance):
    '''
    Sequence impedance and admittance parameters per unit length, for transposed
    lines of 1, 2, or 3 phases. For 1-phase lines, define x=x0=xself. For 2-phase
    lines, define x=xs-xm and x0=xs+xm.
    '''
    b0ch: Optional[ float | SusceptancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) susceptance, per unit of length.
    '''
    bch: Optional[ float | SusceptancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) susceptance, per unit of length.
    '''
    g0ch: Optional[ float | ConductancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) conductance, per unit of length.
    '''
    gch: Optional[ float | ConductancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) conductance, per unit of length.
    '''
    r: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series resistance, per unit of length.
    '''
    r0: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series resistance, per unit of length.
    '''
    x: Optional[ float | ReactancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series reactance, per unit of length.
    '''
    x0: Optional[ float | ReactancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series reactance, per unit of length.
    '''
@dataclass
class PhaseTapChangerTable(IdentifiedObject):
    '''
    Describes a tabular curve for how the phase angle difference and impedance
    varies with the tap step.
    '''
@dataclass
class PowerSystemResource(IdentifiedObject):
    '''
    A power system resource (PSR) can be an item of equipment such as a switch,
    an equipment container containing many individual items of equipment such
    as a substation, or an organisational entity such as sub-control area.
    Power system resources can have measurements associated.
    '''
    AssetDatasheet: Optional[ str | AssetInfo ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AssetInfo.PowerSystemResources'
        })
    '''
    Datasheet information for this power system resource.
    '''
    Location: Optional[ str | Location ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Location.PowerSystemResources'
        })
    '''
    Location of this power system resource.
    '''
    PSRType: Optional[ str | PSRType ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PSRType.PowerSystemResources'
        })
    '''
    Custom classification for this power system resource.
    '''
@dataclass
class ACLineSegmentPhase(PowerSystemResource):
    '''
    Represents a single wire of an alternating current line segment.
    '''
    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number designation for this line segment phase. Each line segment phase
    within a line segment should have a unique sequence number. This is useful
    for unbalanced modelling to bind the mathematical model (PhaseImpedanceData
    of PerLengthPhaseImpedance) with the connectivity model (this class) and
    the physical model (WirePosition) without tight coupling.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The phase connection of the wire at both ends.
    '''
    ACLineSegment: Optional[ str | ACLineSegment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.ACLineSegmentPhases'
        })
    '''
    The line segment to which the phase belongs.
    '''
    WireInfo: Optional[ str | WireInfo ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WireInfo.ACLineSegmentPhase'
        })
    '''
    Wire information contributing to this AC line segment phase information.
    '''
@dataclass
class AirCompressor(PowerSystemResource):
    '''
    Combustion turbine air compressor which is an integral part of a compressed
    air energy storage (CAES) plant.
    '''
    airCompressorRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rating of the CAES air compressor.
    '''
    CAESPlant: Optional[ str | CAESPlant ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CAESPlant.AirCompressor'
        })
    '''
    An air compressor may be a member of a compressed air energy storage plant.
    '''
    CombustionTurbine: Optional[ str | CombustionTurbine ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CombustionTurbine.AirCompressor'
        })
    '''
    A CAES air compressor is driven by combustion turbine.
    '''
@dataclass
class CAESPlant(PowerSystemResource):
    '''
    Compressed air energy storage plant.
    '''
    energyStorageCapacity: Optional[ float | RealEnergy ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The rated energy storage capacity. The attribute shall be a positive value.
    '''
    ratedCapacityP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The CAES plant's gross rated generating capacity. The attribute shall be
    a positive value.
    '''
    AirCompressor: Optional[ str | AirCompressor ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AirCompressor.CAESPlant'
        })
    '''
    An air compressor may be a member of a compressed air energy storage plant.
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.CAESPlant'
        })
    '''
    A thermal generating unit may be a member of a compressed air energy storage
    plant.
    '''
@dataclass
class CogenerationPlant(PowerSystemResource):
    '''
    A set of thermal generating units for the production of electrical energy
    and process steam (usually from the output of the steam turbines). The
    steam sendout is typically used for industrial purposes or for municipal
    heating and cooling.
    '''
    cogenHPSendoutRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The high pressure steam sendout.
    '''
    cogenHPSteamRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The high pressure steam rating.
    '''
    cogenLPSendoutRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The low pressure steam sendout.
    '''
    cogenLPSteamRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The low pressure steam rating.
    '''
    ratedP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The rated output active power of the cogeneration plant.
    The attribute shall be a positive value.
    '''
    SteamSendoutSchedule: Optional[ str | SteamSendoutSchedule ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SteamSendoutSchedule.CogenerationPlant'
        })
    '''
    A cogeneration plant has a steam sendout schedule.
    '''
@dataclass
class CombinedCyclePlant(PowerSystemResource):
    '''
    A set of combustion turbines and steam turbines where the exhaust heat
    from the combustion turbines is recovered to make steam for the steam turbines,
    resulting in greater overall plant efficiency.
    '''
    combCyclePlantRating: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The combined cycle plant's active power output rating.
    '''
@dataclass
class CommunicationLink(PowerSystemResource):
    '''
    The connection to remote units is through one or more communication links.
    Reduntant links may exist. The CommunicationLink class inherits PowerSystemResource.
    The intention is to allow CommunicationLinks to have Measurements. These
    Measurements can be used to model link status as operational, out of service,
    unit failure etc.
    '''
    BilateralExchangeActor: Optional[ str | BilateralExchangeActor ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BilateralExchangeActor.CommunicationLink'
        })
    '''
    ICCP data provider or consumer using communication addressing for a Bilateral
    table.
    '''
@dataclass
class IPAccessPoint(CommunicationLink):
    '''
    Internet Protocol Access Point – used to represent an addressing structure
    is based upon an Internet Protocol (IP) address.
    '''
    address: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is the dotted decimal IP Address resolve the IP address. The format is
    controlled by the value of the addressType.
    '''
    gateway: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is the dotted decimal IPAddress of the first hop router. Format is controlled
    by the addressType.
    '''
    subnet: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    This is the IP subnet mask which controls the local vs non-local routing.
    '''
    addressType: Optional[ str | IPAddressKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    IP address type.
    '''
@dataclass
class TCPAccessPoint(IPAccessPoint):
    '''
    Allows addressing and behavioural information regarding the use of TCP
    by ICCP links.
    '''
    keepAliveTime: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates the default interval at which TCP will check if the TCP connection
    is still valid.
    '''
    port: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    This value is only needed to be specified for called nodes (e.g. those
    that respond to a TCP.Open request).
    This value specifies the TCP port to be used. Well known and "registered"
    ports are preferred and can be found at:
    http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml
    For IEC 60870-6 TASE.2 (e.g. ICCP) and IEC 61850, the value used shall
    be 102 for non-TLS protected exchanges. The value shall be 3782 for TLS
    transported ICCP and 61850 exchanges.
    '''
@dataclass
class ISOUpperLayer(TCPAccessPoint):
    '''
    Is a set of configure addressing information that is required since ICCP
    utilizes addressing other than a TCP port.
    '''
    aeInvoke: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is part of the Application Entity addressing as specified by ISO Addressing.
    '''
    aeQual: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is the AE qualifier and represents further application level addressing
    information.
    '''
    apInvoke: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is a further application level OSI addressing parameter.
    '''
    apTitle: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is a sequence of integer strings separated by ".". The value, in conjunction
    with other application addressing attributes (e.g. other APs) are used
    to select a specific application (e.g. the ICCP application entity) per
    the OSI reference model. The sequence, and its values, represent a namespace
    whose values are governed by ISO/IEC 7498-3.
    '''
    osiPsel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is the addressing selector for OSI presentation addressing.
    '''
    osiSsel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is the OSI session layer addressing information.
    '''
    osiTsel: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is the OSI Transport Layer addressing information.
    '''
@dataclass
class ConnectivityNodeContainer(PowerSystemResource):
    '''
    A base class for all objects that may contain connectivity nodes or topological
    nodes.
    '''
@dataclass
class EquipmentContainer(ConnectivityNodeContainer):
    '''
    A modelling construct to provide a root class for containing equipment.
    '''
@dataclass
class Bay(EquipmentContainer):
    '''
    A collection of power system resources (within a given substation) including
    conducting equipment, protection relays, measurements, and telemetry. A
    bay typically represents a physical grouping related to modularization
    of equipment.
    '''
    bayEnergyMeasFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates the presence/absence of energy measurements.
    '''
    bayPowerMeasFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates the presence/absence of active/reactive power measurements.
    '''
    breakerConfiguration: Optional[ str | BreakerConfiguration ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Breaker configuration.
    '''
    busBarConfiguration: Optional[ str | BusbarConfiguration ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Busbar configuration.
    '''
    Circuit: Optional[ str | Circuit ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Circuit.EndBay'
        })
    '''
    '''
    Substation: Optional[ str | Substation ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Substation.Bays'
        })
    '''
    Substation containing the bay.
    '''
    VoltageLevel: Optional[ str | VoltageLevel ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VoltageLevel.Bays'
        })
    '''
    The voltage level containing this bay.
    '''
@dataclass
class DCEquipmentContainer(EquipmentContainer):
    '''
    A modelling construct to provide a root class for containment of DC as
    well as AC equipment. The class differ from the EquipmentContaner for AC
    in that it may also contain DCNode-s. Hence it can contain both AC and
    DC equipment.
    '''
@dataclass
class DCConverterUnit(DCEquipmentContainer):
    '''
    Indivisible operative unit comprising all equipment between the point of
    common coupling on the AC side and the point of common coupling – DC side,
    essentially one or more converters, together with one or more converter
    transformers, converter control equipment, essential protective and switching
    devices and auxiliaries, if any, used for conversion.
    '''
    operationMode: Optional[ str | DCConverterOperatingModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The operating mode of an HVDC bipole (bipolar, monopolar metallic return,
    etc).
    '''
    Substation: Optional[ str | Substation ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Substation.DCConverterUnit'
        })
    '''
    The containing substation of the DC converter unit.
    '''
@dataclass
class DCLine(DCEquipmentContainer):
    '''
    Overhead lines and/or cables connecting two or more HVDC substations.
    '''
    Region: Optional[ str | SubGeographicalRegion ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SubGeographicalRegion.DCLines'
        })
    '''
    The SubGeographicalRegion containing the DC line.
    '''
@dataclass
class Feeder(EquipmentContainer):
    '''
    A collection of equipment for organizational purposes, used for grouping
    distribution resources.
    The organization a feeder does not necessarily reflect connectivity or
    current operation state.
    '''
    NormalEnergizingSubstation: Optional[ str | Substation ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Substation.NormalEnergizedFeeder'
        })
    '''
    The substation that nominally energizes the feeder. Also used for naming
    purposes.
    '''
@dataclass
class Line(EquipmentContainer):
    '''
    Contains equipment beyond a substation belonging to a power transmission
    line.
    '''
    Region: Optional[ str | SubGeographicalRegion ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SubGeographicalRegion.Lines'
        })
    '''
    The sub-geographical region of the line.
    '''
@dataclass
class Circuit(Line):
    '''
    '''
@dataclass
class Plant(EquipmentContainer):
    '''
    A Plant is a collection of equipment for purposes of generation.
    '''
@dataclass
class Substation(EquipmentContainer):
    '''
    A collection of equipment for purposes other than generation or utilization,
    through which electric energy in bulk is passed for the purposes of switching
    or modifying its characteristics.
    '''
    NamingFeeder: Optional[ str | Feeder ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Feeder.NamingSecondarySubstation'
        })
    '''
    The primary feeder that normally energizes the secondary substation. Used
    for naming purposes. Either this association or the substation to subgeographical
    region should be used for hierarchical containment specification.
    '''
    Region: Optional[ str | SubGeographicalRegion ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SubGeographicalRegion.Substations'
        })
    '''
    The SubGeographicalRegion containing the substation.
    '''
@dataclass
class VoltageLevel(EquipmentContainer):
    '''
    A collection of equipment at one common system voltage forming a switchgear.
    The equipment typically consists of breakers, busbars, instrumentation,
    control, regulation and protection devices as well as assemblies of all
    these.
    '''
    highVoltageLimit: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The bus bar's high voltage limit.
    The limit applies to all equipment and nodes contained in a given VoltageLevel.
    It is not required that it is exchanged in pair with lowVoltageLimit. It
    is preferable to use operational VoltageLimit, which prevails, if present.
    '''
    lowVoltageLimit: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The bus bar's low voltage limit.
    The limit applies to all equipment and nodes contained in a given VoltageLevel.
    It is not required that it is exchanged in pair with highVoltageLimit.
    It is preferable to use operational VoltageLimit, which prevails, if present.
    '''
    BaseVoltage: Optional[ str | BaseVoltage ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BaseVoltage.VoltageLevel'
        })
    '''
    The base voltage used for all equipment within the voltage level.
    '''
    Substation: Optional[ str | Substation ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Substation.VoltageLevels'
        })
    '''
    The substation of the voltage level.
    '''
@dataclass
class EquivalentNetwork(ConnectivityNodeContainer):
    '''
    A class that groups electrical equivalents, including internal nodes, of
    a network that has been reduced. The ConnectivityNodes contained in the
    equivalent are intended to reflect internal nodes of the equivalent. The
    boundary Connectivity nodes where the equivalent connects outside itself
    are not contained by the equivalent.
    '''
@dataclass
class ControlArea(PowerSystemResource):
    '''
    A control area is a grouping of generating units and/or loads and a cutset
    of tie lines (as terminals) which may be used for a variety of purposes
    including automatic generation control, power flow solution area interchange
    control specification, and input to load forecasting. All generation and
    load within the area defined by the terminals on the border are considered
    in the area interchange control. Note that any number of overlapping control
    area specifications can be superimposed on the physical model. The following
    general principles apply to ControlArea:
    1. The control area orientation for net interchange is positive for an
    import, negative for an export.
    2. The control area net interchange is determined by summing flows in Terminals.
    The Terminals are identified by creating a set of TieFlow objects associated
    with a ControlArea object. Each TieFlow object identifies one Terminal.
    3. In a single network model, a tie between two control areas must be modelled
    in both control area specifications, such that the two representations
    of the tie flow sum to zero.
    4. The normal orientation of Terminal flow is positive for flow into the
    conducting equipment that owns the Terminal. (i.e. flow from a bus into
    a device is positive.) However, the orientation of each flow in the control
    area specification must align with the control area convention, i.e. import
    is positive. If the orientation of the Terminal flow referenced by a TieFlow
    is positive into the control area, then this is confirmed by setting TieFlow.positiveFlowIn
    flag TRUE. If not, the orientation must be reversed by setting the TieFlow.positiveFlowIn
    flag FALSE.
    '''
    netInterchange: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The specified positive net interchange into the control area, i.e. positive
    sign means flow into the area.
    '''
    pTolerance: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power net interchange tolerance. The attribute shall be a positive
    value or zero.
    '''
    type: Optional[ str | ControlAreaTypeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The primary type of control area definition used to determine if this is
    used for automatic generation control, for planning interchange control,
    or other purposes. A control area specified with primary type of automatic
    generation control could still be forecast and used as an interchange area
    in power flow analysis.
    '''
    EnergyArea: Optional[ str | EnergyArea ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EnergyArea.ControlArea'
        })
    '''
    The energy area that is forecast from this control area specification.
    '''
@dataclass
class EnergyConsumerPhase(PowerSystemResource):
    '''
    A single phase of an energy consumer.
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power of the load. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''
    pfixed: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power of the load that is a fixed quantity. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    '''
    pfixedPct: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fixed active power as per cent of load group fixed active power. Load sign
    convention is used, i.e. positive sign means flow out from a node.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase of this energy consumer component. If the energy consumer is wye
    connected, the connection is from the indicated phase to the central ground
    or neutral point. If the energy consumer is delta connected, the phase
    indicates an energy consumer connected from the indicated phase to the
    next logical non-neutral phase.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power of the load. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''
    qfixed: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power of the load that is a fixed quantity. Load sign convention
    is used, i.e. positive sign means flow out from a node.
    '''
    qfixedPct: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fixed reactive power as per cent of load group fixed reactive power. Load
    sign convention is used, i.e. positive sign means flow out from a node.
    '''
    EnergyConsumer: Optional[ str | EnergyConsumer ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EnergyConsumer.EnergyConsumerPhase'
        })
    '''
    The energy consumer to which this phase belongs.
    '''
@dataclass
class EnergyGroup(PowerSystemResource):
    '''
    '''
    isSlack: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
    EnergyTypeReference: Optional[ str | EnergyTypeReference ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_1B0AA3EB_EBFC_4e11_A7A4_13206AA305E0-A'
        })
    '''
    '''
    ControlArea: Optional[ str | ControlArea ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_EC0B638A_E0FD_42c8_B84C_47AA469B8629-A'
        })
    '''
    '''
@dataclass
class EnergySourcePhase(PowerSystemResource):
    '''
    Represents the single phase information of an unbalanced energy source.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase of this energy source component. If the energy source wye connected,
    the connection is from the indicated phase to the central ground or neutral
    point. If the energy source is delta connected, the phase indicates an
    energy source connected from the indicated phase to the next logical non-neutral
    phase.
    '''
    EnergySource: Optional[ str | EnergySource ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EnergySource.EnergySourcePhase'
        })
    '''
    The energy sourceto which the phase belongs.
    '''
@dataclass
class Equipment(PowerSystemResource):
    '''
    The parts of a power system that are physical devices, electronic or mechanical.
    '''
    aggregate: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The aggregate flag provides an alternative way of representing an aggregated
    (equivalent) element. It is applicable in cases when the dedicated classes
    for equivalent equipment do not have all of the attributes necessary to
    represent the required level of detail. In case the flag is set to “true”
    the single instance of equipment represents multiple pieces of equipment
    that have been modelled together as an aggregate equivalent obtained by
    a network reduction procedure. Examples would be power transformers or
    synchronous machines operating in parallel modelled as a single aggregate
    power transformer or aggregate synchronous machine.
    The attribute is not used for EquivalentBranch, EquivalentShunt and EquivalentInjection.
    '''
    inService: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the availability of the equipment. True means the equipment is
    available for topology processing, which determines if the equipment is
    energized or not. False means that the equipment is treated by network
    applications as if it is not in the model.
    '''
    networkAnalysisEnabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The equipment is enabled to participate in network analysis. If unspecified,
    the value is assumed to be true.
    '''
    normallyInService: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the availability of the equipment under normal operating conditions.
    True means the equipment is available for topology processing, which determines
    if the equipment is energized or not. False means that the equipment is
    treated by network applications as if it is not in the model.
    '''
    EquipmentContainer: Optional[ str | EquipmentContainer ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EquipmentContainer.Equipments'
        })
    '''
    Container of this equipment.
    '''
@dataclass
class AuxiliaryEquipment(Equipment):
    '''
    AuxiliaryEquipment describe equipment that is not performing any primary
    functions but support for the equipment performing the primary function.
    AuxiliaryEquipment is attached to primary equipment via an association
    with Terminal.
    '''
    Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.AuxiliaryEquipment'
        })
    '''
    The Terminal at the equipment where the AuxiliaryEquipment is attached.
    '''
@dataclass
class FaultIndicator(AuxiliaryEquipment):
    '''
    A FaultIndicator is typically only an indicator (which may or may not be
    remotely monitored), and not a piece of equipment that actually initiates
    a protection event. It is used for FLISR (Fault Location, Isolation and
    Restoration) purposes, assisting with the dispatch of crews to "most likely"
    part of the network (i.e. assists with determining circuit section where
    the fault most likely happened).
    '''
@dataclass
class Sensor(AuxiliaryEquipment):
    '''
    This class describe devices that transform a measured quantity into signals
    that can be presented at displays, used in control or be recorded.
    '''
@dataclass
class CurrentTransformer(Sensor):
    '''
    Instrument transformer used to measure electrical qualities of the circuit
    that is being protected and/or monitored. Typically used as current transducer
    for the purpose of metering or protection. A typical secondary current
    rating would be 5A.
    '''
    accuracyClass: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    CT accuracy classification.
    '''
    ctClass: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    CT classification; i.e. class 10P.
    '''
    usage: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Intended usage of the CT; i.e. metering, protection.
    '''
    accuracyLimit: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Percent of rated current for which the CT remains accurate within specified
    limits.
    '''
    coreBurden: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power burden of the CT core.
    '''
@dataclass
class PostLineSensor(Sensor):
    '''
    A sensor used mainly in overhead distribution networks as the source of
    both current and voltage measurements.
    '''
@dataclass
class PotentialTransformer(Sensor):
    '''
    Instrument transformer (also known as Voltage Transformer) used to measure
    electrical qualities of the circuit that is being protected and/or monitored.
    Typically used as voltage transducer for the purpose of metering, protection,
    or sometimes auxiliary substation supply. A typical secondary voltage rating
    would be 120V.
    '''
    accuracyClass: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PT accuracy classification.
    '''
    nominalRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nominal ratio between the primary and secondary voltage.
    '''
    ptClass: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential transformer (PT) classification covering burden.
    '''
    type: Optional[ str | PotentialTransformerKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Potential transformer construction type.
    '''
@dataclass
class SurgeArrester(AuxiliaryEquipment):
    '''
    Shunt device, installed on the network, usually in the proximity of electrical
    equipment in order to protect the said equipment against transient voltage
    transients caused by lightning or switching activity.
    '''
@dataclass
class WaveTrap(AuxiliaryEquipment):
    '''
    Line traps are devices that impede high frequency power line carrier signals
    yet present a negligible impedance at the main power frequency.
    '''
@dataclass
class CompositeSwitch(Equipment):
    '''
    A model of a set of individual Switches normally enclosed within the same
    cabinet and possibly with interlocks that restrict the combination of switch
    positions. These are typically found in medium voltage distribution networks.
    A CompositeSwitch could represent a Ring-Main-Unit (RMU), or pad-mounted
    switchgear, with primitive internal devices such as an internal bus-bar
    plus 3 or 4 internal switches each of which may individually be open or
    closed. A CompositeSwitch and a set of contained Switches can also be used
    to represent a multi-position switch e.g. a switch that can connect a circuit
    to Ground, Open or Busbar.
    '''
    compositeSwitchType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    An alphanumeric code that can be used as a reference to extra information
    such as the description of the interlocking scheme if any.
    '''
@dataclass
class ConductingEquipment(Equipment):
    '''
    The parts of the AC power system that are designed to carry current or
    that are conductively connected through terminals.
    '''
    BaseVoltage: Optional[ str | BaseVoltage ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BaseVoltage.ConductingEquipment'
        })
    '''
    Base voltage of this conducting equipment. Use only when there is no voltage
    level container used and only one base voltage applies. For example, not
    used for transformers.
    '''
    GroundingAction: Optional[ str | GroundAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GroundAction.GroundedEquipment'
        })
    '''
    Action involving grounding operation on this conducting equipment.
    '''
    JumpingAction: Optional[ str | JumperAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'JumperAction.JumpedEquipments'
        })
    '''
    Jumper action involving jumping operation on this conducting equipment.
    '''
    Outage: Optional[ str | Outage ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Outage.OutageIsolationEquipment'
        })
    '''
    The outage that is isolated by the outage isolation equipment.
    '''
@dataclass
class ACDCConverter(ConductingEquipment):
    '''
    A unit with valves for three phases, together with unit control equipment,
    essential protective and switching devices, DC storage capacitors, phase
    reactors and auxiliaries, if any, used for conversion.
    '''
    numberOfValves: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number of valves in the converter. Used in loss calculations.
    '''
    baseS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Base apparent power of the converter pole. The attribute shall be a positive
    value.
    '''
    idc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Converter DC current, also called Id. It is converter’s state variable,
    result from power flow.
    '''
    idleLoss: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power loss in pole at no power transfer. It is converter’s configuration
    data used in power flow. The attribute shall be a positive value.
    '''
    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum active power limit. The value is overwritten by values of VsCapabilityCurve,
    if present.
    '''
    maxUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum voltage on the DC side at which the converter should operate.
    It is converter’s configuration data used in power flow. The attribute
    shall be a positive value.
    '''
    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum active power limit. The value is overwritten by values of VsCapabilityCurve,
    if present.
    '''
    minUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum voltage on the DC side at which the converter should operate.
    It is converter’s configuration data used in power flow. The attribute
    shall be a positive value.
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power at the point of common coupling. Load sign convention is used,
    i.e. positive sign means flow out from a node.
    Starting value for a steady state solution in the case a simplified power
    flow model is used.
    '''
    poleLossP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The active power loss at a DC Pole
    = idleLoss + switchingLoss*|Idc| + resitiveLoss*Idc^2.
    For lossless operation Pdc=Pac.
    For rectifier operation with losses Pdc=Pac-lossP.
    For inverter operation with losses Pdc=Pac+lossP.
    It is converter’s state variable used in power flow. The attribute shall
    be a positive value.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power at the point of common coupling. Load sign convention is
    used, i.e. positive sign means flow out from a node.
    Starting value for a steady state solution in the case a simplified power
    flow model is used.
    '''
    ratedUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated converter DC voltage, also called UdN. The attribute shall be a positive
    value. It is converter’s configuration data used in power flow. For instance
    a bipolar HVDC link with value 200 kV has a 400kV difference between the
    dc lines.
    '''
    resistiveLoss: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    It is converter’s configuration data used in power flow. Refer to poleLossP.
    The attribute shall be a positive value.
    '''
    switchingLoss: Optional[ float | ActivePowerPerCurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Switching losses, relative to the base apparent power 'baseS'. Refer to
    poleLossP. The attribute shall be a positive value.
    '''
    targetPpcc: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Real power injection target in AC grid, at point of common coupling. Load
    sign convention is used, i.e. positive sign means flow out from a node.
    '''
    targetUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Target value for DC voltage magnitude. The attribute shall be a positive
    value.
    '''
    uc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Line-to-line converter voltage, the voltage at the AC side of the valve.
    It is converter’s state variable, result from power flow. The attribute
    shall be a positive value.
    '''
    udc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Converter voltage at the DC side, also called Ud. It is converter’s state
    variable, result from power flow. The attribute shall be a positive value.
    '''
    valveU0: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Valve threshold voltage, also called Uvalve. Forward voltage drop when
    the valve is conducting. Used in loss calculations, i.e. the switchLoss
    depend on numberOfValves * valveU0.
    '''
    PccTerminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.ConverterDCSides'
        })
    '''
    Point of common coupling terminal for this converter DC side. It is typically
    the terminal on the power transformer (or switch) closest to the AC network.
    '''
@dataclass
class CsConverter(ACDCConverter):
    '''
    DC side of the current source converter (CSC).
    The firing angle controls the dc voltage at the converter, both for rectifier
    and inverter. The difference between the dc voltages of the rectifier and
    inverter determines the dc current. The extinction angle is used to limit
    the dc voltage at the inverter, if needed, and is not used in active power
    control. The firing angle, transformer tap position and number of connected
    filters are the primary means to control a current source dc line. Higher
    level controls are built on top, e.g. dc voltage, dc current and active
    power. From a steady state perspective it is sufficient to specify the
    wanted active power transfer (ACDCConverter.targetPpcc) and the control
    functions will set the dc voltage, dc current, firing angle, transformer
    tap position and number of connected filters to meet this. Therefore attributes
    targetAlpha and targetGamma are not applicable in this case.
    The reactive power consumed by the converter is a function of the firing
    angle, transformer tap position and number of connected filter, which can
    be approximated with half of the active power. The losses is a function
    of the dc voltage and dc current.
    The attributes minAlpha and maxAlpha define the range of firing angles
    for rectifier operation between which no discrete tap changer action takes
    place. The range is typically 10-18 degrees.
    The attributes minGamma and maxGamma define the range of extinction angles
    for inverter operation between which no discrete tap changer action takes
    place. The range is typically 17-20 degrees.
    '''
    alpha: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Firing angle that determines the dc voltage at the converter dc terminal.
    Typical value between 10 degrees and 18 degrees for a rectifier. It is
    converter’s state variable, result from power flow. The attribute shall
    be a positive value.
    '''
    gamma: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Extinction angle. It is used to limit the dc voltage at the inverter if
    needed. Typical value between 17 degrees and 20 degrees for an inverter.
    It is converter’s state variable, result from power flow. The attribute
    shall be a positive value.
    '''
    maxAlpha: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum firing angle. It is converter’s configuration data used in power
    flow. The attribute shall be a positive value.
    '''
    maxGamma: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum extinction angle. It is converter’s configuration data used in
    power flow. The attribute shall be a positive value.
    '''
    maxIdc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum direct current (Id) on the DC side at which the converter should
    operate. It is converter’s configuration data use in power flow. The attribute
    shall be a positive value.
    '''
    minAlpha: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum firing angle. It is converter’s configuration data used in power
    flow. The attribute shall be a positive value.
    '''
    minGamma: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum extinction angle. It is converter’s configuration data used in
    power flow. The attribute shall be a positive value.
    '''
    minIdc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum direct current (Id) on the DC side at which the converter should
    operate. It is converter’s configuration data used in power flow. The attribute
    shall be a positive value.
    '''
    operatingMode: Optional[ str | CsOperatingModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates whether the DC pole is operating as an inverter or as a rectifier.
    It is converter’s control variable used in power flow.
    '''
    pPccControl: Optional[ str | CsPpccControlKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kind of active power control.
    '''
    ratedIdc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated converter DC current, also called IdN. The attribute shall be a positive
    value. It is converter’s configuration data used in power flow.
    '''
    targetAlpha: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Target firing angle. It is converter’s control variable used in power flow.
    It is only applicable for rectifier if continuous tap changer control is
    used. Allowed values are within the range minAlpha&lt;=targetAlpha&lt;=maxAlpha.
    The attribute shall be a positive value.
    '''
    targetGamma: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Target extinction angle. It is converter’s control variable used in power
    flow. It is only applicable for inverter if continuous tap changer control
    is used. Allowed values are within the range minGamma&lt;=targetGamma&lt;=maxGamma.
    The attribute shall be a positive value.
    '''
    targetIdc: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    DC current target value. It is converter’s control variable used in power
    flow. The attribute shall be a positive value.
    '''
    CSCDynamics: Optional[ str | CSCDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CSCDynamics.CSConverter'
        })
    '''
    Current source converter dynamics model used to describe dynamic behaviour
    of this converter.
    '''
@dataclass
class VsConverter(ACDCConverter):
    '''
    DC side of the voltage source converter (VSC).
    '''
    maxModulationIndex: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum quotient between the AC converter voltage (Uc) and DC voltage
    (Ud). A factor typically less than 1. It is converter’s configuration data
    used in power flow.
    '''
    targetPowerFactorPcc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power factor target at the AC side, at point of common coupling. The attribute
    shall be a positive value.
    '''
    targetPWMfactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Magnitude of pulse-modulation factor. The attribute shall be a positive
    value.
    '''
    delta: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Angle between VsConverter.uv and ACDCConverter.uc. It is converter’s state
    variable used in power flow. The attribute shall be a positive value or
    zero.
    '''
    droop: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Droop constant. The pu value is obtained as D [kV/MW] x Sb / Ubdc. The
    attribute shall be a positive value.
    '''
    droopCompensation: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Compensation constant. Used to compensate for voltage drop when controlling
    voltage at a distant bus. The attribute shall be a positive value.
    '''
    maxValveCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum current through a valve. It is converter’s configuration data.
    '''
    pPccControl: Optional[ str | VsPpccControlKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kind of control of real power and/or DC voltage.
    '''
    qPccControl: Optional[ str | VsQpccControlKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kind of reactive power control.
    '''
    qShare: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power sharing factor among parallel converters on Uac control.
    The attribute shall be a positive value or zero.
    '''
    targetPhasePcc: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase target at AC side, at point of common coupling. The attribute shall
    be a positive value.
    '''
    targetQpcc: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power injection target in AC grid, at point of common coupling.
    Load sign convention is used, i.e. positive sign means flow out from a
    node.
    '''
    targetUpcc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage target in AC grid, at point of common coupling. The attribute shall
    be a positive value.
    '''
    uv: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Line-to-line voltage on the valve side of the converter transformer. It
    is converter’s state variable, result from power flow. The attribute shall
    be a positive value.
    '''
    CapabilityCurve: Optional[ str | VsCapabilityCurve ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VsCapabilityCurve.VsConverterDCSides'
        })
    '''
    Capability curve of this converter.
    '''
    VSCDynamics: Optional[ str | VSCDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCDynamics.VsConverter'
        })
    '''
    Voltage source converter dynamics model used to describe dynamic behaviour
    of this converter.
    '''
@dataclass
class Clamp(ConductingEquipment):
    '''
    A Clamp is a galvanic connection at a line segment where other equipment
    is connected. A Clamp does not cut the line segment.
    A Clamp is ConductingEquipment and has one Terminal with an associated
    ConnectivityNode. Any other ConductingEquipment can be connected to the
    Clamp ConnectivityNode.
    '''
    lengthFromTerminal1: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The length to the place where the clamp is located starting from side one
    of the line segment, i.e. the line segment terminal with sequence number
    equal to 1.
    '''
    ACLineSegment: Optional[ str | ACLineSegment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.Clamp'
        })
    '''
    The line segment to which the clamp is connected.
    '''
    ClampAction: Optional[ str | ClampAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ClampAction.Clamp'
        })
    '''
    The clamp action that is performed on the clamp
    '''
    JumperAction: Optional[ str | JumperAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'JumperAction.Clamp'
        })
    '''
    Action taken with this jumper.
    '''
@dataclass
class Conductor(ConductingEquipment):
    '''
    Combination of conducting material with consistent electrical characteristics,
    building a single electrical system, used to carry current between points
    in the power system.
    '''
    length: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Segment length for calculating line section capabilities.
    '''
@dataclass
class ACLineSegment(Conductor):
    '''
    A wire or combination of wires, with consistent electrical characteristics,
    building a single electrical system, used to carry alternating current
    between points in the power system.
    For symmetrical, transposed three phase lines, it is sufficient to use
    attributes of the line segment, which describe impedances and admittances
    for the entire length of the segment. Additionally impedances can be computed
    by using length and associated per length impedances.
    The BaseVoltage at the two ends of ACLineSegments in a Line shall have
    the same BaseVoltage.nominalVoltage. However, boundary lines may have slightly
    different BaseVoltage.nominalVoltages and variation is allowed. Larger
    voltage difference in general requires use of an equivalent branch.
    '''
    b0ch: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) susceptance, uniformly distributed, of the
    entire line section.
    '''
    bch: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) susceptance, uniformly distributed,
    of the entire line section. This value represents the full charging over
    the full length of the line.
    '''
    g0ch: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) conductance, uniformly distributed, of the
    entire line section.
    '''
    gch: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) conductance, uniformly distributed,
    of the entire line section.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series resistance of the entire line section.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series resistance of the entire line section.
    '''
    shortCircuitEndTemperature: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum permitted temperature at the end of SC for the calculation of minimum
    short-circuit currents. Used for short circuit data exchange according
    to IEC 60909.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series reactance of the entire line section.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series reactance of the entire line section.
    '''
    LineGroundingAction: Optional[ str | GroundAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GroundAction.AlongACLineSegment'
        })
    '''
    Ground action involving clamp usage (for the case when the ground is applied
    along the line segment instead of at its terminals).
    '''
    LineJumpingAction: Optional[ str | JumperAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'JumperAction.ACLineSegments'
        })
    '''
    Jumper action involving clamp usage (for the case when the jumper is applied
    along the line segment instead of at its terminals).
    '''
    PerLengthImpedance: Optional[ str | PerLengthImpedance ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PerLengthImpedance.ACLineSegments'
        })
    '''
    Per-length impedance of this line segment.
    '''
    WireSpacingInfo: Optional[ str | WireSpacingInfo ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WireSpacingInfo.ACLineSegment'
        })
    '''
    The wire spacing information that applies to this AC line segment
    '''
@dataclass
class WireSegment(Conductor):
    '''
    A two terminal and power conducting device of negligible impedance and
    length represented as zero impedance device that can be used to connect
    auxiliary equipment to its terminals.
    '''
@dataclass
class Connector(ConductingEquipment):
    '''
    A conductor, or group of conductors, with negligible impedance, that serve
    to connect other conducting equipment within a single substation and are
    modelled with a single logical terminal.
    '''
@dataclass
class BusbarSection(Connector):
    '''
    A conductor, or group of conductors, with negligible impedance, that serve
    to connect other conducting equipment within a single substation.
    Voltage measurements are typically obtained from voltage transformers that
    are connected to busbar sections. A bus bar section may have many physical
    terminals but for analysis is modelled with exactly one logical terminal.
    '''
    ipMax: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum allowable peak short-circuit current of busbar (Ipmax in IEC 60909-0).
    Mechanical limit of the busbar in the substation itself. Used for short
    circuit data exchange according to IEC 60909.
    '''
    VoltageControlZone: Optional[ str | VoltageControlZone ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VoltageControlZone.BusbarSection'
        })
    '''
    A VoltageControlZone is controlled by a designated BusbarSection.
    '''
@dataclass
class Junction(Connector):
    '''
    A point where one or more conducting equipments are connected with zero
    resistance.
    '''
@dataclass
class EarthFaultCompensator(ConductingEquipment):
    '''
    A conducting equipment used to represent a connection to ground which is
    typically used to compensate earth faults. An earth fault compensator device
    modelled with a single terminal implies a second terminal solidly connected
    to ground. If two terminals are modelled, the ground is not assumed and
    normal connection rules apply.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nominal resistance of device.
    '''
@dataclass
class GroundingImpedance(EarthFaultCompensator):
    '''
    A fixed impedance device used for grounding.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactance of device.
    '''
@dataclass
class PetersenCoil(EarthFaultCompensator):
    '''
    A variable impedance device normally used to offset line charging during
    single line faults in an ungrounded section of network.
    '''
    mode: Optional[ str | PetersenCoilModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The mode of operation of the Petersen coil.
    '''
    nominalU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The nominal voltage for which the coil is designed.
    '''
    offsetCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The offset current that the Petersen coil controller is operating from
    the resonant point. This is normally a fixed amount for which the controller
    is configured and could be positive or negative. Typically 0 to 60 A depending
    on voltage and resonance conditions.
    '''
    positionCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The control current used to control the Petersen coil also known as the
    position current. Typically in the range of 20 mA to 200 mA.
    '''
    xGroundMax: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum reactance.
    '''
    xGroundMin: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum reactance.
    '''
    xGroundNominal: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The nominal reactance. This is the operating point (normally over compensation)
    that is defined based on the resonance point in the healthy network condition.
    The impedance is calculated based on nominal voltage divided by position
    current.
    '''
@dataclass
class EnergyConnection(ConductingEquipment):
    '''
    A connection of energy generation or consumption on the power system model.
    '''
@dataclass
class EnergyConsumer(EnergyConnection):
    '''
    Generic user of energy - a point of consumption on the power system model.
    EnergyConsumer.pfixed, .qfixed, .pfixedPct and .qfixedPct have meaning
    only if there is no LoadResponseCharacteristic associated with EnergyConsumer
    or if LoadResponseCharacteristic.exponentModel is set to False.
    '''
    customerCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number of individual customers represented by this demand.
    '''
    grounded: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Used for Yn and Zn connections. True if the neutral is solidly grounded.
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power of the load. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''
    pfixed: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power of the load that is a fixed quantity and does not vary as
    load group value varies. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    '''
    pfixedPct: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fixed active power as a percentage of load group fixed active power. Used
    to represent the time-varying components. Load sign convention is used,
    i.e. positive sign means flow out from a node.
    '''
    phaseConnection: Optional[ str | PhaseShuntConnectionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The type of phase connection, such as wye or delta.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power of the load. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    For voltage dependent loads the value is at rated voltage.
    Starting value for a steady state solution.
    '''
    qfixed: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power of the load that is a fixed quantity and does not vary as
    load group value varies. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    '''
    qfixedPct: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fixed reactive power as a percentage of load group fixed reactive power.
    Used to represent the time-varying components. Load sign convention is
    used, i.e. positive sign means flow out from a node.
    '''
    EnergyConsumerAction: Optional[ str | EnergyConsumerAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EnergyConsumerAction.EnergyConsumer'
        })
    '''
    The energy consumer action that is performed on the energy consumer
    '''
    LoadDynamics: Optional[ str | LoadDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'LoadDynamics.EnergyConsumer'
        })
    '''
    Load dynamics model used to describe dynamic behaviour of this energy consumer.
    '''
    LoadResponse: Optional[ str | LoadResponseCharacteristic ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'LoadResponseCharacteristic.EnergyConsumer'
        })
    '''
    The load response characteristic of this load. If missing, this load is
    assumed to be constant power.
    '''
    PowerCutZone: Optional[ str | PowerCutZone ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerCutZone.EnergyConsumers'
        })
    '''
    The energy consumer is assigned to this power cut zone.
    '''
@dataclass
class ConformLoad(EnergyConsumer):
    '''
    ConformLoad represent loads that follow a daily load change pattern where
    the pattern can be used to scale the load with a system load.
    '''
    LoadGroup: Optional[ str | ConformLoadGroup ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ConformLoadGroup.EnergyConsumers'
        })
    '''
    Group of this ConformLoad.
    '''
@dataclass
class NonConformLoad(EnergyConsumer):
    '''
    NonConformLoad represents loads that do not follow a daily load change
    pattern and whose changes are not correlated with the daily load change
    pattern.
    '''
    LoadGroup: Optional[ str | NonConformLoadGroup ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NonConformLoadGroup.EnergyConsumers'
        })
    '''
    Group of this ConformLoad.
    '''
@dataclass
class StationSupply(EnergyConsumer):
    '''
    Station supply with load derived from the station output.
    '''
@dataclass
class EnergySource(EnergyConnection):
    '''
    A generic equivalent for an energy supplier on a transmission or distribution
    voltage level.
    '''
    activePower: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High voltage source active injection. Load sign convention is used, i.e.
    positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    nominalVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase-to-phase nominal voltage.
    '''
    pMax: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    This is the maximum active power that can be produced by the source. Load
    sign convention is used, i.e. positive sign means flow out from a TopologicalNode
    (bus) into the conducting equipment.
    '''
    pMin: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    This is the minimum active power that can be produced by the source. Load
    sign convention is used, i.e. positive sign means flow out from a TopologicalNode
    (bus) into the conducting equipment.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence Thevenin resistance.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence Thevenin resistance.
    '''
    reactivePower: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High voltage source reactive injection. Load sign convention is used, i.e.
    positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    rn: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence Thevenin resistance.
    '''
    voltageAngle: Optional[ float | AngleRadians ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase angle of a-phase open circuit used when voltage characteristics need
    to be imposed at the node associated with the terminal of the energy source,
    such as when voltages and angles from the transmission level are used as
    input to the distribution network. The attribute shall be a positive value
    or zero.
    '''
    voltageMagnitude: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase-to-phase open circuit voltage magnitude used when voltage characteristics
    need to be imposed at the node associated with the terminal of the energy
    source, such as when voltages and angles from the transmission level are
    used as input to the distribution network. The attribute shall be a positive
    value or zero.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence Thevenin reactance.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence Thevenin reactance.
    '''
    xn: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence Thevenin reactance.
    '''
    EnergySchedulingType: Optional[ str | EnergySchedulingType ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EnergySchedulingType.EnergySource'
        })
    '''
    Energy Scheduling Type of an Energy Source.
    '''
    EnergySourceAction: Optional[ str | EnergySourceAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EnergySourceAction.EnergySource'
        })
    '''
    Action taken with this energy source.
    '''
@dataclass
class RegulatingCondEq(EnergyConnection):
    '''
    A type of conducting equipment that can regulate a quantity (i.e. voltage
    or flow) at a specific point in the network.
    '''
    controlEnabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the regulation status of the equipment. True is regulating, false
    is not regulating.
    '''
    RegulatingControl: Optional[ str | RegulatingControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RegulatingControl.RegulatingCondEq'
        })
    '''
    The regulating control scheme in which this equipment participates.
    '''
@dataclass
class ExternalNetworkInjection(RegulatingCondEq):
    '''
    This class represents the external network and it is used for IEC 60909
    calculations.
    '''
    ikSecond: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates whether initial symmetrical short-circuit current and power have
    been calculated according to IEC (Ik"). Used only if short circuit calculations
    are done according to superposition method.
    '''
    maxR0ToX0Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum ratio of zero sequence resistance of Network Feeder to its zero
    sequence reactance (R(0)/X(0) max). Used for short circuit data exchange
    according to IEC 60909.
    '''
    maxR1ToX1Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum ratio of positive sequence resistance of Network Feeder to its
    positive sequence reactance (R(1)/X(1) max). Used for short circuit data
    exchange according to IEC 60909.
    '''
    maxZ0ToZ1Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum ratio of zero sequence impedance to its positive sequence impedance
    (Z(0)/Z(1) max). Used for short circuit data exchange according to IEC
    60909.
    '''
    minR0ToX0Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates whether initial symmetrical short-circuit current and power have
    been calculated according to IEC (Ik"). Used for short circuit data exchange
    according to IEC 6090.
    '''
    minR1ToX1Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum ratio of positive sequence resistance of Network Feeder to its
    positive sequence reactance (R(1)/X(1) min). Used for short circuit data
    exchange according to IEC 60909.
    '''
    minZ0ToZ1Ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum ratio of zero sequence impedance to its positive sequence impedance
    (Z(0)/Z(1) min). Used for short circuit data exchange according to IEC
    60909.
    '''
    referencePriority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Priority of unit for use as powerflow voltage phase angle reference bus
    selection. 0 = don t care (default) 1 = highest priority. 2 is less than
    1 and so on.
    '''
    governorSCD: Optional[ float | ActivePowerPerFrequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power Frequency Bias. This is the change in power injection divided by
    the change in frequency and negated. A positive value of the power frequency
    bias provides additional power injection upon a drop in frequency.
    '''
    maxInitialSymShCCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum initial symmetrical short-circuit currents (Ik" max) in A (Ik"
    = Sk"/(SQRT(3) Un)). Used for short circuit data exchange according to
    IEC 60909.
    '''
    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum active power of the injection.
    '''
    maxQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive power limit. It is used for modelling of infeed for load
    flow exchange and not for short circuit modelling.
    '''
    minInitialSymShCCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum initial symmetrical short-circuit currents (Ik" min) in A (Ik"
    = Sk"/(SQRT(3) Un)). Used for short circuit data exchange according to
    IEC 60909.
    '''
    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum active power of the injection.
    '''
    minQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum reactive power limit. It is used for modelling of infeed for load
    flow exchange and not for short circuit modelling.
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for steady state solutions.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for steady state solutions.
    '''
    voltageFactor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage factor in pu, which was used to calculate short-circuit current
    Ik" and power Sk". Used only if short circuit calculations are done according
    to superposition method.
    '''
@dataclass
class FrequencyConverter(RegulatingCondEq):
    '''
    A device to convert from one frequency to another (e.g., frequency F1 to
    F2) comprises a pair of FrequencyConverter instances. One converts from
    F1 to DC, the other converts the DC to F2.
    '''
    frequency: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Frequency on the AC side.
    '''
    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum active power on the DC side at which the frequency converter
    should operate.
    '''
    maxU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum voltage on the DC side at which the frequency converter should
    operate.
    '''
    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum active power on the DC side at which the frequency converter
    should operate.
    '''
    minU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum voltage on the DC side at which the frequency converter should
    operate.
    '''
@dataclass
class PowerElectronicsConnection(RegulatingCondEq):
    '''
    A connection to the AC network for energy production or consumption that
    uses power electronics rather than rotating machines.
    '''
    maxIFault: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum fault current this device will contribute, in per-unit of rated
    current, before the converter protection will trip or bypass.
    '''
    maxQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive power limit. This is the maximum (nameplate) limit for
    the unit.
    '''
    minQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum reactive power limit for the unit. This is the minimum (nameplate)
    limit for the unit.
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Equivalent resistance (RG) of generator. RG is considered for the calculation
    of all currents, except for the calculation of the peak current ip. Used
    for short circuit data exchange according to IEC 60909.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence resistance of the synchronous machine.
    '''
    ratedS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nameplate apparent power rating for the unit.
    The attribute shall have a positive value.
    '''
    ratedU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated voltage (nameplate data, Ur in IEC 60909-0). It is primarily used
    for short circuit data exchange according to IEC 60909.
    The attribute shall be a positive value.
    '''
    rn: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence Thevenin resistance.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence Thevenin reactance.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence Thevenin reactance.
    '''
    xn: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence Thevenin reactance.
    '''
    WindTurbineType3or4Dynamics: Optional[ str | WindTurbineType3or4Dynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3or4Dynamics.PowerElectronicsConnection'
        })
    '''
    The wind turbine type 3 or type 4 dynamics model associated with this power
    electronics connection.
    '''
@dataclass
class RotatingMachine(RegulatingCondEq):
    '''
    A rotating machine which may be used as a generator or motor.
    '''
    ratedPowerFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power factor (nameplate data). It is primarily used for short circuit data
    exchange according to IEC 60909. The attribute cannot be a negative value.
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''
    ratedS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nameplate apparent power rating for the unit.
    The attribute shall have a positive value.
    '''
    ratedU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated voltage (nameplate data, Ur in IEC 60909-0). It is primarily used
    for short circuit data exchange according to IEC 60909.
    The attribute shall be a positive value.
    '''
    GeneratingUnit: Optional[ str | GeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GeneratingUnit.RotatingMachine'
        })
    '''
    A synchronous machine may operate as a generator and as such becomes a
    member of a generating unit.
    '''
    HydroPump: Optional[ str | HydroPump ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HydroPump.RotatingMachine'
        })
    '''
    The synchronous machine drives the turbine which moves the water from a
    low elevation to a higher elevation. The direction of machine rotation
    for pumping may or may not be the same as for generating.
    '''
@dataclass
class AsynchronousMachine(RotatingMachine):
    '''
    A rotating machine whose shaft rotates asynchronously with the electrical
    field. Also known as an induction machine with no external connection to
    the rotor windings, e.g. squirrel-cage induction machine.
    '''
    converterFedDrive: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates whether the machine is a converter fed drive. Used for short
    circuit data exchange according to IEC 60909.
    '''
    iaIrRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ratio of locked-rotor current to the rated current of the motor (Ia/Ir).
    Used for short circuit data exchange according to IEC 60909.
    '''
    polePairNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number of pole pairs of stator. Used for short circuit data exchange according
    to IEC 60909.
    '''
    reversible: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates for converter drive motors if the power can be reversible. Used
    for short circuit data exchange according to IEC 60909.
    '''
    rxLockedRotorRatio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Locked rotor ratio (R/X). Used for short circuit data exchange according
    to IEC 60909.
    '''
    asynchronousMachineType: Optional[ str | AsynchronousMachineKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates the type of Asynchronous Machine (motor or generator).
    '''
    efficiency: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Efficiency of the asynchronous machine at nominal operation as a percentage.
    Indicator for converter drive motors. Used for short circuit data exchange
    according to IEC 60909.
    '''
    nominalFrequency: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nameplate data indicates if the machine is 50 Hz or 60 Hz.
    '''
    nominalSpeed: Optional[ float | RotationSpeed ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Nameplate data. Depends on the slip and number of pole pairs.
    '''
    ratedMechanicalPower: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated mechanical power (Pr in IEC 60909-0). Used for short circuit data
    exchange according to IEC 60909.
    '''
    rr1: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damper 1 winding resistance.
    '''
    rr2: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damper 2 winding resistance.
    '''
    tpo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient rotor time constant (greater than tppo).
    '''
    tppo: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Sub-transient rotor time constant (greater than 0).
    '''
    xlr1: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damper 1 winding leakage reactance.
    '''
    xlr2: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Damper 2 winding leakage reactance.
    '''
    xm: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Magnetizing reactance.
    '''
    xp: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient reactance (unsaturated) (greater than or equal to xpp).
    '''
    xpp: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Sub-transient reactance (unsaturated).
    '''
    xs: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Synchronous reactance (greater than xp).
    '''
    AsynchronousMachineDynamics: Optional[ str | AsynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AsynchronousMachineDynamics.AsynchronousMachine'
        })
    '''
    Asynchronous machine dynamics model used to describe dynamic behaviour
    of this asynchronous machine.
    '''
@dataclass
class SynchronousMachine(RotatingMachine):
    '''
    An electromechanical device that operates with shaft rotating synchronously
    with the network. It is a single machine operating either as a generator
    or synchronous condenser or pump.
    '''
    coolantCondition: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Temperature or pressure of coolant medium.
    '''
    earthing: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates whether or not the generator is earthed. Used for short circuit
    data exchange according to IEC 60909.
    '''
    mu: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Factor to calculate the breaking current (Section 4.5.2.1 in IEC 60909-0).
    Used only for single fed short circuit on a generator (Section 4.3.4.2.
    in IEC 60909-0).
    '''
    referencePriority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Priority of unit for use as powerflow voltage phase angle reference bus
    selection. 0 = don t care (default) 1 = highest priority. 2 is less than
    1 and so on.
    '''
    aVRToManualLag: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time delay required when switching from Automatic Voltage Regulation (AVR)
    to Manual for a lagging MVAr violation.
    '''
    aVRToManualLead: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time delay required when switching from Automatic Voltage Regulation (AVR)
    to Manual for a leading MVAr violation.
    '''
    baseQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Default base reactive power value. This value represents the initial reactive
    power that can be used by any application function.
    '''
    condenserP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power consumed when in condenser mode operation.
    '''
    coolantType: Optional[ str | CoolantType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Method of cooling the machine.
    '''
    earthingStarPointR: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Generator star point earthing resistance (Re). Used for short circuit data
    exchange according to IEC 60909.
    '''
    earthingStarPointX: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Generator star point earthing reactance (Xe). Used for short circuit data
    exchange according to IEC 60909.
    '''
    ikk: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steady-state short-circuit current (in A for the profile) of generator
    with compound excitation during 3-phase short circuit.
    - Ikk=0: Generator with no compound excitation.
    - Ikk&lt;&gt;0: Generator with compound excitation.
    Ikk is used to calculate the minimum steady-state short-circuit current
    for generators with compound excitation.
    (4.6.1.2 in IEC 60909-0:2001).
    Used only for single fed short circuit on a generator. (4.3.4.2. in IEC
    60909-0:2001).
    '''
    manualToAVR: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time delay required when switching from Manual to Automatic Voltage Regulation.
    This value is used in the accelerating power reference frame for powerflow
    solutions.
    '''
    maxQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive power limit. This is the maximum (nameplate) limit for
    the unit.
    '''
    maxU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage limit for the unit.
    '''
    minQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum reactive power limit for the unit.
    '''
    minU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage limit for the unit.
    '''
    operatingMode: Optional[ str | SynchronousMachineOperatingMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current mode of operation.
    '''
    qPercent: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Part of the coordinated reactive control that comes from this machine.
    The attribute is used as a participation factor not necessarily summing
    up to 100% for the participating devices in the control.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Equivalent resistance (RG) of generator. RG is considered for the calculation
    of all currents, except for the calculation of the peak current ip. Used
    for short circuit data exchange according to IEC 60909.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence resistance of the synchronous machine.
    '''
    r2: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence resistance.
    '''
    satDirectSubtransX: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axis subtransient reactance saturated, also known as Xd"sat.
    '''
    satDirectSyncX: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direct-axes saturated synchronous reactance (xdsat); reciprocal of short-circuit
    ration. Used for short circuit data exchange, only for single fed short
    circuit on a generator. (4.3.4.2. in IEC 60909-0:2001).
    '''
    satDirectTransX: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Saturated Direct-axis transient reactance. The attribute is primarily used
    for short circuit calculations according to ANSI.
    '''
    shortCircuitRotorType: Optional[ str | ShortCircuitRotorKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of rotor, used by short circuit applications, only for single fed
    short circuit according to IEC 60909.
    '''
    type: Optional[ str | SynchronousMachineKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Modes that this synchronous machine can operate in.
    '''
    voltageRegulationRange: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Range of generator voltage regulation (PG in IEC 60909-0) used for calculation
    of the impedance correction factor KG defined in IEC 60909-0.
    This attribute is used to describe the operating voltage of the generating
    unit.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence reactance of the synchronous machine.
    '''
    x2: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence reactance.
    '''
    InitialReactiveCapabilityCurve: Optional[ str | ReactiveCapabilityCurve ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ReactiveCapabilityCurve.InitiallyUsedBySynchronousMachines'
        })
    '''
    The default reactive capability curve for use by a synchronous machine.
    '''
    SynchronousMachineDynamics: Optional[ str | SynchronousMachineDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachineDynamics.SynchronousMachine'
        })
    '''
    Synchronous machine dynamics model used to describe dynamic behaviour of
    this synchronous machine.
    '''
@dataclass
class ShuntCompensator(RegulatingCondEq):
    '''
    A shunt capacitor or reactor or switchable bank of shunt capacitors or
    reactors. A section of a shunt compensator is an individual capacitor or
    reactor. A negative value for bPerSection indicates that the compensator
    is a reactor. ShuntCompensator is a single terminal device. Ground is implied.
    '''
    grounded: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Used for Yn and Zn connections. True if the neutral is solidly grounded.
    '''
    maximumSections: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum number of sections that may be switched in.
    '''
    normalSections: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The normal number of sections switched in. The value shall be between zero
    and ShuntCompensator.maximumSections.
    '''
    sections: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Shunt compensator sections in use. Starting value for steady state solution.
    The attribute shall be a positive value or zero. Non integer values are
    allowed to support continuous variables. The reasons for continuous value
    are to support study cases where no discrete shunt compensators has yet
    been designed, a solutions where a narrow voltage band force the sections
    to oscillate or accommodate for a continuous solution as input.
    For LinearShuntConpensator the value shall be between zero and ShuntCompensator.maximumSections.
    At value zero the shunt compensator conductance and admittance is zero.
    Linear interpolation of conductance and admittance between the previous
    and next integer section is applied in case of non-integer values.
    For NonlinearShuntCompensator-s shall only be set to one of the NonlinearShuntCompenstorPoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPoint-s.
    '''
    switchOnCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The switch on count since the capacitor count was last reset or initialized.
    '''
    switchOnDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date and time when the capacitor bank was last switched on.
    '''
    aVRDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    An automatic voltage regulation delay (AVRDelay) which is the time delay
    from a change in voltage to when the capacitor is allowed to change state.
    This filters out temporary changes in voltage.
    '''
    nomU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The voltage at which the nominal reactive power may be calculated. This
    should normally be within 10% of the voltage at which the capacitor is
    connected to the network.
    '''
    phaseConnection: Optional[ str | PhaseShuntConnectionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The type of phase connection, such as wye or delta.
    '''
    voltageSensitivity: Optional[ float | VoltagePerReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage sensitivity required for the device to regulate the bus voltage,
    in voltage/reactive power.
    '''
    ShuntCompensatorAction: Optional[ str | ShuntCompensatorAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ShuntCompensatorAction.ShuntCompensator'
        })
    '''
    The shunt compensator action that is performed on the shunt compensator
    '''
@dataclass
class LinearShuntCompensator(ShuntCompensator):
    '''
    A linear shunt compensator has banks or sections with equal admittance
    values.
    '''
    b0PerSection: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) susceptance per section.
    '''
    bPerSection: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) susceptance per section.
    '''
    g0PerSection: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) conductance per section.
    '''
    gPerSection: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) conductance per section.
    '''
@dataclass
class NonlinearShuntCompensator(ShuntCompensator):
    '''
    A non linear shunt compensator has bank or section admittance values that
    differ. The attributes g, b, g0 and b0 of the associated NonlinearShuntCompensatorPoint
    describe the total conductance and admittance of a NonlinearShuntCompensatorPoint
    at a section number specified by NonlinearShuntCompensatorPoint.sectionNumber.
    '''
@dataclass
class StaticVarCompensator(RegulatingCondEq):
    '''
    A facility for providing variable and controllable shunt reactive power.
    The SVC typically consists of a stepdown transformer, filter, thyristor-controlled
    reactor, and thyristor-switched capacitor arms.
    The SVC may operate in fixed MVar output mode or in voltage control mode.
    When in voltage control mode, the output of the SVC will be proportional
    to the deviation of voltage at the controlled bus from the voltage setpoint.
    The SVC characteristic slope defines the proportion. If the voltage at
    the controlled bus is equal to the voltage setpoint, the SVC MVar output
    is zero.
    '''
    capacitiveRating: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Capacitive reactance at maximum capacitive reactive power. Shall always
    be positive.
    '''
    inductiveRating: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inductive reactance at maximum inductive reactive power. Shall always be
    negative.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow out from a node.
    Starting value for a steady state solution.
    '''
    slope: Optional[ float | VoltagePerReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The characteristics slope of an SVC defines how the reactive power output
    changes in proportion to the difference between the regulated bus voltage
    and the voltage setpoint.
    The attribute shall be a positive value or zero.
    '''
    sVCControlMode: Optional[ str | SVCControlMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    SVC control mode.
    '''
    voltageSetPoint: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactive power output of the SVC is proportional to the difference
    between the voltage at the regulated bus and the voltage setpoint. When
    the regulated bus voltage is equal to the voltage setpoint, the reactive
    power output is zero.
    '''
    StaticVarCompensatorDynamics: Optional[ str | StaticVarCompensatorDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StaticVarCompensatorDynamics.StaticVarCompensator'
        })
    '''
    Static Var Compensator dynamics model used to describe dynamic behaviour
    of this Static Var Compensator.
    '''
@dataclass
class EquivalentEquipment(ConductingEquipment):
    '''
    The class represents equivalent objects that are the result of a network
    reduction. The class is the base for equivalent objects of different types.
    '''
    EquivalentNetwork: Optional[ str | EquivalentNetwork ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EquivalentNetwork.EquivalentEquipments'
        })
    '''
    The equivalent where the reduced model belongs.
    '''
@dataclass
class EquivalentBranch(EquivalentEquipment):
    '''
    The class represents equivalent branches. In cases where a transformer
    phase shift is modelled and the EquivalentBranch is spanning the same nodes,
    the impedance quantities for the EquivalentBranch shall consider the needed
    phase shift.
    '''
    negativeR12: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence series resistance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''
    negativeR21: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence series resistance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''
    negativeX12: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence series reactance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''
    negativeX21: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence series reactance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    Usage: EquivalentBranch is a result of network reduction prior to the data
    exchange.
    '''
    positiveR12: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series resistance from terminal sequence 1 to terminal
    sequence 2 . Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''
    positiveR21: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series resistance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''
    positiveX12: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series reactance from terminal sequence 1 to terminal
    sequence 2. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''
    positiveX21: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series reactance from terminal sequence 2 to terminal
    sequence 1. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series resistance of the reduced branch.
    '''
    r21: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance from terminal sequence 2 to terminal sequence 1 .Used for steady
    state power flow. This attribute is optional and represent unbalanced network
    such as off-nominal phase shifter. If only EquivalentBranch.r is given,
    then EquivalentBranch.r21 is assumed equal to EquivalentBranch.r.
    Usage rule : EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series reactance of the reduced branch.
    '''
    x21: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactance from terminal sequence 2 to terminal sequence 1. Used for steady
    state power flow. This attribute is optional and represents an unbalanced
    network such as off-nominal phase shifter. If only EquivalentBranch.x is
    given, then EquivalentBranch.x21 is assumed equal to EquivalentBranch.x.
    Usage rule: EquivalentBranch is a result of network reduction prior to
    the data exchange.
    '''
    zeroR12: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series resistance from terminal sequence 1 to terminal sequence
    2. Used for short circuit data exchange according to IEC 60909.
    EquivalentBranch is a result of network reduction prior to the data exchange.
    '''
    zeroR21: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series resistance from terminal sequence 2 to terminal sequence
    1. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''
    zeroX12: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series reactance from terminal sequence 1 to terminal sequence
    2. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''
    zeroX21: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series reactance from terminal sequence 2 to terminal sequence
    1. Used for short circuit data exchange according to IEC 60909.
    Usage : EquivalentBranch is a result of network reduction prior to the
    data exchange.
    '''
@dataclass
class EquivalentInjection(EquivalentEquipment):
    '''
    This class represents equivalent injections (generation or load). Voltage
    regulation is allowed only at the point of connection.
    '''
    regulationCapability: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies whether or not the EquivalentInjection has the capability to
    regulate the local voltage. If true the EquivalentInjection can regulate.
    If false the EquivalentInjection cannot regulate. ReactiveCapabilityCurve
    can only be associated with EquivalentInjection if the flag is true.
    '''
    regulationStatus: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the regulation status of the EquivalentInjection. True is regulating.
    False is not regulating.
    '''
    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum active power of the injection.
    '''
    maxQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive power of the injection. Used for modelling of infeed for
    load flow exchange. Not used for short circuit modelling. If maxQ and minQ
    are not used ReactiveCapabilityCurve can be used.
    '''
    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum active power of the injection.
    '''
    minQ: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum reactive power of the injection. Used for modelling of infeed for
    load flow exchange. Not used for short circuit modelling. If maxQ and minQ
    are not used ReactiveCapabilityCurve can be used.
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Equivalent active power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Equivalent reactive power injection. Load sign convention is used, i.e.
    positive sign means flow out from a node.
    Starting value for steady state solutions.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence resistance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence resistance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''
    r2: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence resistance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''
    regulationTarget: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The target voltage for voltage regulation. The attribute shall be a positive
    value.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence reactance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence reactance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''
    x2: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Negative sequence reactance. Used to represent Extended-Ward (IEC 60909).
    Usage : Extended-Ward is a result of network reduction prior to the data
    exchange.
    '''
    ReactiveCapabilityCurve: Optional[ str | ReactiveCapabilityCurve ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ReactiveCapabilityCurve.EquivalentInjection'
        })
    '''
    The reactive capability curve used by this equivalent injection.
    '''
@dataclass
class EquivalentShunt(EquivalentEquipment):
    '''
    The class represents equivalent shunts.
    '''
    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt susceptance.
    '''
    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt conductance.
    '''
@dataclass
class Ground(ConductingEquipment):
    '''
    A point where the system is grounded used for connecting conducting equipment
    to ground. The power system model can have any number of grounds.
    '''
    GroundAction: Optional[ str | GroundAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GroundAction.Ground'
        })
    '''
    Action taken with this ground.
    '''
@dataclass
class PowerTransformer(ConductingEquipment):
    '''
    An electrical device consisting of two or more coupled windings, with or
    without a magnetic core, for introducing mutual coupling between electric
    circuits. Transformers can be used to control voltage and phase shift (active
    power flow).
    A power transformer may be composed of separate transformer tanks that
    need not be identical.
    A power transformer can be modelled with or without tanks and is intended
    for use in both balanced and unbalanced representations. A power transformer
    typically has two terminals, but may have one (grounding), three or more
    terminals.
    The inherited association ConductingEquipment.BaseVoltage should not be
    used. The association from TransformerEnd to BaseVoltage should be used
    instead.
    '''
    isPartOfGeneratorUnit: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates whether the machine is part of a power station unit. Used for
    short circuit data exchange according to IEC 60909. It has an impact on
    how the correction factors are calculated for transformers, since the transformer
    is not necessarily part of a synchronous machine and generating unit. It
    is not always possible to derive this information from the model. This
    is why the attribute is necessary.
    '''
    operationalValuesConsidered: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    It is used to define if the data (other attributes related to short circuit
    data exchange) defines long term operational conditions or not. Used for
    short circuit data exchange according to IEC 60909.
    '''
    vectorGroup: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Vector group of the transformer for protective relaying, e.g., Dyn1. For
    unbalanced transformers, this may not be simply determined from the constituent
    winding connections and phase angle displacements.
    The vectorGroup string consists of the following components in the order
    listed: high voltage winding connection, mid voltage winding connection
    (for three winding transformers), phase displacement clock number from
    0 to 11, low voltage winding connection
    phase displacement clock number from 0 to 11. The winding connections are
    D (delta), Y (wye), YN (wye with neutral), Z (zigzag), ZN (zigzag with
    neutral), A (auto transformer). Upper case means the high voltage, lower
    case mid or low. The high voltage winding always has clock position 0 and
    is not included in the vector group string. Some examples: YNy0 (two winding
    wye to wye with no phase displacement), YNd11 (two winding wye to delta
    with 330 degrees phase displacement), YNyn0d5 (three winding transformer
    wye with neutral high voltage, wye with neutral mid voltage and no phase
    displacement, delta low voltage with 150 degrees displacement).
    Phase displacement is defined as the angular difference between the phasors
    representing the voltages between the neutral point (real or imaginary)
    and the corresponding terminals of two windings, a positive sequence voltage
    system being applied to the high-voltage terminals, following each other
    in alphabetical sequence if they are lettered, or in numerical sequence
    if they are numbered: the phasors are assumed to rotate in a counter-clockwise
    sense.
    '''
    beforeShCircuitHighestOperatingCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The highest operating current (Ib in IEC 60909-0) before short circuit
    (depends on network configuration and relevant reliability philosophy).
    It is used for calculation of the impedance correction factor KT defined
    in IEC 60909-0.
    '''
    beforeShCircuitHighestOperatingVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The highest operating voltage (Ub in IEC 60909-0) before short circuit.
    It is used for calculation of the impedance correction factor KT defined
    in IEC 60909-0. This is worst case voltage on the low side winding (3.7.1
    of IEC 60909:2001). Used to define operating conditions.
    '''
    beforeShortCircuitAnglePf: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The angle of power factor before short circuit (phib in IEC 60909-0). It
    is used for calculation of the impedance correction factor KT defined in
    IEC 60909-0. This is the worst case power factor. Used to define operating
    conditions.
    '''
    highSideMinOperatingU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum operating voltage (uQmin in IEC 60909-0) at the high voltage
    side (Q side) of the unit transformer of the power station unit. A value
    well established from long-term operating experience of the system. It
    is used for calculation of the impedance correction factor KG defined in
    IEC 60909-0.
    '''
@dataclass
class SeriesCompensator(ConductingEquipment):
    '''
    A Series Compensator is a series capacitor or reactor or an AC transmission
    line without charging susceptance. It is a two terminal device.
    '''
    varistorPresent: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Describe if a metal oxide varistor (mov) for over voltage protection is
    configured in parallel with the series compensator. It is used for short
    circuit calculations.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence resistance.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence resistance.
    '''
    varistorRatedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum current the varistor is designed to handle at specified duration.
    It is used for short circuit calculations and exchanged only if SeriesCompensator.varistorPresent
    is true.
    The attribute shall be a positive value.
    '''
    varistorVoltageThreshold: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The dc voltage at which the varistor starts conducting. It is used for
    short circuit calculations and exchanged only if SeriesCompensator.varistorPresent
    is true.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence reactance.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence reactance.
    '''
@dataclass
class Switch(ConductingEquipment):
    '''
    A generic device designed to close, or open, or both, one or more electric
    circuits. All switches are two terminal devices including grounding switches.
    The ACDCTerminal.connected at the two sides of the switch shall not be
    considered for assessing switch connectivity, i.e. only Switch.open, .normalOpen
    and .locked are relevant.
    '''
    locked: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If true, the switch is locked. The resulting switch state is a combination
    of locked and Switch.open attributes as follows:
    <ul>
    <li>locked=true and Switch.open=true. The resulting state is open and locked;</li>
    <li>locked=false and Switch.open=true. The resulting state is open;</li>
    <li>locked=false and Switch.open=false. The resulting state is closed.</li>
    </ul>
    '''
    normalOpen: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The attribute is used in cases when no Measurement for the status value
    is present. If the Switch has a status measurement the Discrete.normalValue
    is expected to match with the Switch.normalOpen.
    '''
    open: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The attribute tells if the switch is considered open when used as input
    to topology processing.
    '''
    retained: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Branch is retained in the topological solution. The flow through retained
    switches will normally be calculated in power flow.
    '''
    switchOnCount: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The switch on count since the switch was last reset or initialized.
    '''
    switchOnDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date and time when the switch was last switched on.
    '''
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum continuous current carrying capacity in amps governed by the
    device material and construction.
    The attribute shall be a positive value.
    '''
    CompositeSwitch: Optional[ str | CompositeSwitch ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CompositeSwitch.Switches'
        })
    '''
    Composite switch to which this Switch belongs.
    '''
    SwitchAction: Optional[ str | SwitchAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SwitchAction.OperatedSwitch'
        })
    '''
    Action changing status of this switch.
    '''
@dataclass
class Cut(Switch):
    '''
    A cut separates a line segment into two parts. The cut appears as a switch
    inserted between these two parts and connects them together. As the cut
    is normally open there is no galvanic connection between the two line segment
    parts. But it is possible to close the cut to get galvanic connection.
    The cut terminals are oriented towards the line segment terminals with
    the same sequence number. Hence the cut terminal with sequence number equal
    to 1 is oriented to the line segment's terminal with sequence number equal
    to 1.
    The cut terminals also act as connection points for jumpers and other equipment,
    e.g. a mobile generator. To enable this, connectivity nodes are placed
    at the cut terminals. Once the connectivity nodes are in place any conducting
    equipment can be connected at them.
    '''
    lengthFromTerminal1: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The length to the place where the cut is located starting from side one
    of the cut line segment, i.e. the line segment Terminal with sequenceNumber
    equal to 1.
    '''
    ACLineSegment: Optional[ str | ACLineSegment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ACLineSegment.Cut'
        })
    '''
    The line segment to which the cut is applied.
    '''
    CutAction: Optional[ str | CutAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CutAction.Cut'
        })
    '''
    Action taken with this cut.
    '''
@dataclass
class Disconnector(Switch):
    '''
    A manually operated or motor operated mechanical switching device used
    for changing the connections in a circuit, or for isolating a circuit or
    equipment from a source of power. It is required to open or close circuits
    when negligible current is broken or made.
    '''
@dataclass
class Fuse(Switch):
    '''
    An overcurrent protective device with a circuit opening fusible part that
    is heated and severed by the passage of overcurrent through it. A fuse
    is considered a switching device because it breaks current.
    '''
@dataclass
class GroundDisconnector(Switch):
    '''
    A manually operated or motor operated mechanical switching device used
    for isolating a circuit or equipment from ground.
    '''
@dataclass
class Jumper(Switch):
    '''
    A short section of conductor with negligible impedance which can be manually
    removed and replaced if the circuit is de-energized. Note that zero-impedance
    branches can potentially be modelled by other equipment types.
    '''
    JumperAction: Optional[ str | JumperAction ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'JumperAction.Jumper'
        })
    '''
    Action taken with this jumper.
    '''
@dataclass
class ProtectedSwitch(Switch):
    '''
    A ProtectedSwitch is a switching device that can be operated by ProtectionEquipment.
    '''
    breakingCapacity: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum fault current a breaking device can break safely under prescribed
    conditions of use.
    '''
@dataclass
class Breaker(ProtectedSwitch):
    '''
    A mechanical switching device capable of making, carrying, and breaking
    currents under normal circuit conditions and also making, carrying for
    a specified time, and breaking currents under specified abnormal circuit
    conditions e.g. those of short circuit.
    '''
    inTransitTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The transition time from open to close.
    '''
@dataclass
class DisconnectingCircuitBreaker(Breaker):
    '''
    A circuit breaking device including disconnecting function, eliminating
    the need for separate disconnectors.
    '''
@dataclass
class LoadBreakSwitch(ProtectedSwitch):
    '''
    A mechanical switching device capable of making, carrying, and breaking
    currents under normal operating conditions.
    '''
@dataclass
class Recloser(ProtectedSwitch):
    '''
    Pole-mounted fault interrupter with built-in phase and ground relays, current
    transformer (CT), and supplemental controls.
    '''
@dataclass
class Sectionaliser(Switch):
    '''
    Automatic switch that will lock open to isolate a faulted section. It may,
    or may not, have load breaking capability. Its primary purpose is to provide
    fault sectionalising at locations where the fault current is either too
    high, or too low, for proper coordination of fuses.
    '''
@dataclass
class DCConductingEquipment(Equipment):
    '''
    The parts of the DC power system that are designed to carry current or
    that are conductively connected through DC terminals.
    '''
    ratedUdc: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated DC device voltage. The attribute shall be a positive value. It is
    configuration data used in power flow.
    '''
@dataclass
class DCBusbar(DCConductingEquipment):
    '''
    A busbar within a DC system.
    '''
@dataclass
class DCChopper(DCConductingEquipment):
    '''
    Low resistance equipment used in the internal DC circuit to balance voltages.
    It has typically positive and negative pole terminals and a ground.
    '''
@dataclass
class DCGround(DCConductingEquipment):
    '''
    A ground within a DC system.
    '''
    inductance: Optional[ float | Inductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inductance to ground.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance to ground.
    '''
@dataclass
class DCLineSegment(DCConductingEquipment):
    '''
    A wire or combination of wires not insulated from one another, with consistent
    electrical characteristics, used to carry direct current between points
    in the DC region of the power system.
    '''
    capacitance: Optional[ float | Capacitance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Capacitance of the DC line segment. Significant for cables only.
    '''
    inductance: Optional[ float | Inductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inductance of the DC line segment. Negligible compared with DCSeriesDevice
    used for smoothing.
    '''
    length: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Segment length for calculating line section capabilities.
    '''
    resistance: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance of the DC line segment.
    '''
    PerLengthParameter: Optional[ str | PerLengthDCLineParameter ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PerLengthDCLineParameter.DCLineSegments'
        })
    '''
    Set of per-length parameters for this line segment.
    '''
@dataclass
class DCSeriesDevice(DCConductingEquipment):
    '''
    A series device within the DC system, typically a reactor used for filtering
    or smoothing. Needed for transient and short circuit studies.
    '''
    inductance: Optional[ float | Inductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inductance of the device.
    '''
    resistance: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance of the DC device.
    '''
@dataclass
class DCShunt(DCConductingEquipment):
    '''
    A shunt device within the DC system, typically used for filtering. Needed
    for transient and short circuit studies.
    '''
    capacitance: Optional[ float | Capacitance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Capacitance of the DC shunt.
    '''
    resistance: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance of the DC device.
    '''
@dataclass
class DCSwitch(DCConductingEquipment):
    '''
    A switch within the DC system.
    '''
@dataclass
class DCBreaker(DCSwitch):
    '''
    A breaker within a DC system.
    '''
@dataclass
class DCDisconnector(DCSwitch):
    '''
    A disconnector within a DC system.
    '''
@dataclass
class GeneratingUnit(Equipment):
    '''
    A single or set of synchronous machines for converting mechanical power
    into alternating-current power. For example, individual machines within
    a set may be defined for scheduling purposes while a single control signal
    is derived for the set. In this case there would be a GeneratingUnit for
    each member of the set and an additional GeneratingUnit corresponding to
    the set.
    '''
    longPF: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Generating unit long term economic participation factor.
    '''
    normalPF: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Generating unit economic participation factor. The sum of the participation
    factors across generating units does not have to sum to one. It is used
    for representing distributed slack participation factor. The attribute
    shall be a positive value or zero.
    '''
    penaltyFactor: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Defined as: 1 / ( 1 - Incremental Transmission Loss); with the Incremental
    Transmission Loss expressed as a plus or minus value. The typical range
    of penalty factors is (0.9 to 1.1).
    '''
    shortPF: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Generating unit short term economic participation factor.
    '''
    tieLinePF: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Generating unit economic participation factor.
    '''
    allocSpinResP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The planned unused capacity (spinning reserve) which can be used to support
    emergency load.
    '''
    autoCntrlMarginP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The planned unused capacity which can be used to support automatic control
    overruns.
    '''
    baseP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    For dispatchable units, this value represents the economic active power
    basepoint, for units that are not dispatchable, this value represents the
    fixed generation value. The value shall be between the operating low and
    high limits.
    '''
    controlDeadband: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit control error deadband. When a unit's desired active power change
    is less than this deadband, then no control pulses will be sent to the
    unit.
    '''
    controlPulseHigh: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pulse high limit which is the largest control pulse that the unit can respond
    to.
    '''
    controlPulseLow: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pulse low limit which is the smallest control pulse that the unit can respond
    to.
    '''
    controlResponseRate: Optional[ float | ActivePowerChangeRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit response rate which specifies the active power change for a control
    pulse of one second in the most responsive loading level of the unit.
    '''
    efficiency: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The efficiency of the unit in converting mechanical energy, from the prime
    mover, into electrical energy.
    '''
    genControlMode: Optional[ str | GeneratorControlMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The unit control mode.
    '''
    genControlSource: Optional[ str | GeneratorControlSource ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The source of controls for a generating unit. Defines the control status
    of the generating unit.
    '''
    governorMPL: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor motor position limit.
    '''
    governorSCD: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Governor Speed Changer Droop. This is the change in generator power output
    divided by the change in frequency normalized by the nominal power of the
    generator and the nominal frequency and expressed in percent and negated.
    A positive value of speed change droop provides additional generator output
    upon a drop in frequency.
    '''
    highControlLimit: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High limit for secondary (AGC) control.
    '''
    initialP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Default initial active power which is used to store a powerflow result
    for the initial active power for this unit in this network configuration.
    '''
    lowControlLimit: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low limit for secondary (AGC) control.
    '''
    lowerRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The normal maximum rate the generating unit active power output can be
    lowered by control actions.
    '''
    maxEconomicP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum high economic active power limit, that should not exceed the maximum
    operating active power limit.
    '''
    maximumAllowableSpinningReserve: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum allowable spinning reserve. Spinning reserve will never be considered
    greater than this value regardless of the current operating point.
    '''
    maxOperatingP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    This is the maximum operating active power limit the dispatcher can enter
    for this unit.
    '''
    minEconomicP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low economic active power limit that shall be greater than or equal to
    the minimum operating active power limit.
    '''
    minimumOffTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum time interval between unit shutdown and startup.
    '''
    minOperatingP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    This is the minimum operating active power limit the dispatcher can enter
    for this unit.
    '''
    modelDetail: Optional[ int | Classification ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Detail level of the generator model data.
    '''
    nominalP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The nominal power of the generating unit. Used to give precise meaning
    to percentage based attributes such as the governor speed change droop
    (governorSCD attribute).
    The attribute shall be a positive value equal to or less than RotatingMachine.ratedS.
    '''
    raiseRampRate: Optional[ float | ActivePowerChangeRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The normal maximum rate the generating unit active power output can be
    raised by control actions.
    '''
    ratedGrossMaxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The unit's gross rated maximum capacity (book value).
    The attribute shall be a positive value.
    '''
    ratedGrossMinP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The gross rated minimum generation level which the unit can safely operate
    at while delivering power to the transmission grid.
    The attribute shall be a positive value.
    '''
    ratedNetMaxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The net rated maximum capacity determined by subtracting the auxiliary
    power used to operate the internal plant machinery from the rated gross
    maximum capacity.
    The attribute shall be a positive value.
    '''
    startupCost: Optional[ str | Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The initial startup cost incurred for each start of the GeneratingUnit.
    '''
    startupTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time it takes to get the unit on-line, from the time that the prime mover
    mechanical power is applied.
    '''
    totalEfficiency: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The efficiency of the unit in converting the fuel into electrical energy.
    '''
    variableCost: Optional[ str | Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The variable cost component of production per unit of ActivePower.
    '''
    GenUnitOpSchedule: Optional[ str | GenUnitOpSchedule ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GenUnitOpSchedule.GeneratingUnit'
        })
    '''
    A generating unit may have an operating schedule, indicating the planned
    operation of the unit.
    '''
@dataclass
class HydroGeneratingUnit(GeneratingUnit):
    '''
    A generating unit whose prime mover is a hydraulic turbine (e.g., Francis,
    Pelton, Kaplan).
    '''
    dropHeight: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The height water drops from the reservoir mid-point to the turbine.
    '''
    energyConversionCapability: Optional[ str | HydroEnergyConversionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Energy conversion capability for generating.
    '''
    hydroUnitWaterCost: Optional[ float | CostPerVolume ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The equivalent cost of water that drives the hydro turbine.
    '''
    turbineType: Optional[ str | HydroTurbineKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of turbine.
    '''
    HydroPowerPlant: Optional[ str | HydroPowerPlant ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HydroPowerPlant.HydroGeneratingUnits'
        })
    '''
    The hydro generating unit belongs to a hydro power plant.
    '''
    PenstockLossCurve: Optional[ str | PenstockLossCurve ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PenstockLossCurve.HydroGeneratingUnit'
        })
    '''
    A hydro generating unit has a penstock loss curve.
    '''
@dataclass
class NuclearGeneratingUnit(GeneratingUnit):
    '''
    A nuclear generating unit.
    '''
@dataclass
class SolarGeneratingUnit(GeneratingUnit):
    '''
    A solar thermal generating unit, connected to the grid by means of a rotating
    machine. This class does not represent photovoltaic (PV) generation.
    '''
@dataclass
class ThermalGeneratingUnit(GeneratingUnit):
    '''
    A generating unit whose prime mover could be a steam turbine, combustion
    turbine, or diesel engine.
    '''
    oMCost: Optional[ float | CostPerHeatUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Operating and maintenance cost for the thermal unit.
    '''
    CAESPlant: Optional[ str | CAESPlant ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CAESPlant.ThermalGeneratingUnit'
        })
    '''
    A thermal generating unit may be a member of a compressed air energy storage
    plant.
    '''
    CogenerationPlant: Optional[ str | CogenerationPlant ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CogenerationPlant.ThermalGeneratingUnits'
        })
    '''
    A thermal generating unit may be a member of a cogeneration plant.
    '''
    CombinedCyclePlant: Optional[ str | CombinedCyclePlant ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CombinedCyclePlant.ThermalGeneratingUnits'
        })
    '''
    A thermal generating unit may be a member of a combined cycle plant.
    '''
    HeatInputCurve: Optional[ str | HeatInputCurve ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HeatInputCurve.ThermalGeneratingUnit'
        })
    '''
    A thermal generating unit may have a heat input curve.
    '''
    HeatRateCurve: Optional[ str | HeatRateCurve ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HeatRateCurve.ThermalGeneratingUnit'
        })
    '''
    A thermal generating unit may have a heat rate curve.
    '''
    IncrementalHeatRateCurve: Optional[ str | IncrementalHeatRateCurve ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'IncrementalHeatRateCurve.ThermalGeneratingUnit'
        })
    '''
    A thermal generating unit may have an incremental heat rate curve.
    '''
    ShutdownCurve: Optional[ str | ShutdownCurve ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ShutdownCurve.ThermalGeneratingUnit'
        })
    '''
    A thermal generating unit may have a shutdown curve.
    '''
    StartupModel: Optional[ str | StartupModel ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StartupModel.ThermalGeneratingUnit'
        })
    '''
    A thermal generating unit may have a startup model.
    '''
@dataclass
class WindGeneratingUnit(GeneratingUnit):
    '''
    A wind driven generating unit, connected to the grid by means of a rotating
    machine. May be used to represent a single turbine or an aggregation.
    '''
    windGenUnitType: Optional[ str | WindGenUnitKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The kind of wind generating unit.
    '''
@dataclass
class HydroPump(Equipment):
    '''
    A synchronous motor-driven pump, typically associated with a pumped storage
    plant.
    '''
    pumpDischAtMaxHead: Optional[ float | VolumeFlowRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The pumping discharge under maximum head conditions, usually at full gate.
    '''
    pumpDischAtMinHead: Optional[ float | VolumeFlowRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The pumping discharge under minimum head conditions, usually at full gate.
    '''
    pumpPowerAtMaxHead: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The pumping power under maximum head conditions, usually at full gate.
    '''
    pumpPowerAtMinHead: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The pumping power under minimum head conditions, usually at full gate.
    '''
    HydroPowerPlant: Optional[ str | HydroPowerPlant ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HydroPowerPlant.HydroPumps'
        })
    '''
    The hydro pump may be a member of a pumped storage plant or a pump for
    distributing water.
    '''
    HydroPumpOpSchedule: Optional[ str | HydroPumpOpSchedule ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HydroPumpOpSchedule.HydroPump'
        })
    '''
    The hydro pump has a pumping schedule over time, indicating when pumping
    is to occur.
    '''
    RotatingMachine: Optional[ str | RotatingMachine ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RotatingMachine.HydroPump'
        })
    '''
    The synchronous machine drives the turbine which moves the water from a
    low elevation to a higher elevation. The direction of machine rotation
    for pumping may or may not be the same as for generating.
    '''
@dataclass
class PowerElectronicsUnit(Equipment):
    '''
    A generating unit or battery or aggregation that connects to the AC network
    using power electronics rather than rotating machines.
    '''
    maxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum active power limit. This is the maximum (nameplate) limit for the
    unit.
    '''
    minP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum active power limit. This is the minimum (nameplate) limit for the
    unit.
    '''
    PowerElectronicsConnection: Optional[ str | PowerElectronicsConnection ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerElectronicsConnection.PowerElectronicsUnit'
        })
    '''
    A power electronics unit has a connection to the AC network.
    '''
@dataclass
class BatteryUnit(PowerElectronicsUnit):
    '''
    An electrochemical energy storage device.
    '''
    batteryState: Optional[ str | BatteryStateKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The current state of the battery (charging, full, etc.).
    '''
    ratedE: Optional[ float | RealEnergy ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Full energy storage capacity of the battery. The attribute shall be a positive
    value.
    '''
    storedE: Optional[ float | RealEnergy ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Amount of energy currently stored. The attribute shall be a positive value
    or zero and lower than BatteryUnit.ratedE.
    '''
@dataclass
class PhotoVoltaicUnit(PowerElectronicsUnit):
    '''
    A photovoltaic device or an aggregation of such devices.
    '''
@dataclass
class PowerElectronicsWindUnit(PowerElectronicsUnit):
    '''
    A wind generating unit that connects to the AC network with power electronics
    rather than rotating machines or an aggregation of such units.
    '''
@dataclass
class ProtectionEquipment(Equipment):
    '''
    An electrical device designed to respond to input conditions in a prescribed
    manner and after specified conditions are met to cause contact operation
    or similar abrupt change in associated electric control circuits, or simply
    to display the detected condition. Protection equipment is associated with
    conducting equipment and usually operate circuit breakers.
    '''
    highLimit: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum allowable value.
    '''
    lowLimit: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum allowable value.
    '''
    powerDirectionFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Direction same as positive active power flow value.
    '''
    relayDelayTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The time delay from detection of abnormal conditions to relay operation.
    '''
    unitMultiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The unit multiplier of the value.
    '''
    unitSymbol: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The unit of measure of the value.
    '''
@dataclass
class CurrentRelay(ProtectionEquipment):
    '''
    A device that checks current flow values in any direction or designated
    direction.
    '''
    inverseTimeFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Set true if the current relay has inverse time characteristic.
    '''
    currentLimit1: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current limit number one 1 for inverse time pickup.
    '''
    currentLimit2: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current limit number 2 for inverse time pickup.
    '''
    currentLimit3: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current limit number 3 for inverse time pickup.
    '''
    timeDelay1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inverse time delay number 1 for current limit number 1.
    '''
    timeDelay2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inverse time delay number 2 for current limit number 2.
    '''
    timeDelay3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inverse time delay number 3 for current limit number 3.
    '''
@dataclass
class SynchrocheckRelay(ProtectionEquipment):
    '''
    A device that operates when two AC circuits are within the desired limits
    of frequency, phase angle, and voltage, to permit or to cause the paralleling
    of these two circuits. Used to prevent the paralleling of non-synchronous
    topological islands.
    '''
    maxAngleDiff: Optional[ float | AngleRadians ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum allowable voltage vector phase angle difference across the
    open device.
    '''
    maxFreqDiff: Optional[ float | Frequency ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum allowable frequency difference across the open device.
    '''
    maxVoltDiff: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum allowable difference voltage across the open device.
    '''
@dataclass
class TransformerTank(Equipment):
    '''
    An assembly of two or more coupled windings that transform electrical power
    between voltage levels. These windings are bound on a common core and placed
    in the same tank. Transformer tank can be used to model both single-phase
    and 3-phase transformers.
    '''
    PowerTransformer: Optional[ str | PowerTransformer ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerTransformer.TransformerTanks'
        })
    '''
    Bank this transformer belongs to.
    '''
@dataclass
class HydroPowerPlant(PowerSystemResource):
    '''
    A hydro power station which can generate or pump. When generating, the
    generator turbines receive water from an upper reservoir. When pumping,
    the pumps receive their water from a lower reservoir.
    '''
    penstockType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type and configuration of hydro plant penstock(s).
    '''
    surgeTankCode: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    A code describing the type (or absence) of surge tank that is associated
    with the hydro power plant.
    '''
    dischargeTravelDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water travel delay from tailbay to next downstream hydro power station.
    '''
    genRatedP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The hydro plant's generating rating active power for rated head conditions.
    The attribute shall be a positive value.
    '''
    hydroPlantStorageType: Optional[ str | HydroPlantStorageKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The type of hydro power plant water storage.
    '''
    plantDischargeCapacity: Optional[ float | VolumeFlowRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Total plant discharge capacity.
    '''
    plantRatedHead: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The plant's rated gross head.
    The attribute shall be a positive value.
    '''
    pumpRatedP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The hydro plant's pumping rating active power for rated head conditions.
    The attribute shall be a positive value.
    '''
    surgeTankCrestLevel: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The level at which the surge tank spills.
    '''
    GenSourcePumpDischargeReservoir: Optional[ str | Reservoir ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Reservoir.UpstreamFromHydroPowerPlants'
        })
    '''
    Generators are supplied water from or pumps discharge water to an upstream
    reservoir.
    '''
    Reservoir: Optional[ str | Reservoir ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Reservoir.HydroPowerPlants'
        })
    '''
    Generators discharge water to or pumps are supplied water from a downstream
    reservoir.
    '''
@dataclass
class PowerCutZone(PowerSystemResource):
    '''
    An area or zone of the power system which is used for load shedding purposes.
    '''
    cutLevel1: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First level (amount) of load to cut as a percentage of total zone load.
    '''
    cutLevel2: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second level (amount) of load to cut as a percentage of total zone load.
    '''
@dataclass
class PowerElectronicsConnectionPhase(PowerSystemResource):
    '''
    A single phase of a power electronics connection.
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive sign
    means flow into the equipment from the network.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase of this energy producer component. If the energy producer is wye
    connected, the connection is from the indicated phase to the central ground
    or neutral point. If the energy producer is delta connected, the phase
    indicates an energy producer connected from the indicated phase to the
    next logical non-neutral phase.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive sign
    means flow into the equipment from the network.
    '''
    PowerElectronicsConnection: Optional[ str | PowerElectronicsConnection ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerElectronicsConnection.PowerElectronicsConnectionPhase'
        })
    '''
    Power electronics connection of this power electronics connection phase.
    '''
@dataclass
class PrimeMover(PowerSystemResource):
    '''
    The machine used to develop mechanical energy used to drive a generator.
    '''
    primeMoverRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rating of prime mover.
    '''
@dataclass
class CombustionTurbine(PrimeMover):
    '''
    A prime mover that is typically fuelled by gas or light oil.
    '''
    heatRecoveryFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Flag that is set to true if the combustion turbine is associated with a
    heat recovery boiler.
    '''
    ambientTemp: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Default ambient temperature to be used in modelling applications.
    '''
    auxPowerVersusFrequency: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Off-nominal frequency effect on turbine auxiliaries. Per unit reduction
    in auxiliary active power consumption versus per unit reduction in frequency
    (from rated frequency).
    '''
    auxPowerVersusVoltage: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Off-nominal voltage effect on turbine auxiliaries. Per unit reduction in
    auxiliary active power consumption versus per unit reduction in auxiliary
    bus voltage (from a specified voltage level).
    '''
    capabilityVersusFrequency: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Off-nominal frequency effect on turbine capability. Per unit reduction
    in unit active power capability versus per unit reduction in frequency
    (from rated frequency).
    '''
    powerVariationByTemp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Per unit change in power per (versus) unit change in ambient temperature.
    '''
    referenceTemp: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reference temperature at which the output of the turbine was defined.
    '''
    timeConstant: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The time constant for the turbine.
    '''
    AirCompressor: Optional[ str | AirCompressor ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AirCompressor.CombustionTurbine'
        })
    '''
    A CAES air compressor is driven by combustion turbine.
    '''
    CTTempActivePowerCurve: Optional[ str | CTTempActivePowerCurve ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CTTempActivePowerCurve.CombustionTurbine'
        })
    '''
    A combustion turbine may have an active power versus ambient temperature
    relationship.
    '''
    HeatRecoveryBoiler: Optional[ str | HeatRecoveryBoiler ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'HeatRecoveryBoiler.CombustionTurbines'
        })
    '''
    A combustion turbine may have a heat recovery boiler for making steam.
    '''
@dataclass
class HydroTurbine(PrimeMover):
    '''
    A water driven prime mover. Typical turbine types are: Francis, Kaplan,
    and Pelton.
    '''
    gateRateLimit: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate rate limit.
    '''
    gateUpperLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gate upper limit.
    '''
    maxHeadMaxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum efficiency active power at maximum head conditions.
    '''
    minHeadMaxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum efficiency active power at minimum head conditions.
    '''
    speedRating: Optional[ float | RotationSpeed ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated speed in number of revolutions. The attribute shall be a positive
    value.
    '''
    speedRegulation: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed regulation.
    '''
    transientDroopTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient droop time constant.
    '''
    transientRegulation: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Transient regulation.
    '''
    turbineRating: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated turbine active power. The attribute shall be a positive value.
    '''
    turbineType: Optional[ str | HydroTurbineKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of turbine.
    '''
    waterStartingTime: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Water starting time.
    '''
@dataclass
class SteamTurbine(PrimeMover):
    '''
    Steam turbine.
    '''
    shaft1PowerHP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of power from shaft 1 high pressure turbine output.
    '''
    shaft1PowerIP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of power from shaft 1 intermediate pressure turbine output.
    '''
    shaft1PowerLP1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of power from shaft 1 first low pressure turbine output.
    '''
    shaft1PowerLP2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of power from shaft 1 second low pressure turbine output.
    '''
    shaft2PowerHP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of power from shaft 2 high pressure turbine output.
    '''
    shaft2PowerIP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of power from shaft 2 intermediate pressure turbine output.
    '''
    shaft2PowerLP1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of power from shaft 2 first low pressure turbine output.
    '''
    shaft2PowerLP2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fraction of power from shaft 2 second low pressure turbine output.
    '''
    crossoverTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Crossover time constant.
    '''
    reheater1TC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    First reheater time constant.
    '''
    reheater2TC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Second reheater time constant.
    '''
    steamChestTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steam chest time constant.
    '''
@dataclass
class RegulatingControl(PowerSystemResource):
    '''
    Specifies a set of equipment that works together to control a power system
    quantity such as voltage or flow.
    Remote bus voltage control is possible by specifying the controlled terminal
    located at some place remote from the controlling equipment.
    The specified terminal shall be associated with the connectivity node of
    the controlled point. The most specific subtype of RegulatingControl shall
    be used in case such equipment participate in the control, e.g. TapChangerControl
    for tap changers.
    For flow control, load sign convention is used, i.e. positive sign means
    flow out from a TopologicalNode (bus) into the conducting equipment.
    The attribute minAllowedTargetValue and maxAllowedTargetValue are required
    in the following cases:
    - For a power generating module operated in power factor control mode to
    specify maximum and minimum power factor values;
    - Whenever it is necessary to have an off center target voltage for the
    tap changer regulator. For instance, due to long cables to off shore wind
    farms and the need to have a simpler setup at the off shore transformer
    platform, the voltage is controlled from the land at the connection point
    for the off shore wind farm. Since there usually is a voltage rise along
    the cable, there is typical and overvoltage of up 3-4 kV compared to the
    on shore station. Thus in normal operation the tap changer on the on shore
    station is operated with a target set point, which is in the lower parts
    of the dead band.
    The attributes minAllowedTargetValue and maxAllowedTargetValue are not
    related to the attribute targetDeadband and thus they are not treated as
    an alternative of the targetDeadband. They are needed due to limitations
    in the local substation controller. The attribute targetDeadband is used
    to prevent the power flow from move the tap position in circles (hunting)
    that is to be used regardless of the attributes minAllowedTargetValue and
    maxAllowedTargetValue.
    '''
    enabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The flag tells if regulation is enabled.
    '''
    maxAllowedTargetValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum allowed target value (RegulatingControl.targetValue).
    '''
    minAllowedTargetValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum allowed target value (RegulatingControl.targetValue).
    '''
    targetDeadband: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    This is a deadband used with discrete control to avoid excessive update
    of controls like tap changers and shunt compensator banks while regulating.
    The units of those appropriate for the mode. The attribute shall be a positive
    value or zero. If RegulatingControl.discrete is set to "false", the RegulatingControl.targetDeadband
    is to be ignored.
    Note that for instance, if the targetValue is 100 kV and the targetDeadband
    is 2 kV the range is from 99 to 101 kV.
    '''
    targetValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The target value specified for case input. This value can be used for the
    target value without the use of schedules. The value has the units appropriate
    to the mode attribute.
    '''
    mode: Optional[ str | RegulatingControlModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The regulating control mode presently available. This specification allows
    for determining the kind of regulation without need for obtaining the units
    from a schedule.
    '''
    monitoredPhase: Optional[ str | PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase voltage controlling this regulator, measured at regulator location.
    '''
    targetValueUnitMultiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specify the multiplier for used for the targetValue.
    '''
    Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.RegulatingControl'
        })
    '''
    The terminal associated with this regulating control. The terminal is associated
    instead of a node, since the terminal could connect into either a topological
    node or a connectivity node. Sometimes it is useful to model regulation
    at a terminal of a bus bar object.
    '''
@dataclass
class TapChangerControl(RegulatingControl):
    '''
    Describes behaviour specific to tap changers, e.g. how the voltage at the
    end of a line varies with the load level and compensation of the voltage
    drop by tap adjustment.
    '''
    lineDropCompensation: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If true, the line drop compensation is to be applied.
    '''
    limitVoltage: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum allowed regulated voltage on the PT secondary, regardless of line
    drop compensation. Sometimes referred to as first-house protection.
    '''
    lineDropR: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Line drop compensator resistance setting for normal (forward) power flow.
    '''
    lineDropX: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Line drop compensator reactance setting for normal (forward) power flow.
    '''
    reverseLineDropR: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Line drop compensator resistance setting for reverse power flow.
    '''
    reverseLineDropX: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Line drop compensator reactance setting for reverse power flow.
    '''
@dataclass
class RemedialActionScheme(PowerSystemResource):
    '''
    Remedial Action Scheme (RAS), Special Protection Schemes (SPS), System
    Protection Schemes (SPS) or System Integrity Protection Schemes (SIPS).
    '''
    armed: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The status of the class set by operation or by signal. Optional field that
    will override other status fields.
    '''
    normalArmed: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The default/normal value used when other active signal/values are missing.
    '''
    kind: Optional[ str | RemedialActionSchemeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kind of Remedial Action Scheme (RAS).
    '''
    GateArmed: Optional[ str | Gate ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Gate.RemedialActionScheme'
        })
    '''
    Gate that through a gate logic and input pin defines arming of the Remedial
    Action Schemes (RAS).
    '''
@dataclass
class RemoteUnit(PowerSystemResource):
    '''
    A remote unit can be an RTU, IED, substation control system, control centre,
    etc. The communication with the remote unit can be through various standard
    protocols (e.g. IEC 61870, IEC 61850) or non standard protocols (e.g. DNP,
    RP570, etc.). A remote unit contains remote data points that might be telemetered,
    collected or calculated. The RemoteUnit class inherits PowerSystemResource.
    The intention is to allow RemoteUnits to have Measurements. These Measurements
    can be used to model unit status as operational, out of service, unit failure,
    etc.
    '''
    remoteUnitType: Optional[ str | RemoteUnitType ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of remote unit.
    '''
@dataclass
class Reservoir(PowerSystemResource):
    '''
    A water storage facility within a hydro system, including: ponds, lakes,
    lagoons, and rivers. The storage is usually behind some type of dam.
    '''
    energyStorageRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reservoir's energy storage rating in energy for given head conditions.
    '''
    riverOutletWorks: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    River outlet works for riparian right releases or other purposes.
    '''
    spillwayCapacity: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The flow capacity of the spillway in cubic meters per second.
    '''
    spillWayGateType: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of spillway gate, including parameters.
    '''
    activeStorageCapacity: Optional[ float | Volume ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Storage volume between the full supply level and the normal minimum operating
    level.
    '''
    fullSupplyLevel: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Full supply level, above which water will spill. This can be the spillway
    crest level or the top of closed gates.
    '''
    grossCapacity: Optional[ float | Volume ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Total capacity of reservoir.
    '''
    normalMinOperateLevel: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal minimum operating level below which the penstocks will draw air.
    '''
    spillTravelDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The spillway water travel delay to the next downstream reservoir.
    '''
    spillwayCrestLength: Optional[ float | Length ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The length of the spillway crest.
    '''
    spillwayCrestLevel: Optional[ float | WaterLevel ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Spillway crest level above which water will spill.
    '''
    SpillsFromReservoir: Optional[ str | Reservoir ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Reservoir.SpillsIntoReservoirs'
        })
    '''
    A reservoir may spill into a downstream reservoir.
    '''
    TargetLevelSchedule: Optional[ str | TargetLevelSchedule ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TargetLevelSchedule.Reservoir'
        })
    '''
    A reservoir may have a water level target schedule.
    '''
@dataclass
class ShuntCompensatorPhase(PowerSystemResource):
    '''
    Single phase of a multi-phase shunt compensator when its attributes might
    be different per phase.
    '''
    maximumSections: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum number of sections that may be switched in for this phase.
    '''
    normalSections: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    For the capacitor phase, the normal number of sections switched in. The
    value shall be between zero and ShuntCompensatorPhase.maximumSections.
    '''
    sections: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Shunt compensator sections in use. Starting value for steady state solution.
    The attribute shall be a positive value or zero. Non integer values are
    allowed to support continuous variables. The reasons for continuous value
    are to support study cases where no discrete shunt compensators has yet
    been designed, a solutions where a narrow voltage band force the sections
    to oscillate or accommodate for a continuous solution as input.
    For LinearShuntConpensator the value shall be between zero and ShuntCompensatorPhase.maximumSections.
    At value zero the shunt compensator conductance and admittance is zero.
    Linear interpolation of conductance and admittance between the previous
    and next integer section is applied in case of non-integer values.
    For NonlinearShuntCompensator-s shall only be set to one of the NonlinearShuntCompenstorPhasePoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPhasePoint-s.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase of this shunt compensator component. If the shunt compensator is
    wye connected, the connection is from the indicated phase to the central
    ground or neutral point. If the shunt compensator is delta connected, the
    phase indicates a shunt compensator connected from the indicated phase
    to the next logical non-neutral phase.
    '''
    ShuntCompensator: Optional[ str | ShuntCompensator ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ShuntCompensator.ShuntCompensatorPhase'
        })
    '''
    Shunt compensator of this shunt compensator phase.
    '''
@dataclass
class LinearShuntCompensatorPhase(ShuntCompensatorPhase):
    '''
    A per phase linear shunt compensator has banks or sections with equal admittance
    values.
    '''
    bPerSection: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Susceptance per section of the phase if shunt compensator is wye connected.
    Susceptance per section phase to phase if shunt compensator is delta connected.
    '''
    gPerSection: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Conductance per section for this phase if shunt compensator is wye connected.
    Conductance per section phase to phase if shunt compensator is delta connected.
    '''
@dataclass
class NonlinearShuntCompensatorPhase(ShuntCompensatorPhase):
    '''
    A per phase non linear shunt compensator has bank or section admittance
    values that differ. The attributes g and b of the associated NonlinearShuntCompensatorPhasePoint
    describe the total conductance and admittance of a NonlinearShuntCompensatorPhasePoint
    at a section number specified by NonlinearShuntCompensatorPhasePoint.sectionNumber.
    '''
@dataclass
class SteamSupply(PowerSystemResource):
    '''
    Steam supply for steam turbine.
    '''
    steamSupplyRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rating of steam supply.
    '''
@dataclass
class BWRSteamSupply(SteamSupply):
    '''
    Boiling water reactor used as a steam supply to a steam turbine.
    '''
    integralGain: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain.
    '''
    pressureSetpointGA: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure setpoint gain adjuster.
    '''
    proportionalGain: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain.
    '''
    rodPatternConstant: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Constant associated with rod pattern.
    '''
    highPowerLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    High power limit.
    '''
    inCoreThermalTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    In-core thermal time constant.
    '''
    lowerLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Initial lower limit.
    '''
    lowPowerLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Low power limit.
    '''
    pressureLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure limit.
    '''
    pressureSetpointTC1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure setpoint time constant.
    '''
    pressureSetpointTC2: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure setpoint time constant.
    '''
    rfAux1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    rfAux2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    rfAux3: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    rfAux4: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    rfAux5: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    rfAux6: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    rfAux7: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    rfAux8: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient for modelling the effect of off-nominal frequency and voltage
    on recirculation and core flow, which affects the BWR power output.
    '''
    rodPattern: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rod pattern.
    '''
    upperLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Initial upper limit.
    '''
@dataclass
class FossilSteamSupply(SteamSupply):
    '''
    Fossil fuelled boiler (e.g., coal, oil, gas).
    '''
    controlErrorBiasP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power error bias ratio.
    '''
    controlIC: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral constant.
    '''
    controlPC: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional constant.
    '''
    controlPEB: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure error bias ratio.
    '''
    controlTC: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant.
    '''
    feedWaterIG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedwater integral gain ratio.
    '''
    feedWaterPG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedwater proportional gain ratio.
    '''
    maxErrorRateP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power maximum error rate limit.
    '''
    minErrorRateP: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active power minimum error rate limit.
    '''
    pressureCtrlDG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure control derivative gain ratio.
    '''
    pressureCtrlIG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure control integral gain ratio.
    '''
    pressureCtrlPG: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure control proportional gain ratio.
    '''
    pressureFeedback: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure feedback indicator.
    '''
    superHeater1Capacity: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Drum/primary superheater capacity.
    '''
    superHeater2Capacity: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Secondary superheater capacity.
    '''
    superHeaterPipePD: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Superheater pipe pressure drop constant.
    '''
    auxPowerVersusFrequency: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Off nominal frequency effect on auxiliary real power. Per unit active power
    variation versus per unit frequency variation.
    '''
    auxPowerVersusVoltage: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Off nominal voltage effect on auxiliary real power. Per unit active power
    variation versus per unit voltage variation.
    '''
    boilerControlMode: Optional[ str | BoilerControlMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The control mode of the boiler.
    '''
    controlPED: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure error deadband.
    '''
    feedWaterTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedwater time constant ratio.
    '''
    fuelDemandLimit: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel demand limit.
    '''
    fuelSupplyDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel delay.
    '''
    fuelSupplyTC: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fuel supply time constant.
    '''
    mechPowerSensorLag: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Mechanical power sensor lag.
    '''
    throttlePressureSP: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Throttle pressure setpoint.
    '''
@dataclass
class DrumBoiler(FossilSteamSupply):
    '''
    Drum boiler.
    '''
    drumBoilerRating: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rating of drum boiler in steam units.
    '''
@dataclass
class HeatRecoveryBoiler(FossilSteamSupply):
    '''
    The heat recovery system associated with combustion turbines in order to
    produce steam for combined cycle plants.
    '''
    steamSupplyRating2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The steam supply rating in kilopounds per hour, if dual pressure boiler.
    '''
@dataclass
class Subcritical(FossilSteamSupply):
    '''
    Once-through subcritical boiler.
    '''
@dataclass
class Supercritical(FossilSteamSupply):
    '''
    Once-through supercritical boiler.
    '''
@dataclass
class PWRSteamSupply(SteamSupply):
    '''
    Pressurized water reactor used as a steam supply to a steam turbine.
    '''
    coldLegFBLagTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Cold leg feedback lag time constant.
    '''
    coldLegFBLeadTC1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Cold leg feedback lead time constant.
    '''
    coldLegFBLeadTC2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Cold leg feedback lead time constant.
    '''
    coldLegFG1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Cold leg feedback gain 1.
    '''
    coldLegFG2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Cold leg feedback gain 2.
    '''
    coldLegLagTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Cold leg lag time constant.
    '''
    coreHTLagTC1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Core heat transfer lag time constant.
    '''
    coreHTLagTC2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Core heat transfer lag time constant.
    '''
    coreNeutronicsEffTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Core neutronics effective time constant.
    '''
    coreNeutronicsHT: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Core neutronics and heat transfer.
    '''
    feedbackFactor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Feedback factor.
    '''
    hotLegLagTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Hot leg lag time constant.
    '''
    hotLegSteamGain: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Hot leg steam gain.
    '''
    hotLegToColdLegGain: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Hot leg to cold leg gain.
    '''
    pressureCG: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pressure control gain.
    '''
    steamFlowFG: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steam flow feedback gain.
    '''
    steamPressureDropLagTC: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steam pressure drop lag time constant.
    '''
    steamPressureFG: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Steam pressure feedback gain.
    '''
    throttlePressureFactor: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Throttle pressure factor.
    '''
    throttlePressureSP: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Throttle pressure setpoint.
    '''
@dataclass
class SwitchPhase(PowerSystemResource):
    '''
    Single phase of a multi-phase switch when its attributes might be different
    per phase.
    '''
    closed: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The attribute tells if the switch is considered closed when used as input
    to topology processing.
    '''
    normalOpen: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Used in cases when no Measurement for the status value is present. If the
    SwitchPhase has a status measurement the Discrete.normalValue is expected
    to match with this value.
    '''
    phaseSide1: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase of this SwitchPhase on the side with terminal sequence number equal
    to 1. Should be a phase contained in that terminal’s phases attribute.
    '''
    phaseSide2: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase of this SwitchPhase on the side with terminal sequence number equal
    to 2. Should be a phase contained in that terminal’s Terminal.phases attribute.
    '''
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum continuous current carrying capacity in amps governed by the
    device material and construction.
    The attribute shall be a positive value.
    '''
    Switch: Optional[ str | Switch ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Switch.SwitchPhase'
        })
    '''
    The switch of the switch phase.
    '''
@dataclass
class TapChanger(PowerSystemResource):
    '''
    Mechanism for changing transformer winding tap positions.
    '''
    controlEnabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the regulation status of the equipment. True is regulating, false
    is not regulating.
    '''
    highStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Highest possible tap step position, advance from neutral.
    The attribute shall be greater than lowStep.
    '''
    lowStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lowest possible tap step position, retard from neutral.
    '''
    ltcFlag: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies whether or not a TapChanger has load tap changing capabilities.
    '''
    neutralStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The neutral tap step position for this winding.
    The attribute shall be equal to or greater than lowStep and equal or less
    than highStep.
    It is the step position where the voltage is neutralU when the other terminals
    of the transformer are at the ratedU. If there are other tap changers on
    the transformer those taps are kept constant at their neutralStep.
    '''
    normalStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The tap step position used in "normal" network operation for this winding.
    For a "Fixed" tap changer indicates the current physical tap setting.
    The attribute shall be equal to or greater than lowStep and equal to or
    less than highStep.
    '''
    step: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Tap changer position.
    Starting step for a steady state solution. Non integer values are allowed
    to support continuous tap variables. The reasons for continuous value are
    to support study cases where no discrete tap changer has yet been designed,
    a solution where a narrow voltage band forces the tap step to oscillate
    or to accommodate for a continuous solution as input.
    The attribute shall be equal to or greater than lowStep and equal to or
    less than highStep.
    '''
    initialDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    For an LTC, the delay for initial tap changer operation (first step change).
    '''
    neutralU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage at which the winding operates at the neutral tap setting. It is
    the voltage at the terminal of the PowerTransformerEnd associated with
    the tap changer when all tap changers on the transformer are at their neutralStep
    position. Normally neutralU of the tap changer is the same as ratedU of
    the PowerTransformerEnd, but it can differ in special cases such as when
    the tapping mechanism is separate from the winding more common on lower
    voltage transformers.
    This attribute is not relevant for PhaseTapChangerAsymmetrical, PhaseTapChangerSymmetrical
    and PhaseTapChangerLinear.
    '''
    subsequentDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    For an LTC, the delay for subsequent tap changer operation (second and
    later step changes).
    '''
    SvTapStep: Optional[ str | SvTapStep ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SvTapStep.TapChanger'
        })
    '''
    The tap step state associated with the tap changer.
    '''
    TapChangerControl: Optional[ str | TapChangerControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TapChangerControl.TapChanger'
        })
    '''
    The regulating control scheme in which this tap changer participates.
    '''
@dataclass
class PhaseTapChanger(TapChanger):
    '''
    A transformer phase shifting tap model that controls the phase angle difference
    across the power transformer and potentially the active power flow through
    the power transformer. This phase tap model may also impact the voltage
    magnitude.
    '''
    TransformerEnd: Optional[ str | TransformerEnd ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TransformerEnd.PhaseTapChanger'
        })
    '''
    Transformer end to which this phase tap changer belongs.
    '''
@dataclass
class PhaseTapChangerLinear(PhaseTapChanger):
    '''
    Describes a tap changer with a linear relation between the tap step and
    the phase angle difference across the transformer. This is a mathematical
    model that is an approximation of a real phase tap changer.
    The phase angle is computed as stepPhaseShiftIncrement times the tap position.
    The voltage magnitude of both sides is the same.
    '''
    stepPhaseShiftIncrement: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Phase shift per step position. A positive value indicates a positive angle
    variation from the Terminal at the PowerTransformerEnd, where the TapChanger
    is located, into the transformer.
    The actual phase shift increment might be more accurately computed from
    the symmetrical or asymmetrical models or a tap step table lookup if those
    are available.
    '''
    xMax: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactance depends on the tap position according to a "u" shaped curve.
    The maximum reactance (xMax) appears at the low and high tap positions.
    Depending on the “u” curve the attribute can be either higher or lower
    than PowerTransformerEnd.x.
    '''
    xMin: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactance depends on the tap position according to a "u" shaped curve.
    The minimum reactance (xMin) appears at the mid tap position. PowerTransformerEnd.x
    shall be consistent with PhaseTapChangerLinear.xMin and PhaseTapChangerNonLinear.xMin.
    In case of inconsistency, PowerTransformerEnd.x shall be used.
    '''
@dataclass
class PhaseTapChangerNonLinear(PhaseTapChanger):
    '''
    The non-linear phase tap changer describes the non-linear behaviour of
    a phase tap changer. This is a base class for the symmetrical and asymmetrical
    phase tap changer models. The details of these models can be found in IEC
    61970-301.
    '''
    voltageStepIncrement: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The voltage step increment on the out of phase winding (the PowerTransformerEnd
    where the TapChanger is located) specified in percent of rated voltage
    of the PowerTransformerEnd. A positive value means a positive voltage variation
    from the Terminal at the PowerTransformerEnd, where the TapChanger is located,
    into the transformer.
    When the increment is negative, the voltage decreases when the tap step
    increases.
    '''
    xMax: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactance depends on the tap position according to a "u" shaped curve.
    The maximum reactance (xMax) appears at the low and high tap positions.
    Depending on the “u” curve the attribute can be either higher or lower
    than PowerTransformerEnd.x.
    '''
    xMin: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'deprecated',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactance depend on the tap position according to a "u" shaped curve.
    The minimum reactance (xMin) appear at the mid tap position. PowerTransformerEnd.x
    shall be consistent with PhaseTapChangerLinear.xMin and PhaseTapChangerNonLinear.xMin.
    In case of inconsistency, PowerTransformerEnd.x shall be used.
    '''
@dataclass
class PhaseTapChangerAsymmetrical(PhaseTapChangerNonLinear):
    '''
    Describes the tap model for an asymmetrical phase shifting transformer
    in which the difference voltage vector adds to the in-phase winding. The
    out-of-phase winding is the transformer end where the tap changer is located.
    The angle between the in-phase and out-of-phase windings is named the winding
    connection angle. The phase shift depends on both the difference voltage
    magnitude and the winding connection angle.
    '''
    windingConnectionAngle: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The phase angle between the in-phase winding and the out-of -phase winding
    used for creating phase shift. The out-of-phase winding produces what is
    known as the difference voltage. Setting this angle to 90 degrees is not
    the same as a symmetrical transformer. The attribute can only be multiples
    of 30 degrees. The allowed range is -150 degrees to 150 degrees excluding
    0.
    '''
@dataclass
class PhaseTapChangerSymmetrical(PhaseTapChangerNonLinear):
    '''
    Describes a symmetrical phase shifting transformer tap model in which the
    voltage magnitude of both sides is the same. The difference voltage magnitude
    is the base in an equal-sided triangle where the sides corresponds to the
    primary and secondary voltages. The phase angle difference corresponds
    to the top angle and can be expressed as twice the arctangent of half the
    total difference voltage.
    '''
@dataclass
class PhaseTapChangerTabular(PhaseTapChanger):
    '''
    Describes a tap changer with a table defining the relation between the
    tap step and the phase angle difference across the transformer.
    '''
    PhaseTapChangerTable: Optional[ str | PhaseTapChangerTable ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PhaseTapChangerTable.PhaseTapChangerTabular'
        })
    '''
    The phase tap changer table for this phase tap changer.
    '''
@dataclass
class RatioTapChanger(TapChanger):
    '''
    A tap changer that changes the voltage ratio impacting the voltage magnitude
    but not the phase angle across the transformer.
    Angle sign convention (general): Positive value indicates a positive phase
    shift from the winding where the tap is located to the other winding (for
    a two-winding transformer).
    '''
    stepVoltageIncrement: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Tap step increment, in per cent of rated voltage of the power transformer
    end, per step position.
    When the increment is negative, the voltage decreases when the tap step
    increases.
    '''
    tculControlMode: Optional[ str | TransformerControlMode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the regulation control mode (voltage or reactive) of the RatioTapChanger.
    '''
    RatioTapChangerTable: Optional[ str | RatioTapChangerTable ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RatioTapChangerTable.RatioTapChanger'
        })
    '''
    The tap ratio table for this ratio tap changer.
    '''
    TransformerEnd: Optional[ str | TransformerEnd ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TransformerEnd.RatioTapChanger'
        })
    '''
    Transformer end to which this ratio tap changer belongs.
    '''
@dataclass
class VoltageControlZone(PowerSystemResource):
    '''
    An area of the power system network which is defined for secondary voltage
    control purposes. A voltage control zone consists of a collection of substations
    with a designated bus bar section whose voltage will be controlled.
    '''
    BusbarSection: Optional[ str | BusbarSection ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BusbarSection.VoltageControlZone'
        })
    '''
    A VoltageControlZone is controlled by a designated BusbarSection.
    '''
    RegulationSchedule: Optional[ str | RegulationSchedule ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RegulationSchedule.VoltageControlZones'
        })
    '''
    A VoltageControlZone may have a voltage regulation schedule.
    '''
@dataclass
class WeatherStation(PowerSystemResource):
    '''
    This represents a source of ambient temperature.
    '''
@dataclass
class WireSegmentPhase(PowerSystemResource):
    '''
    Represents a single wire of an alternating current wire segment.
    '''
    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number designation for this wire segment phase. Each wire segment phase
    within a wire segment should have a unique sequence number.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The phase connection of the wire at both ends.
    '''
    WireSegment: Optional[ str | WireSegment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WireSegment.WireSegmentPhases'
        })
    '''
    The wire segment to which the phase belongs.
    '''
@dataclass
class Profile(IdentifiedObject):
    '''
    Describes the existence of a profile. The MRID is usually defined as a
    static value by the document or artifact that defines the contents of the
    profile and the rules for using the profile.
    '''
@dataclass
class ProtectiveAction(IdentifiedObject):
    '''
    A protective action for supporting the integrity of the power system.
    '''
    enabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The status of the class set by operation or by signal. Optional field that
    will override other status fields.
    '''
    normalEnabled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The default/normal value used when other active signal/values are missing.
    '''
    GateComCondition: Optional[ str | Gate ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Gate.ProtectiveActionCom'
        })
    '''
    '''
    GateEnabledCondition: Optional[ str | Gate ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Gate.ProtectiveActionEnabled'
        })
    '''
    Association to a Gate that through a gate logic and input pin defines enabling
    of the ProtectiveAction.
    '''
    ProtectionEquipment: Optional[ str | ProtectionEquipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ProtectionEquipment.ProtectiveAction'
        })
    '''
    '''
    ProtectiveActionCollection: Optional[ str | ProtectiveActionCollection ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ProtectiveActionCollection.ProtectiveAction'
        })
    '''
    '''
@dataclass
class ProtectiveActionAdjustment(ProtectiveAction):
    '''
    Protective actions on non-switching equipment. The operating condition
    is adjusted.
    '''
    byValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The adjustment is given in value of the active value.
    '''
    reduce: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If true, the adjusted value is an reduction. Other wise it is an increase
    in the value.
    '''
    setValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The adjustment is given by a new active value.
    '''
    byPercentage: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The adjustment is given in percent of the active value.
    '''
    kind: Optional[ str | ProtectiveActionAdjustmentKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Defines the kind of adjustment that should be done. With this value the
    correct attribute containing the value needs to be used.
    '''
    ConductingEquipment: Optional[ str | ConductingEquipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ConductingEquipment.ProtectiveActionAdjustment'
        })
    '''
    ConductingEquipment whose operating condition is changed when this protective
    action adjustment gets activated.
    '''
    DCConductingEquipment: Optional[ str | DCConductingEquipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DCConductingEquipment.ProtectiveActionAdjustment'
        })
    '''
    The operating condition to the Conducting Equipment is changed when protective
    action adjustment is activated.
    '''
    Measurement: Optional[ str | Measurement ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Measurement.ProtectiveActionAdjustment'
        })
    '''
    The measurement is used to control the operation of an equipment.
    '''
@dataclass
class ProtectiveActionEquipment(ProtectiveAction):
    '''
    Protective action to put an Equipment in-service/out-of-service.
    '''
    inService: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If true the equipment is put in-service, otherwise out-of-service.
    '''
    Equipment: Optional[ str | Equipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Equipment.ProtectiveActionEquipment'
        })
    '''
    '''
@dataclass
class ProtectiveActionRegulation(ProtectiveAction):
    '''
    Protective action to change regulation to Equipment.
    '''
    isRegulating: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If true the regulator is put in-service, otherwise out-of-service (no regulation).
    '''
    targetValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The target value specified the new case input for the regulator. The value
    has the units appropriate to the mode attribute. The protective action
    does not change the mode attribute.
    '''
    RegulatingControl: Optional[ str | RegulatingControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RegulatingControl.ProtectiveActionRegulation'
        })
    '''
    '''
@dataclass
class ProtectiveActionCollection(IdentifiedObject):
    '''
    A collection of protective actions to protect the integrity of the power
    system.
    '''
@dataclass
class ProvidedBilateralPoint(IdentifiedObject):
    '''
    Allows declaration of ICCP points to be provided through a Bilateral Table
    agreement.
    '''
    BilateralExchangeActor: Optional[ str | BilateralExchangeActor ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BilateralExchangeActor.ProvidedBilateralIOPoint'
        })
    '''
    Remote peer that will receive ICCP information in a Bilateral table.
    '''
    IOPoint: Optional[ str | IOPoint ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'IOPoint.BilateralToIOPoint'
        })
    '''
    Measurement or control for the bilateral ICCP point.
    '''
@dataclass
class ICCPProvidedPoint(ProvidedBilateralPoint):
    '''
    The IdentifiedObject.name attribute must have a value. The name attribute
    shall be used as the DataValue name used for the exchange.
    '''
    accessPriviledge: Optional[ str | ICCPAccessPrivilegeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Provides information regarding the access privileges allowed to the ICCP
    Point.
    '''
    pointQuality: Optional[ str | ICCPQualityKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the type of ICCP quality that will be conveyed as part of the
    ICCP Point.
    '''
    pointType: Optional[ str | ICCPPointKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates the ICCP Point type that is to be conveyed.
    A CIM AccumlatorValue shall be mapped to an ICCP real.
    A CIM AnalogValue shall be mapped to an ICCP real.
    A CIM DiscreteValue shall be mapped to either an ICCP real, state, stateSupplemental,
    or either protection event type.
    A CIM StringMeasurementValue does not have a standardized mapping.
    '''
    scope: Optional[ str | ICCPScopeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates if the Point is global scoped (e.g. VCC) or accessible only to
    the Bilateral table peer (e.g. ICC).
    '''
@dataclass
class RatioTapChangerTable(IdentifiedObject):
    '''
    Describes a curve for how the voltage magnitude and impedance varies with
    the tap step.
    '''
@dataclass
class RecloseSequence(IdentifiedObject):
    '''
    A reclose sequence (open and close) is defined for each possible reclosure
    of a breaker.
    '''
    recloseStep: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates the ordinal position of the reclose step relative to other steps
    in the sequence.
    '''
    recloseDelay: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Indicates the time lapse before the reclose step will execute a reclose.
    '''
    ProtectedSwitch: Optional[ str | ProtectedSwitch ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ProtectedSwitch.RecloseSequences'
        })
    '''
    A breaker may have zero or more automatic reclosures after a trip occurs.
    '''
@dataclass
class RemoteInputSignal(IdentifiedObject):
    '''
    Supports connection to a terminal associated with a remote bus from which
    an input signal of a specific type is coming.
    '''
    remoteSignalType: Optional[ str | RemoteSignalKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of input signal.
    '''
    DiscontinuousExcitationControlDynamics: Optional[ str | DiscontinuousExcitationControlDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DiscontinuousExcitationControlDynamics.RemoteInputSignal'
        })
    '''
    Discontinuous excitation control model using this remote input signal.
    '''
    PFVArControllerType1Dynamics: Optional[ str | PFVArControllerType1Dynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PFVArControllerType1Dynamics.RemoteInputSignal'
        })
    '''
    Power factor or VAr controller type 1 model using this remote input signal.
    '''
    PowerSystemStabilizerDynamics: Optional[ str | PowerSystemStabilizerDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerSystemStabilizerDynamics.RemoteInputSignal'
        })
    '''
    Power system stabilizer model using this remote input signal.
    '''
    Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.RemoteInputSignal'
        })
    '''
    Remote terminal with which this input signal is associated.
    '''
    UnderexcitationLimiterDynamics: Optional[ str | UnderexcitationLimiterDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'UnderexcitationLimiterDynamics.RemoteInputSignal'
        })
    '''
    Underexcitation limiter model using this remote input signal.
    '''
    VoltageCompensatorDynamics: Optional[ str | VoltageCompensatorDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VoltageCompensatorDynamics.RemoteInputSignal'
        })
    '''
    Voltage compensator model using this remote input signal.
    '''
    WindPlantDynamics: Optional[ str | WindPlantDynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPlantDynamics.RemoteInputSignal'
        })
    '''
    The wind plant using the remote signal.
    '''
    WindTurbineType1or2Dynamics: Optional[ str | WindTurbineType1or2Dynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType1or2Dynamics.RemoteInputSignal'
        })
    '''
    Wind generator type 1 or type 2 model using this remote input signal.
    '''
    WindTurbineType3or4Dynamics: Optional[ str | WindTurbineType3or4Dynamics ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3or4Dynamics.RemoteInputSignal'
        })
    '''
    Wind turbine type 3 or type 4 models using this remote input signal.
    '''
@dataclass
class RemotePoint(IdentifiedObject):
    '''
    For an RTU, remote points correspond to telemetered values or control outputs.
    Other units (e.g. control centres) usually also contain calculated values.
    '''
    RemoteUnit: Optional[ str | RemoteUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemoteUnit.RemotePoints'
        })
    '''
    Remote unit this point belongs to.
    '''
@dataclass
class RemoteControl(RemotePoint):
    '''
    Remote controls are outputs that are sent by the remote unit to actuators
    in the process.
    '''
    actuatorMaximum: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum set point value accepted by the remote control point.
    '''
    actuatorMinimum: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum set point value accepted by the remote control point.
    '''
    remoteControlled: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Set to true if the actuator is remotely controlled.
    '''
    Control: Optional[ str | Control ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Control.RemoteControl'
        })
    '''
    The Control for the RemoteControl point.
    '''
@dataclass
class RemoteSource(RemotePoint):
    '''
    Remote sources are state variables that are telemetered or calculated within
    the remote unit.
    '''
    deadband: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The smallest change in value to be reported.
    '''
    sensorMaximum: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The maximum value the telemetry item can return.
    '''
    sensorMinimum: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum value the telemetry item can return.
    '''
    scanInterval: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The time interval between scans.
    '''
    MeasurementValue: Optional[ str | MeasurementValue ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MeasurementValue.RemoteSource'
        })
    '''
    Link to the physical telemetered point associated with this measurement.
    '''
@dataclass
class ReportingGroup(IdentifiedObject):
    '''
    A reporting group is used for various ad-hoc groupings used for reporting.
    '''
    ReportingSuperGroup: Optional[ str | ReportingSuperGroup ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ReportingSuperGroup.ReportingGroup'
        })
    '''
    Reporting super group to which this reporting group belongs.
    '''
@dataclass
class ReportingSuperGroup(IdentifiedObject):
    '''
    A reporting super group, groups reporting groups for a higher level report.
    '''
@dataclass
class ScheduledLimitValue(IdentifiedObject):
    '''
    A limit that is applicable during a scheduled time period.
    '''
    ScheduledLimitDependency: Optional[ str | ScheduledLimitDependency ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ScheduledLimitDependency.ScheduledLimitValues'
        })
    '''
    '''
    Season: Optional[ str | Season ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Season.ScheduledLimits'
        })
    '''
    The season for which the scheduled limits applies. If not specified, then
    applicable ot any season.
    '''
@dataclass
class ScheduledActivePowerLimitValue(ScheduledLimitValue):
    '''
    '''
    value: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    '''
@dataclass
class ScheduledApparentPowerLimitValue(ScheduledLimitValue):
    '''
    A time scheduled value for apparent power limit.
    '''
    value: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The apparent power limit value for the scheduled time.
    '''
@dataclass
class ScheduledCurrentLimitValue(ScheduledLimitValue):
    '''
    A current limit that is scheduled.
    '''
    value: Optional[ float | CurrentFlow ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The current flow limit value applicable at the scheduled time.
    '''
@dataclass
class ScheduledVoltageLimitValue(ScheduledLimitValue):
    '''
    A voltage limit value for a scheduled time.
    '''
    value: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The voltage limit value for the scheduled time.
    '''
@dataclass
class Season(IdentifiedObject):
    '''
    A specified time period of the year.
    '''
    endDate: Optional[ str | MonthDay ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Date season ends.
    '''
    startDate: Optional[ str | MonthDay ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Date season starts.
    '''
@dataclass
class ShuntCompensatorAction(IdentifiedObject):
    '''
    '''
@dataclass
class Stage(IdentifiedObject):
    '''
    Stage of a remedial action scheme.
    '''
    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The priority of the stage. 0 = don t care (default) 1 = highest priority.
    2 is less than 1 and so on. A stage with higher priority needs be activated
    before a lower stage can be activated.
    '''
    RemedialActionScheme: Optional[ str | RemedialActionScheme ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemedialActionScheme.Stage'
        })
    '''
    '''
@dataclass
class StageTrigger(IdentifiedObject):
    '''
    Condition that is triggered either by TriggerCondition of by gate condition
    within a stage and has remedial action-s.
    '''
    armed: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The status of the class set by operation or by signal. Optional field that
    will override other status fields.
    '''
    normalArmed: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The default/normal value used when other active signal/values are missing.
    '''
    priority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Priority of trigger. 0 = don t care (default) 1 = highest priority. 2 is
    less than 1 and so on. A trigger with the highest priority will trigger
    first.
    '''
    GateArmed: Optional[ str | Gate ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Gate.StageTriggerArmed'
        })
    '''
    Association to a Gate that through a gate logic and input pin defines arming
    of the StageTrigger.
    '''
    GateComCondition: Optional[ str | Gate ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Gate.StageTriggerCom'
        })
    '''
    For the StageTrigger to active the set of protective actions the condition
    for communication needs to be met (true).
    '''
    GateTrigger: Optional[ str | Gate ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Gate.StageTrigger'
        })
    '''
    The Gate result that trigger the StageTrigger and thereby executing the
    a set of protective actions.
    '''
    ProtectiveActionCollection: Optional[ str | ProtectiveActionCollection ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ProtectiveActionCollection.StageTrigger'
        })
    '''
    '''
    Stage: Optional[ str | Stage ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Stage.StageTrigger'
        })
    '''
    '''
@dataclass
class StartupModel(IdentifiedObject):
    '''
    Unit start up characteristics depending on how long the unit has been off
    line.
    '''
    startupDate: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date and time of the most recent generating unit startup.
    '''
    startupPriority: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Startup priority within control area where lower numbers indicate higher
    priorities. More than one unit in an area may be assigned the same priority.
    '''
    fixedMaintCost: Optional[ float | CostRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Fixed maintenance cost.
    '''
    hotStandbyHeat: Optional[ float | HeatRate ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The amount of heat input per time unit required for hot standby operation.
    '''
    incrementalMaintCost: Optional[ float | CostPerEnergyUnit ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Incremental maintenance cost.
    '''
    minimumDownTime: Optional[ float | Hours ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum number of hours the unit must be down before restart.
    '''
    minimumRunTime: Optional[ float | Hours ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The minimum number of hours the unit must be operating before being allowed
    to shut down.
    '''
    riskFactorCost: Optional[ str | Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The opportunity cost associated with the return in monetary unit. This
    represents the restart's "share" of the unit depreciation and risk of an
    event which would damage the unit.
    '''
    startupCost: Optional[ str | Money ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Total miscellaneous start up costs.
    '''
    stbyAuxP: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The unit's auxiliary active power consumption to maintain standby mode.
    '''
    StartIgnFuelCurve: Optional[ str | StartIgnFuelCurve ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StartIgnFuelCurve.StartupModel'
        })
    '''
    The unit's startup model may have a startup ignition fuel curve.
    '''
    StartMainFuelCurve: Optional[ str | StartMainFuelCurve ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StartMainFuelCurve.StartupModel'
        })
    '''
    The unit's startup model may have a startup main fuel curve.
    '''
    StartRampCurve: Optional[ str | StartRampCurve ] = field(
        default = None,
        metadata = {
            'type': 'Aggregate Of',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'StartRampCurve.StartupModel'
        })
    '''
    The unit's startup model may have a startup ramp curve.
    '''
    ThermalGeneratingUnit: Optional[ str | ThermalGeneratingUnit ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ThermalGeneratingUnit.StartupModel'
        })
    '''
    A thermal generating unit may have a startup model.
    '''
@dataclass
class SubGeographicalRegion(IdentifiedObject):
    '''
    A subset of a geographical region of a power system network model.
    '''
    Region: Optional[ str | GeographicalRegion ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'GeographicalRegion.Regions'
        })
    '''
    The geographical region which this sub-geographical region is within.
    '''
@dataclass
class SwitchAction(IdentifiedObject):
    '''
    Action on switch as a switching step.
    '''
@dataclass
class TieFlow(IdentifiedObject):
    '''
    Defines the structure (in terms of location and direction) of the net interchange
    constraint for a control area. This constraint may be used by either AGC
    or power flow.
    '''
    positiveFlowIn: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Specifies the sign of the tie flow associated with a control area. True
    if positive flow into the terminal (load convention) is also positive flow
    into the control area. See the description of ControlArea for further explanation
    of how TieFlow.positiveFlowIn is used.
    '''
    ControlArea: Optional[ str | ControlArea ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ControlArea.TieFlow'
        })
    '''
    The control area of the tie flows.
    '''
    Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.TieFlow'
        })
    '''
    The terminal to which this tie flow belongs.
    '''
@dataclass
class TopologicalIsland(IdentifiedObject):
    '''
    An electrically connected subset of the network. Topological islands can
    change as the current network state changes, e.g. due to:
    - disconnect switches or breakers changing state in a SCADA/EMS.
    - manual creation, change or deletion of topological nodes in a planning
    tool.
    Only energised TopologicalNode-s shall be part of the topological island.
    '''
    AngleRefTopologicalNode: Optional[ str | TopologicalNode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.AngleRefTopologicalIsland'
        })
    '''
    The angle reference for the island. Normally there is one TopologicalNode
    that is selected as the angle reference for each island. Other reference
    schemes exist, so the association is typically optional.
    '''
@dataclass
class TopologicalNode(IdentifiedObject):
    '''
    For a detailed substation model a topological node is a set of connectivity
    nodes that, in the current network state, are connected together through
    any type of closed switches, including jumpers. Topological nodes change
    as the current network state changes (i.e., switches, breakers, etc. change
    state).
    For a planning model, switch statuses are not used to form topological
    nodes. Instead they are manually created or deleted in a model builder
    tool. Topological nodes maintained this way are also called "busses".
    '''
    pInjection: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The active power injected into the bus at this location in addition to
    injections from equipment. Positive sign means injection into the TopologicalNode
    (bus).
    Starting value for a steady state solution.
    '''
    qInjection: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactive power injected into the bus at this location in addition to
    injections from equipment. Positive sign means injection into the TopologicalNode
    (bus).
    Starting value for a steady state solution.
    '''
    AngleRefTopologicalIsland: Optional[ str | TopologicalIsland ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TopologicalIsland.AngleRefTopologicalNode'
        })
    '''
    The island for which the node is an angle reference. Normally there is
    one angle reference node for each island.
    '''
    BaseVoltage: Optional[ str | BaseVoltage ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BaseVoltage.TopologicalNode'
        })
    '''
    The base voltage of the topological node.
    '''
    ConnectivityNodeContainer: Optional[ str | ConnectivityNodeContainer ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ConnectivityNodeContainer.TopologicalNode'
        })
    '''
    The connectivity node container to which the topological node belongs.
    '''
    ReportingGroup: Optional[ str | ReportingGroup ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ReportingGroup.TopologicalNode'
        })
    '''
    The reporting group to which the topological node belongs.
    '''
    TopologicalIsland: Optional[ str | TopologicalIsland ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TopologicalIsland.TopologicalNodes'
        })
    '''
    A topological node belongs to a topological island.
    '''
@dataclass
class TransformerCoreAdmittance(IdentifiedObject):
    '''
    The transformer core admittance. Used to specify the core admittance of
    a transformer in a manner that can be shared among power transformers.
    '''
    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Magnetizing branch susceptance (B mag). The value can be positive or negative.
    '''
    b0: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence magnetizing branch susceptance.
    '''
    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Magnetizing branch conductance (G mag).
    '''
    g0: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence magnetizing branch conductance.
    '''
    TransformerEndInfo: Optional[ str | TransformerEndInfo ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.CoreAdmittance'
        })
    '''
    Transformer end datasheet used to calculate this core admittance.
    '''
@dataclass
class TransformerEnd(IdentifiedObject):
    '''
    A conducting connection point of a power transformer. It corresponds to
    a physical transformer winding terminal. In earlier CIM versions, the TransformerWinding
    class served a similar purpose, but this class is more flexible because
    it associates to terminal but is not a specialization of ConductingEquipment.
    '''
    endNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Number for this transformer end, corresponding to the end's order in the
    power transformer vector group or phase angle clock number. Highest voltage
    winding should be 1. Each end within a power transformer should have a
    unique subsequent end number. Note the transformer end number need not
    match the terminal sequence number.
    '''
    grounded: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (for Yn and Zn connections) True if the neutral is solidly grounded.
    '''
    bmagSat: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Core shunt magnetizing susceptance in the saturation region.
    '''
    magBaseU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reference voltage at which the magnetizing saturation measurements
    were made.
    '''
    magSatFlux: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Core magnetizing saturation curve knee flux level.
    '''
    rground: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (for Yn and Zn connections) Resistance part of neutral impedance where
    'grounded' is true.
    '''
    xground: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    (for Yn and Zn connections) Reactive part of neutral impedance where 'grounded'
    is true.
    '''
    BaseVoltage: Optional[ str | BaseVoltage ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'BaseVoltage.TransformerEnds'
        })
    '''
    Base voltage of the transformer end. This is essential for PU calculation.
    '''
    CoreAdmittance: Optional[ str | TransformerCoreAdmittance ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TransformerCoreAdmittance.TransformerEnd'
        })
    '''
    Core admittance of this transformer end, representing magnetising current
    and core losses. The full values of the transformer should be supplied
    for one transformer end only.
    '''
    PhaseTapChanger: Optional[ str | PhaseTapChanger ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PhaseTapChanger.TransformerEnd'
        })
    '''
    Phase tap changer associated with this transformer end.
    '''
    RatioTapChanger: Optional[ str | RatioTapChanger ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RatioTapChanger.TransformerEnd'
        })
    '''
    Ratio tap changer associated with this transformer end.
    '''
    StarImpedance: Optional[ str | TransformerStarImpedance ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TransformerStarImpedance.TransformerEnd'
        })
    '''
    (accurate for 2- or 3-winding transformers only) Pi-model impedances of
    this transformer end. By convention, for a two winding transformer, the
    full values of the transformer should be entered on the high voltage end
    (endNumber=1).
    '''
    Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.TransformerEnd'
        })
    '''
    Terminal of the power transformer to which this transformer end belongs.
    '''
@dataclass
class PowerTransformerEnd(TransformerEnd):
    '''
    A PowerTransformerEnd is associated with each Terminal of a PowerTransformer.
    The impedance values r, r0, x, and x0 of a PowerTransformerEnd represents
    a star equivalent as follows.
    1) for a two Terminal PowerTransformer the high voltage (TransformerEnd.endNumber=1)
    PowerTransformerEnd has non zero values on r, r0, x, and x0 while the low
    voltage (TransformerEnd.endNumber=2) PowerTransformerEnd has zero values
    for r, r0, x, and x0. Parameters are always provided, even if the PowerTransformerEnds
    have the same rated voltage. In this case, the parameters are provided
    at the PowerTransformerEnd which has TransformerEnd.endNumber equal to
    1.
    2) for a three Terminal PowerTransformer the three PowerTransformerEnds
    represent a star equivalent with each leg in the star represented by r,
    r0, x, and x0 values.
    3) For a three Terminal transformer each PowerTransformerEnd shall have
    g, g0, b and b0 values corresponding to the no load losses distributed
    on the three PowerTransformerEnds. The total no load loss shunt impedances
    may also be placed at one of the PowerTransformerEnds, preferably the end
    numbered 1, having the shunt values on end 1. This is the preferred way.
    4) for a PowerTransformer with more than three Terminals the PowerTransformerEnd
    impedance values cannot be used. Instead use the TransformerMeshImpedance
    or split the transformer into multiple PowerTransformers.
    Each PowerTransformerEnd must be contained by a PowerTransformer. Because
    a PowerTransformerEnd (or any other object) can not be contained by more
    than one parent, a PowerTransformerEnd can not have an association to an
    EquipmentContainer (Substation, VoltageLevel, etc).
    '''
    phaseAngleClock: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Terminal voltage phase angle displacement where 360 degrees are represented
    with clock hours. The valid values are 0 to 11. For example, for the secondary
    side end of a transformer with vector group code of 'Dyn11', specify the
    connection kind as wye with neutral and specify the phase angle of the
    clock as 11. The clock value of the transformer end number specified as
    1, is assumed to be zero. Note the transformer end number is not assumed
    to be the same as the terminal sequence number.
    '''
    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Magnetizing branch susceptance (B mag). The value can be positive or negative.
    '''
    b0: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence magnetizing branch susceptance.
    '''
    connectionKind: Optional[ str | WindingConnection ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Kind of connection.
    '''
    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Magnetizing branch conductance.
    '''
    g0: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence magnetizing branch conductance (star-model).
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance (star-model) of the transformer end.
    The attribute shall be equal to or greater than zero for non-equivalent
    transformers.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series resistance (star-model) of the transformer end.
    '''
    ratedS: Optional[ float | ApparentPower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Normal apparent power rating.
    The attribute shall be a positive value. For a two-winding transformer
    the values for the high and low voltage sides shall be identical.
    '''
    ratedU: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rated voltage: phase-phase for three-phase windings, and either phase-phase
    or phase-neutral for single-phase windings.
    A high voltage side, as given by TransformerEnd.endNumber, shall have a
    ratedU that is greater than or equal to ratedU for the lower voltage sides.
    The attribute shall be a positive value.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series reactance (star-model) of the transformer end.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series reactance of the transformer end.
    '''
    PowerTransformer: Optional[ str | PowerTransformer ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerTransformer.PowerTransformerEnd'
        })
    '''
    The power transformer of this power transformer end.
    '''
@dataclass
class TransformerTankEnd(TransformerEnd):
    '''
    Transformer tank end represents an individual winding for unbalanced models
    or for transformer tanks connected into a bank (and bank is modelled with
    the PowerTransformer).
    '''
    phases: Optional[ str | PhaseCode ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Describes the phases carried by a conducting equipment.
    '''
    TransformerTank: Optional[ str | TransformerTank ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TransformerTank.TransformerTankEnds'
        })
    '''
    Transformer this winding belongs to.
    '''
@dataclass
class TransformerMeshImpedance(IdentifiedObject):
    '''
    Transformer mesh impedance (Delta-model) between transformer ends.
    The typical case is that this class describes the impedance between two
    transformer ends pair-wise, i.e. the cardinalities at both transformer
    end associations are 1. However, in cases where two or more transformer
    ends are modelled the cardinalities are larger than 1.
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance between the 'from' and the 'to' end, seen from the 'from' end.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero-sequence resistance between the 'from' and the 'to' end, seen from
    the 'from' end.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactance between the 'from' and the 'to' end, seen from the 'from' end.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero-sequence reactance between the 'from' and the 'to' end, seen from
    the 'from' end.
    '''
    FromTransformerEnd: Optional[ str | TransformerEnd ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TransformerEnd.FromMeshImpedance'
        })
    '''
    From end this mesh impedance is connected to. It determines the voltage
    reference.
    '''
    FromTransformerEndInfo: Optional[ str | TransformerEndInfo ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.FromMeshImpedances'
        })
    '''
    'from' transformer end datasheet this mesh impedance is calculated from.
    It determines the voltage reference.
    '''
@dataclass
class TransformerStarImpedance(IdentifiedObject):
    '''
    Transformer star impedance (Pi-model) that accurately reflects impedance
    for transformers with 2 or 3 windings. For transformers with 4 or more
    windings, TransformerMeshImpedance class shall be used.
    For transmission networks use PowerTransformerEnd impedances (r, r0, x,
    x0, b, b0, g and g0).
    '''
    r: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance of the transformer end.
    '''
    r0: Optional[ float | Resistance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series resistance of the transformer end.
    '''
    x: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence series reactance of the transformer end.
    '''
    x0: Optional[ float | Reactance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence series reactance of the transformer end.
    '''
    TransformerEndInfo: Optional[ str | TransformerEndInfo ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TransformerEndInfo.TransformerStarImpedance'
        })
    '''
    Transformer end datasheet used to calculate this transformer star impedance.
    '''
@dataclass
class TriggerCondition(IdentifiedObject):
    '''
    A conditions that can trigger remedial actions.
    '''
    GateTrigger: Optional[ str | Gate ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Gate.TriggerCondition'
        })
    '''
    The resulting Gate that is the condition for the Trigger.
    '''
    RemedialActionScheme: Optional[ str | RemedialActionScheme ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RemedialActionScheme.TriggerCondition'
        })
    '''
    '''
@dataclass
class UnavailabilityScheduleDependency(IdentifiedObject):
    '''
    '''
    UnavailabilityScheduleDependsOn: Optional[ str | UnavailablitySchedule ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'UnavailablitySchedule.Impacts'
        })
    '''
    '''
    UnavailabilityScheduleImpacts: Optional[ str | UnavailablitySchedule ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'UnavailablitySchedule.DependsOn'
        })
    '''
    '''
@dataclass
class UnavailabilitySwitchAction(IdentifiedObject):
    '''
    Relevant switching action for supporting the availability (or unavailability)
    plans. This could open or close a switch that is not directly connected
    to the unavailable equipment .
    '''
    open: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The switch is to be open during the scheduled period.
    '''
    Switch: Optional[ str | Switch ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_0C9534D4_CB50_4b67_88A1_762995554EA1-A'
        })
    '''
    '''
    EquipmentUnavailabilitySchedule: Optional[ str | EquipmentUnavailabilitySchedule ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_A621ED73_8721_4170_8819_24FA003C3372-A'
        })
    '''
    '''
@dataclass
class UnavailablitySchedule(IdentifiedObject):
    '''
    A schedule of unavailability for one or more specified equipment that need
    to follow the same scheduling periods.
    '''
    AvailablityPlan: Optional[ str | AvailablityPlan ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_A2312A8D_C0CB_4b47_98F8_79E9ADD45A56-A'
        })
    '''
    '''
@dataclass
class ValueAliasSet(IdentifiedObject):
    '''
    Describes the translation of a set of values into a name and is intendend
    to facilitate custom translations. Each ValueAliasSet has a name, description
    etc. A specific Measurement may represent a discrete state like Open, Closed,
    Intermediate etc. This requires a translation from the MeasurementValue.value
    number to a string, e.g. 0-&gt;"Invalid", 1-&gt;"Open", 2-&gt;"Closed",
    3-&gt;"Intermediate". Each ValueToAlias member in ValueAliasSet.Value describe
    a mapping for one particular value to a name.
    '''
@dataclass
class ValueToAlias(IdentifiedObject):
    '''
    Describes the translation of one particular value into a name, e.g. 1 as
    "Open".
    '''
    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The value that is mapped.
    '''
    ValueAliasSet: Optional[ str | ValueAliasSet ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ValueAliasSet.Values'
        })
    '''
    The ValueAliasSet having the ValueToAlias mappings.
    '''
@dataclass
class VisibilityLayer(IdentifiedObject):
    '''
    Layers are typically used for grouping diagram objects according to themes
    and scales. Themes are used to display or hide certain information (e.g.,
    lakes, borders), while scales are used for hiding or displaying information
    depending on the current zoom level (hide text when it is too small to
    be read, or when it exceeds the screen size). This is also called de-cluttering.
    CIM based graphics exchange supports an m:n relationship between diagram
    objects and layers. The importing system shall convert an m:n case into
    an appropriate 1:n representation if the importing system does not support
    m:n.
    '''
    drawingOrder: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The drawing order for this layer. The higher the number, the later the
    layer and the objects within it are rendered.
    '''
@dataclass
class WindAeroConstIEC(IdentifiedObject):
    '''
    Constant aerodynamic torque model which assumes that the aerodynamic torque
    is constant.
    Reference: IEC 61400-27-1:2015, 5.6.1.1.
    '''
    WindGenTurbineType1aIEC: Optional[ str | WindGenTurbineType1aIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindGenTurbineType1aIEC.WindAeroConstIEC'
        })
    '''
    Wind turbine type 1A model with which this wind aerodynamic model is associated.
    '''
@dataclass
class WindAeroOneDimIEC(IdentifiedObject):
    '''
    One-dimensional aerodynamic model.
    Reference: IEC 61400-27-1:2015, 5.6.1.2.
    '''
    ka: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Aerodynamic gain (<i>k</i><i><sub>a</sub></i>). It is a type-dependent
    parameter.
    '''
    thetaomega: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Initial pitch angle (<i>theta</i><i><sub>omega0</sub></i>). It is a case-dependent
    parameter.
    '''
    WindTurbineType3IEC: Optional[ str | WindTurbineType3IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3IEC.WindAeroOneDimIEC'
        })
    '''
    Wind turbine type 3 model with which this wind aerodynamic model is associated.
    '''
@dataclass
class WindAeroTwoDimIEC(IdentifiedObject):
    '''
    Two-dimensional aerodynamic model.
    Reference: IEC 61400-27-1:2015, 5.6.1.3.
    '''
    dpomega: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Partial derivative of aerodynamic power with respect to changes in WTR
    speed (<i>dp</i><i><sub>omega</sub></i>). It is a type-dependent parameter.
    '''
    dptheta: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Partial derivative of aerodynamic power with respect to changes in pitch
    angle (<i>dp</i><i><sub>theta</sub></i>). It is a type-dependent parameter.
    '''
    dpv1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Partial derivative (<i>dp</i><i><sub>v1</sub></i>). It is a type-dependent
    parameter.
    '''
    omegazero: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rotor speed if the wind turbine is not derated (<i>omega</i><i><sub>0</sub></i>).
    It is a type-dependent parameter.
    '''
    pavail: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Available aerodynamic power (<i>p</i><i><sub>avail</sub></i><i>)</i>. It
    is a case-dependent parameter.
    '''
    thetav2: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Blade angle at twice rated wind speed (<i>theta</i><i><sub>v2</sub></i>).
    It is a type-dependent parameter.
    '''
    thetazero: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pitch angle if the wind turbine is not derated (<i>theta</i><i><sub>0</sub></i>).
    It is a case-dependent parameter.
    '''
    WindTurbineType3IEC: Optional[ str | WindTurbineType3IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3IEC.WindAeroTwoDimIEC'
        })
    '''
    Wind turbine type 3 model with which this wind aerodynamic model is associated.
    '''
@dataclass
class WindContCurrLimIEC(IdentifiedObject):
    '''
    Current limitation model. The current limitation model combines the physical
    limits and the control limits.
    Reference: IEC 61400-27-1:2015, 5.6.5.8.
    '''
    mdfslim: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limitation of type 3 stator current (<i>M</i><i><sub>DFSLim</sub></i>).
    <i>M</i><i><sub>DFSLim</sub></i><sub> </sub>= 1 for wind turbines type
    4. It is a type-dependent parameter.
    false= total current limitation (0 in the IEC model)
    true=stator current limitation (1 in the IEC model).
    '''
    mqpri: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Prioritisation of Q control during UVRT (<i>M</i><i><sub>qpri</sub></i>).
    It is a project-dependent parameter.
    true = reactive power priority (1 in the IEC model)
    false = active power priority (0 in the IEC model).
    '''
    imax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum continuous current at the wind turbine terminals (<i>i</i><i><sub>max</sub></i>).
    It is a type-dependent parameter.
    '''
    imaxdip: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum current during voltage dip at the wind turbine terminals (<i>i</i><i><sub>maxdip</sub></i>).
    It is a project-dependent parameter.
    '''
    kpqu: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Partial derivative of reactive current limit (<i>K</i><i><sub>pqu</sub></i>)
    versus voltage. It is a type-dependent parameter.
    '''
    tufiltcl: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage measurement filter time constant (<i>T</i><i><sub>ufiltcl</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    upqumax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Wind turbine voltage in the operation point where zero reactive current
    can be delivered (<i>u</i><i><sub>pqumax</sub></i>). It is a type-dependent
    parameter.
    '''
    WindTurbineType3or4IEC: Optional[ str | WindTurbineType3or4IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3or4IEC.WindContCurrLimIEC'
        })
    '''
    Wind turbine type 3 or type 4 model with which this wind control current
    limitation model is associated.
    '''
@dataclass
class WindContPType3IEC(IdentifiedObject):
    '''
    P control model type 3.
    Reference: IEC 61400-27-1:2015, 5.6.5.4.
    '''
    mpuvrt: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Enable UVRT power control mode (<i>M</i><i><sub>pUVRT</sub></i><sub>)</sub>.
    It is a project-dependent parameter.
    true = voltage control (1 in the IEC model)
    false = reactive power control (0 in the IEC model).
    '''
    zeta: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Coefficient for active drive train damping (<i>zeta</i>). It is a type-dependent
    parameter.
    '''
    dpmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum wind turbine power ramp rate (<i>dp</i><i><sub>max</sub></i>).
    It is a type-dependent parameter.
    '''
    dprefmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum ramp rate of wind turbine reference power (<i>dp</i><i><sub>refmax</sub></i>).
    It is a project-dependent parameter.
    '''
    dprefmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum ramp rate of wind turbine reference power (<i>dp</i><i><sub>refmin</sub></i>).
    It is a project-dependent parameter.
    '''
    dthetamax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Ramp limitation of torque, required in some grid codes (<i>dt</i><i><sub>max</sub></i>).
    It is a project-dependent parameter.
    '''
    dthetamaxuvrt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Limitation of torque rise rate during UVRT (<i>dtheta</i><i><sub>maxUVRT</sub></i>).
    It is a project-dependent parameter.
    '''
    kdtd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Gain for active drive train damping (<i>K</i><i><sub>DTD</sub></i>). It
    is a type-dependent parameter.
    '''
    kip: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller integration parameter (<i>K</i><sub>Ip</sub>). It is a type-dependent
    parameter.
    '''
    kpp: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    PI controller proportional gain (<i>K</i><sub>Pp</sub>). It is a type-dependent
    parameter.
    '''
    omegadtd: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Active drive train damping frequency (<i>omega</i><i><sub>DTD</sub></i>).
    It can be calculated from two mass model parameters. It is a type-dependent
    parameter.
    '''
    omegaoffset: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Offset to reference value that limits controller action during rotor speed
    changes (<i>omega</i><i><sub>offset</sub></i>). It is a case-dependent
    parameter.
    '''
    pdtdmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum active drive train damping power (<i>p</i><sub>DTDmax</sub>). It
    is a type-dependent parameter.
    '''
    tdvs: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time<sub> </sub>delay after deep voltage sags (<i>T</i><i><sub>DVS</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    thetaemin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum electrical generator torque (<i>t</i><sub>emin</sub>). It is a
    type-dependent parameter.
    '''
    thetauscale: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage scaling factor of reset-torque (<i>t</i><sub>uscale</sub>). It
    is a project-dependent parameter.
    '''
    tomegafiltp3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for generator speed measurement (<i>T</i><sub>omegafiltp3</sub>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    tomegaref: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant in speed reference filter (<i>T</i><sub>omega,ref</sub>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    tpfiltp3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for power measurement (<i>T</i><sub>pfiltp3</sub>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    tpord: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant in power order lag (<i>T</i><sub>pord</sub>). It is a type-dependent
    parameter.
    '''
    tufiltp3: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for voltage measurement (<i>T</i><sub>ufiltp3</sub>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    udvs: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage limit for hold UVRT status after deep voltage sags (<i>u</i><i><sub>DVS</sub></i>).
    It is a project-dependent parameter.
    '''
    updip: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage dip threshold for P-control (<i>u</i><sub>Pdip</sub>). Part of
    turbine control, often different (e.g 0.8) from converter thresholds. It
    is a project-dependent parameter.
    '''
    WindTurbineType3IEC: Optional[ str | WindTurbineType3IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3IEC.WindContPType3IEC'
        })
    '''
    Wind turbine type 3 model with which this wind control P type 3 model is
    associated.
    '''
@dataclass
class WindContPType4aIEC(IdentifiedObject):
    '''
    P control model type 4A.
    Reference: IEC 61400-27-1:2015, 5.6.5.5.
    '''
    dpmaxp4a: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum wind turbine power ramp rate (<i>dp</i><i><sub>maxp4A</sub></i>).
    It is a project-dependent parameter.
    '''
    tpordp4a: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant in power order lag (<i>T</i><i><sub>pordp4A</sub></i>) (&gt;=
    0). It is a type-dependent parameter.
    '''
    tufiltp4a: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage measurement filter time constant (<i>T</i><i><sub>ufiltp4A</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    WindTurbineType4aIEC: Optional[ str | WindTurbineType4aIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType4aIEC.WindContPType4aIEC'
        })
    '''
    Wind turbine type 4A model with which this wind control P type 4A model
    is associated.
    '''
@dataclass
class WindContPType4bIEC(IdentifiedObject):
    '''
    P control model type 4B.
    Reference: IEC 61400-27-1:2015, 5.6.5.6.
    '''
    dpmaxp4b: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum wind turbine power ramp rate (<i>dp</i><i><sub>maxp4B</sub></i>).
    It is a project-dependent parameter.
    '''
    tpaero: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant in aerodynamic power response (<i>T</i><i><sub>paero</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    tpordp4b: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant in power order lag (<i>T</i><i><sub>pordp4B</sub></i>) (&gt;=
    0). It is a type-dependent parameter.
    '''
    tufiltp4b: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage measurement filter time constant (<i>T</i><i><sub>ufiltp4B</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    WindTurbineType4bIEC: Optional[ str | WindTurbineType4bIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType4bIEC.WindContPType4bIEC'
        })
    '''
    Wind turbine type 4B model with which this wind control P type 4B model
    is associated.
    '''
@dataclass
class WindContPitchAngleIEC(IdentifiedObject):
    '''
    Pitch angle control model.
    Reference: IEC 61400-27-1:2015, 5.6.5.2.
    '''
    dthetamax: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum pitch positive ramp rate (<i>dtheta</i><i><sub>max</sub></i>) (&gt;
    WindContPitchAngleIEC.dthetamin). It is a type-dependent parameter. Unit
    = degrees / s.
    '''
    dthetamin: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum pitch negative ramp rate (<i>dtheta</i><i><sub>min</sub></i><i>)</i>
    (&lt; WindContPitchAngleIEC.dthetamax). It is a type-dependent parameter.
    Unit = degrees / s.
    '''
    kic: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power PI controller integration gain (<i>K</i><i><sub>Ic</sub></i>). It
    is a type-dependent parameter.
    '''
    kiomega: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed PI controller integration gain (<i>K</i><i><sub>Iomega</sub></i>).
    It is a type-dependent parameter.
    '''
    kpc: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power PI controller proportional gain (<i>K</i><i><sub>Pc</sub></i>). It
    is a type-dependent parameter.
    '''
    kpomega: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Speed PI controller proportional gain (<i>K</i><i><sub>Pomega</sub></i>).
    It is a type-dependent parameter.
    '''
    kpx: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pitch cross coupling gain (<i>K</i><i><sub>PX</sub></i>). It is a type-dependent
    parameter.
    '''
    thetamax: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum pitch angle (<i>theta</i><i><sub>max</sub></i>) (&gt; WindContPitchAngleIEC.thetamin).
    It is a type-dependent parameter.
    '''
    thetamin: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum pitch angle (<i>theta</i><i><sub>min</sub></i>) (&lt; WindContPitchAngleIEC.thetamax).
    It is a type-dependent parameter.
    '''
    ttheta: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Pitch time constant (<i>ttheta</i>) (&gt;= 0). It is a type-dependent parameter.
    '''
    WindTurbineType3IEC: Optional[ str | WindTurbineType3IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3IEC.WindContPitchAngleIEC'
        })
    '''
    Wind turbine type 3 model with which this pitch control model is associated.
    '''
@dataclass
class WindContQIEC(IdentifiedObject):
    '''
    Q control model.
    Reference: IEC 61400-27-1:2015, 5.6.5.7.
    '''
    iqh1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive current injection during dip (<i>i</i><i><sub>qh1</sub></i>).
    It is a type-dependent parameter.
    '''
    iqmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive current injection (<i>i</i><i><sub>qmax</sub></i>) (&gt;
    WindContQIEC.iqmin). It is a type-dependent parameter.
    '''
    iqmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum reactive current injection (<i>i</i><i><sub>qmin</sub></i>) (&lt;
    WindContQIEC.iqmax). It is a type-dependent parameter.
    '''
    iqpost: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Post fault reactive current injection (<i>i</i><i><sub>qpost</sub></i>).
    It is a project-dependent parameter.
    '''
    kiq: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power PI controller integration gain (<i>K</i><i><sub>I,q</sub></i>).
    It is a type-dependent parameter.
    '''
    kiu: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage PI controller integration gain (<i>K</i><i><sub>I,u</sub></i>).
    It is a type-dependent parameter.
    '''
    kpq: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power PI controller proportional gain (<i>K</i><i><sub>P,q</sub></i>).
    It is a type-dependent parameter.
    '''
    kpu: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage PI controller proportional gain (<i>K</i><i><sub>P,u</sub></i>).
    It is a type-dependent parameter.
    '''
    kqv: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage scaling factor for UVRT current (<i>K</i><i><sub>qv</sub></i>).
    It is a project-dependent parameter.
    '''
    rdroop: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistive component of voltage drop impedance (<i>r</i><i><sub>droop</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    tpfiltq: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power measurement filter time constant (<i>T</i><i><sub>pfiltq</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    tpost: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Length of time period where post fault reactive power is injected (<i>T</i><i><sub>post</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    tqord: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant in reactive power order lag (<i>T</i><i><sub>qord</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    tufiltq: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage measurement filter time constant (<i>T</i><i><sub>ufiltq</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    udb1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage deadband lower limit (<i>u</i><i><sub>db1</sub></i>). It is a type-dependent
    parameter.
    '''
    udb2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage deadband upper limit (<i>u</i><i><sub>db2</sub></i>). It is a type-dependent
    parameter.
    '''
    umax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum voltage in voltage PI controller integral term (<i>u</i><i><sub>max</sub></i>)
    (&gt; WindContQIEC.umin). It is a type-dependent parameter.
    '''
    umin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum voltage in voltage PI controller integral term (<i>u</i><i><sub>min</sub></i>)
    (&lt; WindContQIEC.umax). It is a type-dependent parameter.
    '''
    uqdip: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage threshold for UVRT detection in Q control (<i>u</i><i><sub>qdip</sub></i>).
    It is a type-dependent parameter.
    '''
    uref0: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    User-defined bias in voltage reference (<i>u</i><i><sub>ref0</sub></i>).
    It is a case-dependent parameter.
    '''
    windQcontrolModesType: Optional[ str | WindQcontrolModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Types of general wind turbine Q control modes (<i>M</i><i><sub>qG</sub></i>).
    It is a project-dependent parameter.
    '''
    windUVRTQcontrolModesType: Optional[ str | WindUVRTQcontrolModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Types of UVRT Q control modes (<i>M</i><i><sub>qUVRT</sub></i>). It is
    a project-dependent parameter.
    '''
    xdroop: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inductive component of voltage drop impedance (<i>x</i><i><sub>droop</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    WindTurbineType3or4IEC: Optional[ str | WindTurbineType3or4IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3or4IEC.WIndContQIEC'
        })
    '''
    Wind turbine type 3 or type 4 model with which this reactive control model
    is associated.
    '''
@dataclass
class WindContQLimIEC(IdentifiedObject):
    '''
    Constant Q limitation model.
    Reference: IEC 61400-27-1:2015, 5.6.5.9.
    '''
    qmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive power (<i>q</i><i><sub>max</sub></i>) (&gt; WindContQLimIEC.qmin).
    It is a type-dependent parameter.
    '''
    qmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum reactive power (<i>q</i><i><sub>min</sub></i>) (&lt; WindContQLimIEC.qmax).
    It is a type-dependent parameter.
    '''
    WindTurbineType3or4IEC: Optional[ str | WindTurbineType3or4IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3or4IEC.WindContQLimIEC'
        })
    '''
    Wind generator type 3 or type 4 model with which this constant Q limitation
    model is associated.
    '''
@dataclass
class WindContQPQULimIEC(IdentifiedObject):
    '''
    QP and QU limitation model.
    Reference: IEC 61400-27-1:2015, 5.6.5.10.
    '''
    tpfiltql: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power measurement filter time constant for Q capacity (<i>T</i><i><sub>pfiltql</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    tufiltql: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage measurement filter time constant for Q capacity (<i>T</i><i><sub>ufiltql</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    WindTurbineType3or4IEC: Optional[ str | WindTurbineType3or4IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3or4IEC.WindContQPQULimIEC'
        })
    '''
    Wind generator type 3 or type 4 model with which this QP and QU limitation
    model is associated.
    '''
@dataclass
class WindContRotorRIEC(IdentifiedObject):
    '''
    Rotor resistance control model.
    Reference: IEC 61400-27-1:2015, 5.6.5.3.
    '''
    komegafilt: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter gain for generator speed measurement (<i>K</i><i><sub>omegafilt</sub></i>).
    It is a type-dependent parameter.
    '''
    kpfilt: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter gain for power measurement (<i>K</i><i><sub>pfilt</sub></i>). It
    is a type-dependent parameter.
    '''
    kirr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integral gain in rotor resistance PI controller (<i>K</i><i><sub>Irr</sub></i>).
    It is a type-dependent parameter.
    '''
    kprr: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Proportional gain in rotor resistance PI controller (<i>K</i><i><sub>Prr</sub></i>).
    It is a type-dependent parameter.
    '''
    rmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum rotor resistance (<i>r</i><i><sub>max</sub></i>) (&gt; WindContRotorRIEC.rmin).
    It is a type-dependent parameter.
    '''
    rmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum rotor resistance (<i>r</i><i><sub>min</sub></i>) (&lt; WindContRotorRIEC.rmax).
    It is a type-dependent parameter.
    '''
    tomegafiltrr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for generator speed measurement (<i>T</i><i><sub>omegafiltrr</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    tpfiltrr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for power measurement (<i>T</i><i><sub>pfiltrr</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    WindGenTurbineType2IEC: Optional[ str | WindGenTurbineType2IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindGenTurbineType2IEC.WindContRotorRIEC'
        })
    '''
    Wind turbine type 2 model with whitch this wind control rotor resistance
    model is associated.
    '''
@dataclass
class WindDynamicsLookupTable(IdentifiedObject):
    '''
    Look up table for the purpose of wind standard models.
    '''
    input: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Input value (<i>x</i>) for the lookup table function.
    '''
    output: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Output value (<i>y</i>) for the lookup table function.
    '''
    sequence: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Sequence numbers of the pairs of the input (<i>x</i>) and the output (<i>y</i>)
    of the lookup table function.
    '''
    lookupTableFunctionType: Optional[ str | WindLookupTableFunctionKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Type of the lookup table function.
    '''
    WindContCurrLimIEC: Optional[ str | WindContCurrLimIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContCurrLimIEC.WindDynamicsLookupTable'
        })
    '''
    The current control limitation model with which this wind dynamics lookup
    table is associated.
    '''
    WindContPType3IEC: Optional[ str | WindContPType3IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContPType3IEC.WindDynamicsLookupTable'
        })
    '''
    The P control type 3 model with which this wind dynamics lookup table is
    associated.
    '''
    WindContQPQULimIEC: Optional[ str | WindContQPQULimIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContQPQULimIEC.WindDynamicsLookupTable'
        })
    '''
    The QP and QU limitation model with which this wind dynamics lookup table
    is associated.
    '''
    WindContRotorRIEC: Optional[ str | WindContRotorRIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindContRotorRIEC.WindDynamicsLookupTable'
        })
    '''
    The rotor resistance control model with which this wind dynamics lookup
    table is associated.
    '''
    WindGenType3bIEC: Optional[ str | WindGenType3bIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindGenType3bIEC.WindDynamicsLookupTable'
        })
    '''
    The generator type 3B model with which this wind dynamics lookup table
    is associated.
    '''
    WindPitchContPowerIEC: Optional[ str | WindPitchContPowerIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPitchContPowerIEC.WindDynamicsLookupTable'
        })
    '''
    The pitch control power model with which this wind dynamics lookup table
    is associated.
    '''
    WindPlantFreqPcontrolIEC: Optional[ str | WindPlantFreqPcontrolIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPlantFreqPcontrolIEC.WindDynamicsLookupTable'
        })
    '''
    The frequency and active power wind plant control model with which this
    wind dynamics lookup table is associated.
    '''
    WindPlantReactiveControlIEC: Optional[ str | WindPlantReactiveControlIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPlantReactiveControlIEC.WindDynamicsLookupTable'
        })
    '''
    The voltage and reactive power wind plant control model with which this
    wind dynamics lookup table is associated.
    '''
    WindProtectionIEC: Optional[ str | WindProtectionIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindProtectionIEC.WindDynamicsLookupTable'
        })
    '''
    The grid protection model with which this wind dynamics lookup table is
    associated.
    '''
@dataclass
class WindGenType3IEC(IdentifiedObject):
    '''
    Parent class supporting relationships to IEC wind turbines type 3 generator
    models of IEC type 3A and 3B.
    '''
    dipmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum active current ramp rate (<i>di</i><i><sub>pmax</sub></i>). It
    is a project-dependent parameter.
    '''
    diqmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive current ramp rate (<i>di</i><i><sub>qmax</sub></i>). It
    is a project-dependent parameter.
    '''
    xs: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Electromagnetic transient reactance (<i>x</i><i><sub>S</sub></i>). It is
    a type-dependent parameter.
    '''
    WindTurbineType3IEC: Optional[ str | WindTurbineType3IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3IEC.WindGenType3IEC'
        })
    '''
    Wind turbine type 3 model with which this wind generator type 3 is associated.
    '''
@dataclass
class WindGenType3aIEC(WindGenType3IEC):
    '''
    IEC type 3A generator set model.
    Reference: IEC 61400-27-1:2015, 5.6.3.2.
    '''
    kpc: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current PI controller proportional gain (<i>K</i><i><sub>Pc</sub></i>).
    It is a type-dependent parameter.
    '''
    tic: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current PI controller integration time constant (<i>T</i><i><sub>Ic</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    WindTurbineType4IEC: Optional[ str | WindTurbineType4IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType4IEC.WindGenType3aIEC'
        })
    '''
    Wind turbine type 4 model with which this wind generator type 3A model
    is associated.
    '''
@dataclass
class WindGenType3bIEC(WindGenType3IEC):
    '''
    IEC type 3B generator set model.
    Reference: IEC 61400-27-1:2015, 5.6.3.3.
    '''
    mwtcwp: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Crowbar control mode (<i>M</i><i><sub>WTcwp</sub></i>). It is a case-dependent
    parameter.
    true = 1 in the IEC model
    false = 0 in the IEC model.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Current generation time constant (<i>T</i><i><sub>g</sub></i>) (&gt;= 0).
    It is a type-dependent parameter.
    '''
    two: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant for crowbar washout filter (<i>T</i><i><sub>wo</sub></i>)
    (&gt;= 0). It is a case-dependent parameter.
    '''
@dataclass
class WindGenType4IEC(IdentifiedObject):
    '''
    IEC type 4 generator set model.
    Reference: IEC 61400-27-1:2015, 5.6.3.4.
    '''
    dipmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum active current ramp rate (<i>di</i><i><sub>pmax</sub></i>). It
    is a project-dependent parameter.
    '''
    diqmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive current ramp rate (<i>di</i><i><sub>qmax</sub></i>). It
    is a project-dependent parameter.
    '''
    diqmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum reactive current ramp rate (<i>di</i><i><sub>qmin</sub></i>). It
    is a project-dependent parameter.
    '''
    tg: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant (<i>T</i><i><sub>g</sub></i>) (&gt;= 0). It is a type-dependent
    parameter.
    '''
    WindTurbineType4aIEC: Optional[ str | WindTurbineType4aIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType4aIEC.WindGenType4IEC'
        })
    '''
    Wind turbine type 4A model with which this wind generator type 4 model
    is associated.
    '''
    WindTurbineType4bIEC: Optional[ str | WindTurbineType4bIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType4bIEC.WindGenType4IEC'
        })
    '''
    Wind turbine type 4B model with which this wind generator type 4 model
    is associated.
    '''
@dataclass
class WindMechIEC(IdentifiedObject):
    '''
    Two mass model.
    Reference: IEC 61400-27-1:2015, 5.6.2.1.
    '''
    cdrt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Drive train damping (<i>c</i><i><sub>drt</sub></i><i>)</i>. It is a type-dependent
    parameter.
    '''
    hgen: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inertia constant of generator (<i>H</i><i><sub>gen</sub></i>) (&gt;= 0).
    It is a type-dependent parameter.
    '''
    hwtr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Inertia constant of wind turbine rotor (<i>H</i><i><sub>WTR</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    kdrt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Drive train stiffness (<i>k</i><i><sub>drt</sub></i>). It is a type-dependent
    parameter.
    '''
    WindTurbineType1or2IEC: Optional[ str | WindTurbineType1or2IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType1or2IEC.WindMechIEC'
        })
    '''
    Wind generator type 1 or type 2 model with which this wind mechanical model
    is associated.
    '''
    WindTurbineType3IEC: Optional[ str | WindTurbineType3IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3IEC.WindMechIEC'
        })
    '''
    Wind turbine type 3 model with which this wind mechanical model is associated.
    '''
    WindTurbineType4bIEC: Optional[ str | WindTurbineType4bIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType4bIEC.WindMechIEC'
        })
    '''
    Wind turbine type 4B model with which this wind mechanical model is associated.
    '''
@dataclass
class WindPitchContPowerIEC(IdentifiedObject):
    '''
    Pitch control power model.
    Reference: IEC 61400-27-1:2015, 5.6.5.1.
    '''
    dpmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate limit for increasing power (<i>dp</i><i><sub>max</sub></i>) (&gt;
    WindPitchContPowerIEC.dpmin). It is a type-dependent parameter.
    '''
    dpmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Rate limit for decreasing power (<i>dp</i><i><sub>min</sub></i>) (&lt;
    WindPitchContPowerIEC.dpmax). It is a type-dependent parameter.
    '''
    pmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum power setting (<i>p</i><i><sub>min</sub></i>). It is a type-dependent
    parameter.
    '''
    pset: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If <i>p</i><i><sub>init</sub></i><sub> </sub>&lt; <i>p</i><i><sub>set</sub></i><sub>
    </sub>then power will be ramped down to <i>p</i><i><sub>min</sub></i>.
    It is (<i>p</i><i><sub>set</sub></i>) in the IEC 61400-27-1:2015. It is
    a type-dependent parameter.
    '''
    t1: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant (<i>T</i><i><sub>1</sub></i>) (&gt;= 0). It is a type-dependent
    parameter.
    '''
    tr: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage measurement time constant (<i>T</i><i><sub>r</sub></i>) (&gt;=
    0). It is a type-dependent parameter.
    '''
    uuvrt: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Dip detection threshold (<i>u</i><i><sub>UVRT</sub></i>). It is a type-dependent
    parameter.
    '''
    WindGenTurbineType1bIEC: Optional[ str | WindGenTurbineType1bIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindGenTurbineType1bIEC.WindPitchContPowerIEC'
        })
    '''
    Wind turbine type 1B model with which this pitch control power model is
    associated.
    '''
    WindGenTurbineType2IEC: Optional[ str | WindGenTurbineType2IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindGenTurbineType2IEC.WindPitchContPowerIEC'
        })
    '''
    Wind turbine type 2 model with which this pitch control power model is
    associated.
    '''
@dataclass
class WindPlantFreqPcontrolIEC(IdentifiedObject):
    '''
    Frequency and active power controller model.
    Reference: IEC 61400-27-1:2015, Annex D.
    '''
    kiwpp: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Plant P controller integral gain (<i>K</i><i><sub>IWPp</sub></i>). It is
    a project-dependent parameter.
    '''
    kpwpp: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Plant P controller proportional gain (<i>K</i><i><sub>PWPp</sub></i>).
    It is a project-dependent parameter.
    '''
    dprefmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum ramp rate of <i>p</i><i><sub>WTref</sub></i> request from the plant
    controller to the wind turbines (<i>dp</i><i><sub>refmax</sub></i>) (&gt;
    WindPlantFreqPcontrolIEC.dprefmin). It is a case-dependent parameter.
    '''
    dprefmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum (negative) ramp rate of <i>p</i><i><sub>WTref</sub></i> request
    from the plant controller to the wind turbines (<i>dp</i><i><sub>refmin</sub></i>)
    (&lt; WindPlantFreqPcontrolIEC.dprefmax). It is a project-dependent parameter.
    '''
    dpwprefmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum positive ramp rate for wind plant power reference (<i>dp</i><i><sub>WPrefmax</sub></i>)
    (&gt; WindPlantFreqPcontrolIEC.dpwprefmin). It is a project-dependent parameter.
    '''
    dpwprefmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum negative ramp rate for wind plant power reference (<i>dp</i><i><sub>WPrefmin</sub></i>)
    (&lt; WindPlantFreqPcontrolIEC.dpwprefmax). It is a project-dependent parameter.
    '''
    kiwppmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum PI integrator term (<i>K</i><i><sub>IWPpmax</sub></i>) (&gt; WindPlantFreqPcontrolIEC.kiwppmin).
    It is a project-dependent parameter.
    '''
    kiwppmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum PI integrator term (<i>K</i><i><sub>IWPpmin</sub></i>) (&lt; WindPlantFreqPcontrolIEC.kiwppmax).
    It is a project-dependent parameter.
    '''
    kwppref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Power reference gain (<i>K</i><i><sub>WPpref</sub></i>). It is a project-dependent
    parameter.
    '''
    prefmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum <i>p</i><i><sub>WTref</sub></i> request from the plant controller
    to the wind turbines (<i>p</i><i><sub>refmax</sub></i>) (&gt; WindPlantFreqPcontrolIEC.prefmin).
    It is a project-dependent parameter.
    '''
    prefmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum <i>p</i><i><sub>WTref</sub></i> request from the plant controller
    to the wind turbines (<i>p</i><i><sub>refmin</sub></i>) (&lt; WindPlantFreqPcontrolIEC.prefmax).
    It is a project-dependent parameter.
    '''
    tpft: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant in reference value transfer function (<i>T</i><i><sub>pft</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    tpfv: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant in reference value transfer function (<i>T</i><i><sub>pfv</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    twpffiltp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for frequency measurement (<i>T</i><i><sub>WPffiltp</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    twppfiltp: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for active power measurement (<i>T</i><i><sub>WPpfiltp</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    WindPlantIEC: Optional[ str | WindPlantIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPlantIEC.WindPlantFreqPcontrolIEC'
        })
    '''
    Wind plant model with which this wind plant frequency and active power
    control is associated.
    '''
@dataclass
class WindPlantReactiveControlIEC(IdentifiedObject):
    '''
    Simplified plant voltage and reactive power control model for use with
    type 3 and type 4 wind turbine models.
    Reference: IEC 61400-27-1:2015, Annex D.
    '''
    kiwpx: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Plant Q controller integral gain (<i>K</i><i><sub>IWPx</sub></i>). It is
    a project-dependent parameter.
    '''
    kpwpx: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Plant Q controller proportional gain (<i>K</i><i><sub>PWPx</sub></i>).
    It is a project-dependent parameter.
    '''
    dxrefmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum positive ramp rate for wind turbine reactive power/voltage reference
    (<i>dx</i><i><sub>refmax</sub></i>) (&gt; WindPlantReactiveControlIEC.dxrefmin).
    It is a project-dependent parameter.
    '''
    dxrefmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum negative ramp rate for wind turbine reactive power/voltage reference
    (<i>dx</i><i><sub>refmin</sub></i>) (&lt; WindPlantReactiveControlIEC.dxrefmax).
    It is a project-dependent parameter.
    '''
    kiwpxmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum reactive power/voltage reference from integration (<i>K</i><i><sub>IWPxmax</sub></i>)
    (&gt; WindPlantReactiveControlIEC.kiwpxmin). It is a project-dependent
    parameter.
    '''
    kiwpxmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum reactive power/voltage reference from integration (<i>K</i><i><sub>IWPxmin</sub></i>)
    (&lt; WindPlantReactiveControlIEC.kiwpxmax). It is a project-dependent
    parameter.
    '''
    kwpqref: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power reference gain (<i>K</i><i><sub>WPqref</sub></i>). It is
    a project-dependent parameter.
    '''
    kwpqu: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Plant voltage control droop (<i>K</i><i><sub>WPqu</sub></i>). It is a project-dependent
    parameter.
    '''
    tuqfilt: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for voltage-dependent reactive power (<i>T</i><i><sub>uqfilt</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    twppfiltq: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for active power measurement (<i>T</i><i><sub>WPpfiltq</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    twpqfiltq: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for reactive power measurement (<i>T</i><i><sub>WPqfiltq</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    twpufiltq: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Filter time constant for voltage measurement (<i>T</i><i><sub>WPufiltq</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    txft: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lead time constant in reference value transfer function (<i>T</i><i><sub>xft</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    txfv: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Lag time constant in reference value transfer function (<i>T</i><i><sub>xfv</sub></i>)
    (&gt;= 0). It is a project-dependent parameter.
    '''
    uwpqdip: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage threshold for UVRT detection in Q control (<i>u</i><i><sub>WPqdip</sub></i>).
    It is a project-dependent parameter.
    '''
    windPlantQcontrolModesType: Optional[ str | WindPlantQcontrolModeKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactive power/voltage controller mode (<i>M</i><i><sub>WPqmode</sub></i>).
    It is a case-dependent parameter.
    '''
    xrefmax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum <i>x</i><sub>WTref</sub> (<i>q</i><i><sub>WTref</sub></i> or delta<i>
    u</i><i><sub>WTref</sub></i>) request from the plant controller (<i>x</i><i><sub>refmax</sub></i>)
    (&gt; WindPlantReactiveControlIEC.xrefmin). It is a case-dependent parameter.
    '''
    xrefmin: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Minimum <i>x</i><i><sub>WTref</sub></i> (<i>q</i><i><sub>WTref</sub></i>
    or delta <i>u</i><i><sub>WTref</sub></i>) request from the plant controller
    (<i>x</i><i><sub>refmin</sub></i>) (&lt; WindPlantReactiveControlIEC.xrefmax).
    It is a project-dependent parameter.
    '''
    WindPlantIEC: Optional[ str | WindPlantIEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPlantIEC.WindPlantReactiveControlIEC'
        })
    '''
    Wind plant reactive control model associated with this wind plant.
    '''
@dataclass
class WindProtectionIEC(IdentifiedObject):
    '''
    The grid protection model includes protection against over- and under-voltage,
    and against over- and under-frequency.
    Reference: IEC 61400-27-1:2015, 5.6.6.
    '''
    mzc: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero crossing measurement mode (<i>Mzc</i>). It is a type-dependent parameter.
    true = WT protection system uses zero crossings to detect frequency (1
    in the IEC model)
    false = WT protection system does not use zero crossings to detect frequency
    (0 in the IEC model).
    '''
    dfimax: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Maximum rate of change of frequency (<i>dF</i><i><sub>max</sub></i>). It
    is a type-dependent parameter.
    '''
    fover: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Wind turbine over frequency protection activation threshold (<i>f</i><i><sub>over</sub></i>).
    It is a project-dependent parameter.
    '''
    funder: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Wind turbine under frequency protection activation threshold (<i>f</i><i><sub>under</sub></i>).
    It is a project-dependent parameter.
    '''
    tfma: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time interval of moving average window (<i>TfMA</i>) (&gt;= 0). It is a
    type-dependent parameter.
    '''
    uover: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Wind turbine over voltage protection activation threshold (<i>u</i><i><sub>over</sub></i>).
    It is a project-dependent parameter.
    '''
    uunder: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Wind turbine under voltage protection activation threshold (<i>u</i><i><sub>under</sub></i>).
    It is a project-dependent parameter.
    '''
    WindTurbineType1or2IEC: Optional[ str | WindTurbineType1or2IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType1or2IEC.WindProtectionIEC'
        })
    '''
    Wind generator type 1 or type 2 model with which this wind turbine protection
    model is associated.
    '''
    WindTurbineType3or4IEC: Optional[ str | WindTurbineType3or4IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3or4IEC.WindProtectionIEC'
        })
    '''
    Wind generator type 3 or type 4 model with which this wind turbine protection
    model is associated.
    '''
@dataclass
class WindRefFrameRotIEC(IdentifiedObject):
    '''
    Reference frame rotation model.
    Reference: IEC 61400-27-1:2015, 5.6.3.5.
    '''
    tpll: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Time constant for PLL first order filter model (<i>T</i><i><sub>PLL</sub></i>)
    (&gt;= 0). It is a type-dependent parameter.
    '''
    upll1: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage below which the angle of the voltage is filtered and possibly also
    frozen (<i>u</i><i><sub>PLL1</sub></i>). It is a type-dependent parameter.
    '''
    upll2: Optional[ float | PU ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Voltage (<i>u</i><i><sub>PLL2</sub></i>) below which the angle of the voltage
    is frozen if <i>u</i><i><sub>PLL2</sub></i><sub> </sub>is smaller or equal
    to <i>u</i><i><sub>PLL1</sub></i> . It is a type-dependent parameter.
    '''
    WindTurbineType3or4IEC: Optional[ str | WindTurbineType3or4IEC ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindTurbineType3or4IEC.WindRefFrameRotIEC'
        })
    '''
    Wind turbine type 3 or type 4 model with which this reference frame rotation
    model is associated.
    '''
@dataclass
class IgnAngleContInverter():
    '''
    '''
    CSCtype1: Optional[ str | CSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_2F9E4B3A_A9A7_43b4_8FAD_55865942D1B6-A'
        })
    '''
    '''
@dataclass
class IntegerQuantity():
    '''
    Quantity with integer value and associated unit information.
    '''
    value: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value of this quantity.
    '''
    multiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit multiplier of this quantity.
    '''
    unit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit of this quantity.
    '''
@dataclass
class IrregularTimePoint():
    '''
    TimePoints for a schedule where the time between the points varies.
    '''
    value1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The first value at the time. The meaning of the value is defined by the
    derived type of the associated schedule.
    '''
    value2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The second value at the time. The meaning of the value is defined by the
    derived type of the associated schedule.
    '''
    time: Optional[ float | Seconds ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The time is relative to the schedule starting time.
    '''
    IntervalSchedule: Optional[ str | IrregularIntervalSchedule ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'IrregularIntervalSchedule.TimePoints'
        })
    '''
    An IrregularTimePoint belongs to an IrregularIntervalSchedule.
    '''
@dataclass
class LoadModelPartVersion():
    '''
    Load a model part version.
    '''
@dataclass
class MonthDayInterval():
    '''
    Interval between two times specified as month and day.
    '''
    end: Optional[ str | MonthDay ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    End time of this interval.
    '''
    start: Optional[ str | MonthDay ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Start time of this interval.
    '''
@dataclass
class Name():
    '''
    The Name class provides the means to define any number of human readable
    names for an object. A name is <b>not</b> to be used for defining inter-object
    relationships. For inter-object relationships instead use the object identification
    'mRID'.
    '''
    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Any free text that name the object.
    '''
    IdentifiedObject: Optional[ str | IdentifiedObject ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'IdentifiedObject.Names'
        })
    '''
    Identified object that this name designates.
    '''
    NameType: Optional[ str | NameType ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NameType.Names'
        })
    '''
    Type of this name.
    '''
@dataclass
class NameType():
    '''
    Type of name. Possible values for attribute 'name' are implementation dependent
    but standard profiles may specify types. An enterprise may have multiple
    IT systems each having its own local name for the same object, e.g. a planning
    system may have different names from an EMS. An object may also have different
    names within the same IT system, e.g. localName as defined in CIM version
    14. The definition from CIM14 is:
    The localName is a human readable name of the object. It is a free text
    name local to a node in a naming hierarchy similar to a file directory
    structure. A power system related naming hierarchy may be: Substation,
    VoltageLevel, Equipment etc. Children of the same parent in such a hierarchy
    have names that typically are unique among them.
    '''
    description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Description of the name type.
    '''
    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Name of the name type.
    '''
    NameTypeAuthority: Optional[ str | NameTypeAuthority ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NameTypeAuthority.NameTypes'
        })
    '''
    Authority responsible for managing names of this type.
    '''
@dataclass
class NameTypeAuthority():
    '''
    Authority responsible for creation and management of names of a given type;
    typically an organization or an enterprise system.
    '''
    description: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Description of the name type authority.
    '''
    name: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Name of the name type authority.
    '''
@dataclass
class NetworkModelCaseDefinition():
    '''
    Instructions to build a network model case, including when appropriate
    the results.
    '''
@dataclass
class NetworkModelProjectCollection():
    '''
    '''
@dataclass
class NetworkModelProjectDocument():
    '''
    '''
@dataclass
class NonlinearShuntCompensatorPhasePoint():
    '''
    A per phase non linear shunt compensator bank or section admittance value.
    The number of NonlinearShuntCompenstorPhasePoint instances associated with
    a NonlinearShuntCompensatorPhase shall be equal to ShuntCompensatorPhase.maximumSections.
    ShuntCompensator.sections shall only be set to one of the NonlinearShuntCompenstorPhasePoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPhasePoint-s.
    '''
    sectionNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The number of the section.
    '''
    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) susceptance per section.
    '''
    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) conductance per section.
    '''
    NonlinearShuntCompensatorPhase: Optional[ str | NonlinearShuntCompensatorPhase ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NonlinearShuntCompensatorPhase.NonlinearShuntCompensatorPhasePoints'
        })
    '''
    Non-linear shunt compensator phase owning this point.
    '''
@dataclass
class NonlinearShuntCompensatorPoint():
    '''
    A non linear shunt compensator bank or section admittance value. The number
    of NonlinearShuntCompenstorPoint instances associated with a NonlinearShuntCompensator
    shall be equal to ShuntCompensator.maximumSections. ShuntCompensator.sections
    shall only be set to one of the NonlinearShuntCompenstorPoint.sectionNumber.
    There is no interpolation between NonlinearShuntCompenstorPoint-s.
    '''
    sectionNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The number of the section.
    '''
    b: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) susceptance per section.
    '''
    b0: Optional[ float | Susceptance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) susceptance per section.
    '''
    g: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Positive sequence shunt (charging) conductance per section.
    '''
    g0: Optional[ float | Conductance ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Zero sequence shunt (charging) conductance per section.
    '''
    NonlinearShuntCompensator: Optional[ str | NonlinearShuntCompensator ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'NonlinearShuntCompensator.NonlinearShuntCompensatorPoints'
        })
    '''
    Non-linear shunt compensator owning this point.
    '''
@dataclass
class OperatingShare():
    '''
    Specifies the operations contract relationship between a power system resource
    and a contract participant.
    '''
    percentage: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Percentage operational ownership between the pair (power system resource
    and operating participant) associated with this share. The total percentage
    ownership for a power system resource should add to 100%.
    '''
    OperatingParticipant: Optional[ str | OperatingParticipant ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OperatingParticipant.OperatingShare'
        })
    '''
    The operating participant having this share with the associated power system
    resource.
    '''
    PowerSystemResource: Optional[ str | PowerSystemResource ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerSystemResource.OperatingShare'
        })
    '''
    The power system resource to which the share applies.
    '''
@dataclass
class Operation():
    '''
    '''
    NetworkModelCaseDefinition: Optional[ str | NetworkModelCaseDefinition ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_33808218_A5AF_495e_8ACC_888EF93D696E-B'
        })
    '''
    '''
@dataclass
class OperatonalLimitTypeScaling():
    '''
    One operational limit type scales values of another operational limit type
    when under the same operational limit set. This applies to any operational
    limit assigned to the target operational limit type and without other limit
    dependency models.
    '''
    scalingPercent: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The percentage scaling of the source limit to compute the target limit.
    Applys to operational limits within an operaitonal limit set when both
    source and target operational limit types exist.
    '''
    SourceOperationalLimitType: Optional[ str | OperationalLimitType ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OperationalLimitType.SourceOperationalLimitTypeScaling'
        })
    '''
    '''
    TargetOperationalLimit: Optional[ str | OperationalLimitType ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OperationalLimitType.TargetOperationalLimitmTypeScaling'
        })
    '''
    '''
@dataclass
class PFmode():
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Delay.PFmode'
        })
    '''
    '''
    VSCtype1: Optional[ str | VSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCtype1.PFmodel'
        })
    '''
    '''
@dataclass
class Pcontrol():
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Delay.Pcontrol'
        })
    '''
    '''
    VSCtype1: Optional[ str | VSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCtype1.Pcontrol'
        })
    '''
    '''
@dataclass
class PhaseImpedanceData():
    '''
    Impedance and conductance matrix element values.
    The diagonal elements are described by the elements having the same toPhase
    and fromPhase value and the off diagonal elements have different toPhase
    and fromPhase values. The matrix can also be stored in symmetric lower
    triangular format using the row and column attributes, which map to ACLineSegmentPhase.sequenceNumber.
    '''
    column: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The matrix element's column number, in the range 1 to row. Only the lower
    triangle needs to be stored. This column number matches ACLineSegmentPhase.sequenceNumber.
    '''
    row: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The matrix element’s row number, in the range 1 to PerLengthPhaseImpedance.conductorCount.
    Only the lower triangle needs to be stored. This row number matches ACLineSegmentPhase.sequenceNumber.
    '''
    b: Optional[ float | SusceptancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Susceptance matrix element value, per length of unit.
    '''
    fromPhase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Refer to the class description.
    '''
    g: Optional[ float | ConductancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Conductance matrix element value, per length of unit.
    '''
    r: Optional[ float | ResistancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Resistance matrix element value, per length of unit.
    '''
    toPhase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Refer to the class description.
    '''
    x: Optional[ float | ReactancePerLength ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Reactance matrix element value, per length of unit.
    '''
    PhaseImpedance: Optional[ str | PerLengthPhaseImpedance ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PerLengthPhaseImpedance.PhaseImpedanceData'
        })
    '''
    Conductor phase impedance to which this data belongs.
    '''
@dataclass
class PowerSystemProjectLifecycleToBeDeleted():
    '''
    Represent the base lifecycle of a functional model change that could be
    a construction of new elements.
    '''
    cancelled: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date the Power System Project is in cancelled stage.
    '''
    committed: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date Power System Project is in committed stage.
    '''
    inBuild: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date Power System Project is in build stage.
    '''
    inPlan: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The date Power System Project is in planning stage.
    '''
@dataclass
class ProprietaryParameterDynamics():
    '''
    Supports definition of one or more parameters of several different datatypes
    for use by proprietary user-defined models.
    This class does not inherit from IdentifiedObject since it is not intended
    that a single instance of it be referenced by more than one proprietary
    user-defined model instance.
    '''
    booleanParameterValue: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Boolean parameter value. If this attribute is populated, integerParameterValue
    and floatParameterValue will not be.
    '''
    floatParameterValue: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Floating point parameter value. If this attribute is populated, booleanParameterValue
    and integerParameterValue will not be.
    '''
    integerParameterValue: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Integer parameter value. If this attribute is populated, booleanParameterValue
    and floatParameterValue will not be.
    '''
    parameterNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Sequence number of the parameter among the set of parameters associated
    with the related proprietary user-defined model.
    '''
    AsynchronousMachineUserDefined: Optional[ str | AsynchronousMachineUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'AsynchronousMachineUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    CSCUserDefined: Optional[ str | CSCUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'CSCUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    DiscontinuousExcitationControlUserDefined: Optional[ str | DiscontinuousExcitationControlUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'DiscontinuousExcitationControlUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    ExcitationSystemUserDefined: Optional[ str | ExcitationSystemUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ExcitationSystemUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    LoadUserDefined: Optional[ str | LoadUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'LoadUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    MechanicalLoadUserDefined: Optional[ str | MechanicalLoadUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MechanicalLoadUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    OverexcitationLimiterUserDefined: Optional[ str | OverexcitationLimiterUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'OverexcitationLimiterUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    PFVArControllerType1UserDefined: Optional[ str | PFVArControllerType1UserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PFVArControllerType1UserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    PFVArControllerType2UserDefined: Optional[ str | PFVArControllerType2UserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PFVArControllerType2UserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    PowerSystemStabilizerUserDefined: Optional[ str | PowerSystemStabilizerUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PowerSystemStabilizerUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    SVCUserDefined: Optional[ str | SVCUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SVCUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    SynchronousMachineUserDefined: Optional[ str | SynchronousMachineUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'SynchronousMachineUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    TurbineGovernorUserDefined: Optional[ str | TurbineGovernorUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TurbineGovernorUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    TurbineLoadControllerUserDefined: Optional[ str | TurbineLoadControllerUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TurbineLoadControllerUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    UnderexcitationLimiterUserDefined: Optional[ str | UnderexcitationLimiterUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'UnderexcitationLimiterUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    VoltageAdjusterUserDefined: Optional[ str | VoltageAdjusterUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VoltageAdjusterUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    VoltageCompensatorUserDefined: Optional[ str | VoltageCompensatorUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VoltageCompensatorUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    VSCUserDefined: Optional[ str | VSCUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    WindPlantUserDefined: Optional[ str | WindPlantUserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindPlantUserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    WindType1or2UserDefined: Optional[ str | WindType1or2UserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindType1or2UserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
    WindType3or4UserDefined: Optional[ str | WindType3or4UserDefined ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'WindType3or4UserDefined.ProprietaryParameterDynamics'
        })
    '''
    Proprietary user-defined model with which this parameter is associated.
    '''
@dataclass
class PublicX509Certificate():
    '''
    Used to convey information that will allow matching in order to determine
    which certificate to use. Actual certificates are exchanged externally
    to the CIM exchange.
    '''
    issuerName: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Represents the CA that issued the certificate. Defined to be per X.509.
    '''
    serialNumber: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Is the serial number of the certificate per X.509 definition.
    '''
    ISOUpperLayer: Optional[ str | ISOUpperLayer ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ISOUpperLayer.UpperLayerPublicX509Certificate'
        })
    '''
    Application layer used with the certificate for mutual authentication.
    '''
    TCPAccessPoint: Optional[ str | TCPAccessPoint ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TCPAccessPoint.PublicX509Certificate'
        })
    '''
    The association allows a certificate to be bound for use by TLS.
    '''
@dataclass
class Qlimiter():
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Delay.Qlimiter'
        })
    '''
    '''
    VSCtype1: Optional[ str | VSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCtype1.Qlimiter'
        })
    '''
    '''
@dataclass
class Qmode():
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Delay.Qmode'
        })
    '''
    '''
    VSCtype1: Optional[ str | VSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCtype1.Qmode'
        })
    '''
    '''
@dataclass
class Qregulator():
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Delay.Qregulator'
        })
    '''
    '''
    VSCtype1: Optional[ str | VSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCtype1.Qregulator'
        })
    '''
    '''
@dataclass
class Quality61850():
    '''
    Quality flags in this class are as defined in IEC 61850, except for estimatorReplaced,
    which has been included in this class for convenience.
    '''
    badReference: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Measurement value may be incorrect due to a reference being out of calibration.
    '''
    estimatorReplaced: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value has been replaced by State Estimator. estimatorReplaced is not an
    IEC61850 quality bit but has been put in this class for convenience.
    '''
    failure: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    This identifier indicates that a supervision function has detected an internal
    or external failure, e.g. communication failure.
    '''
    oldData: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Measurement value is old and possibly invalid, as it has not been successfully
    updated during a specified time interval.
    '''
    operatorBlocked: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Measurement value is blocked and hence unavailable for transmission.
    '''
    oscillatory: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    To prevent some overload of the communication it is sensible to detect
    and suppress oscillating (fast changing) binary inputs. If a signal changes
    in a defined time twice in the same direction (from 0 to 1 or from 1 to
    0) then oscillation is detected and the detail quality identifier "oscillatory"
    is set. If it is detected a configured numbers of transient changes could
    be passed by. In this time the validity status "questionable" is set. If
    after this defined numbers of changes the signal is still in the oscillating
    state the value shall be set either to the opposite state of the previous
    stable value or to a defined default value. In this case the validity status
    "questionable" is reset and "invalid" is set as long as the signal is oscillating.
    If it is configured such that no transient changes should be passed by
    then the validity status "invalid" is set immediately in addition to the
    detail quality identifier "oscillatory" (used for status information only).
    '''
    outOfRange: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Measurement value is beyond a predefined range of value.
    '''
    overFlow: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Measurement value is beyond the capability of being represented properly.
    For example, a counter value overflows from maximum count back to a value
    of zero.
    '''
    suspect: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    A correlation function has detected that the value is not consistent with
    other values. Typically set by a network State Estimator.
    '''
    test: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Measurement value is transmitted for test purposes.
    '''
    source: Optional[ str | Source ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Source gives information related to the origin of a value. The value may
    be acquired from the process, defaulted or substituted.
    '''
    validity: Optional[ str | Validity ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Validity of the measurement value.
    '''
@dataclass
class MeasurementValueQuality(Quality61850):
    '''
    Measurement quality flags. Bits 0-10 are defined for substation automation
    in IEC 61850-7-3. Bits 11-15 are reserved for future expansion by that
    document. Bits 16-31 are reserved for EMS applications.
    '''
    MeasurementValue: Optional[ str | MeasurementValue ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'MeasurementValue.MeasurementValueQuality'
        })
    '''
    A MeasurementValue has a MeasurementValueQuality associated with it.
    '''
@dataclass
class RegularTimePoint():
    '''
    Time point for a schedule where the time between the consecutive points
    is constant.
    '''
    sequenceNumber: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The position of the regular time point in the sequence. Note that time
    points don't have to be sequential, i.e. time points may be omitted. The
    actual time for a RegularTimePoint is computed by multiplying the associated
    regular interval schedule's time step with the regular time point sequence
    number and adding the associated schedules start time. To specify values
    for the start time, use sequence number 0. The sequence number cannot be
    negative.
    '''
    value1: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The first value at the time. The meaning of the value is defined by the
    derived type of the associated schedule.
    '''
    value2: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The second value at the time. The meaning of the value is defined by the
    derived type of the associated schedule.
    '''
    IntervalSchedule: Optional[ str | RegularIntervalSchedule ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RegularIntervalSchedule.TimePoints'
        })
    '''
    Regular interval schedule containing this time point.
    '''
@dataclass
class StateVariable():
    '''
    An abstract class for state variables.
    '''
@dataclass
class SvInjection(StateVariable):
    '''
    The SvInjection reports the calculated bus injection minus the sum of the
    terminal flows. The terminal flow is positive out from the bus (load sign
    convention) and bus injection has positive flow into the bus. SvInjection
    may have the remainder after state estimation or slack after power flow
    calculation.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The terminal phase at which the connection is applied. If missing, the
    injection is assumed to be balanced among non-neutral phases.
    '''
    pInjection: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The active power mismatch between calculated injection and initial injection.
    Positive sign means injection into the TopologicalNode (bus).
    '''
    qInjection: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactive power mismatch between calculated injection and initial injection.
    Positive sign means injection into the TopologicalNode (bus).
    '''
    TopologicalNode: Optional[ str | TopologicalNode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.SvInjection'
        })
    '''
    The topological node associated with the flow injection state variable.
    '''
@dataclass
class SvPowerFlow(StateVariable):
    '''
    State variable for power flow. Load convention is used for flow direction.
    This means flow out from the TopologicalNode into the equipment is positive.
    '''
    p: Optional[ float | ActivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The active power flow. Load sign convention is used, i.e. positive sign
    means flow out from a TopologicalNode (bus) into the conducting equipment.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The individual phase of the flow. If unspecified, then assumed to be balanced
    among phases.
    '''
    q: Optional[ float | ReactivePower ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The reactive power flow. Load sign convention is used, i.e. positive sign
    means flow out from a TopologicalNode (bus) into the conducting equipment.
    '''
    EnergyGroup: Optional[ str | EnergyGroup ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_9E145EE8_2544_4933_9DE4_FB008FF09419-A'
        })
    '''
    '''
    Terminal: Optional[ str | Terminal ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Terminal.SvPowerFlow'
        })
    '''
    The terminal associated with the power flow state variable.
    '''
@dataclass
class SvShuntCompensatorSections(StateVariable):
    '''
    State variable for the number of sections in service for a shunt compensator.
    '''
    sections: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The number of sections in service as a continuous variable. The attribute
    shall be a positive value or zero. To get integer value scale with ShuntCompensator.bPerSection.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The terminal phase at which the connection is applied. If missing, the
    injection is assumed to be balanced among non-neutral phases.
    '''
    ShuntCompensator: Optional[ str | ShuntCompensator ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ShuntCompensator.SvShuntCompensatorSections'
        })
    '''
    The shunt compensator for which the state applies.
    '''
@dataclass
class SvStatus(StateVariable):
    '''
    State variable for status.
    '''
    inService: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The in service status as a result of topology processing. It indicates
    if the equipment is considered as energized by the power flow. It reflects
    if the equipment is connected within a solvable island. It does not necessarily
    reflect whether or not the island was solved by the power flow.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The individual phase status. If the attribute is unspecified, then three
    phase model is assumed.
    '''
    ConductingEquipment: Optional[ str | ConductingEquipment ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'ConductingEquipment.SvStatus'
        })
    '''
    The conducting equipment associated with the status state variable.
    '''
@dataclass
class SvSwitch(StateVariable):
    '''
    State variable for switch.
    '''
    open: Optional[ bool ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The attribute tells if the computed state of the switch is considered open.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The terminal phase at which the connection is applied. If missing, the
    injection is assumed to be balanced among non-neutral phases.
    '''
    Switch: Optional[ str | Switch ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Switch.SvSwitch'
        })
    '''
    The switch associated with the switch state.
    '''
@dataclass
class SvTapStep(StateVariable):
    '''
    State variable for transformer tap step.
    '''
    position: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The floating point tap position. This is not the tap ratio, but rather
    the tap step position as defined by the related tap changer model and normally
    is constrained to be within the range of minimum and maximum tap positions.
    '''
    TapChanger: Optional[ str | TapChanger ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TapChanger.SvTapStep'
        })
    '''
    The tap changer associated with the tap step state.
    '''
@dataclass
class SvVoltage(StateVariable):
    '''
    State variable for voltage.
    '''
    angle: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The voltage angle of the topological node complex voltage with respect
    to system reference.
    '''
    phase: Optional[ str | SinglePhaseKind ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    If specified the voltage is the line to ground voltage of the individual
    phase. If unspecified, then the voltage is assumed balanced.
    '''
    v: Optional[ float | Voltage ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The voltage magnitude at the topological node. The attribute shall be a
    positive value.
    '''
    TopologicalNode: Optional[ str | TopologicalNode ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TopologicalNode.SvVoltage'
        })
    '''
    The topological node associated with the voltage state.
    '''
@dataclass
class StringQuantity():
    '''
    Quantity with string value (when it is not important whether it is an integral
    or a floating point number) and associated unit information.
    '''
    value: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Value of this quantity.
    '''
    multiplier: Optional[ str | UnitMultiplier ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit multiplier of this quantity.
    '''
    unit: Optional[ str | UnitSymbol ] = field(
        default = None,
        metadata = {
            'type': 'enumeration',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Unit of this quantity.
    '''
@dataclass
class TapChangerTablePoint():
    '''
    Describes each tap step in the tabular curve.
    '''
    ratio: Optional[ float ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The voltage at the tap step divided by rated voltage of the transformer
    end having the tap changer. Hence this is a value close to one.
    For example, if the ratio at step 1 is 1.01, and the rated voltage of the
    transformer end is 110kV, then the voltage obtained by setting the tap
    changer to step 1 to is 111.1kV.
    '''
    step: Optional[ int ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The tap step.
    '''
    b: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The magnetizing branch susceptance deviation as a percentage of nominal
    value. The actual susceptance is calculated as follows:
    calculated magnetizing susceptance = b(nominal) * (1 + b(from this class)/100).
    The b(nominal) is defined as the static magnetizing susceptance on the
    associated power transformer end or ends. This model assumes the star impedance
    (pi model) form.
    '''
    g: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The magnetizing branch conductance deviation as a percentage of nominal
    value. The actual conductance is calculated as follows:
    calculated magnetizing conductance = g(nominal) * (1 + g(from this class)/100).
    The g(nominal) is defined as the static magnetizing conductance on the
    associated power transformer end or ends. This model assumes the star impedance
    (pi model) form.
    '''
    r: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The resistance deviation as a percentage of nominal value. The actual reactance
    is calculated as follows:
    calculated resistance = r(nominal) * (1 + r(from this class)/100). The
    r(nominal) is defined as the static resistance on the associated power
    transformer end or ends. This model assumes the star impedance (pi model)
    form.
    '''
    x: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The series reactance deviation as a percentage of nominal value. The actual
    reactance is calculated as follows:
    calculated reactance = x(nominal) * (1 + x(from this class)/100). The x(nominal)
    is defined as the static series reactance on the associated power transformer
    end or ends. This model assumes the star impedance (pi model) form.
    '''
@dataclass
class PhaseTapChangerTablePoint(TapChangerTablePoint):
    '''
    Describes each tap step in the phase tap changer tabular curve.
    '''
    angle: Optional[ float | AngleDegrees ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The angle difference in degrees. A positive value indicates a positive
    angle variation from the Terminal at the PowerTransformerEnd, where the
    TapChanger is located, into the transformer.
    '''
    PhaseTapChangerTable: Optional[ str | PhaseTapChangerTable ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'PhaseTapChangerTable.PhaseTapChangerTablePoint'
        })
    '''
    The table of this point.
    '''
@dataclass
class RatioTapChangerTablePoint(TapChangerTablePoint):
    '''
    Describes each tap step in the ratio tap changer tabular curve.
    '''
    RatioTapChangerTable: Optional[ str | RatioTapChangerTable ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'RatioTapChangerTable.RatioTapChangerTablePoint'
        })
    '''
    Table of this point.
    '''
@dataclass
class TemperatureDependentLimitPoint():
    '''
    A point on a table of limit verses temperature.
    '''
    limitPercent: Optional[ float | PerCent ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The scaling of the operational limit in percent.
    '''
    temperature: Optional[ float | Temperature ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    The temperature of the table point.
    '''
    TemperatureDependentLimitTable: Optional[ str | TemperatureDependentLimitTable ] = field(
        default = None,
        metadata = {
            'type': 'Of Aggregate',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'TemperatureDependentLimitTable.TemperatureLimitTablePoint'
        })
    '''
    '''
@dataclass
class TimeInterval():
    '''
    Interval between two times.
    '''
    end: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    End time of this interval.
    '''
    start: Optional[ str ] = field(
        default = None,
        metadata = {
            'type': 'Attribute',
            'minOccurs': '1',
            'maxOccurs': '1'
        })
    '''
    Start time of this interval.
    '''
@dataclass
class Umode():
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'Delay.Umode'
        })
    '''
    '''
    VSCtype1: Optional[ str | VSCtype1 ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'VSCtype1.Umode'
        })
    '''
    '''
@dataclass
class VDCOL():
    '''
    '''
    IdcInverterControl: Optional[ str | IdcInverterControl ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_D9D8D23C_3E4B_4af0_B456_954687DFA9E6-A'
        })
    '''
    '''
    Delay: Optional[ str | Delay ] = field(
        default = None,
        metadata = {
            'type': 'Association',
            'minOccurs': '1',
            'maxOccurs': '1',
            'inverse': 'EAID_DA56FBC7_3797_4264_AE29_61FEBA3C58F7-B'
        })
    '''
    '''
class AnalogToDigitalLogicKind( Enum ):
    '''
    Categories of analog to digital (or logical result) comparison.
    '''
    eq = 'eq'
    '''
    Equal (like) comparison operation.
    '''
    ge = 'ge'
    '''
    Greater or equal comparison operation.
    '''
    gt = 'gt'
    '''
    Greater than comparison operation.
    '''
    le = 'le'
    '''
    Less or equal comparison operation.
    '''
    lt = 'lt'
    '''
    Less than comparison operation.
    '''
    ne = 'ne'
    '''
    Not equal (unlike) comparison operation.
    '''
class ApplicationSecurityKind( Enum ):
    '''
    Specifies the expected security mechanism, per IEC 62351-4, to be utilized.
    '''
    endToEndSecure = 'endToEndSecure'
    '''
    Indicates that E2E-security shall be used in order to allow establishment
    of an MMS association.
    '''
    nonSecure = 'nonSecure'
    '''
    Indicates that an application security shall not be used in order to allow
    establishment of an MSS association.
    '''
    secure = 'secure'
    '''
    Indicates that the A-security-profile as specified in Clause 11 (or IEC
    TS 62351-4:2007) shall be used in order to allow establishment of an MMS
    association.
    '''
class AsynchronousMachineKind( Enum ):
    '''
    Kind of Asynchronous Machine.
    '''
    generator = 'generator'
    '''
    The Asynchronous Machine is a generator.
    '''
    motor = 'motor'
    '''
    The Asynchronous Machine is a motor.
    '''
class BatteryStateKind( Enum ):
    '''
    The state of the battery unit.
    '''
    charging = 'charging'
    '''
    Stored energy is increasing.
    '''
    discharging = 'discharging'
    '''
    Stored energy is decreasing.
    '''
    empty = 'empty'
    '''
    Unable to discharge, and not charging.
    '''
    full = 'full'
    '''
    Unable to charge, and not discharging.
    '''
    waiting = 'waiting'
    '''
    Neither charging nor discharging, but able to do so.
    '''
class BoilerControlMode( Enum ):
    '''
    Boiler control mode.
    '''
    coordinated = 'coordinated'
    '''
    Coordinated.
    '''
    following = 'following'
    '''
    Following.
    '''
class BreakerConfiguration( Enum ):
    '''
    Switching arrangement for bay.
    '''
    breakerAndAHalf = 'breakerAndAHalf'
    '''
    Breaker and a half.
    '''
    doubleBreaker = 'doubleBreaker'
    '''
    Double breaker.
    '''
    noBreaker = 'noBreaker'
    '''
    No breaker.
    '''
    singleBreaker = 'singleBreaker'
    '''
    Single breaker.
    '''
class BusbarConfiguration( Enum ):
    '''
    Busbar layout for bay.
    '''
    doubleBus = 'doubleBus'
    '''
    Double bus.
    '''
    mainWithTransfer = 'mainWithTransfer'
    '''
    Main bus with transfer bus.
    '''
    ringBus = 'ringBus'
    '''
    Ring bus.
    '''
    singleBus = 'singleBus'
    '''
    Single bus.
    '''
class CalculationKind( Enum ):
    '''
    Categorisation of calculation operation that can be done to Measurement.
    '''
    div = 'div'
    '''
    Division operation the input values (operands).
    '''
    mul = 'mul'
    '''
    Multiplication operation the input values (operands).
    '''
    sqrt = 'sqrt'
    '''
    Square root operator - only one input value (operands).
    '''
    sum = 'sum'
    '''
    Summation operation over the input values (operands).
    '''
class ContingencyEquipmentStatusKind( Enum ):
    '''
    Indicates the state which the contingency equipment is to be in when the
    contingency is applied.
    '''
    inService = 'inService'
    '''
    The equipment is to be put into service.
    '''
    outOfService = 'outOfService'
    '''
    The equipment is to be taken out of service.
    '''
class ControlAreaTypeKind( Enum ):
    '''
    The type of control area.
    '''
    AGC = 'AGC'
    '''
    Used for automatic generation control.
    '''
    Forecast = 'Forecast'
    '''
    Used for load forecast.
    '''
    Interchange = 'Interchange'
    '''
    Used for interchange specification or control.
    '''
class CoolantType( Enum ):
    '''
    Method of cooling a machine.
    '''
    air = 'air'
    '''
    Air.
    '''
    hydrogenGas = 'hydrogenGas'
    '''
    Hydrogen gas.
    '''
    water = 'water'
    '''
    Water.
    '''
class CsOperatingModeKind( Enum ):
    '''
    Operating mode for HVDC line operating as Current Source Converter.
    '''
    inverter = 'inverter'
    '''
    Operating as inverter, which is the power receiving end.
    '''
    rectifier = 'rectifier'
    '''
    Operating as rectifier, which is the power sending end.
    '''
class CsPpccControlKind( Enum ):
    '''
    Active power control modes for HVDC line operating as Current Source Converter.
    '''
    activePower = 'activePower'
    '''
    Control is active power control at AC side, at point of common coupling.
    Target is provided by ACDCConverter.targetPpcc.
    '''
    dcCurrent = 'dcCurrent'
    '''
    Control is DC current with target value provided by CsConverter.targetIdc.
    '''
    dcVoltage = 'dcVoltage'
    '''
    Control is DC voltage with target value provided by ACDCConverter.targetUdc.
    '''
class Currency( Enum ):
    '''
    Monetary currencies. ISO 4217 standard including 3-character currency code.
    '''
    AED = 'AED'
    '''
    United Arab Emirates dirham.
    '''
    AFN = 'AFN'
    '''
    Afghan afghani.
    '''
    ALL = 'ALL'
    '''
    Albanian lek.
    '''
    AMD = 'AMD'
    '''
    Armenian dram.
    '''
    ANG = 'ANG'
    '''
    Netherlands Antillean guilder.
    '''
    AOA = 'AOA'
    '''
    Angolan kwanza.
    '''
    ARS = 'ARS'
    '''
    Argentine peso.
    '''
    AUD = 'AUD'
    '''
    Australian dollar.
    '''
    AWG = 'AWG'
    '''
    Aruban florin.
    '''
    AZN = 'AZN'
    '''
    Azerbaijani manat.
    '''
    BAM = 'BAM'
    '''
    Bosnia and Herzegovina convertible mark.
    '''
    BBD = 'BBD'
    '''
    Barbados dollar.
    '''
    BDT = 'BDT'
    '''
    Bangladeshi taka.
    '''
    BGN = 'BGN'
    '''
    Bulgarian lev.
    '''
    BHD = 'BHD'
    '''
    Bahraini dinar.
    '''
    BIF = 'BIF'
    '''
    Burundian franc.
    '''
    BMD = 'BMD'
    '''
    Bermudian dollar (customarily known as Bermuda dollar).
    '''
    BND = 'BND'
    '''
    Brunei dollar.
    '''
    BOB = 'BOB'
    '''
    Boliviano.
    '''
    BOV = 'BOV'
    '''
    Bolivian Mvdol (funds code).
    '''
    BRL = 'BRL'
    '''
    Brazilian real.
    '''
    BSD = 'BSD'
    '''
    Bahamian dollar.
    '''
    BTN = 'BTN'
    '''
    Bhutanese ngultrum.
    '''
    BWP = 'BWP'
    '''
    Botswana pula.
    '''
    BYR = 'BYR'
    '''
    Belarusian ruble.
    '''
    BZD = 'BZD'
    '''
    Belize dollar.
    '''
    CAD = 'CAD'
    '''
    Canadian dollar.
    '''
    CDF = 'CDF'
    '''
    Congolese franc.
    '''
    CHF = 'CHF'
    '''
    Swiss franc.
    '''
    CLF = 'CLF'
    '''
    Unidad de Fomento (funds code), Chile.
    '''
    CLP = 'CLP'
    '''
    Chilean peso.
    '''
    CNY = 'CNY'
    '''
    Chinese yuan.
    '''
    COP = 'COP'
    '''
    Colombian peso.
    '''
    COU = 'COU'
    '''
    Unidad de Valor Real.
    '''
    CRC = 'CRC'
    '''
    Costa Rican colon.
    '''
    CUC = 'CUC'
    '''
    Cuban convertible peso.
    '''
    CUP = 'CUP'
    '''
    Cuban peso.
    '''
    CVE = 'CVE'
    '''
    Cape Verde escudo.
    '''
    CZK = 'CZK'
    '''
    Czech koruna.
    '''
    DJF = 'DJF'
    '''
    Djiboutian franc.
    '''
    DKK = 'DKK'
    '''
    Danish krone.
    '''
    DOP = 'DOP'
    '''
    Dominican peso.
    '''
    DZD = 'DZD'
    '''
    Algerian dinar.
    '''
    EEK = 'EEK'
    '''
    Estonian kroon.
    '''
    EGP = 'EGP'
    '''
    Egyptian pound.
    '''
    ERN = 'ERN'
    '''
    Eritrean nakfa.
    '''
    ETB = 'ETB'
    '''
    Ethiopian birr.
    '''
    EUR = 'EUR'
    '''
    Euro.
    '''
    FJD = 'FJD'
    '''
    Fiji dollar.
    '''
    FKP = 'FKP'
    '''
    Falkland Islands pound.
    '''
    GBP = 'GBP'
    '''
    Pound sterling.
    '''
    GEL = 'GEL'
    '''
    Georgian lari.
    '''
    GHS = 'GHS'
    '''
    Ghanaian cedi.
    '''
    GIP = 'GIP'
    '''
    Gibraltar pound.
    '''
    GMD = 'GMD'
    '''
    Gambian dalasi.
    '''
    GNF = 'GNF'
    '''
    Guinean franc.
    '''
    GTQ = 'GTQ'
    '''
    Guatemalan quetzal.
    '''
    GYD = 'GYD'
    '''
    Guyanese dollar.
    '''
    HKD = 'HKD'
    '''
    Hong Kong dollar.
    '''
    HNL = 'HNL'
    '''
    Honduran lempira.
    '''
    HRK = 'HRK'
    '''
    Croatian kuna.
    '''
    HTG = 'HTG'
    '''
    Haitian gourde.
    '''
    HUF = 'HUF'
    '''
    Hungarian forint.
    '''
    IDR = 'IDR'
    '''
    Indonesian rupiah.
    '''
    ILS = 'ILS'
    '''
    Israeli new sheqel.
    '''
    INR = 'INR'
    '''
    Indian rupee.
    '''
    IQD = 'IQD'
    '''
    Iraqi dinar.
    '''
    IRR = 'IRR'
    '''
    Iranian rial.
    '''
    ISK = 'ISK'
    '''
    Icelandic króna.
    '''
    JMD = 'JMD'
    '''
    Jamaican dollar.
    '''
    JOD = 'JOD'
    '''
    Jordanian dinar.
    '''
    JPY = 'JPY'
    '''
    Japanese yen.
    '''
    KES = 'KES'
    '''
    Kenyan shilling.
    '''
    KGS = 'KGS'
    '''
    Kyrgyzstani som.
    '''
    KHR = 'KHR'
    '''
    Cambodian riel.
    '''
    KMF = 'KMF'
    '''
    Comoro franc.
    '''
    KPW = 'KPW'
    '''
    North Korean won.
    '''
    KRW = 'KRW'
    '''
    South Korean won.
    '''
    KWD = 'KWD'
    '''
    Kuwaiti dinar.
    '''
    KYD = 'KYD'
    '''
    Cayman Islands dollar.
    '''
    KZT = 'KZT'
    '''
    Kazakhstani tenge.
    '''
    LAK = 'LAK'
    '''
    Lao kip.
    '''
    LBP = 'LBP'
    '''
    Lebanese pound.
    '''
    LKR = 'LKR'
    '''
    Sri Lanka rupee.
    '''
    LRD = 'LRD'
    '''
    Liberian dollar.
    '''
    LSL = 'LSL'
    '''
    Lesotho loti.
    '''
    LTL = 'LTL'
    '''
    Lithuanian litas.
    '''
    LVL = 'LVL'
    '''
    Latvian lats.
    '''
    LYD = 'LYD'
    '''
    Libyan dinar.
    '''
    MAD = 'MAD'
    '''
    Moroccan dirham.
    '''
    MDL = 'MDL'
    '''
    Moldovan leu.
    '''
    MGA = 'MGA'
    '''
    Malagasy ariary.
    '''
    MKD = 'MKD'
    '''
    Macedonian denar.
    '''
    MMK = 'MMK'
    '''
    Myanma kyat.
    '''
    MNT = 'MNT'
    '''
    Mongolian tugrik.
    '''
    MOP = 'MOP'
    '''
    Macanese pataca.
    '''
    MRO = 'MRO'
    '''
    Mauritanian ouguiya.
    '''
    MUR = 'MUR'
    '''
    Mauritian rupee.
    '''
    MVR = 'MVR'
    '''
    Maldivian rufiyaa.
    '''
    MWK = 'MWK'
    '''
    Malawian kwacha.
    '''
    MXN = 'MXN'
    '''
    Mexican peso.
    '''
    MYR = 'MYR'
    '''
    Malaysian ringgit.
    '''
    MZN = 'MZN'
    '''
    Mozambican metical.
    '''
    NAD = 'NAD'
    '''
    Namibian dollar.
    '''
    NGN = 'NGN'
    '''
    Nigerian naira.
    '''
    NIO = 'NIO'
    '''
    Cordoba oro.
    '''
    NOK = 'NOK'
    '''
    Norwegian krone.
    '''
    NPR = 'NPR'
    '''
    Nepalese rupee.
    '''
    NZD = 'NZD'
    '''
    New Zealand dollar.
    '''
    OMR = 'OMR'
    '''
    Omani rial.
    '''
    PAB = 'PAB'
    '''
    Panamanian balboa.
    '''
    PEN = 'PEN'
    '''
    Peruvian nuevo sol.
    '''
    PGK = 'PGK'
    '''
    Papua New Guinean kina.
    '''
    PHP = 'PHP'
    '''
    Philippine peso.
    '''
    PKR = 'PKR'
    '''
    Pakistani rupee.
    '''
    PLN = 'PLN'
    '''
    Polish zloty.
    '''
    PYG = 'PYG'
    '''
    Paraguayan guaraní.
    '''
    QAR = 'QAR'
    '''
    Qatari rial.
    '''
    RON = 'RON'
    '''
    Romanian new leu.
    '''
    RSD = 'RSD'
    '''
    Serbian dinar.
    '''
    RUB = 'RUB'
    '''
    Russian rouble.
    '''
    RWF = 'RWF'
    '''
    Rwandan franc.
    '''
    SAR = 'SAR'
    '''
    Saudi riyal.
    '''
    SBD = 'SBD'
    '''
    Solomon Islands dollar.
    '''
    SCR = 'SCR'
    '''
    Seychelles rupee.
    '''
    SDG = 'SDG'
    '''
    Sudanese pound.
    '''
    SEK = 'SEK'
    '''
    Swedish krona/kronor.
    '''
    SGD = 'SGD'
    '''
    Singapore dollar.
    '''
    SHP = 'SHP'
    '''
    Saint Helena pound.
    '''
    SLL = 'SLL'
    '''
    Sierra Leonean leone.
    '''
    SOS = 'SOS'
    '''
    Somali shilling.
    '''
    SRD = 'SRD'
    '''
    Surinamese dollar.
    '''
    STD = 'STD'
    '''
    São Tomé and Príncipe dobra.
    '''
    SYP = 'SYP'
    '''
    Syrian pound.
    '''
    SZL = 'SZL'
    '''
    Lilangeni.
    '''
    THB = 'THB'
    '''
    Thai baht.
    '''
    TJS = 'TJS'
    '''
    Tajikistani somoni.
    '''
    TMT = 'TMT'
    '''
    Turkmenistani manat.
    '''
    TND = 'TND'
    '''
    Tunisian dinar.
    '''
    TOP = 'TOP'
    '''
    Tongan pa'anga.
    '''
    TRY = 'TRY'
    '''
    Turkish lira.
    '''
    TTD = 'TTD'
    '''
    Trinidad and Tobago dollar.
    '''
    TWD = 'TWD'
    '''
    New Taiwan dollar.
    '''
    TZS = 'TZS'
    '''
    Tanzanian shilling.
    '''
    UAH = 'UAH'
    '''
    Ukrainian hryvnia.
    '''
    UGX = 'UGX'
    '''
    Ugandan shilling.
    '''
    USD = 'USD'
    '''
    United States dollar.
    '''
    UYU = 'UYU'
    '''
    Uruguayan peso.
    '''
    UZS = 'UZS'
    '''
    Uzbekistan som.
    '''
    VEF = 'VEF'
    '''
    Venezuelan bolívar fuerte.
    '''
    VND = 'VND'
    '''
    Vietnamese Dong.
    '''
    VUV = 'VUV'
    '''
    Vanuatu vatu.
    '''
    WST = 'WST'
    '''
    Samoan tala.
    '''
    XAF = 'XAF'
    '''
    CFA franc BEAC.
    '''
    XCD = 'XCD'
    '''
    East Caribbean dollar.
    '''
    XOF = 'XOF'
    '''
    CFA Franc BCEAO.
    '''
    XPF = 'XPF'
    '''
    CFP franc.
    '''
    YER = 'YER'
    '''
    Yemeni rial.
    '''
    ZAR = 'ZAR'
    '''
    South African rand.
    '''
    ZMK = 'ZMK'
    '''
    Zambian kwacha.
    '''
    ZWL = 'ZWL'
    '''
    Zimbabwe dollar.
    '''
class CurveStyle( Enum ):
    '''
    Style or shape of curve.
    '''
    constantYValue = 'constantYValue'
    '''
    The Y-axis values are assumed constant until the next curve point and prior
    to the first curve point.
    '''
    straightLineYValues = 'straightLineYValues'
    '''
    The Y-axis values are assumed to be a straight line between values. Also
    known as linear interpolation.
    '''
class DCConverterOperatingModeKind( Enum ):
    '''
    The operating mode of an HVDC bipole.
    '''
    bipolar = 'bipolar'
    '''
    Bipolar operation.
    '''
    monopolarGroundReturn = 'monopolarGroundReturn'
    '''
    Monopolar operation with ground return.
    '''
    monopolarMetallicReturn = 'monopolarMetallicReturn'
    '''
    Monopolar operation with metallic return.
    '''
class DCPolarityKind( Enum ):
    '''
    Polarity for DC circuits.
    '''
    middle = 'middle'
    '''
    Middle pole. The converter terminal is the midpoint in a bipolar or symmetric
    monopole configuration. The midpoint can be grounded and/or have a metallic
    return.
    '''
    negative = 'negative'
    '''
    Negative pole. The converter terminal is intended to operate at a negative
    voltage relative the midpoint or positive terminal.
    '''
    positive = 'positive'
    '''
    Positive pole. The converter terminal is intended to operate at a positive
    voltage relative the midpoint or negative terminal.
    '''
class DependencyKind( Enum ):
    '''
    '''
    mutuallyExclusive = 'mutuallyExclusive'
    '''
    '''
    required = 'required'
    '''
    '''
class DroopSignalFeedbackKind( Enum ):
    '''
    Governor droop signal feedback source.
    '''
    electricalPower = 'electricalPower'
    '''
    Electrical power feedback (connection indicated as 1 in the block diagrams
    of models, e.g. GovCT1, GovCT2).
    '''
    fuelValveStroke = 'fuelValveStroke'
    '''
    Fuel valve stroke feedback (true stroke) (connection indicated as 2 in
    the block diagrams of model, e.g. GovCT1, GovCT2).
    '''
    governorOutput = 'governorOutput'
    '''
    Governor output feedback (requested stroke) (connection indicated as 3
    in the block diagrams of models, e.g. GovCT1, GovCT2).
    '''
    none = 'none'
    '''
    No droop signal feedback, is isochronous governor.
    '''
class EmissionType( Enum ):
    '''
    The type of emission.
    '''
    carbonDioxide = 'carbonDioxide'
    '''
    Carbon dioxide.
    '''
    carbonDisulfide = 'carbonDisulfide'
    '''
    Carbon disulfide.
    '''
    chlorine = 'chlorine'
    '''
    Chlorine.
    '''
    hydrogenSulfide = 'hydrogenSulfide'
    '''
    Hydrogen sulfide.
    '''
    nitrogenOxide = 'nitrogenOxide'
    '''
    Nitrogen oxide.
    '''
    sulfurDioxide = 'sulfurDioxide'
    '''
    Sulfur dioxide.
    '''
class EmissionValueSource( Enum ):
    '''
    The source of the emission value.
    '''
    calculated = 'calculated'
    '''
    Calculated.
    '''
    measured = 'measured'
    '''
    Measured.
    '''
class EnergyTypeKind( Enum ):
    '''
    '''
    ConsumerLoad = 'ConsumerLoad'
    '''
    '''
    IndustrialLoad = 'IndustrialLoad'
    '''
    '''
    Other = 'Other'
    '''
    '''
    PVpark = 'PVpark'
    '''
    '''
    WindPark = 'WindPark'
    '''
    '''
class ExcIEEEST1AUELselectorKind( Enum ):
    '''
    Types of connections for the UEL input used in ExcIEEEST1A.
    '''
    ignoreUELsignal = 'ignoreUELsignal'
    '''
    Ignore UEL signal.
    '''
    inputAddedToErrorSignal = 'inputAddedToErrorSignal'
    '''
    UEL input added to error signal.
    '''
    inputHVgateErrorSignal = 'inputHVgateErrorSignal'
    '''
    UEL input HV gate with error signal.
    '''
    inputHVgateVoltageOutput = 'inputHVgateVoltageOutput'
    '''
    UEL input HV gate with voltage regulator output.
    '''
class ExcREXSFeedbackSignalKind( Enum ):
    '''
    Types of rate feedback signals.
    '''
    fieldCurrent = 'fieldCurrent'
    '''
    The exciter field current is used.
    '''
    fieldVoltage = 'fieldVoltage'
    '''
    The voltage regulator output voltage is used. It is the same as exciter
    field voltage.
    '''
    outputVoltage = 'outputVoltage'
    '''
    The output voltage of the exciter is used.
    '''
class ExcST6BOELselectorKind( Enum ):
    '''
    Types of connections for the OEL input used for static excitation systems
    type 6B.
    '''
    afterUEL = 'afterUEL'
    '''
    The connection is after UEL. Corresponds to <i>OELin</i> = 2 on the ExcST6B
    diagram.
    '''
    beforeUEL = 'beforeUEL'
    '''
    The connection is before UEL. Corresponds to <i>OELin</i> = 1 on the ExcST6B
    diagram.
    '''
    noOELinput = 'noOELinput'
    '''
    No OEL input is used. Corresponds to <i>OELin</i> not = 1 and not = 2 on
    the ExcST6B diagram. Original ExcST6B model would have called this <i>OELin</i>
    = 0.
    '''
class ExcST7BOELselectorKind( Enum ):
    '''
    Types of connections for the OEL input used for static excitation systems
    type 7B.
    '''
    addVref = 'addVref'
    '''
    The signal is added to <i>Vref</i>. Corresponds to <i>OELin</i> = 1 on
    the ExcST7B diagram.
    '''
    inputLVgate = 'inputLVgate'
    '''
    The signal is connected into the input <i>LVGate</i>. Corresponds to <i>OELin</i>
    = 2 on the ExcST7B diagram.
    '''
    noOELinput = 'noOELinput'
    '''
    No OEL input is used. Corresponds to <i>OELin</i> not = 1 and not = 2 and
    not = 3 on the ExcST7B diagram. Original ExcST7B model would have called
    this <i>OELin</i> = 0.
    '''
    outputLVgate = 'outputLVgate'
    '''
    The signal is connected into the output <i>LVGate</i>. Corresponds to <i>OELin</i>
    = 3 on the ExcST7B diagram.
    '''
class ExcST7BUELselectorKind( Enum ):
    '''
    Types of connections for the UEL input used for static excitation systems
    type 7B.
    '''
    addVref = 'addVref'
    '''
    The signal is added to <i>Vref</i>. Corresponds to <i>UELin</i> = 1 on
    the ExcST7B diagram.
    '''
    inputHVgate = 'inputHVgate'
    '''
    The signal is connected into the input <i>HVGate</i>. Corresponds to <i>UELin</i>
    = 2 on the ExcST7B diagram.
    '''
    noUELinput = 'noUELinput'
    '''
    No UEL input is used. Corresponds to <i>UELin</i> not = 1 and not = 2 and
    not = 3 on the ExcST7B diagram. Original ExcST7B model would have called
    this <i>UELin</i> = 0.
    '''
    outputHVgate = 'outputHVgate'
    '''
    The signal is connected into the output <i>HVGate</i>. Corresponds to <i>UELin</i>
    = 3 on the ExcST7B diagram.
    '''
class FrancisGovernorControlKind( Enum ):
    '''
    Governor control flag for Francis hydro model.
    '''
    electromechanicalElectrohydraulic = 'electromechanicalElectrohydraulic'
    '''
    Electromechanical and electrohydraulic regulator (Cflag=3).
    '''
    mechanicHydraulicTransientFeedback = 'mechanicHydraulicTransientFeedback'
    '''
    Mechanic-hydraulic regulator with transient feedback (Cflag=2).
    '''
    mechanicHydrolicTachoAccelerator = 'mechanicHydrolicTachoAccelerator'
    '''
    Mechanic-hydraulic regulator with tacho-accelerometer (Cflag = 1).
    '''
class FuelType( Enum ):
    '''
    Type of fuel.
    '''
    brownCoalLignite = 'brownCoalLignite'
    '''
    Brown coal lignite.
    '''
    coal = 'coal'
    '''
    Generic coal, not including lignite type.
    '''
    coalDerivedGas = 'coalDerivedGas'
    '''
    Coal derived gas.
    '''
    gas = 'gas'
    '''
    Natural gas.
    '''
    hardCoal = 'hardCoal'
    '''
    Hard coal.
    '''
    lignite = 'lignite'
    '''
    The fuel is lignite coal. Note that this is a special type of coal, so
    the other enum of coal is reserved for hard coal types or if the exact
    type of coal is not known.
    '''
    oil = 'oil'
    '''
    Oil.
    '''
    oilShale = 'oilShale'
    '''
    Oil Shale.
    '''
    other = 'other'
    '''
    Any fuel type not included in the rest of the enumerated value.
    '''
    peat = 'peat'
    '''
    Peat.
    '''
class GateLogicKind( Enum ):
    '''
    Define the different logical operations.
    '''
    _and = '_and'
    '''
    A logical AND operation. True when all input are true.
    '''
    nand = 'nand'
    '''
    A logical NAND operation. False when all input are true.
    '''
    nor = 'nor'
    '''
    A logical NOR operation. False when one or more input are true.
    '''
    _not = '_not'
    '''
    A logical NOT operation. Only one input and true input will give false
    out and false in will give true out. An inverter.
    '''
    _or = '_or'
    '''
    A logical OR operation. True when one or more input are true.
    '''
    xnor = 'xnor'
    '''
    A logical XNOR operation. The function is the inverse of the exclusive
    OR (XOR) gate. All input false or true will give true. Otherwise false.
    '''
    xor = 'xor'
    '''
    A logical XOR operation. All input false or true will give false. Otherwise
    true.
    '''
class GeneratorControlMode( Enum ):
    '''
    Unit control modes.
    '''
    pulse = 'pulse'
    '''
    Pulse control mode.
    '''
    setpoint = 'setpoint'
    '''
    Setpoint control mode.
    '''
class GeneratorControlSource( Enum ):
    '''
    The source of controls for a generating unit.
    '''
    offAGC = 'offAGC'
    '''
    Off of automatic generation control (AGC).
    '''
    onAGC = 'onAGC'
    '''
    On automatic generation control (AGC).
    '''
    plantControl = 'plantControl'
    '''
    Plant is controlling.
    '''
    unavailable = 'unavailable'
    '''
    Not available.
    '''
class GenericNonLinearLoadModelKind( Enum ):
    '''
    Type of generic non-linear load model.
    '''
    exponentialRecovery = 'exponentialRecovery'
    '''
    Exponential recovery model.
    '''
    loadAdaptive = 'loadAdaptive'
    '''
    Load adaptive model.
    '''
class GovHydro4ModelKind( Enum ):
    '''
    Possible types of GovHydro4 models.
    '''
    francisPelton = 'francisPelton'
    '''
    Francis or Pelton model.
    '''
    kaplan = 'kaplan'
    '''
    Kaplan model.
    '''
    simple = 'simple'
    '''
    Simple model.
    '''
class HydroEnergyConversionKind( Enum ):
    '''
    Specifies the capability of the hydro generating unit to convert energy
    as a generator or pump.
    '''
    generator = 'generator'
    '''
    Able to generate power, but not able to pump water for energy storage.
    '''
    pumpAndGenerator = 'pumpAndGenerator'
    '''
    Able to both generate power and pump water for energy storage.
    '''
class HydroPlantStorageKind( Enum ):
    '''
    The type of hydro power plant.
    '''
    pumpedStorage = 'pumpedStorage'
    '''
    Pumped storage.
    '''
    runOfRiver = 'runOfRiver'
    '''
    Run of river.
    '''
    storage = 'storage'
    '''
    Storage.
    '''
class HydroTurbineKind( Enum ):
    '''
    Type of turbine.
    '''
    francis = 'francis'
    '''
    Francis.
    '''
    kaplan = 'kaplan'
    '''
    Kaplan.
    '''
    pelton = 'pelton'
    '''
    Pelton.
    '''
class ICCPAccessPrivilegeKind( Enum ):
    '''
    Provides access privilege information regarding an ICCP point.
    '''
    readOnly = 'readOnly'
    '''
    Indicates that the remote is not allowed to change the value of the ICCPPoint.
    '''
    readWrite = 'readWrite'
    '''
    Indicates that the remote can not only get the value, but may also change
    the value of the ICCP Point.
    '''
class ICCPPointKind( Enum ):
    '''
    The kind of ICCP point that is to be conveyed.
    '''
    discrete = 'discrete'
    '''
    Indicates that an ICCP discrete type is to be conveyed.
    '''
    packedProtectionEvent = 'packedProtectionEvent'
    '''
    Indicates that an ICCP packed Protection Event is to be conveyed.
    '''
    real = 'real'
    '''
    Indicates that an ICCP real type is to be conveyed.
    '''
    singleProtectionEvent = 'singleProtectionEvent'
    '''
    Indicates that an ICCP single Protection Event type is to be conveyed.
    '''
    state = 'state'
    '''
    Indicates that an ICCP state type is to be conveyed.
    '''
    stateSupplemental = 'stateSupplemental'
    '''
    Indicates that an ICCP state supplemental type is to be conveyed.
    '''
class ICCPQualityKind( Enum ):
    '''
    Indicates the type of quality information that is to be exchanged. For
    protection events the value shall be "none".
    '''
    extended = 'extended'
    '''
    Indicates that only extended information is to be provided.
    '''
    extendedwithQualityTime = 'extendedwithQualityTime'
    '''
    Provides quality, timestamp, and extended information.
    '''
    none = 'none'
    '''
    Indicates that no quality is conveyed with the ICCP point.
    '''
    qualityAndTime = 'qualityAndTime'
    '''
    Indicates that quality and a timestamp are to be provided.
    '''
    qualityOnly = 'qualityOnly'
    '''
    Indicates that only quality is to be provided.
    '''
class ICCPScopeKind( Enum ):
    '''
    Specifies the control centre scope.
    '''
    iCC = 'iCC'
    '''
    Inter-Control Centre scope – available for exchange between the control
    centres in the bilateral table.
    '''
    vCC = 'vCC'
    '''
    Virtual Control Centre Scope – globally available.
    '''
class IPAddressKind( Enum ):
    '''
    Indicates if the addressing of the IPAccessPoint, gateway, and subnet are
    per IPv4 or IPv6.
    '''
    iPv4 = 'iPv4'
    '''
    Indicates that IPv4 dotted decimal notation is in use.
    '''
    iPv6 = 'iPv6'
    '''
    Indicates that an IPv6 dotted decimal is in use.
    '''
class IfdBaseKind( Enum ):
    '''
    Excitation base system mode.
    '''
    ifag = 'ifag'
    '''
    Air gap line mode.
    '''
    iffl = 'iffl'
    '''
    Full load system mode.
    '''
    ifnl = 'ifnl'
    '''
    No load system with saturation mode.
    '''
class InputSignalKind( Enum ):
    '''
    Types of input signals. In dynamics modelling, commonly represented by
    the <i>j</i> parameter.
    '''
    branchCurrent = 'branchCurrent'
    '''
    Input signal is amplitude of remote branch current.
    '''
    busFrequency = 'busFrequency'
    '''
    Input signal is bus voltage fr<font color="#0f0f0f">equency. This could
    be a terminal frequency or remote frequency.</font>
    '''
    busFrequencyDeviation = 'busFrequencyDeviation'
    '''
    Input signal is deviation of bus voltage frequ<font color="#0f0f0f">ency.
    This could be a terminal frequency deviation or remote frequency deviation.</font>
    '''
    busVoltage = 'busVoltage'
    '''
    Input signal <font color="#0f0f0f">is bus voltage. This could be a terminal
    voltage or remote voltage.</font>
    '''
    busVoltageDerivative = 'busVoltageDerivative'
    '''
    Input signal is derivative of bus voltag<font color="#0f0f0f">e. This could
    be a terminal voltage derivative or remote voltage derivative.</font>
    '''
    fieldCurrent = 'fieldCurrent'
    '''
    Input signal is generator field current.
    '''
    generatorAcceleratingPower = 'generatorAcceleratingPower'
    '''
    Input signal is generator accelerating power.
    '''
    generatorElectricalPower = 'generatorElectricalPower'
    '''
    Input signal is generator electrical power on rated <i>S</i>.
    '''
    generatorMechanicalPower = 'generatorMechanicalPower'
    '''
    Input signal is generator mechanical power.
    '''
    rotorAngularFrequencyDeviation = 'rotorAngularFrequencyDeviation'
    '''
    Input signal is rotor or shaft angular frequency deviation.
    '''
    rotorSpeed = 'rotorSpeed'
    '''
    Input signal is rotor or shaft speed (angular frequency).
    '''
class LookUpTableFunctionKind( Enum ):
    '''
    '''
    additionalQcurrent = 'additionalQcurrent'
    '''
    '''
    vdcol = 'vdcol'
    '''
    '''
class OperationalLimitDirectionKind( Enum ):
    '''
    The direction attribute describes the side of a limit that is a violation.
    '''
    absoluteValue = 'absoluteValue'
    '''
    An absoluteValue limit means that a monitored absolute value above the
    limit value is a violation.
    '''
    high = 'high'
    '''
    High means that a monitored value above the limit value is a violation.
    If applied to a terminal flow, the positive direction is into the terminal.
    '''
    low = 'low'
    '''
    Low means a monitored value below the limit is a violation. If applied
    to a terminal flow, the positive direction is into the terminal.
    '''
class OrientationKind( Enum ):
    '''
    The orientation of the coordinate system with respect to top, left, and
    the coordinate number system.
    '''
    negative = 'negative'
    '''
    For 2D diagrams, a negative orientation gives the left-hand orientation
    (favoured by computer graphics displays) with X values increasing from
    left to right and Y values increasing from top to bottom. This is also
    known as a left hand orientation.
    '''
    positive = 'positive'
    '''
    For 2D diagrams, a positive orientation will result in X values increasing
    from left to right and Y values increasing from bottom to top. This is
    also known as a right hand orientation.
    '''
class PetersenCoilModeKind( Enum ):
    '''
    The mode of operation for a Petersen coil.
    '''
    automaticPositioning = 'automaticPositioning'
    '''
    Automatic positioning.
    '''
    fixed = 'fixed'
    '''
    Fixed position.
    '''
    manual = 'manual'
    '''
    Manual positioning.
    '''
class PhaseCode( Enum ):
    '''
    An unordered enumeration of phase identifiers. Allows designation of phases
    for both transmission and distribution equipment, circuits and loads. The
    enumeration, by itself, does not describe how the phases are connected
    together or connected to ground. Ground is not explicitly denoted as a
    phase.
    Residential and small commercial loads are often served from single-phase,
    or split-phase, secondary circuits. For the example of s12N, phases 1 and
    2 refer to hot wires that are 180 degrees out of phase, while N refers
    to the neutral wire. Through single-phase transformer connections, these
    secondary circuits may be served from one or two of the primary phases
    A, B, and C. For three-phase loads, use the A, B, C phase codes instead
    of s12N.
    The integer values are from IEC 61968-9 to support revenue metering applications.
    '''
    A = 'A'
    '''
    Phase A.
    '''
    AB = 'AB'
    '''
    Phases A and B.
    '''
    ABC = 'ABC'
    '''
    Phases A, B, and C.
    '''
    ABCN = 'ABCN'
    '''
    Phases A, B, C, and N.
    '''
    ABN = 'ABN'
    '''
    Phases A, B, and neutral.
    '''
    AC = 'AC'
    '''
    Phases A and C.
    '''
    ACN = 'ACN'
    '''
    Phases A, C and neutral.
    '''
    AN = 'AN'
    '''
    Phases A and neutral.
    '''
    B = 'B'
    '''
    Phase B.
    '''
    BC = 'BC'
    '''
    Phases B and C.
    '''
    BCN = 'BCN'
    '''
    Phases B, C, and neutral.
    '''
    BN = 'BN'
    '''
    Phases B and neutral.
    '''
    C = 'C'
    '''
    Phase C.
    '''
    CN = 'CN'
    '''
    Phases C and neutral.
    '''
    N = 'N'
    '''
    Neutral phase.
    '''
    X = 'X'
    '''
    Unknown non-neutral phase.
    '''
    XN = 'XN'
    '''
    Unknown non-neutral phase plus neutral.
    '''
    XY = 'XY'
    '''
    Two unknown non-neutral phases.
    '''
    XYN = 'XYN'
    '''
    Two unknown non-neutral phases plus neutral.
    '''
    none = 'none'
    '''
    No phases specified.
    '''
    s1 = 's1'
    '''
    Secondary phase 1.
    '''
    s12 = 's12'
    '''
    Secondary phase 1 and 2.
    '''
    s12N = 's12N'
    '''
    Secondary phases 1, 2, and neutral.
    '''
    s1N = 's1N'
    '''
    Secondary phase 1 and neutral.
    '''
    s2 = 's2'
    '''
    Secondary phase 2.
    '''
    s2N = 's2N'
    '''
    Secondary phase 2 and neutral.
    '''
class PhaseConnectedFaultKind( Enum ):
    '''
    The type of fault connection among phases.
    '''
    lineOpen = 'lineOpen'
    '''
    The fault is when the conductor path is broken between two terminals. Additional
    coexisting faults may be required if the broken conductor also causes connections
    to grounds or other lines or phases.
    '''
    lineToGround = 'lineToGround'
    '''
    The fault connects the indicated phases to ground. The line to line fault
    impedance is not used and assumed infinite. The full ground impedance is
    connected between each phase specified in the fault and ground, but not
    between the phases.
    '''
    lineToLine = 'lineToLine'
    '''
    The fault connects the specified phases together without a connection to
    ground. The ground impedance of this fault is ignored. The line to line
    impedance is connected between each of the phases specified in the fault.
    For example three times for a three phase fault, one time for a two phase
    fault. A single phase fault should not be specified.
    '''
    lineToLineToGround = 'lineToLineToGround'
    '''
    The fault connects the indicated phases to ground and to each other. The
    line to line impedance is connected between each of the phases specified
    in the fault in a full mesh. For example three times for a three phase
    fault, one time for a two phase fault. A single phase fault should not
    be specified. The full ground impedance is connected between each phase
    specified in the fault and ground.
    '''
class PhaseShuntConnectionKind( Enum ):
    '''
    The configuration of phase connections for a single terminal device such
    as a load or capacitor.
    '''
    D = 'D'
    '''
    Delta connection.
    '''
    G = 'G'
    '''
    Ground connection; use when explicit connection to ground needs to be expressed
    in combination with the phase code, such as for electrical wire/cable or
    for meters.
    '''
    I = 'I'
    '''
    Independent winding, for single-phase connections.
    '''
    Y = 'Y'
    '''
    Wye connection.
    '''
    Yn = 'Yn'
    '''
    Wye, with neutral brought out for grounding.
    '''
class PinBranchGroupKind( Enum ):
    '''
    Categorisation of type of compare done on a branch group.
    '''
    activePower = 'activePower'
    '''
    Active power in the branch group.
    '''
    reactivePower = 'reactivePower'
    '''
    Reactive power in the branch group.
    '''
class PinEquipmentKind( Enum ):
    '''
    Categorisation of type of compare done on Equipment.
    '''
    activePowerLimit = 'activePowerLimit'
    '''
    Compare load flow result against the active limit for active power for
    the given equipment.
    '''
    apparentPowerLimit = 'apparentPowerLimit'
    '''
    Compare load flow result against the active limit for apparent power for
    the given equipment.
    '''
    connected = 'connected'
    '''
    Check if all terminal on the equipment is connected.
    '''
    currentLimit = 'currentLimit'
    '''
    Compare load flow result against the active current limit for the equipment.
    '''
    inService = 'inService'
    '''
    Check if equipment is in service, True if in service otherwise false.
    '''
    ratedCurrent = 'ratedCurrent'
    '''
    Compare load flow result against rated current on the equipment (switch).
    '''
    voltageLimit = 'voltageLimit'
    '''
    Compare load flow result against the active voltage limit for the equipment.
    '''
class PinTerminalKind( Enum ):
    '''
    Categorisation of type of compare done on Terminal.
    '''
    activePower = 'activePower'
    '''
    Active Power on the Terminal.
    '''
    apparentPower = 'apparentPower'
    '''
    Apparent Power on the Terminal.
    '''
    reactivePower = 'reactivePower'
    '''
    Reactive Power on the Terminal.
    '''
    voltage = 'voltage'
    '''
    Voltage on the Terminal.
    '''
class PotentialTransformerKind( Enum ):
    '''
    The construction kind of the potential transformer.
    '''
    capacitiveCoupling = 'capacitiveCoupling'
    '''
    The potential transformer is using capacitive coupling to create secondary
    voltage.
    '''
    inductive = 'inductive'
    '''
    The potential transformer is using induction coils to create secondary
    voltage.
    '''
class ProjectStatusKind( Enum ):
    '''
    '''
    cancelled = 'cancelled'
    '''
    '''
    closed = 'closed'
    '''
    '''
    draft = 'draft'
    '''
    '''
    frozen = 'frozen'
    '''
    '''
class ProtectiveActionAdjustmentKind( Enum ):
    '''
    Categorisation of different protective action adjustments that can be performed
    on equipment.
    '''
    byPercentage = 'byPercentage'
    '''
    The adjustment is in percentage of the active value.
    '''
    byValue = 'byValue'
    '''
    The adjustment is in given by a value that defined the changes that will
    be done to the active value.
    '''
    measurement = 'measurement'
    '''
    The equipment will operating on a value given by a measurement.
    '''
    setValue = 'setValue'
    '''
    The equipment will operate on the new value.
    '''
class RegulatingControlModeKind( Enum ):
    '''
    The kind of regulation model. For example regulating voltage, reactive
    power, active power, etc.
    '''
    activePower = 'activePower'
    '''
    Active power is specified.
    '''
    admittance = 'admittance'
    '''
    Admittance is specified.
    '''
    currentFlow = 'currentFlow'
    '''
    Current flow is specified.
    '''
    powerFactor = 'powerFactor'
    '''
    Power factor is specified.
    '''
    reactivePower = 'reactivePower'
    '''
    Reactive power is specified.
    '''
    temperature = 'temperature'
    '''
    Control switches on/off based on the local temperature (i.e., a thermostat).
    '''
    timeScheduled = 'timeScheduled'
    '''
    Control switches on/off by time of day. The times may change on the weekend,
    or in different seasons.
    '''
    voltage = 'voltage'
    '''
    Voltage is specified.
    '''
class RemedialActionSchemeKind( Enum ):
    '''
    Classification of Remedial Action Scheme.
    '''
    rAP = 'rAP'
    '''
    Remedial Action Plan (RAP).
    '''
    rAS = 'rAS'
    '''
    Remedial Action Scheme (RAS).
    '''
class RemoteSignalKind( Enum ):
    '''
    Type of input signal coming from remote bus.
    '''
    remoteBranchCurrentAmplitude = 'remoteBranchCurrentAmplitude'
    '''
    Input is branch current amplitude from remote terminal bus.
    '''
    remoteBusFrequency = 'remoteBusFrequency'
    '''
    Input is frequency from remote terminal bus.
    '''
    remoteBusFrequencyDeviation = 'remoteBusFrequencyDeviation'
    '''
    Input is frequency deviation from remote terminal bus.
    '''
    remoteBusVoltage = 'remoteBusVoltage'
    '''
    Input is voltage from remote terminal bus.
    '''
    remoteBusVoltageAmplitude = 'remoteBusVoltageAmplitude'
    '''
    Input is voltage amplitude from remote terminal bus.
    '''
    remoteBusVoltageAmplitudeDerivative = 'remoteBusVoltageAmplitudeDerivative'
    '''
    Input is branch current amplitude derivative from remote terminal bus.
    '''
    remoteBusVoltageFrequency = 'remoteBusVoltageFrequency'
    '''
    Input is voltage frequency from remote terminal bus.
    '''
    remoteBusVoltageFrequencyDeviation = 'remoteBusVoltageFrequencyDeviation'
    '''
    Input is voltage frequency deviation from remote terminal bus.
    '''
    remotePuBusVoltageDerivative = 'remotePuBusVoltageDerivative'
    '''
    Input is PU voltage derivative from remote terminal bus.
    '''
class RemoteUnitType( Enum ):
    '''
    Type of remote unit.
    '''
    ControlCenter = 'ControlCenter'
    '''
    Control centre.
    '''
    IED = 'IED'
    '''
    Intelligent electronic device (IED).
    '''
    RTU = 'RTU'
    '''
    Remote terminal unit.
    '''
    SubstationControlSystem = 'SubstationControlSystem'
    '''
    Substation control system.
    '''
class RotorKind( Enum ):
    '''
    Type of rotor on physical machine.
    '''
    roundRotor = 'roundRotor'
    '''
    Round rotor type of synchronous machine.
    '''
    salientPole = 'salientPole'
    '''
    Salient pole type of synchronous machine.
    '''
class SVCControlMode( Enum ):
    '''
    Static VAr Compensator control mode.
    '''
    reactivePower = 'reactivePower'
    '''
    Reactive power control.
    '''
    voltage = 'voltage'
    '''
    Voltage control.
    '''
class ShortCircuitRotorKind( Enum ):
    '''
    Type of rotor, used by short circuit applications.
    '''
    salientPole1 = 'salientPole1'
    '''
    Salient pole 1 in IEC 60909.
    '''
    salientPole2 = 'salientPole2'
    '''
    Salient pole 2 in IEC 60909.
    '''
    turboSeries1 = 'turboSeries1'
    '''
    Turbo Series 1 in IEC 60909.
    '''
    turboSeries2 = 'turboSeries2'
    '''
    Turbo series 2 in IEC 60909.
    '''
class SinglePhaseKind( Enum ):
    '''
    Enumeration of single phase identifiers. Allows designation of single phases
    for both transmission and distribution equipment, circuits and loads.
    '''
    A = 'A'
    '''
    Phase A.
    '''
    B = 'B'
    '''
    Phase B.
    '''
    C = 'C'
    '''
    Phase C.
    '''
    N = 'N'
    '''
    Neutral.
    '''
    s1 = 's1'
    '''
    Secondary phase 1.
    '''
    s2 = 's2'
    '''
    Secondary phase 2.
    '''
class Source( Enum ):
    '''
    Source gives information related to the origin of a value.
    '''
    DEFAULTED = 'DEFAULTED'
    '''
    The value contains a default value.
    '''
    PROCESS = 'PROCESS'
    '''
    The value is provided by input from the process I/O or being calculated
    from some function.
    '''
    SUBSTITUTED = 'SUBSTITUTED'
    '''
    The value is provided by input of an operator or by an automatic source.
    '''
class StaticLoadModelKind( Enum ):
    '''
    Type of static load model.
    '''
    constantZ = 'constantZ'
    '''
    The load is represented as a constant impedance. ConstantZ equations are
    used for active and reactive power and no attributes are required.
    '''
    exponential = 'exponential'
    '''
    This model is an exponential representation of the load. Exponential equations
    for active and reactive power are used and the following attributes are
    required:
    kp1, kp2, kp3, kpf, ep1, ep2, ep3
    kq1, kq2, kq3, kqf, eq1, eq2, eq3.
    '''
    zIP1 = 'zIP1'
    '''
    This model integrates the frequency-dependent load (primarily motors).
    ZIP1 equations for active and reactive power are used and the following
    attributes are required:
    kp1, kp2, kp3, kpf
    kq1, kq2, kq3, kqf.
    '''
    zIP2 = 'zIP2'
    '''
    This model separates the frequency-dependent load (primarily motors) from
    other load. ZIP2 equations for active and reactive power are used and the
    following attributes are required:
    kp1, kp2, kp3, kq4, kpf
    kq1, kq2, kq3, kq4, kqf.
    '''
class SynchronousMachineKind( Enum ):
    '''
    Synchronous machine type.
    '''
    condenser = 'condenser'
    '''
    Indicates the synchronous machine can operate as a condenser.
    '''
    generator = 'generator'
    '''
    Indicates the synchronous machine can operate as a generator.
    '''
    generatorOrCondenser = 'generatorOrCondenser'
    '''
    Indicates the synchronous machine can operate as a generator or as a condenser.
    '''
    generatorOrCondenserOrMotor = 'generatorOrCondenserOrMotor'
    '''
    Indicates the synchronous machine can operate as a generator or as a condenser
    or as a motor.
    '''
    generatorOrMotor = 'generatorOrMotor'
    '''
    Indicates the synchronous machine can operate as a generator or as a motor.
    '''
    motor = 'motor'
    '''
    Indicates the synchronous machine can operate as a motor.
    '''
    motorOrCondenser = 'motorOrCondenser'
    '''
    Indicates the synchronous machine can operate as a motor or as a condenser.
    '''
class SynchronousMachineModelKind( Enum ):
    '''
    Type of synchronous machine model used in dynamic simulation applications.
    '''
    subtransient = 'subtransient'
    '''
    Subtransient synchronous machine model.
    '''
    subtransientSimplified = 'subtransientSimplified'
    '''
    Simplified version of subtransient synchronous machine model where magnetic
    coupling between the direct- and quadrature- axes is ignored.
    '''
    subtransientSimplifiedDirectAxis = 'subtransientSimplifiedDirectAxis'
    '''
    Simplified version of a subtransient synchronous machine model with no
    damper circuit on the direct-axis.
    '''
    subtransientTypeF = 'subtransientTypeF'
    '''
    WECC type F variant of subtransient synchronous machine model.
    '''
    subtransientTypeJ = 'subtransientTypeJ'
    '''
    WECC type J variant of subtransient synchronous machine model.
    '''
class SynchronousMachineOperatingMode( Enum ):
    '''
    Synchronous machine operating mode.
    '''
    condenser = 'condenser'
    '''
    Operating as condenser.
    '''
    generator = 'generator'
    '''
    Operating as generator.
    '''
    motor = 'motor'
    '''
    Operating as motor.
    '''
class TransformerControlMode( Enum ):
    '''
    Control modes for a transformer.
    '''
    reactive = 'reactive'
    '''
    Reactive power flow control.
    '''
    volt = 'volt'
    '''
    Voltage control.
    '''
class UnitMultiplier( Enum ):
    '''
    The unit multipliers defined for the CIM. When applied to unit symbols,
    the unit symbol is treated as a derived unit. Regardless of the contents
    of the unit symbol text, the unit symbol shall be treated as if it were
    a single-character unit symbol. Unit symbols should not contain multipliers,
    and it should be left to the multiplier to define the multiple for an entire
    data type.
    For example, if a unit symbol is "m2Pers" and the multiplier is "k", then
    the value is k(m**2/s), and the multiplier applies to the entire final
    value, not to any individual part of the value. This can be conceptualized
    by substituting a derived unit symbol for the unit type. If one imagines
    that the symbol "Þ" represents the derived unit "m2Pers", then applying
    the multiplier "k" can be conceptualized simply as "kÞ".
    For example, the SI unit for mass is "kg" and not "g". If the unit symbol
    is defined as "kg", then the multiplier is applied to "kg" as a whole and
    does not replace the "k" in front of the "g". In this case, the multiplier
    of "m" would be used with the unit symbol of "kg" to represent one gram.
    As a text string, this violates the instructions in IEC 80000-1. However,
    because the unit symbol in CIM is treated as a derived unit instead of
    as an SI unit, it makes more sense to conceptualize the "kg" as if it were
    replaced by one of the proposed replacements for the SI mass symbol. If
    one imagines that the "kg" were replaced by a symbol "Þ", then it is easier
    to conceptualize the multiplier "m" as creating the proper unit "mÞ", and
    not the forbidden unit "mkg".
    '''
    E = 'E'
    '''
    Exa 10**18.
    '''
    G = 'G'
    '''
    Giga 10**9.
    '''
    M = 'M'
    '''
    Mega 10**6.
    '''
    P = 'P'
    '''
    Peta 10**15.
    '''
    T = 'T'
    '''
    Tera 10**12.
    '''
    Y = 'Y'
    '''
    Yotta 10**24.
    '''
    Z = 'Z'
    '''
    Zetta 10**21.
    '''
    a = 'a'
    '''
    Atto 10**-18.
    '''
    c = 'c'
    '''
    Centi 10**-2.
    '''
    d = 'd'
    '''
    Deci 10**-1.
    '''
    da = 'da'
    '''
    Deca 10**1.
    '''
    f = 'f'
    '''
    Femto 10**-15.
    '''
    h = 'h'
    '''
    Hecto 10**2.
    '''
    k = 'k'
    '''
    Kilo 10**3.
    '''
    m = 'm'
    '''
    Milli 10**-3.
    '''
    micro = 'micro'
    '''
    Micro 10**-6.
    '''
    n = 'n'
    '''
    Nano 10**-9.
    '''
    none = 'none'
    '''
    No multiplier or equivalently multiply by 1.
    '''
    p = 'p'
    '''
    Pico 10**-12.
    '''
    y = 'y'
    '''
    Yocto 10**-24.
    '''
    z = 'z'
    '''
    Zepto 10**-21.
    '''
class UnitSymbol( Enum ):
    '''
    The derived units defined for usage in the CIM. In some cases, the derived
    unit is equal to an SI unit. Whenever possible, the standard derived symbol
    is used instead of the formula for the derived unit. For example, the unit
    symbol Farad is defined as "F" instead of "CPerV". In cases where a standard
    symbol does not exist for a derived unit, the formula for the unit is used
    as the unit symbol. For example, density does not have a standard symbol
    and so it is represented as "kgPerm3". With the exception of the "kg",
    which is an SI unit, the unit symbols do not contain multipliers and therefore
    represent the base derived unit to which a multiplier can be applied as
    a whole.
    Every unit symbol is treated as an unparseable text as if it were a single-letter
    symbol. The meaning of each unit symbol is defined by the accompanying
    descriptive text and not by the text contents of the unit symbol.
    To allow the widest possible range of serializations without requiring
    special character handling, several substitutions are made which deviate
    from the format described in IEC 80000-1. The division symbol "/" is replaced
    by the letters "Per". Exponents are written in plain text after the unit
    as "m3" instead of being formatted as "m" with a superscript of 3 or introducing
    a symbol as in "m^3". The degree symbol "°" is replaced with the letters
    "deg". Any clarification of the meaning for a substitution is included
    in the description for the unit symbol.
    Non-SI units are included in list of unit symbols to allow sources of data
    to be correctly labelled with their non-SI units (for example, a GPS sensor
    that is reporting numbers that represent feet instead of meters). This
    allows software to use the unit symbol information correctly convert and
    scale the raw data of those sources into SI-based units.
    The integer values are used for harmonization with IEC 61850.
    '''
    A = 'A'
    '''
    Current in amperes.
    '''
    A2 = 'A2'
    '''
    Amperes squared (A²).
    '''
    A2h = 'A2h'
    '''
    Ampere-squared hour, ampere-squared hour.
    '''
    A2s = 'A2s'
    '''
    Ampere squared time in square amperes (A²s).
    '''
    APerA = 'APerA'
    '''
    Current, ratio of amperages. Note: Users may need to supply a prefix such
    as ‘m’ to show rates such as ‘mA/A’.
    '''
    APerm = 'APerm'
    '''
    A/m, magnetic field strength, amperes per metre.
    '''
    Ah = 'Ah'
    '''
    Ampere-hours, ampere-hours.
    '''
    As = 'As'
    '''
    Ampere seconds (A·s).
    '''
    Bq = 'Bq'
    '''
    Radioactivity in becquerels (1/s).
    '''
    Btu = 'Btu'
    '''
    Energy, British Thermal Units.
    '''
    C = 'C'
    '''
    Electric charge in coulombs (A·s).
    '''
    CPerkg = 'CPerkg'
    '''
    Exposure (x rays), coulombs per kilogram.
    '''
    CPerm2 = 'CPerm2'
    '''
    Surface charge density, coulombs per square metre.
    '''
    CPerm3 = 'CPerm3'
    '''
    Electric charge density, coulombs per cubic metre.
    '''
    F = 'F'
    '''
    Electric capacitance in farads (C/V).
    '''
    FPerm = 'FPerm'
    '''
    Permittivity, farads per metre.
    '''
    G = 'G'
    '''
    Magnetic flux density, gausses (1 G = 10-4 T).
    '''
    Gy = 'Gy'
    '''
    Absorbed dose in grays (J/kg).
    '''
    GyPers = 'GyPers'
    '''
    Absorbed dose rate, grays per second.
    '''
    H = 'H'
    '''
    Electric inductance in henrys (Wb/A).
    '''
    HPerm = 'HPerm'
    '''
    Permeability, henrys per metre.
    '''
    Hz = 'Hz'
    '''
    Frequency in hertz (1/s).
    '''
    HzPerHz = 'HzPerHz'
    '''
    Frequency, rate of frequency change. Note: Users may need to supply a prefix
    such as ‘m’ to show rates such as ‘mHz/Hz’.
    '''
    HzPers = 'HzPers'
    '''
    Rate of change of frequency in hertz per second.
    '''
    J = 'J'
    '''
    Energy in joules (N·m = C·V = W·s).
    '''
    JPerK = 'JPerK'
    '''
    Heat capacity in joules/kelvin.
    '''
    JPerkg = 'JPerkg'
    '''
    Specific energy, Joules / kg.
    '''
    JPerkgK = 'JPerkgK'
    '''
    Specific heat capacity, specific entropy, joules per kilogram Kelvin.
    '''
    JPerm2 = 'JPerm2'
    '''
    Insulation energy density, joules per square metre or watt second per square
    metre.
    '''
    JPerm3 = 'JPerm3'
    '''
    Energy density, joules per cubic metre.
    '''
    JPermol = 'JPermol'
    '''
    Molar energy, joules per mole.
    '''
    JPermolK = 'JPermolK'
    '''
    Molar entropy, molar heat capacity, joules per mole kelvin.
    '''
    JPers = 'JPers'
    '''
    Energy rate in joules per second (J/s).
    '''
    K = 'K'
    '''
    Temperature in kelvins.
    '''
    KPers = 'KPers'
    '''
    Temperature change rate in kelvins per second.
    '''
    M = 'M'
    '''
    Length, nautical miles (1 M = 1852 m).
    '''
    Mx = 'Mx'
    '''
    Magnetic flux, maxwells (1 Mx = 10-8 Wb).
    '''
    N = 'N'
    '''
    Force in newtons (kg·m/s²).
    '''
    NPerm = 'NPerm'
    '''
    Surface tension, newton per metre.
    '''
    Nm = 'Nm'
    '''
    Moment of force, newton metres.
    '''
    Oe = 'Oe'
    '''
    Magnetic field in oersteds, (1 Oe = (103/4p) A/m).
    '''
    Pa = 'Pa'
    '''
    Pressure in pascals (N/m²). Note: the absolute or relative measurement
    of pressure is implied with this entry. See below for more explicit forms.
    '''
    PaPers = 'PaPers'
    '''
    Pressure change rate in pascals per second.
    '''
    Pas = 'Pas'
    '''
    Dynamic viscosity, pascal seconds.
    '''
    Q = 'Q'
    '''
    Quantity power, Q.
    '''
    Qh = 'Qh'
    '''
    Quantity energy, Qh.
    '''
    S = 'S'
    '''
    Conductance in siemens.
    '''
    SPerm = 'SPerm'
    '''
    Conductance per length (F/m).
    '''
    Sv = 'Sv'
    '''
    Dose equivalent in sieverts (J/kg).
    '''
    T = 'T'
    '''
    Magnetic flux density in teslas (Wb/m2).
    '''
    V = 'V'
    '''
    Electric potential in volts (W/A).
    '''
    V2 = 'V2'
    '''
    Volt squared (W²/A²).
    '''
    V2h = 'V2h'
    '''
    Volt-squared hour, volt-squared-hours.
    '''
    VA = 'VA'
    '''
    Apparent power in volt amperes. See also real power and reactive power.
    '''
    VAh = 'VAh'
    '''
    Apparent energy in volt ampere hours.
    '''
    VAr = 'VAr'
    '''
    Reactive power in volt amperes reactive. The “reactive” or “imaginary”
    component of electrical power (VIsin(phi)). (See also real power and apparent
    power).
    Note: Different meter designs use different methods to arrive at their
    results. Some meters may compute reactive power as an arithmetic value,
    while others compute the value vectorially. The data consumer should determine
    the method in use and the suitability of the measurement for the intended
    purpose.
    '''
    VArh = 'VArh'
    '''
    Reactive energy in volt ampere reactive hours.
    '''
    VPerHz = 'VPerHz'
    '''
    Magnetic flux in volt per hertz.
    '''
    VPerV = 'VPerV'
    '''
    Voltage, ratio of voltages. Note: Users may need to supply a prefix such
    as ‘m’ to show rates such as ‘mV/V’.
    '''
    VPerVA = 'VPerVA'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between IEC
    meters and EEI (ANSI) meters. It is assumed that the data consumers understand
    the type of meter being used and agree on the sign convention in use at
    any given utility.
    '''
    VPerVAr = 'VPerVAr'
    '''
    Power factor, PF, the ratio of the active power to the apparent power.
    Note: The sign convention used for power factor will differ between IEC
    meters and EEI (ANSI) meters. It is assumed that the data consumers understand
    the type of meter being used and agree on the sign convention in use at
    any given utility.
    '''
    VPerm = 'VPerm'
    '''
    Electric field strength, volts per metre.
    '''
    Vh = 'Vh'
    '''
    Volt-hour, Volt hours.
    '''
    Vs = 'Vs'
    '''
    Volt seconds (Ws/A).
    '''
    W = 'W'
    '''
    Real power in watts (J/s). Electrical power may have real and reactive
    components. The real portion of electrical power (I&#178;R or VIcos(phi)),
    is expressed in Watts. See also apparent power and reactive power.
    '''
    WPerA = 'WPerA'
    '''
    Active power per current flow, watts per Ampere.
    '''
    WPerW = 'WPerW'
    '''
    Signal Strength, ratio of power. Note: Users may need to supply a prefix
    such as ‘m’ to show rates such as ‘mW/W’.
    '''
    WPerm2 = 'WPerm2'
    '''
    Heat flux density, irradiance, watts per square metre.
    '''
    WPerm2sr = 'WPerm2sr'
    '''
    Radiance, watts per square metre steradian.
    '''
    WPermK = 'WPermK'
    '''
    Thermal conductivity in watt/metres kelvin.
    '''
    WPers = 'WPers'
    '''
    Ramp rate in watts per second.
    '''
    WPersr = 'WPersr'
    '''
    Radiant intensity, watts per steradian.
    '''
    Wb = 'Wb'
    '''
    Magnetic flux in webers (V·s).
    '''
    Wh = 'Wh'
    '''
    Real energy in watt hours.
    '''
    anglemin = 'anglemin'
    '''
    Plane angle, minutes.
    '''
    anglesec = 'anglesec'
    '''
    Plane angle, seconds.
    '''
    bar = 'bar'
    '''
    Pressure in bars, (1 bar = 100 kPa).
    '''
    cd = 'cd'
    '''
    Luminous intensity in candelas.
    '''
    charPers = 'charPers'
    '''
    Data rate (baud) in characters per second.
    '''
    character = 'character'
    '''
    Number of characters.
    '''
    cosPhi = 'cosPhi'
    '''
    Power factor, dimensionless.
    Note 1: This definition of power factor only holds for balanced systems.
    See the alternative definition under code 153.
    Note 2 : Beware of differing sign conventions in use between the IEC and
    EEI. It is assumed that the data consumer understands the type of meter
    in use and the sign convention in use by the utility.
    '''
    count = 'count'
    '''
    Amount of substance, Counter value.
    '''
    d = 'd'
    '''
    Time in days, day = 24 h = 86400 s.
    '''
    dB = 'dB'
    '''
    Sound pressure level in decibels. Note: multiplier “d” is included in this
    unit symbol for compatibility with IEC 61850-7-3.
    '''
    dBm = 'dBm'
    '''
    Power level (logarithmic ratio of signal strength , Bel-mW), normalized
    to 1mW. Note: multiplier “d” is included in this unit symbol for compatibility
    with IEC 61850-7-3.
    '''
    deg = 'deg'
    '''
    Plane angle in degrees.
    '''
    degC = 'degC'
    '''
    Relative temperature in degrees Celsius.
    In the SI unit system the symbol is °C. Electric charge is measured in
    coulomb that has the unit symbol C. To distinguish degree Celsius from
    coulomb the symbol used in the UML is degC. The reason for not using °C
    is that the special character ° is difficult to manage in software.
    '''
    ft3 = 'ft3'
    '''
    Volume, cubic feet.
    '''
    gPerg = 'gPerg'
    '''
    Concentration, The ratio of the mass of a solute divided by the mass of
    the solution. Note: Users may need use a prefix such a ‘µ’ to express a
    quantity such as ‘µg/g’.
    '''
    gal = 'gal'
    '''
    Volume in gallons, US gallon (1 gal = 231 in3 = 128 fl ounce).
    '''
    h = 'h'
    '''
    Time in hours, hour = 60 min = 3600 s.
    '''
    ha = 'ha'
    '''
    Area, hectares.
    '''
    kat = 'kat'
    '''
    Catalytic activity, katal = mol / s.
    '''
    katPerm3 = 'katPerm3'
    '''
    Catalytic activity concentration, katals per cubic metre.
    '''
    kg = 'kg'
    '''
    Mass in kilograms. Note: multiplier “k” is included in this unit symbol
    for compatibility with IEC 61850-7-3.
    '''
    kgPerJ = 'kgPerJ'
    '''
    Weight per energy in kilograms per joule (kg/J). Note: multiplier “k” is
    included in this unit symbol for compatibility with IEC 61850-7-3.
    '''
    kgPerm3 = 'kgPerm3'
    '''
    Density in kilogram/cubic metres (kg/m³). Note: multiplier “k” is included
    in this unit symbol for compatibility with IEC 61850-7-3.
    '''
    kgm = 'kgm'
    '''
    Moment of mass in kilogram metres (kg·m) (first moment of mass). Note:
    multiplier “k” is included in this unit symbol for compatibility with IEC
    61850-7-3.
    '''
    kgm2 = 'kgm2'
    '''
    Moment of mass in kilogram square metres (kg·m²) (Second moment of mass,
    commonly called the moment of inertia). Note: multiplier “k” is included
    in this unit symbol for compatibility with IEC 61850-7-3.
    '''
    kn = 'kn'
    '''
    Speed, knots (1 kn = 1852/3600) m/s.
    '''
    l = 'l'
    '''
    Volume in litres, litre = dm3 = m3/1000.
    '''
    lPerh = 'lPerh'
    '''
    Volumetric flow rate, litres per hour.
    '''
    lPerl = 'lPerl'
    '''
    Concentration, The ratio of the volume of a solute divided by the volume
    of the solution. Note: Users may need use a prefix such a ‘µ’ to express
    a quantity such as ‘µL/L’.
    '''
    lPers = 'lPers'
    '''
    Volumetric flow rate in litres per second.
    '''
    lm = 'lm'
    '''
    Luminous flux in lumens (cd·sr).
    '''
    lx = 'lx'
    '''
    Illuminance in lux (lm/m²).
    '''
    m = 'm'
    '''
    Length in metres.
    '''
    m2 = 'm2'
    '''
    Area in square metres (m²).
    '''
    m2Pers = 'm2Pers'
    '''
    Viscosity in square metres / second (m²/s).
    '''
    m3 = 'm3'
    '''
    Volume in cubic metres (m³).
    '''
    m3Compensated = 'm3Compensated'
    '''
    Volume, cubic metres, with the value compensated for weather effects.
    '''
    m3Perh = 'm3Perh'
    '''
    Volumetric flow rate, cubic metres per hour.
    '''
    m3Perkg = 'm3Perkg'
    '''
    Specific volume, cubic metres per kilogram, v.
    '''
    m3Pers = 'm3Pers'
    '''
    Volumetric flow rate in cubic metres per second (m³/s).
    '''
    m3Uncompensated = 'm3Uncompensated'
    '''
    Volume, cubic metres, with the value uncompensated for weather effects.
    '''
    mPerm3 = 'mPerm3'
    '''
    Fuel efficiency in metres per cubic metres (m/m³).
    '''
    mPers = 'mPers'
    '''
    Velocity in metres per second (m/s).
    '''
    mPers2 = 'mPers2'
    '''
    Acceleration in metres per second squared (m/s²).
    '''
    min = 'min'
    '''
    Time in minutes, minute = 60 s.
    '''
    mmHg = 'mmHg'
    '''
    Pressure, millimetres of mercury (1 mmHg is approximately 133.3 Pa).
    '''
    mol = 'mol'
    '''
    Amount of substance in moles.
    '''
    molPerkg = 'molPerkg'
    '''
    Concentration, Molality, the amount of solute in moles and the amount of
    solvent in kilograms.
    '''
    molPerm3 = 'molPerm3'
    '''
    Concentration, The amount of substance concentration, (c), the amount of
    solvent in moles divided by the volume of solution in m³.
    '''
    molPermol = 'molPermol'
    '''
    Concentration, Molar fraction, the ratio of the molar amount of a solute
    divided by the molar amount of the solution.
    '''
    none = 'none'
    '''
    Dimension less quantity, e.g. count, per unit, etc.
    '''
    ohm = 'ohm'
    '''
    Electric resistance in ohms (V/A).
    '''
    ohmPerm = 'ohmPerm'
    '''
    Electric resistance per length in ohms per metre ((V/A)/m).
    '''
    ohmm = 'ohmm'
    '''
    Resistivity, ohm metres, (rho).
    '''
    onePerHz = 'onePerHz'
    '''
    Reciprocal of frequency (1/Hz).
    '''
    onePerm = 'onePerm'
    '''
    Wavenumber, reciprocal metres, (1/m).
    '''
    ppm = 'ppm'
    '''
    Concentration in parts per million.
    '''
    rad = 'rad'
    '''
    Plane angle in radians (m/m).
    '''
    radPers = 'radPers'
    '''
    Angular velocity in radians per second (rad/s).
    '''
    radPers2 = 'radPers2'
    '''
    Angular acceleration, radians per second squared.
    '''
    rev = 'rev'
    '''
    Amount of rotation, revolutions.
    '''
    rotPers = 'rotPers'
    '''
    Rotations per second (1/s). See also Hz (1/s).
    '''
    s = 's'
    '''
    Time in seconds.
    '''
    sPers = 'sPers'
    '''
    Time, Ratio of time. Note: Users may need to supply a prefix such as ‘&#181;’
    to show rates such as ‘&#181;s/s’.
    '''
    sr = 'sr'
    '''
    Solid angle in steradians (m2/m2).
    '''
    therm = 'therm'
    '''
    Energy, therms.
    '''
    tonne = 'tonne'
    '''
    Mass in tons, “tonne” or “metric ton” (1000 kg = 1 Mg).
    '''
class Validity( Enum ):
    '''
    Validity for MeasurementValue.
    '''
    GOOD = 'GOOD'
    '''
    The value is marked good if no abnormal condition of the acquisition function
    or the information source is detected.
    '''
    INVALID = 'INVALID'
    '''
    The value is marked invalid when a supervision function recognises abnormal
    conditions of the acquisition function or the information source (missing
    or non-operating updating devices). The value is not defined under this
    condition. The mark invalid is used to indicate to the client that the
    value may be incorrect and shall not be used.
    '''
    QUESTIONABLE = 'QUESTIONABLE'
    '''
    The value is marked questionable if a supervision function detects an abnormal
    behaviour, however the value could still be valid. The client is responsible
    for determining whether or not values marked "questionable" should be used.
    '''
class VsPpccControlKind( Enum ):
    '''
    Types applicable to the control of real power and/or DC voltage by voltage
    source converter.
    '''
    pPcc = 'pPcc'
    '''
    Control is real power at point of common coupling. The target value is
    provided by ACDCConverter.targetPpcc.
    '''
    pPccAndUdcDroop = 'pPccAndUdcDroop'
    '''
    Control is active power at point of common coupling and local DC voltage,
    with the droop. Target values are provided by ACDCConverter.targetPpcc,
    ACDCConverter.targetUdc and VsConverter.droop.
    '''
    pPccAndUdcDroopPilot = 'pPccAndUdcDroopPilot'
    '''
    Control is active power at point of common coupling and the pilot DC voltage,
    with the droop. The mode is used for Multi Terminal High Voltage DC (MTDC)
    systems where multiple HVDC Substations are connected to the HVDC transmission
    lines. The pilot voltage is then used to coordinate the control the DC
    voltage across the HVDC substations. Targets are provided by ACDCConverter.targetPpcc,
    ACDCConverter.targetUdc and VsConverter.droop.
    '''
    pPccAndUdcDroopWithCompensation = 'pPccAndUdcDroopWithCompensation'
    '''
    Control is active power at point of common coupling and compensated DC
    voltage, with the droop. Compensation factor is the resistance, as an approximation
    of the DC voltage of a common (real or virtual) node in the DC network.
    Targets are provided by ACDCConverter.targetPpcc, ACDCConverter.targetUdc,
    VsConverter.droop and VsConverter.droopCompensation.
    '''
    phasePcc = 'phasePcc'
    '''
    Control is phase at point of common coupling. Target is provided by VsConverter.targetPhasePcc.
    '''
    udc = 'udc'
    '''
    Control is DC voltage with target value provided by ACDCConverter.targetUdc.
    '''
class VsQpccControlKind( Enum ):
    '''
    Kind of reactive power control at point of common coupling for a voltage
    source converter.
    '''
    powerFactorPcc = 'powerFactorPcc'
    '''
    Control is power factor at point of common coupling. Target is provided
    by VsConverter.targetPowerFactorPcc.
    '''
    pulseWidthModulation = 'pulseWidthModulation'
    '''
    No explicit control. Pulse-modulation factor is directly set in magnitude
    (VsConverter.targetPWMfactor) and phase (VsConverter.targetPhasePcc).
    '''
    reactivePcc = 'reactivePcc'
    '''
    Control is reactive power at point of common coupling. Target is provided
    by VsConverter.targetQpcc.
    '''
    voltagePcc = 'voltagePcc'
    '''
    Control is voltage at point of common coupling. Target is provided by VsConverter.targetUpcc.
    '''
class WindGenUnitKind( Enum ):
    '''
    Kind of wind generating unit.
    '''
    offshore = 'offshore'
    '''
    The wind generating unit is located offshore.
    '''
    onshore = 'onshore'
    '''
    The wind generating unit is located onshore.
    '''
class WindLookupTableFunctionKind( Enum ):
    '''
    Function of the lookup table.
    '''
    ipmax = 'ipmax'
    '''
    Lookup table for voltage dependency of active current limits (i<sub>pmax</sub>(u<sub>WT</sub>)).
    It is used for the current limitation model, IEC 61400-27-1:2015, 5.6.5.8.
    '''
    iqmax = 'iqmax'
    '''
    Lookup table for voltage dependency of reactive current limits (i<sub>qmax</sub>(u<sub>WT</sub>)).
    It is used for the current limitation model, IEC 61400-27-1:2015, 5.6.5.8.
    '''
    omegap = 'omegap'
    '''
    Power vs. speed lookup table (omega(p)). It is used for the P control model
    type 3, IEC 61400-27-1:2015, 5.6.5.4.
    '''
    prr = 'prr'
    '''
    Power versus speed change (negative slip) lookup table (p<sub>rr</sub>(deltaomega)).
    It is used for the rotor resistance control model, IEC 61400-27-1:2015,
    5.6.5.3.
    '''
    pwp = 'pwp'
    '''
    Power vs. frequency lookup table (p<sub>WPbias</sub>(f)). It is used for
    the wind power plant frequency and active power control model, IEC 61400-27-1:2015,
    Annex D.
    '''
    qmaxp = 'qmaxp'
    '''
    Lookup table for active power dependency of reactive power maximum limit
    (q<sub>maxp</sub>(p)). It is used for the QP and QU limitation model, IEC
    61400-27-1:2015, 5.6.5.10.
    '''
    qmaxu = 'qmaxu'
    '''
    Lookup table for voltage dependency of reactive power maximum limit (q<sub>maxu</sub>(p)).
    It is used for the QP and QU limitation model, IEC 61400-27-1:2015, 5.6.5.10.
    '''
    qminp = 'qminp'
    '''
    Lookup table for active power dependency of reactive power minimum limit
    (q<sub>minp</sub>(p)). It is used for the QP and QU limitation model, IEC
    61400-27-1:2015, 5.6.5.10.
    '''
    qminu = 'qminu'
    '''
    Lookup table for voltage dependency of reactive power minimum limit (q<sub>minu</sub>(p)).
    It is used for the QP and QU limitation model, IEC 61400-27-1:2015, 5.6.5.10.
    '''
    qwp = 'qwp'
    '''
    Look up table for the UQ static mode (q<sub>WP</sub>(u<sub>err</sub>)).
    It is used for the voltage and reactive power control model, IEC 61400-27-1:2015,
    Annex D.
    '''
    tcwdu = 'tcwdu'
    '''
    Crowbar duration versus voltage variation look-up table (T<sub>CW</sub>(du)).
    It is a case-dependent parameter. It is used for the type 3B generator
    set model, IEC 61400-27-1:2015, 5.6.3.3.
    '''
    tduwt = 'tduwt'
    '''
    Lookup table to determine the duration of the power reduction after a voltage
    dip, depending on the size of the voltage dip (T<sub>d</sub>(u<sub>WT</sub>)).
    It is a type-dependent parameter. It is used for the pitch control power
    model, IEC 61400-27-1:2015, 5.6.5.1.
    '''
    tfover = 'tfover'
    '''
    Disconnection time versus over-frequency lookup table (T<sub>fover</sub>(f<sub>WT</sub>)).
    It is used for the grid protection model, IEC 61400-27-1:2015, 5.6.6.
    '''
    tfunder = 'tfunder'
    '''
    Disconnection time versus under-frequency lookup table (T<sub>funder</sub>(f<sub>WT</sub>)).
    It is used for the grid protection model, IEC 61400-27-1:2015, 5.6.6.
    '''
    tuover = 'tuover'
    '''
    Disconnection time versus over-voltage lookup table (T<sub>uover</sub>(u<sub>WT</sub>)).
    It is used for the grid protection model, IEC 61400-27-1:2015, 5.6.6.
    '''
    tuunder = 'tuunder'
    '''
    Disconnection time versus under-voltage lookup table (T<sub>uunder</sub>(u<sub>WT</sub>)).
    It is used for the grid protection model, IEC 61400-27-1:2015, 5.6.6.
    '''
class WindPlantQcontrolModeKind( Enum ):
    '''
    Reactive power/voltage controller mode.
    '''
    powerFactor = 'powerFactor'
    '''
    Power factor reference.
    '''
    reactivePower = 'reactivePower'
    '''
    Reactive power reference.
    '''
    uqStatic = 'uqStatic'
    '''
    UQ static.
    '''
    voltageControl = 'voltageControl'
    '''
    Voltage control.
    '''
class WindQcontrolModeKind( Enum ):
    '''
    General wind turbine Q control modes <i>M</i><i><sub>qG</sub></i><i>.</i>
    '''
    openLoopReactivePower = 'openLoopReactivePower'
    '''
    Open loop reactive power control (only used with closed loop at plant level)
    (<i>M</i><i><sub>qG</sub></i><sub> </sub>equals 2).
    '''
    openLooppowerFactor = 'openLooppowerFactor'
    '''
    Open loop power factor control (<i>M</i><i><sub>qG</sub></i><sub> </sub>equals
    4).
    '''
    powerFactor = 'powerFactor'
    '''
    Power factor control (<i>M</i><i><sub>qG</sub></i><sub> </sub>equals 3).
    '''
    reactivePower = 'reactivePower'
    '''
    Reactive power control (<i>M</i><i><sub>qG</sub></i> equals 1).
    '''
    voltage = 'voltage'
    '''
    Voltage control (<i>M</i><i><sub>qG</sub></i> equals 0).
    '''
class WindUVRTQcontrolModeKind( Enum ):
    '''
    UVRT Q control modes <i>M</i><i><sub>qUVRT</sub></i><i>.</i>
    '''
    mode0 = 'mode0'
    '''
    Voltage-dependent reactive current injection (<i>M</i><i><sub>qUVRT</sub></i>
    <sub> </sub>equals 0).
    '''
    mode1 = 'mode1'
    '''
    Reactive current injection controlled as the pre-fault value plus an additional
    voltage dependent reactive current injection (<i>M</i><i><sub>qUVRT</sub></i>
    equals 1).
    '''
    mode2 = 'mode2'
    '''
    Reactive current injection controlled as the pre-fault value plus an additional
    voltage-dependent reactive current injection during fault, and as the pre-fault
    value plus an additional constant reactive current injection post fault
    (<i>M</i><i><sub>qUVRT</sub></i><sub> </sub>equals 2).
    '''
class WindingConnection( Enum ):
    '''
    Winding connection type.
    '''
    A = 'A'
    '''
    Autotransformer common winding.
    '''
    D = 'D'
    '''
    Delta.
    '''
    I = 'I'
    '''
    Independent winding, for single-phase connections.
    '''
    Y = 'Y'
    '''
    Wye.
    '''
    Yn = 'Yn'
    '''
    Wye, with neutral brought out for grounding.
    '''
    Z = 'Z'
    '''
    ZigZag.
    '''
    Zn = 'Zn'
    '''
    ZigZag, with neutral brought out for grounding.
    '''
@dataclass
class MonthDay():
    value: str = field(default=None)
    '''
    MonthDay format as "--mm-dd", which conforms with XSD data type gMonthDay.
    '''
@dataclass
class ReactivePower():
    value: float = field(default=None)
    '''
    Product of RMS value of the voltage and the RMS value of the quadrature
    component of the current.
    '''
@dataclass
class Susceptance():
    value: float = field(default=None)
    '''
    Imaginary part of admittance.
    '''
@dataclass
class Pressure():
    value: float = field(default=None)
    '''
    Pressure in pascals.
    '''
@dataclass
class Hours():
    value: float = field(default=None)
    '''
    Time specified in hours.
    '''
@dataclass
class Capacitance():
    value: float = field(default=None)
    '''
    Capacitive part of reactance (imaginary part of impedance), at rated frequency.
    '''
@dataclass
class Temperature():
    value: float = field(default=None)
    '''
    Value of temperature in degrees Celsius.
    '''
@dataclass
class Seconds():
    value: float = field(default=None)
    '''
    Time, in seconds.
    '''
@dataclass
class Voltage():
    value: float = field(default=None)
    '''
    Electrical voltage, can be both AC and DC.
    '''
@dataclass
class Emission():
    value: float = field(default=None)
    '''
    Quantity of emission per fuel heat content.
    '''
@dataclass
class ActivePowerPerFrequency():
    value: float = field(default=None)
    '''
    Active power variation with frequency.
    '''
@dataclass
class Inductance():
    value: float = field(default=None)
    '''
    Inductive part of reactance (imaginary part of impedance), at rated frequency.
    '''
@dataclass
class CapacitancePerLength():
    value: float = field(default=None)
    '''
    Capacitance per unit of length.
    '''
@dataclass
class SusceptancePerLength():
    value: float = field(default=None)
    '''
    Imaginary part of admittance per unit of length.
    '''
@dataclass
class Frequency():
    value: float = field(default=None)
    '''
    Cycles per second.
    '''
@dataclass
class PU():
    value: float = field(default=None)
    '''
    Per Unit - a positive or negative value referred to a defined base. Values
    typically range from -10 to +10.
    '''
@dataclass
class VoltagePerReactivePower():
    value: float = field(default=None)
    '''
    Voltage variation with reactive power.
    '''
@dataclass
class WaterLevel():
    value: float = field(default=None)
    '''
    Reservoir water level referred to a given datum such as mean sea level.
    '''
@dataclass
class ActivePower():
    value: float = field(default=None)
    '''
    Product of RMS value of the voltage and the RMS value of the in-phase component
    of the current.
    '''
@dataclass
class ConductancePerLength():
    value: float = field(default=None)
    '''
    Real part of admittance per unit of length.
    '''
@dataclass
class Reactance():
    value: float = field(default=None)
    '''
    Reactance (imaginary part of impedance), at rated frequency.
    '''
@dataclass
class AngleDegrees():
    value: float = field(default=None)
    '''
    Measurement of angle in degrees.
    '''
@dataclass
class ActivePowerChangeRate():
    value: float = field(default=None)
    '''
    Rate of change of active power per time.
    '''
@dataclass
class RotationSpeed():
    value: float = field(default=None)
    '''
    Number of revolutions per second.
    '''
@dataclass
class RealEnergy():
    value: float = field(default=None)
    '''
    Real electrical energy.
    '''
@dataclass
class VolumeFlowRate():
    value: float = field(default=None)
    '''
    Volume per time.
    '''
@dataclass
class Conductance():
    value: float = field(default=None)
    '''
    Factor by which voltage must be multiplied to give corresponding power
    lost from a circuit. Real part of admittance.
    '''
@dataclass
class ReactancePerLength():
    value: float = field(default=None)
    '''
    Reactance (imaginary part of impedance) per unit of length, at rated frequency.
    '''
@dataclass
class Resistance():
    value: float = field(default=None)
    '''
    Resistance (real part of impedance).
    '''
@dataclass
class CostPerVolume():
    value: float = field(default=None)
    '''
    Cost per unit volume.
    '''
@dataclass
class CostPerHeatUnit():
    value: float = field(default=None)
    '''
    Cost, in units of currency, per quantity of heat generated.
    '''
@dataclass
class CostRate():
    value: float = field(default=None)
    '''
    Cost, in units of currency, per elapsed time.
    '''
@dataclass
class Money():
    value: str = field(default=None)
    '''
    Amount of money.
    '''
@dataclass
class Classification():
    value: int = field(default=None)
    '''
    Classification of level. Specify as 1..n, with 1 being the most detailed,
    highest priority, etc as described on the attribute using this data type.
    '''
@dataclass
class Area():
    value: float = field(default=None)
    '''
    Area.
    '''
@dataclass
class ActivePowerPerCurrentFlow():
    value: float = field(default=None)
    '''
    Active power variation with current flow.
    '''
@dataclass
class Volume():
    value: float = field(default=None)
    '''
    Volume.
    '''
@dataclass
class CostPerEnergyUnit():
    value: float = field(default=None)
    '''
    Cost, in units of currency, per quantity of electrical energy generated.
    '''
@dataclass
class Length():
    value: float = field(default=None)
    '''
    Unit of length. It shall be a positive value or zero.
    '''
@dataclass
class ResistancePerLength():
    value: float = field(default=None)
    '''
    Resistance (real part of impedance) per unit of length.
    '''
@dataclass
class InductancePerLength():
    value: float = field(default=None)
    '''
    Inductance per unit of length.
    '''
@dataclass
class ApparentPower():
    value: float = field(default=None)
    '''
    Product of the RMS value of the voltage and the RMS value of the current.
    '''
@dataclass
class PerCent():
    value: float = field(default=None)
    '''
    Percentage on a defined base. For example, specify as 100 to indicate at
    the defined base.
    '''
@dataclass
class AngleRadians():
    value: float = field(default=None)
    '''
    Phase angle in radians.
    '''
@dataclass
class HeatRate():
    value: float = field(default=None)
    '''
    Heat generated, in energy per time unit of elapsed time.
    '''
@dataclass
class CurrentFlow():
    value: float = field(default=None)
    '''
    Electrical current with sign convention: positive flow is out of the conducting
    equipment into the connectivity node. Can be both AC and DC.
    '''
