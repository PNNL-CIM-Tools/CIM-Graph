from __future__ import annotations
import logging
from dataclasses import dataclass, field
from typing import Optional
from enum import Enum
from cimgraph.data_profile.identity import Identity, stereotype
from cimgraph.data_profile.units import CIMUnit, UnitSymbol, UnitMultiplier
_log = logging.getLogger(__name__)
'''
Annotated CIMantic Graphs data profile for EVSE
Generated by CIMTool http://cimtool.org
'''

class CIMStereotype(Enum):
    Attribute = "Attribute"
    CIMDatatype = "CIMDatatype"
    Concrete = "Concrete"
    GridAPPSD = "GridAPPSD"
    NC = "NC"
    Primitive = "Primitive"
    ShadowExtension = "ShadowExtension"
    enumeration = "enumeration"
    profcim = "profcim"

BASE_URI = 'http://www.ucaiug.org/profile#'
ONTOLOGY_URI = 'http://cim.ucaiug.io/ns#'

@dataclass(repr=False)
class IdentifiedObject(Identity):
    '''
    This is a class that provides common identification for all classes needing
    identification and naming attributes.
    '''

    mRID: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Master resource identifier issued by a model authority. The mRID is unique
            within an exchange context. Global uniqueness is easily achieved by using
            a UUID, as specified in IETF RFC 4122, for the mRID. The use of UUID is
            strongly recommended.
            For CIMXML data files in RDF syntax conforming to IEC 61970-552, the mRID
            is mapped to rdf:ID or rdf:about attributes that identify CIM object elements.
            '''
        
        })
    '''
    Master resource identifier issued by a model authority. The mRID is
    unique within an exchange context. Global uniqueness is easily achieved
    by using a UUID, as specified in IETF RFC 4122, for the mRID. The use
    of UUID is strongly recommended.
    For CIMXML data files in RDF syntax conforming to IEC 61970-552, the
    mRID is mapped to rdf:ID or rdf:about attributes that identify CIM
    object elements.
    '''
    
    aliasName: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            The aliasName is free text human readable name of the object alternative
            to IdentifiedObject.name. It may be non unique and may not correlate to
            a naming hierarchy.
            The attribute aliasName is retained because of backwards compatibility
            between CIM releases. It is however recommended to replace aliasName with
            the Name class as aliasName is planned for retirement at a future time.
            '''
        
        })
    '''
    The aliasName is free text human readable name of the object alternative
    to IdentifiedObject.name. It may be non unique and may not correlate
    to a naming hierarchy.
    The attribute aliasName is retained because of backwards compatibility
    between CIM releases. It is however recommended to replace aliasName
    with the Name class as aliasName is planned for retirement at a future
    time.
    '''
    
    description: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            The description is a free human readable text describing or naming the
            object. It may be non unique and may not correlate to a naming hierarchy.
            '''
        
        })
    '''
    The description is a free human readable text describing or naming
    the object. It may be non unique and may not correlate to a naming
    hierarchy.
    '''
    
    name: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            The name is any free human readable and possibly non unique text naming
            the object.
            '''
        
        })
    '''
    The name is any free human readable and possibly non unique text naming
    the object.
    '''
    
@dataclass(repr=False)
class Asset(IdentifiedObject):
    '''
    Tangible resource of the utility, including power system equipment, various
    end devices, cabinets, buildings, etc. For electrical network equipment,
    the role of the asset is defined through PowerSystemResource and its subclasses,
    defined mainly in the Wires model (refer to IEC61970-301 and model package
    IEC61970::Wires). Asset description places emphasis on the physical characteristics
    of the equipment fulfilling that role.
    '''

    inUseState: Optional[ InUseStateKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Indication of whether asset is currently deployed (in use), ready to be
            put into use or not available for use.
            '''
        
        })
    '''
    Indication of whether asset is currently deployed (in use), ready to
    be put into use or not available for use.
    '''
    
    AssetInfo: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.Asset',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Data applicable to this asset.
            '''
        
        })
    '''
    Data applicable to this asset.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.Assets',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Location of this asset.
            '''
        
        })
    '''
    Location of this asset.
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class BatterySystem(Asset):
    '''
    '''

    cycleCount: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            Number of completed charge cycles
            '''
        
        })
    '''
    Number of completed charge cycles
    '''
    
    stateOfHealth: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class ElectricVehicle(Asset):
    '''
    An electric vehicle (EV) represents a mobile energy storage and load resource
    capable of connecting to the distribution system via an electric vehicle
    supply equipment (EVSE). The EV class captures essential identifying information,
    vehicle characteristics, and operational attributes relevant to grid integration.
    EVs may participate in grid-supporting functions such as controlled charging,
    smart charging, or bidirectional power flow (V2G) when supported. The model
    associates the vehicle with its physical and operational characteristics
    (make, model, year, battery, connectors) and its state of charge (SOC)
    dynamics.
    '''

    licensePlate: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            Vehicle�s registration/license plate number.
            '''
        
        })
    '''
    Vehicle�s registration/license plate number.
    '''
    
@dataclass(repr=False)
class AssetInfo(IdentifiedObject):
    '''
    Set of attributes of an asset, representing typical datasheet information
    of a physical device that can be instantiated and shared in different data
    exchange contexts:
    - as attributes of an asset instance (installed or in stock)
    - as attributes of an asset model (product by a manufacturer)
    - as attributes of a type asset (generic type of an asset as used in designs/extension
    planning).
    '''

    Asset: list[Asset] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Asset.AssetInfo',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            All assets described by this data.
            '''
        
        })
    '''
    All assets described by this data.
    '''
    
    PowerSystemResources: list[PowerSystemResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerSystemResource.AssetDatasheet',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            All power system resources with this datasheet information.
            '''
        
        })
    '''
    All power system resources with this datasheet information.
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class ChargingConnectorInfo(AssetInfo):
    '''
    Datasheet for charging connectors used within a charging station and electric
    vehicles
    '''

    hasLockingMechanism: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            Whether the connector supports a locking mechanism to prevent accidental
            removal
            '''
        
        })
    '''
    Whether the connector supports a locking mechanism to prevent accidental
    removal
    '''
    
    connectorType: Optional[ ConnectorTypeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            Type of connector (e.g., CCS, CHAdeMO, Type 2).
            '''
        
        })
    '''
    Type of connector (e.g., CCS, CHAdeMO, Type 2).
    '''
    
@dataclass(repr=False)
class ConductingAssetInfo(AssetInfo):
    '''
    Generic information for conducting asset
    '''

    phaseCount: Optional[ PhaseCountKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Number of phases
            '''
        
        })
    '''
    Number of phases
    '''
    
    ratedCurrent: Optional[ float | CurrentFlow ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Rated current.
            '''
        
        })
    '''
    Rated current.
    '''
    
    ratedFrequency: Optional[ float | Frequency ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Rated frequency such as 50Hz or 60Hz
            '''
        
        })
    '''
    Rated frequency such as 50Hz or 60Hz
    '''
    
    ratedVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Rated voltage.
            '''
        
        })
    '''
    Rated voltage.
    '''
    
@dataclass(repr=False)
class GridEdgeDeviceInfo(ConductingAssetInfo):
    '''
    A Grid Edge Device is any device that is connected to the power grid with
    the ability to produce, store, and/or variably consume electricity. This
    include devices like local generation (solar photovoltaic and wind), storage
    (chemical or electrical batteries), flexible loads (heading, cooling, lighting
    systems), and electric vehicles (essentially a combination of storage and
    flexible load)
    '''

    apparentPowerMaximum: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Based on IEEE 1547-2018 Table 28:
            <i>Apparent power maximum rating</i>
            <i>
            </i>Maximum apparent power rating in voltamperes
            '''
        
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>Apparent power maximum rating</i>
    <i>
    </i>Maximum apparent power rating in voltamperes
    '''
    
    ratedVoltageMax: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Based on IEEE 1547-2018 Table 28:
            <i>AC voltage maximum rating</i>
            Maximum AC voltage rating in RMS volts
            '''
        
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>AC voltage maximum rating</i>
    Maximum AC voltage rating in RMS volts
    '''
    
    ratedVoltageMin: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Based on IEEE 1547-2018 Table 28:
            <i>AC voltage minimum rating</i>
            Minimum AC voltage rating in RMS volts
            '''
        
        })
    '''
    Based on IEEE 1547-2018 Table 28:
    <i>AC voltage minimum rating</i>
    Minimum AC voltage rating in RMS volts
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class BatteryInfo(GridEdgeDeviceInfo):
    '''
    '''

    ElectricVehicleInfo: list[ElectricVehicleInfo] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ElectricVehicleInfo.BatteryInfo',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    cellChemistry: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    numberOfCells: Optional[int] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    batteryType: Optional[ BatteryTypeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    ratedCapacity: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class VehicleInfo(AssetInfo):
    '''
    Type of vehicle needed to perform certain type of work.
    '''

    make: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Vehicle manufacturer (OEM)
            '''
        
        })
    '''
    Vehicle manufacturer (OEM)
    '''
    
    model: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Vehicle model name
            '''
        
        })
    '''
    Vehicle model name
    '''
    
    vehicleType: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Type of vehicle.
            '''
        
        })
    '''
    Type of vehicle.
    '''
    
    year: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Model year of the vehicle
            '''
        
        })
    '''
    Model year of the vehicle
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class ElectricVehicleInfo(VehicleInfo):
    '''
    The ElectricVehicleInfo class associates the vehicle with its physical
    and operational characteristics (make, model, year, battery, connectors)
    and its state of charge (SOC) dynamics.
    '''

    v2gCapable: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    batteryCapacity: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    evType: Optional[ EVTypeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            Type of EV (e.g., BEV, PHEV, bus, truck, motorcycle).
            '''
        
        })
    '''
    Type of EV (e.g., BEV, PHEV, bus, truck, motorcycle).
    '''
    
    maxChargingRate: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    BatteryInfo: Optional[BatteryInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BatteryInfo.ElectricVehicleInfo',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class BaseVoltage(IdentifiedObject):
    '''
    Defines a system base voltage which is referenced. This may be different
    than the rated voltage.
    '''

    ConductingEquipment: list[ConductingEquipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'ConductingEquipment.BaseVoltage',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            All conducting equipment with this base voltage. Use only when there is
            no voltage level container used and only one base voltage applies. For
            example, not used for transformers.
            '''
        
        })
    '''
    All conducting equipment with this base voltage. Use only when there
    is no voltage level container used and only one base voltage applies.
    For example, not used for transformers.
    '''
    
    nominalVoltage: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            The power system resource's base voltage, expressed on a phase-to-phase
            (line-to-line) basis. Shall be a positive value and not zero.
            '''
        
        })
    '''
    The power system resource's base voltage, expressed on a phase-to-phase
    (line-to-line) basis. Shall be a positive value and not zero.
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class ConnectivityNode(IdentifiedObject):
    '''
    Connectivity nodes are points where terminals of AC conducting equipment
    are connected together with zero impedance.
    '''

    Terminals: list[Terminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Terminal.ConnectivityNode',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Terminals interconnected with zero impedance at a this connectivity node.
            '''
        
        })
    '''
    Terminals interconnected with zero impedance at a this connectivity
    node.
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class Location(IdentifiedObject):
    '''
    rdfs:isDefinedBy : http://www.w3.org/ns/prov-o#
    <http://www.w3.org/ns/prov#n> : "http://www.w3.org/TR/2013/REC-prov-n-20130430/#expression-attribute"^^xsd:anyURI
    <http://www.w3.org/ns/prov#category> : "expanded"^^xsd:string
    rdfs:seeAlso : http://www.w3.org/ns/prov#atLocation
    rdfs:label : "Location"^^xsd:string
    <http://www.w3.org/ns/prov#dm> : "http://www.w3.org/TR/2013/REC-prov-dm-20130430/#term-attribute-location"^^xsd:anyURI
    <http://www.w3.org/ns/prov#definition> : "A location can be an identifiable
    geographic place (ISO 19112), but it can also be a non-geographic place
    such as a directory, row, or column. As such, there are numerous ways in
    which location can be expressed, such as by a coordinate, address, landmark,
    and so forth."@en
    '''

    Assets: list[Asset] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Asset.Location',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            All assets at this location.
            '''
        
        })
    '''
    All assets at this location.
    '''
    
    PowerSystemResources: list[PowerSystemResource] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerSystemResource.Location',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            All power system resources at this location.
            '''
        
        })
    '''
    All power system resources at this location.
    '''
    
    geoInfoReference: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            (if applicable) Reference to geographical information source, often external
            to the utility.
            '''
        
        })
    '''
    (if applicable) Reference to geographical information source, often
    external to the utility.
    '''
    
    type: Optional[str] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Classification by utility's corporate standards and practices, relative
            to the location itself (e.g., geographical, functional accounting, etc.,
            not a given property that happens to exist at that location).
            '''
        
        })
    '''
    Classification by utility's corporate standards and practices, relative
    to the location itself (e.g., geographical, functional accounting,
    etc., not a given property that happens to exist at that location).
    '''
    
    LocationAccess: Optional[LocationAccess] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'LocationAccess.Location',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
@dataclass(repr=False)
class PowerSystemResource(IdentifiedObject):
    '''
    A power system resource (PSR) can be an item of equipment such as a switch,
    an equipment container containing many individual items of equipment such
    as a substation, or an organisational entity such as sub-control area.
    Power system resources can have measurements associated.
    '''

    AssetDatasheet: Optional[AssetInfo] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'AssetInfo.PowerSystemResources',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Datasheet information for this power system resource.
            '''
        
        })
    '''
    Datasheet information for this power system resource.
    '''
    
    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.PowerSystemResources',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Location of this power system resource.
            '''
        
        })
    '''
    Location of this power system resource.
    '''
    
@dataclass(repr=False)
class Equipment(PowerSystemResource):
    '''
    The parts of a power system that are physical devices, electronic or mechanical.
    '''

    aggregate: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            The aggregate flag provides an alternative way of representing an aggregated
            (equivalent) element. It is applicable in cases when the dedicated classes
            for equivalent equipment do not have all of the attributes necessary to
            represent the required level of detail. In case the flag is set to "true"
            the single instance of equipment represents multiple pieces of equipment
            that have been modelled together as an aggregate equivalent obtained by
            a network reduction procedure. Examples would be power transformers or
            synchronous machines operating in parallel modelled as a single aggregate
            power transformer or aggregate synchronous machine.
            The attribute is not used for EquivalentBranch, EquivalentShunt, EquivalentInjection
            and ExternalNetworkInjection.
            '''
        
        })
    '''
    The aggregate flag provides an alternative way of representing an aggregated
    (equivalent) element. It is applicable in cases when the dedicated
    classes for equivalent equipment do not have all of the attributes
    necessary to represent the required level of detail. In case the flag
    is set to "true" the single instance of equipment represents multiple
    pieces of equipment that have been modelled together as an aggregate
    equivalent obtained by a network reduction procedure. Examples would
    be power transformers or synchronous machines operating in parallel
    modelled as a single aggregate power transformer or aggregate synchronous
    machine.
    The attribute is not used for EquivalentBranch, EquivalentShunt, EquivalentInjection
    and ExternalNetworkInjection.
    '''
    
    inService: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Specifies the availability of the equipment. True means the equipment is
            available for topology processing, which determines if the equipment is
            energized or not. False means that the equipment is treated by network
            applications as if it is not in the model.
            '''
        
        })
    '''
    Specifies the availability of the equipment. True means the equipment
    is available for topology processing, which determines if the equipment
    is energized or not. False means that the equipment is treated by network
    applications as if it is not in the model.
    '''
    
    networkAnalysisEnabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            The equipment is enabled to participate in network analysis. If unspecified,
            the value is assumed to be true.
            '''
        
        })
    '''
    The equipment is enabled to participate in network analysis. If unspecified,
    the value is assumed to be true.
    '''
    
    normallyInService: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Specifies the availability of the equipment under normal operating conditions.
            True means the equipment is available for topology processing, which determines
            if the equipment is energized or not. False means that the equipment is
            treated by network applications as if it is not in the model.
            '''
        
        })
    '''
    Specifies the availability of the equipment under normal operating
    conditions. True means the equipment is available for topology processing,
    which determines if the equipment is energized or not. False means
    that the equipment is treated by network applications as if it is not
    in the model.
    '''
    
    EquipmentContainer: Optional[EquipmentContainer] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'EquipmentContainer.Equipments',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Container of this equipment.
            '''
        
        })
    '''
    Container of this equipment.
    '''
    
@dataclass(repr=False)
class ConductingEquipment(Equipment):
    '''
    The parts of the AC power system that are designed to carry current or
    that are conductively connected through terminals.
    '''

    Terminals: list[Terminal] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Terminal.ConductingEquipment',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Conducting equipment have terminals that may be connected to other conducting
            equipment terminals via connectivity nodes or topological nodes.
            '''
        
        })
    '''
    Conducting equipment have terminals that may be connected to other
    conducting equipment terminals via connectivity nodes or topological
    nodes.
    '''
    
    BaseVoltage: Optional[BaseVoltage] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'BaseVoltage.ConductingEquipment',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Base voltage of this conducting equipment. Use only when there is no voltage
            level container used and only one base voltage applies. For example, not
            used for transformers.
            '''
        
        })
    '''
    Base voltage of this conducting equipment. Use only when there is no
    voltage level container used and only one base voltage applies. For
    example, not used for transformers.
    '''
    
@dataclass(repr=False)
class EnergyConnection(ConductingEquipment):
    '''
    A connection of energy generation or consumption on the power system model.
    '''

@dataclass(repr=False)
class RegulatingCondEq(EnergyConnection):
    '''
    A type of conducting equipment that can regulate a quantity (i.e. voltage
    or flow) at a specific point in the network.
    '''

    controlEnabled: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Specifies the regulation status of the equipment. True is regulating, false
            is not regulating.
            '''
        
        })
    '''
    Specifies the regulation status of the equipment. True is regulating,
    false is not regulating.
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class PowerElectronicsConnection(RegulatingCondEq):
    '''
    A connection to the AC network for energy production or consumption that
    uses power electronics rather than rotating machines.
    '''

    PowerElectronicsUnit: list[PowerElectronicsUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsUnit.PowerElectronicsConnection',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            An AC network connection may have several power electronics units connecting
            through it.
            '''
        
        })
    '''
    An AC network connection may have several power electronics units connecting
    through it.
    '''
    
    inSafeMode: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Indicates whether the inverter entered (true) or not (false) into Safe
            Mode.
            '''
        
        })
    '''
    Indicates whether the inverter entered (true) or not (false) into Safe
    Mode.
    '''
    
    isGridForming: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    maxIFault: Optional[ float | PU ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Maximum fault current this device will contribute, in per-unit of rated
            current, before the converter protection will trip or bypass.
            '''
        
        })
    '''
    Maximum fault current this device will contribute, in per-unit of rated
    current, before the converter protection will trip or bypass.
    '''
    
    maxQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Maximum reactive power limit. This is the maximum (nameplate) limit for
            the unit.
            '''
        
        })
    '''
    Maximum reactive power limit. This is the maximum (nameplate) limit
    for the unit.
    '''
    
    minQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Minimum reactive power limit for the unit. This is the minimum (nameplate)
            limit for the unit.
            '''
        
        })
    '''
    Minimum reactive power limit for the unit. This is the minimum (nameplate)
    limit for the unit.
    '''
    
    p: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Active power injection. Load sign convention is used, i.e. positive sign
            means flow out from a node.
            Starting value for a steady state solution.
            '''
        
        })
    '''
    Active power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for a steady state solution.
    '''
    
    q: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Reactive power injection. Load sign convention is used, i.e. positive sign
            means flow out from a node.
            Starting value for a steady state solution.
            '''
        
        })
    '''
    Reactive power injection. Load sign convention is used, i.e. positive
    sign means flow out from a node.
    Starting value for a steady state solution.
    '''
    
    ratedS: Optional[ float | ApparentPower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Nameplate apparent power rating for the unit.
            The attribute shall have a positive value.
            '''
        
        })
    '''
    Nameplate apparent power rating for the unit.
    The attribute shall have a positive value.
    '''
    
    ratedU: Optional[ float | Voltage ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Rated voltage (nameplate data, Ur in IEC 60909-0). It is primarily used
            for short circuit data exchange according to IEC 60909.
            The attribute shall be a positive value.
            '''
        
        })
    '''
    Rated voltage (nameplate data, Ur in IEC 60909-0). It is primarily
    used for short circuit data exchange according to IEC 60909.
    The attribute shall be a positive value.
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class EVSE(PowerElectronicsConnection):
    '''
    Equipment or a combination of equipment, providing dedicated functions
    to supply electric energy from a fixed electrical installation or supply
    network to an EV for the purpose of charging and discharging [SOURCE: IEC
    61851-1:2017, 3.1.1, modified
    Electric Vehicle Supply Equipment (EVSE) is a power conversion and interface
    device that enables electric vehicles to connect to the power system for
    charging or, when supported, discharging (V2G). An EVSE controls the flow
    of power between the grid (or local DER/microgrid resources) and the connected
    vehicle battery, ensuring safety, interoperability, and adherence to communication
    standards.
    '''

    chargingModeType: Optional[ ChargingModeKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration GridAPPSD Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
@stereotype(CIMStereotype.NC)
@dataclass(repr=False)
class PowerElectronicsUnit(Equipment):
    '''
    A generating unit or battery or aggregation that connects to the AC network
    using power electronics rather than rotating machines.
    '''

    maxP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Maximum active power limit. This is the maximum (nameplate) limit for the
            unit.
            '''
        
        })
    '''
    Maximum active power limit. This is the maximum (nameplate) limit for
    the unit.
    '''
    
    minP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Minimum active power limit. This is the minimum (nameplate) limit for the
            unit.
            '''
        
        })
    '''
    Minimum active power limit. This is the minimum (nameplate) limit for
    the unit.
    '''
    
    PowerElectronicsConnection: Optional[PowerElectronicsConnection] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsConnection.PowerElectronicsUnit',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            A power electronics unit has a connection to the AC network.
            '''
        
        })
    '''
    A power electronics unit has a connection to the AC network.
    '''
    
    PowerElectronicsUnitController: Optional[PowerElectronicsUnitController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsUnitController.PowerElectronicsUnit',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Power electronics unit controller for this power electronics unit.
            '''
        
        })
    '''
    Power electronics unit controller for this power electronics unit.
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class BatteryUnit(PowerElectronicsUnit):
    '''
    An electrochemical energy storage device.
    '''

    batteryState: Optional[ BatteryStateKind ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            The current state of the battery (charging, full, etc.).
            '''
        
        })
    '''
    The current state of the battery (charging, full, etc.).
    '''
    
    chargingEfficiency: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    dischargingEfficiency: Optional[ float | PerCent ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
    idlingP: Optional[ float | ActivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            Real power consumed while idling
            '''
        
        })
    '''
    Real power consumed while idling
    '''
    
    idlingQ: Optional[ float | ReactivePower ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            Reactive power consumed while idling
            &lt;&lt;conversion note&gt;&gt;
            DSS equivalent is %Idlingkvar, Percent of rated kW consumed as reactive
            power (kvar) while idling. Default =
            '''
        
        })
    '''
    Reactive power consumed while idling
    &lt;&lt;conversion note&gt;&gt;
    DSS equivalent is %Idlingkvar, Percent of rated kW consumed as reactive
    power (kvar) while idling. Default =
    '''
    
    minimumE: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            Percent of rated kWh storage capacity to be held in reserve for normal
            operation. This is treated as the minimum energy discharge level unless
            there is an emergency. For emergency operation set this property lower.
            Cannot be less than zero.
            '''
        
        })
    '''
    Percent of rated kWh storage capacity to be held in reserve for normal
    operation. This is treated as the minimum energy discharge level unless
    there is an emergency. For emergency operation set this property lower.
    Cannot be less than zero.
    '''
    
    ratedE: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Full energy storage capacity of the battery. The attribute shall be a positive
            value.
            '''
        
        })
    '''
    Full energy storage capacity of the battery. The attribute shall be
    a positive value.
    '''
    
    storedE: Optional[ float | RealEnergy ] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Amount of energy currently stored. The attribute shall be a positive value
            or zero and lower than BatteryUnit.ratedE.
            '''
        
        })
    '''
    Amount of energy currently stored. The attribute shall be a positive
    value or zero and lower than BatteryUnit.ratedE.
    '''
    
@dataclass(repr=False)
class MobileElectricalUnit(BatteryUnit):
    '''
    '''

    ChargingUnit: Optional[ChargingUnit] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ChargingUnit.MobileElectricalUnit',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
@stereotype(CIMStereotype.GridAPPSD)
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class ElectricalVehicleUnit(MobileElectricalUnit):
    '''
    '''

    v2gCapable: Optional[bool] = field(
        default=None,
        metadata={
        'type': 'Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class ChargingUnit(PowerElectronicsUnit):
    '''
    A unit that supplies electrical power for charging electrical non-stationary
    entities, e.g. electrical vehicle, trucks, buses, ferries, boats and airplanes.
    The characteristic is that the energy consumption is highly schedule dependent.
    '''

    MobileElectricalUnit: list[MobileElectricalUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'MobileElectricalUnit.ChargingUnit',
        'namespace': 'http://gridappsd.org/CIM/extension#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
@dataclass(repr=False)
class EquipmentContainer(PowerSystemResource):
    '''
    A modelling construct to provide a root class for containing equipment.
    '''

    Equipments: list[Equipment] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'Equipment.EquipmentContainer',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Contained equipment.
            '''
        
        })
    '''
    Contained equipment.
    '''
    
@stereotype(CIMStereotype.ShadowExtension)
@dataclass(repr=False)
class PowerElectronicsConnectionController(PowerSystemResource):
    '''
    Power electronics connection controller is controlling the equipment to
    optimize the power electronics connection.
    '''

    PowerElectronicsUnitController: list[PowerElectronicsUnitController] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsUnitController.PowerElectronicsConnectionController',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Power electronics unit controller that has this power electronics connection
            controller.
            '''
        
        })
    '''
    Power electronics unit controller that has this power electronics connection
    controller.
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class PowerElectronicsConnectionPhase(PowerSystemResource):
    '''
    A single phase of a power electronics connection.
    '''

@dataclass(repr=False)
class PowerElectronicsUnitController(PowerSystemResource):
    '''
    Power electronics unit controller is controlling the equipment to optimize
    the power electronics unit.
    '''

    PowerElectronicsUnit: list[PowerElectronicsUnit] = field(
        default_factory=list,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': 'unbounded',
        'inverse': 'PowerElectronicsUnit.PowerElectronicsUnitController',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Power electronics unit that has this power electronics unit controller.
            '''
        
        })
    '''
    Power electronics unit that has this power electronics unit controller.
    '''
    
    PowerElectronicsConnectionController: Optional[PowerElectronicsConnectionController] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'PowerElectronicsConnectionController.PowerElectronicsUnitController',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Power electronics connection controller for the power electronics unit
            controller.
            '''
        
        })
    '''
    Power electronics connection controller for the power electronics unit
    controller.
    '''
    
@stereotype(CIMStereotype.Concrete)
@dataclass(repr=False)
class Terminal(IdentifiedObject):
    '''
    An AC electrical connection point to a piece of conducting equipment. Terminals
    are connected at physical connection points called connectivity nodes.
    '''

    phases: Optional[ PhaseCode ] = field(
        default=None,
        metadata={
        'type': 'enumeration Attribute',
        'minOccurs': '0',
        'maxOccurs': '1',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            Represents the normal network phasing condition. If the attribute is missing,
            three phases (ABC) shall be assumed, except for terminals of grounding
            classes (specializations of EarthFaultCompensator, GroundDisconnector,
            and Ground) which will be assumed to be N. Therefore, phase code ABCN is
            explicitly declared when needed, e.g. for star point grounding equipment.
            The phase code on terminals connecting the same ConnectivityNode or TopologicalNode
            as well as for equipment between two terminals shall be consistent.
            '''
        
        })
    '''
    Represents the normal network phasing condition. If the attribute is
    missing, three phases (ABC) shall be assumed, except for terminals
    of grounding classes (specializations of EarthFaultCompensator, GroundDisconnector,
    and Ground) which will be assumed to be N. Therefore, phase code ABCN
    is explicitly declared when needed, e.g. for star point grounding equipment.
    The phase code on terminals connecting the same ConnectivityNode or
    TopologicalNode as well as for equipment between two terminals shall
    be consistent.
    '''
    
    ConductingEquipment: Optional[ConductingEquipment] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConductingEquipment.Terminals',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            The conducting equipment of the terminal. Conducting equipment have terminals
            that may be connected to other conducting equipment terminals via connectivity
            nodes or topological nodes.
            '''
        
        })
    '''
    The conducting equipment of the terminal. Conducting equipment have
    terminals that may be connected to other conducting equipment terminals
    via connectivity nodes or topological nodes.
    '''
    
    ConnectivityNode: Optional[ConnectivityNode] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'ConnectivityNode.Terminals',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            The connectivity node to which this terminal connects with zero impedance.
            '''
        
        })
    '''
    The connectivity node to which this terminal connects with zero impedance.
    '''
    
@dataclass(repr=False)
class LocationAccess(Identity):
    '''
    Location access refers to the physical means or pathways by which a site,
    building, building space or other property can be reached from the road
    network. It typically including roads, driveways, entrances, or adjacent
    properties.
    '''

    Location: Optional[Location] = field(
        default=None,
        metadata={
        'type': 'Association',
        'minOccurs': '0',
        'maxOccurs': '1',
        'inverse': 'Location.LocationAccess',
        'namespace': 'http://cim.ucaiug.io/ns#',
        'docstring':
            '''
            '''
        
        })
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class BatteryStateKind(Enum):
    '''
    The state of the battery unit.
    '''

    charging = 'charging'
    '''
    Stored energy is increasing.
    '''
    
    discharging = 'discharging'
    '''
    Stored energy is decreasing.
    '''
    
    empty = 'empty'
    '''
    Unable to discharge, and not charging.
    '''
    
    full = 'full'
    '''
    Unable to charge, and not discharging.
    '''
    
    waiting = 'waiting'
    '''
    Neither charging nor discharging, but able to do so.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class BatteryTypeKind(Enum):
    '''
    '''

    leadAcid = 'leadAcid'
    '''
    '''
    
    lithiumIon = 'lithiumIon'
    '''
    '''
    
    lithiumIronPhosphate = 'lithiumIronPhosphate'
    '''
    '''
    
    nickelMetalHydride = 'nickelMetalHydride'
    '''
    '''
    
    other = 'other'
    '''
    '''
    
    sodiumIon = 'sodiumIon'
    '''
    '''
    
    solidState = 'solidState'
    '''
    '''
    
@stereotype(CIMStereotype.GridAPPSD)
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ChargingModeKind(Enum):
    '''
    '''

    acLevel1 = 'acLevel1'
    '''
    '''
    
    acLevel2 = 'acLevel2'
    '''
    '''
    
    acLevel3 = 'acLevel3'
    '''
    '''
    
    batterySwap = 'batterySwap'
    '''
    '''
    
    dcFast = 'dcFast'
    '''
    '''
    
    wireless = 'wireless'
    '''
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class ConnectorTypeKind(Enum):
    '''
    Specifies the connector type used in charging
    '''

    ccsCombo1 = 'ccsCombo1'
    '''
    combined charging standard (CCS) combo 1 (NA)
    '''
    
    ccsCombo2 = 'ccsCombo2'
    '''
    combined charging system (CCS) combo 2 (EU)
    '''
    
    chademo = 'chademo'
    '''
    Japanese DC fast-charging standard
    '''
    
    gbTAC = 'gbTAC'
    '''
    Chinese AC charging standard
    '''
    
    gbTDC = 'gbTDC'
    '''
    Chinese DC fast-charging standard
    '''
    
    saeJ1772 = 'saeJ1772'
    '''
    Type 1 / SAE J1772 single-phase AC connector
    '''
    
    teslaNACS = 'teslaNACS'
    '''
    Tesla supercharger fast-charging connector / North America Charging
    Standard
    '''
    
    type2Mennekes = 'type2Mennekes'
    '''
    Type 2 Mennekes connector for AC charging
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class EVTypeKind(Enum):
    '''
    Type of EV (e.g., BEV, PHEV, bus, truck, motorcycle).
    '''

    bEV = 'bEV'
    '''
    battery electric vehicle
    '''
    
    bus = 'bus'
    '''
    bus
    '''
    
    motorcycle = 'motorcycle'
    '''
    motorcycle
    '''
    
    other = 'other'
    '''
    other
    '''
    
    phEV = 'phEV'
    '''
    plugin hybrid electric vehicle
    '''
    
    truck = 'truck'
    '''
    truck
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class InUseStateKind(Enum):
    '''
    Possible 'in use' states that an asset can be in.
    '''

    inUse = 'inUse'
    '''
    Asset is deployed (in use) or is being put into use.
    '''
    
    notReadyForUse = 'notReadyForUse'
    '''
    Asset is not ready to be put into use.
    '''
    
    readyForUse = 'readyForUse'
    '''
    Asset is ready to be put into use.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PhaseCode(Enum):
    '''
    Enumeration of phase identifiers used to designate the combination of phase
    and/or neutral conductors at a terminal, measurement or equipment modelled
    as a single-line balanced equivalent.
    This is an unordered enumeration of phase identifiers. Allows designation
    of phases for both transmission and distribution equipment, circuits and
    loads. The enumeration, by itself, does not describe how the phases are
    connected together or connected to ground. Ground is not explicitly denoted
    as a phase.
    Residential and small commercial loads are often served from single-phase,
    or split-phase, secondary circuits. For the example of s12N, phases 1 and
    2 refer to hot wires that are 180 degrees out of phase, while N refers
    to the neutral wire. Through single-phase transformer connections, these
    secondary circuits may be served from one or two of the primary phases
    A, B, and C. For three-phase loads, use the A, B, C phase codes instead
    of s12N.
    The integer values are from IEC 61968-9 to support revenue metering applications.
    '''

    A = 'A'
    '''
    Phase A.
    '''
    
    AB = 'AB'
    '''
    Phases A and B.
    '''
    
    ABC = 'ABC'
    '''
    Phases A, B, and C.
    '''
    
    ABCN = 'ABCN'
    '''
    Phases A, B, C, and N.
    '''
    
    ABN = 'ABN'
    '''
    Phases A, B, and neutral.
    '''
    
    AC = 'AC'
    '''
    Phases A and C.
    '''
    
    ACN = 'ACN'
    '''
    Phases A, C and neutral.
    '''
    
    AN = 'AN'
    '''
    Phases A and neutral.
    '''
    
    B = 'B'
    '''
    Phase B.
    '''
    
    BC = 'BC'
    '''
    Phases B and C.
    '''
    
    BCN = 'BCN'
    '''
    Phases B, C, and neutral.
    '''
    
    BN = 'BN'
    '''
    Phases B and neutral.
    '''
    
    C = 'C'
    '''
    Phase C.
    '''
    
    CN = 'CN'
    '''
    Phases C and neutral.
    '''
    
    N = 'N'
    '''
    Neutral phase.
    '''
    
    X = 'X'
    '''
    Unknown non-neutral phase.
    '''
    
    XN = 'XN'
    '''
    Unknown non-neutral phase plus neutral.
    '''
    
    XY = 'XY'
    '''
    Two unknown non-neutral phases.
    '''
    
    XYN = 'XYN'
    '''
    Two unknown non-neutral phases plus neutral.
    '''
    
    none = 'none'
    '''
    No phases specified.
    '''
    
    s1 = 's1'
    '''
    Secondary phase 1.
    '''
    
    s12 = 's12'
    '''
    Secondary phase 1 and 2.
    '''
    
    s12N = 's12N'
    '''
    Secondary phases 1, 2, and neutral.
    '''
    
    s1N = 's1N'
    '''
    Secondary phase 1 and neutral.
    '''
    
    s2 = 's2'
    '''
    Secondary phase 2.
    '''
    
    s2N = 's2N'
    '''
    Secondary phase 2 and neutral.
    '''
    
@stereotype(CIMStereotype.enumeration)
@stereotype(CIMStereotype.Attribute)
class PhaseCountKind(Enum):
    '''
    Number of phases supported by a device.
    '''

    other = 'other'
    '''
    Other
    '''
    
    singlePhase = 'singlePhase'
    '''
    Single phase
    '''
    
    threePhase = 'threePhase'
    '''
    Three phases
    '''
    
@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ActivePower(CIMUnit):
    '''
    Product of RMS value of the voltage and the RMS value of the in-phase component
    of the current.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.W
    def __init__(self, value, input_unit: str='W', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ApparentPower(CIMUnit):
    '''
    Product of the RMS value of the voltage and the RMS value of the current.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.VA
    def __init__(self, value, input_unit: str='VA', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class CurrentFlow(CIMUnit):
    '''
    Electrical current with sign convention: positive flow is out of the conducting
    equipment into the connectivity node. Can be both AC and DC.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.A
    def __init__(self, value, input_unit: str='A', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Frequency(CIMUnit):
    '''
    Cycles per second.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.Hz
    def __init__(self, value, input_unit: str='Hz', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class PU(CIMUnit):
    '''
    Per Unit - a positive or negative value referred to a defined base. Values
    typically range from -10 to +10.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class PerCent(CIMUnit):
    '''
    Percentage on a defined base. For example, specify as 100 to indicate at
    the defined base.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.none
    def __init__(self, value, input_unit: str='none', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class ReactivePower(CIMUnit):
    '''
    Product of RMS value of the voltage and the RMS value of the quadrature
    component of the current.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.VAr
    def __init__(self, value, input_unit: str='VAr', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class RealEnergy(CIMUnit):
    '''
    Real electrical energy.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.Wh
    def __init__(self, value, input_unit: str='Wh', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

@stereotype(CIMStereotype.CIMDatatype)
@dataclass(repr=False)
class Voltage(CIMUnit):
    '''
    Electrical voltage, can be both AC and DC.
    '''

    value: float = field(default=None)
    multiplier: UnitMultiplier = field(default=UnitMultiplier.none)
    @property # read-only
    def unit(self):
        return UnitSymbol.V
    def __init__(self, value, input_unit: str='V', input_multiplier: str=None):
        self.__pint__(value=value, input_unit=input_unit, input_multiplier=input_multiplier)

