---
name: Deploy Pre-Release Artifacts

on:
  push:
    branches:
      - develop

defaults:
  run:
    shell: bash

env:
  LANG: en_US.utf-8
  LC_ALL: en_US.utf-8
  PYTHON_VERSION: "3.10"
  RUNS_ON: ubuntu-latest

jobs:
  bump_version:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: |
          poetry install --no-interaction

      #----------------------------------------------
      # bump version number for patch
      #----------------------------------------------
      - name: Bump Version
        run: |

          # $versionarr now holds the current version of the tag.
          IFS='.' read -ra versionarr <<< $(poetry version --short)

          today=$(date +'%Y%m%d%H%M%S')

          new_version="${versionarr[0]}.${versionarr[1]}.$today"
          poetry version $new_version
          poetry version prerelease

          NEW_TAG="v$(poetry version --short)"
          echo "NEW_TAG=$(echo ${NEW_TAG})" >> $GITHUB_ENV

      #           while [[ ! $(git tag -l "$tag_in_question") = '' ]]
      #           do
      #             poetry version prerelease
      #             tag_in_question="v$(poetry version --short)"
      #           loop

      #---------------------------------------------------------------
      # create build artifacts to be included as part of release
      #---------------------------------------------------------------
      - name: Create build artifacts
        run: |
          poetry build -vvv

      - name: Create Release
        uses: ncipollo/release-action@v1.12.0

        with:
          artifacts: "dist/*.gz,dist/*.whl"
          artifactErrorsFailBuild: true
          generateReleaseNotes: true
          commit: ${{ github.ref }}
          prerelease: true
          tag: ${{ env.NEW_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish pre-release to pypi
        if: github.repository_owner == 'PNNL-CIM-Tools'
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish
